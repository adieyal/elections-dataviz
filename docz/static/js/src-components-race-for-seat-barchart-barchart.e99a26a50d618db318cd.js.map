{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/BarChartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchart.mdx","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Math","event","newState","detail","setState","svgToPng","refs","vizcontainer","childNodes","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getNationOrProvinceName","ref","dataLoaders","getSeatsData","partyColorsLoader","getPartyColors","Promise","values","seatsData","error","console","data","parseSeatsData","parseInt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","RaceForSeatBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"mtBAIO,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGLA,IACEA,MAEGA,EAALC,YACED,8BAEGA,EAALE,aACEF,iCAEGA,EAALG,SACEH,SAAiB,SAAAI,GACf,OAAOA,EAAPC,cAGCL,EAALM,eACEN,eAAuB,SAAAO,GACrB,OAAOA,EAAP,MAMJX,4BAEE,IAEIY,EAAe,iBAAnB,OAEIC,EAAMb,+GAEW,eAFXA,uBAAV,GAKIc,EAAaC,YAAjBZ,GAEIa,EAAIC,iBACM,CAZd,GAJFhB,MAkBMiB,EAAID,iBACM,CAlBhBf,IAIE,KAgBAW,+BACqB,qBADrBA,4BAGiBV,EAHjBU,0DAKQT,EALRS,yCAQAA,sDAEqB,oBAErBA,sDAEqB,oBAErB,IAAIM,EAASN,2BACIV,EADjB,kBAEIiB,EAAaP,2BACAV,EADjB,sBAEIkB,EAAYR,+BACK,sBADLA,kCAAhB,UAKAS,KAAAC,KAAY,SAAAC,EAAAC,GAEV,GAAAD,EAAA,CAIEH,WAEF,IAAIK,EAAJ,GAEA,GAAItB,EAAJuB,oBAEO,CACL,IAAIC,EAAJH,EACIG,GAAmBA,EAAe,KAAfA,kBACrBA,EAAe,KAAfA,yBAAuD,SAAAC,GACrDH,EAAiBG,OAAjBH,MAAmCG,OAAnCH,SAgCNV,SAASQ,MAAc,SAAAhB,GACnB,OAAOA,EAAPsB,QAEJ,IAAIC,EAAU,GAAd,KACI3B,EAAJ4B,yBACED,KAAad,MAAkB,SAAAT,GAAc,OAAOJ,SAAPI,MAE/CU,YAEAL,oDAAsDI,IAAtDJ,IACAA,oDAAsDI,2BAExC,SAAAT,GAAc,OAAOJ,eAAPI,MAG5B,IAAIyB,EAAOd,uBAAqBhB,EAArBgB,cAAXK,GAEAS,6CAGa,SAAAzB,GACT,OAAOU,EAAP,KAJJe,qDAUAA,sCAEmB,SAAAzB,GAAA,OAAOL,iBAA6BK,EAApCsB,OAFnBG,SAGe,SAAAzB,GACT,OAAOQ,EAAER,EAAFQ,MAAUA,cAAjB,KAJNiB,aAMmBjB,gBANnBiB,gBAOkB,SAAAzB,EAAA0B,GAAA,OAASC,EAAY3B,EAArB0B,KAPlBD,eAQqB,SAAAzB,EAAA0B,GACbjB,6BAEAH,iDAGAA,OApDR,SAAAN,EAAA0B,GACE,OAAI9B,EAAJuB,eACSnB,aAAiBJ,eAAqBA,SAA7CI,IAKuBA,YAAhB4B,KAFEN,4CAAkD,SAAAO,GAAa,OAAOA,EAAPC,gBAEjEF,MAA4ChC,eAAqBA,SAAxEI,IA6CoB+B,CAAc/B,IAA9BM,aACoBG,IAADuB,MADnB1B,kBAEmBG,UAAD,GAFlBH,QAdRmB,cAkBoB,SAAAzB,GACZS,4BAEAH,kDArBRmB,SAyBe,SAAAzB,GACT,OAAOU,EAAP,KA1BNe,iBA8BEd,uBAAqBhB,EAArBgB,6BACgB,SAAAX,EAAA0B,GAAA,OAAUC,EAAY3B,EAAtB0B,KADhBf,oCAIa,SAAAX,GACT,OAAOU,EAAEuB,OAAOrC,SAAhBI,OALJW,cAOkB,SAAAX,GACd,OA9JVN,IA8J0BgB,EAAEuB,OAAOrC,SAAzBI,OAGJ,IAAIkC,EAAWtB,uBAAyBjB,EAAzBiB,kBAAfI,GAEAkB,6CAGa,SAAAlC,GACT,OAAOU,KAAP,IAJJwB,oCASAA,sCACiBvC,EADjBuC,qBAEa,SAAAlC,GACT,OAAOQ,EAAER,EAAFQ,MAAUA,cAAjB,IAHJ0B,+DAOa,SAAAlC,GACT,OAAOU,KAAP,IAEJE,uBAAyBjB,EAAzBiB,0BACQ,SAAAZ,GACJ,OAAOJ,eAAqBA,SAA5BI,MAFJY,oCAMa,SAAAZ,GACT,OAAOU,EAAEuB,OAAOrC,SAATc,KAAP,SA7IJG,sCAsBF,SAAAc,EAAA3B,EAAA0B,GACE,OAAI9B,EAAJuB,eACE,UAAIgB,EAAAlB,GACKA,EAAWjB,EAAlBsB,MACF,mBAAIL,EACKA,EAAUjB,EAAjB0B,GACFT,EAVJ,SAAAmB,EAAAV,GACE,OAAOR,EAAiBkB,aAAjBlB,KAA6Cd,EAAasB,EAAEtB,EAAnEiC,QAWSC,CAA0BtC,YAADsB,KAAhCI,KAkHNZ,KAAAyB,QAAe,WACblC,kFC5NNmC,EAAAC,QAAA,CAAkBC,cAAA,8BAAAC,cAAA,8BAAAC,aAAA,6BAAAC,mBAAA,mCAAAC,MAAA,wBAAAC,MAAA,wBAAAC,eAAA,+BAAAC,UAAA,0BAAAC,kBAAA,kCAAAC,QAAA,0BAAAC,KAAA,s4CCgBlB,IAiBAN,EACA1B,EAjBIiC,EAAe,CACjBxD,UADiB,iBAEjBC,WAFiB,cAGjB0B,wBAHiB,EAIjBzB,OAAQ,SAAAC,GACN,OAAOA,EAAPsD,OAEFpD,aAAc,SAAAoD,GACZ,OAAAA,IAIJ,SAAA3D,EAAA4D,GACE,OAAOC,QAAPD,EAKF,IAAIE,EAAJ,EAEMC,cAEF,SAAAA,EAAAC,GAAmB,IAAAC,MA6BjB,+FA7BiBC,CAAA/C,KAAA4C,KACjB5C,MAAA8C,MAAAE,EAAAJ,GAAAK,KAAAjD,KAAA6C,oDACAK,MAAa,CACXC,WADW,EAEXC,iBAFW,yBAGXC,WAHW,WAIXC,aAJW,GAKXC,SALW,GAMXC,SANW,GAOXC,MAPF,IASIZ,EAAJM,aACEL,EAAAI,MAAAC,WAAwBN,EAAxBM,YAEEN,EAAJQ,aACEP,EAAAI,MAAAG,WAAwBR,EAAxBQ,YAEER,EAAJS,eACER,EAAAI,MAAAI,aAA0BT,EAA1BS,cAEET,EAAJU,WACET,EAAAI,MAAAK,SAAsBV,EAAtBU,UAEEV,EAAJW,WACEV,EAAAI,MAAAM,SAAsBX,EAAtBW,UAEEX,EAAJY,QACEX,EAAAI,MAAAO,MAAmBZ,EAAnBY,OAEEZ,SAAeA,EAAnBjE,OACEkE,EAAAI,MAAAvE,MAAmBkE,EAAnBlE,MACAmE,EAAAI,MAAAtE,OAAoBiE,EAApBjE,WACK,KAAA8E,EAIDZ,EAJCa,6BAEHC,EAFGF,EAAAE,OAGHC,EAHGH,EAAAG,OAKLf,EAAAI,MAAAvE,MAAAiF,EACAd,EAAAI,MAAAtE,OAAAiF,EAtCe,OAwCjBf,EAAAgB,YAAmBhB,EAAAgB,YAAAC,KAAAC,IAAnBlB,KACAA,EAAAmB,mBAA0BnB,EAAAmB,mBAAAF,KAAAC,IAA1BlB,KACAA,EAAAoB,mBAA0BpB,EAAAoB,mBAAAH,KAAAC,IAA1BlB,KA1CiBA,yPAFAqB,kEAgDjB,IAAIC,EAAJpE,KACAA,KAAAC,KAAUD,KAAVqE,eAA+BrE,KAA/BkD,OACAP,EAAoB2B,YAAY,WAC9BF,OAAUA,EAAVA,eAA+BA,EAA/BA,QAxEc,KA0EhBG,0BAA0BC,IAA1BD,WAA6CvE,KAA7CuE,aACAA,0BAA0BC,IAA1BD,cAAgDvE,KAAhDuE,oBACAA,0BAA0BC,IAA1BD,cAAgDvE,KAAhDuE,iEAIAvE,KAAAC,KAAUD,KAAVqE,eAA+BrE,KAA/BkD,sDAIAlB,OACAuC,6BAA6BC,IAA7BD,WAAgDvE,KAAhDuE,aACAA,6BAA6BC,IAA7BD,cAAmDvE,KAAnDuE,oBACAA,6BAA6BC,IAA7BD,cAAmDvE,KAAnDuE,oBACAE,sEAIA,IAAIb,EAASc,aAAcH,0BAA3B,KAIA,OAHIA,0BAAJ,MACEX,EAASW,0BAATX,IAEK,CACLA,OADKA,EAELC,OAHWD,EAAb,gDAOiBe,GACjB,IAAIC,EAAWD,EAAfE,OACA7E,KAAA8E,SAAAF,uCAGUD,GACVI,iBAAsB/E,KAAAgF,KAAAC,aAAAC,WAAtBH,6EAGiBJ,GACjB,IAAIC,EAAWD,EAAfE,OACA7C,GACEA,YAEFA,EAAQ,IAAAmD,EAAA,EAAUnF,KAAVqE,eAA+BrE,KAAAkD,MAA/BvE,MAAiDqB,KAAAkD,MAAjDtE,OAAAC,EAARmD,GACAhC,KAAA8E,SAAAF,0CAIA,OAAOjF,IAAUK,KAAAgF,KAAjBC,+CAKA,OACIG,EAAAC,EAAAC,cAAA,OAAKzG,UAAL,YACEuG,EAAAC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,gBAA2C0D,EAA3CxD,UAAA,KAAqEwG,YAAwBvF,KAA7FkD,OADF,OAEEkC,EAAAC,EAAAC,cAAA,OACEE,IADF,eAEE3G,UAAWA,EALnB,8CAWGH,EAAWmE,GACd,IAAIuB,EAAJpE,KAEIyF,EAAc,CADIC,YAAtB7C,IAGA,IAAAvC,EAAsB,CACpB,IAAIqF,EAAoBC,cACxBH,UAGFI,oBAA8B,SAAAC,GAC5B,IAAIC,EAAYD,EAAhB,GACAxF,EAAkBA,GAAmBwF,EAArCxF,GACA8D,uBAHFyB,MAIS,SAAAG,GAAK,OAAIC,cAAJD,uCAGNtH,EAAWmE,EAAOqD,EAAM5F,GAC9B,IAAIJ,EAAYiG,YAAcD,EAA9BrD,GACIlE,EAAQyH,SAASvD,EAArBlE,OACIC,EAASwH,SAASvD,EAAtBjE,QACAoD,IACEA,EAAQ,IAAAmD,EAAA,EAAAzG,EAAAC,EAAAC,EAAAC,EAARmD,IAEFA,iDAIRqE,EAAA,w1ECzKA,IAAIC,EAAgBC,cAEpB,SAAA1H,EAAA2H,GACI,OAAOC,QAAoC/D,IAApC+D,IAAPD,EAGEE,kBAEF,SAAAA,EAAA7D,GAAmB,IAAAC,EAAA,mGAAAC,CAAA/C,KAAA0G,IACf5D,EAAA6D,EAAA3G,KAAAgD,EAAA0D,GAAAzD,KAAAjD,KAAA6C,KACAK,MAAa,CACT0D,UADS,OAETxD,iBAFS,yBAGTC,WAHS,WAITC,aAJS,GAKTC,SALS,GAMTC,SANS,GAOTC,MAPS,GAQTN,WARS,EAUT0D,eAVJ,IAFe/D,yPAFKqB,kEAmBpB,IAAIC,EAAJpE,KACA8G,mBACU,SAAAZ,GACF,IAAIW,EAAiBX,EAAI,KAAJA,cAA8B,SAAA3F,GAAI,OAAIA,EAAI,cAC/D6D,WAAc,CAACyC,eAAfzC,MAHR0C,MAIa,SAAAd,GAAK,OAAIC,cAAJD,oGAMGe,IACjBA,qDAAJ,YACQ/G,KAAAkD,MAAAG,WACJrD,KAAA8E,SAAc,CAAC1B,iBAAkB2D,SAAnB1H,MAAmCgE,WAAnC,WAA2DC,aAAzE,iBAEAtD,KAAA8E,SAAc,CAAC1B,iBAAkB2D,SAAjC1H,mDAIW0H,GACf,IAAInC,EAAW,CAACvB,WAAY0D,SAA5B1H,OACAW,KAAA8E,SAAAF,qCAGMmC,GACNC,YAAmBxC,IAADyC,cAAuBjH,KAAzCgH,6CAGUD,GACVC,YAAmBxC,IAAD0C,WAAoBlH,KAAtCgH,wCAGM,IAAAG,EAAAnH,KACFoH,EAASC,IAAbD,OADME,EAYFtH,KAZEkD,MAGF0D,EAHEU,EAAAV,UAIFxD,EAJEkE,EAAAlE,iBAKFC,EALEiE,EAAAjE,WAMFC,EANEgE,EAAAhE,aAOFC,EAPE+D,EAAA/D,SAQFC,EARE8D,EAAA9D,SASFC,EATE6D,EAAA7D,MAUFN,EAVEmE,EAAAnE,WAWF0D,EAXES,EAAAT,eAcFU,EAAkBjB,SAAqB,SAAAkB,GAAI,OAAIA,QAAJlE,IAA/C,GACA,OACEmE,EAAApC,EAAAC,cAAA,WACEmC,EAAApC,EAAAC,cAAA,UADF,qDAEEmC,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,eAEImC,EAAApC,EAAAC,cAAA,SACIoC,KADJ,OAEI7I,UAAWA,EAFf,gBAGI8I,YAHJ,kBAIIC,SAAU,SAAAb,GAAC,OAAII,EAAArC,SAAc,CAAC8B,UAAWG,SAA9B1H,YAGjBoI,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,UAEImC,EAAApC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACGQ,MADH+D,EAEGwE,SAAU5H,KAAA6H,yBAAA9D,KAFb/D,OAIU6G,MAAmB,SAAAW,GACf,OAAQC,EAAApC,EAAAC,cAAA,UAAQwC,IAARN,EAAmBnI,MAAnBmI,GAARA,OAKlBC,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,gBAEImC,EAAApC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACGQ,MADHgE,EAEGuE,SAAU5H,KAAA+H,mBAAAhE,KAFb/D,QAIUoD,wCACAqE,EAAApC,EAAAC,cAAA,UAAQjG,MAAR,YALV,YAOMoI,EAAApC,EAAAC,cAAA,UAAQjG,MAAR,YAhCd,cAoCQ,YAACgE,GACCoE,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,iBAEImC,EAAApC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACIQ,MADJiE,EAEIsE,SAAU,SAAAb,GAAC,OAAII,EAAArC,SAAc,CAACxB,aAAcyD,SAAjC1H,UACXoI,EAAApC,EAAAC,cAAA,UAAQjG,MAAR,IAHJ,cAKQiH,GAAiBA,MAAkB,SAAA0B,GAC/B,OAAOP,EAAApC,EAAAC,cAAA,UAAQwC,IAAKE,EAAbxH,KAA4BnB,MAAO2I,EAAnCxH,MAAmDwH,EAA1DxH,UAOlB,gBAAC6C,GACCoE,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,qBAEImC,EAAApC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACIQ,MADJkE,EAEIqE,SAAU,SAAAb,GAAC,OAAII,EAAArC,SAAc,CAACvB,SAAUwD,SAA7B1H,UACXoI,EAAApC,EAAAC,cAAA,UAAQjG,MAAR,IAHJ,cAKQkI,GAAmBA,YAA0B,SAAAU,GACzC,OAAOR,EAAApC,EAAAC,cAAA,UAAQwC,IAAKG,EAAb1E,SAA4BlE,MAAO4I,EAAnC1E,UAAmD0E,EAA1D1E,cAOlB,mBAACF,GACCoE,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,qBAEImC,EAAApC,EAAAC,cAAA,SACIoC,KADJ,OAEI7I,UAAWA,EAFf,gBAGI8I,YAHJ,MAIItI,MAJJmE,EAKIoE,SAAU,SAAAb,GAAC,OAAII,EAAArC,SAAc,CAACtB,SAAUuD,SAA7B1H,SACX6I,SA7ElB,YA6E6B7E,KAIrB,mBAACA,GACCoE,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,0BAEImC,EAAApC,EAAAC,cAAA,SACIoC,KADJ,OAEI7I,UAAWA,EAFf,gBAGI8I,YAHJ,WAIItI,MAJJoE,EAKImE,SAAU,SAAAb,GAAC,OAAII,EAAArC,SAAc,CAACrB,MAAOsD,SAA1B1H,SACX6I,SA1FlB,YA0F6B7E,KAGzBoE,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,qBAEImC,EAAApC,EAAAC,cAAA,SACEoC,KADF,SAEE7I,UAAWA,EAFb,gBAGE8I,YAHF,IAIEtI,MAJF8D,EAKEyE,SAAU,SAAAb,GAAC,OAAII,EAAArC,SAAc,CAAC3B,WAAY4D,SAA/B1H,YAEjBoI,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACE4I,EAAApC,EAAAC,cAAA,UAAQoC,KAAR,SAAsBS,QAASnI,KAAAoI,UAAArE,KAA/B/D,MAA0DnB,UAAWA,aAAyBA,EAA9F,gBAvGN,YAyGI4I,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACE4I,EAAApC,EAAAC,cAAA,UAAQoC,KAAR,SACIS,QAASnI,KAAAqI,cAAAtE,KADb/D,MAEInB,UAAWA,aAAyBA,EAFxC,gBA1GN,kBA8GI4I,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACI4I,EAAApC,EAAAC,cAAA,aADJ,cAEImC,EAAApC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,cACE4I,EAAApC,EAAAC,cAAA,YAAO,gBAAAgD,OAAAlB,EAAA,6HAAAkB,OAAA1B,EAAA,mFAAA0B,OAAAlF,EAAA,iDAAAkF,OAAAjF,EAAA,mDAAAiF,OAAAhF,EAAA,+CAAAgF,OAAA/E,EAAA,+CAAA+E,OAAA9E,EAAA,4CAAA8E,OAAA7E,EAAA,iDAAA6E,OAAAnF,EAAA,+HAAAoF,QAAA,iBAlHnB,6CAsIRC,EAAA,y2DClNqBC,kBACnB,SAAAA,EAAA5F,GAAmB,IAAAC,EAAA,mGAAA4F,CAAA1I,KAAAyI,IACjB3F,EAAA6F,EAAA3I,KAAA4I,EAAAH,GAAAxF,KAAAjD,KAAA6C,KACAgG,OAAA,KAFiB/F,yPADmBgG,IAAM3E,kDAKnC,IAAA4E,EAC0B/I,KAD1B6C,MACCmG,EADDD,EAAAC,WACgBnG,EADhBoG,EAAAF,EAAA,gBAGP,OAAOtB,EAAApC,EAAAC,cAAA4D,EAAA,QACE1I,KADF,UAGEwI,WAHFA,GAIXvB,EAAApC,EAAAC,cAAA4D,EAAA,QAAQ1I,KAAR,KAAkBwI,WAAlBA,EAA0CnG,MAAO,CAACsG,GAAlD,+BAJW,8BAKX1B,EAAApC,EAAAC,cAAA4D,EAAA,QAAQ1I,KAAR,IAAiBwI,WAAjBA,GALW,wOAMXvB,EAAApC,EAAAC,cAAA8D,EAAA,GAAYC,cAAZ,svsCAAkxsCC,WAAlxsC,EAAiysCC,OAAjysC,2DAAy2sCC,QAAS,CAAC3G,MAAO7C,KAAOA,KAAP6C,MAARA,EAAkCD,SAAlC6G,EAAA,EAA2C/C,cAA75sC8B,IACIf,EAAApC,EAAAC,cAAAmE,EAAA,GAAU9K,MAAV,MAAsBC,OAD1B,QAEI6I,EAAApC,EAAAC,cAAAkD,EARA,2LCjBJ9G,EAAAC,QAAA,CAAkB+H,UAAA","file":"static/js/src-components-race-for-seat-barchart-barchart.58a5f5ac.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-seats-barchart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n        \n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---bar-chart\"}}>{`Race for Seats - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};"],"sourceRoot":""}