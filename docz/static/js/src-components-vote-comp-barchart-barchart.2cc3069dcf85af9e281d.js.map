{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/VoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/VoteCompBarchart/barchart.mdx","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","barchart_partyColorsData","getProvincesData","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbr","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","d3barchart","react_default","a","createElement","ref","dataLoaders","getVotesDataForComparison","partyColorsLoader","getPartyColors","values","votesData","error","console","data","parseVotesComparisonData","VoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","VoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container"],"mappings":"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","file":"static/js/src-components-vote-comp-barchart-barchart.ee3b82b6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparation-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes-comparison---bar-chart\"}}>{`Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};"],"sourceRoot":""}