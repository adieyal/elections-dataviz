{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","region","loading-spinner","map-navbar","map-container","map","tooltip","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","handlePreviewEvent","bind","_assertThisInitialized","Component","container","drawGraph","draw","getContainer","document","events","event","newState","detail","setState","selectionData","CustomEvent","REGION_CHANGE","d3","refs","vizcontainer","loading","react_default","a","createElement","getRegionName","ref","react_loading_default","type","color","height","width","style","display","self","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","console","process","h","svg","dataLoaders","getTurnoutData","Promise","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityiecId","topojson","projection","path","concat","legends","text","parseInt","getLegendXY","it","selectAll","data","enter","append","attr","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","length","j","rect1","rect2","bottom","regionName","pageX","smunicipal","w","fo","muniImuniCodeD","window","redrawChart","TurnoutMap_map","provincesData","mapEmbed_className","originClassName","bootstrapStyles","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","edge","error","e","value","MAP_PREVIEW","_this2","DOMAIN","_this$state","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.4188e785.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"region\":\"map_region___dU79\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"map-navbar\":\"map_map-navbar__2OVpt\",\"map-container\":\"map_map-container__Nrswl\",\"map\":\"map_map__3W0yw\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  createTooltip\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className=\"map-container\">\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className=\"loading-spinner\" ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" style={{display: 'hidden'}} className=\"map\"></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName(self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}