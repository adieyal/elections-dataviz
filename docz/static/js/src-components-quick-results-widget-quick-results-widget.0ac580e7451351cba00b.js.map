{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.mdx","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","name","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","selectionData","CustomEvent","REGION_CHANGE","loading","react_loading__WEBPACK_IMPORTED_MODULE_8___default","type","color","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","process","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityiecId","topojson","projection","path","concat","parties","availableCnt","party","b","legends","getLegendXY","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","j","rect1","rect2","bottom","regionName","smunicipal","w","fo","muniImuniCodeD","menu-widget","sidebar","main-component","provincesData","metrosData","getMetrosData","CustomLink","onClick","React","e","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","label","react_default","children","NavBar","_this2","activeLinkId","handleNavBarSelection","link","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","MAP_PREVIEW","content","icon","province","muni","metro","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","bootstrapStyles","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_possibleConstructorReturn","quickResultsWidget_getPrototypeOf","quickResultsWidget_assertThisInitialized","onResize","barchart","map","QuickResultsWidget_quickResultsWidget","quickResultsWidgetEmbed_className","originClassName","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","quickResultsWidgetEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","event1","BARCHART_PREVIEW","event2","DOMAIN","_this$state","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","onPreview","replace","QuickResultsWidget_quickResultsWidgetEmbed","MDXContent","QuickResultsWidget_quickResultsWidget_classCallCheck","QuickResultsWidget_quickResultsWidget_possibleConstructorReturn","QuickResultsWidget_quickResultsWidget_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-quick-results-widget-quick-results-widget.5ff7b306.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  createTooltip\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            // if (self.state.regionType == \"province\") {\n            //    console.log(\"fetch muni Names and codes\", JSON.stringify(jsonDataFeatures.map(d => {\n            //         function getMunicipalityCode(properties) {\n            //             return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n            //         }\n            //         var newState = {\n            //             provinceName: self.state.provinceName,\n            //             muniName: d.properties.smunicipal,\n            //             muniCode: getMunicipalityCode(d.properties),\n            //         }\n            //         return newState;\n            //     })));\n            // }\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName() + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu-widget\":\"navbar_menu-widget__VPoXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"quickResultsWidget_tooltip__1X8PF\",\"sidebar\":\"quickResultsWidget_sidebar__190Zn\",\"main-component\":\"quickResultsWidget_main-component__1GrPu\"};","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      console.log(\"onClick item\", e, this.props.hasSubMenu);\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n\n        var event = new CustomEvent(events.MAP_PREVIEW, { detail: newState });\n        document.dispatchEvent(event);\n        newState.activeLinkId = activeLinkId;\n        console.log(\"activeLinkId\", activeLinkId);\n        this.setState(newState);\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        content: province.munis.map((muni, j) => {\n                            return {\n                                icon: `3-${i}-${j}`,\n                                label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                                to: `2-${i}`,\n                            }\n                        })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ]\n        \n        return (\n            <div className={className(\"menu-widget\")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport config from '../../config'\nimport BarChart from '../BarChart/barchart';\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || bootstrapStyles[originName] || originName;\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div className={className(\"row\")}>\n            <div className={className(\"col-md-3\")}>\n                <NavBar />\n            </div>\n            <div className={className(\"col-md-9\")}>\n                <div className={className(\"barchart-container\")}>\n                    <BarChart {...this.state} />\n                </div>\n                <div className={className(\"map-container\")}>\n                    <Map {...this.state}/>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event1 = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event1);\n\n        var event2 = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event2);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> QuickResults Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport QuickResultsWidget from \"./quickResultsWidget\"\nimport QuickResultsWidgetEmbed from \"./quickResultsWidgetEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-results-widget-v1\"}}>{`Quick Results Widget V1`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<QuickResultsWidget />\\n<QuickResultsWidgetEmbed />'} __scope={{props: this ? this.props : props,QuickResultsWidget,QuickResultsWidgetEmbed}}>\n    <QuickResultsWidget/>\n    <QuickResultsWidgetEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};"],"sourceRoot":""}