{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/BarChartEmbed.js","webpack:///./src/components/TurnoutBarchart/barchart.mdx","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","chartOptions","percVoterTurnout","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","eventType","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getRegionName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","dataLoaders","getTurnoutDataForAllEvents","values","turnoutData","error","console","data","parseTurnoutDataForAllEvents","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onRegionTypeChange","province","key","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","TurnoutBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-barchart-barchart.dba8019a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); }) + 1\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---bar-chart\"}}>{`Turnout - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};"],"sourceRoot":""}