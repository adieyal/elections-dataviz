{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/BarChartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchart.mdx","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","_assertThisInitialized","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","document","events","window","clearInterval","Math","_this$getWidthHeightB2","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","setState","event","newState","detail","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getNationOrProvinceName","ref","dataLoaders","getSeatsData","Promise","values","seatsData","error","console","data","parseSeatsData","parseInt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","concat","replace","RaceForSeatBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"mtBAIO,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGLA,IACEA,MAEGA,EAALC,YACED,8BAEGA,EAALE,aACEF,iCAEGA,EAALG,SACEH,SAAiB,SAAAI,GACf,OAAOA,EAAPC,cAGCL,EAALM,eACEN,eAAuB,SAAAO,GACrB,OAAOA,EAAP,MAMJX,4BAEE,IAEIY,EAAe,iBAAnB,OAEIC,EAAMb,+GAEW,eAFXA,uBAAV,GAKIc,EAAaC,YAAjBZ,GAEIa,EAAIC,iBACM,CAZd,GAJFhB,MAkBMiB,EAAID,iBACM,CAlBhBf,IAIE,KAgBAW,+BACqB,qBADrBA,4BAGiBV,EAHjBU,0DAKQT,EALRS,yCAQAA,sDAEqB,oBAErBA,sDAEqB,oBAErB,IAAIM,EAASN,2BACIV,EADjB,kBAEIiB,EAAaP,2BACAV,EADjB,sBAEIkB,EAAYR,+BACK,sBADLA,kCAAhB,UAKAS,KAAAC,KAAY,SAAAC,EAAAC,GAEV,GAAAD,EAAA,CAIEH,WAEF,IAAIK,EAAJ,GAEA,GAAItB,EAAJuB,oBAEO,CACL,IAAIC,EAAJH,EACIG,GAAmBA,EAAe,KAAfA,kBACrBA,EAAe,KAAfA,yBAAuD,SAAAC,GACrDH,EAAiBG,OAAjBH,MAAmCG,OAAnCH,SAgCNV,SAASQ,MAAc,SAAAhB,GACnB,OAAOA,EAAPsB,QAEJ,IAAIC,EAAU,GAAd,KACI3B,EAAJ4B,yBACED,KAAad,MAAkB,SAAAT,GAAc,OAAOJ,SAAPI,MAE/CU,YAEAL,oDAAsDI,IAAtDJ,IACAA,oDAAsDI,2BAExC,SAAAT,GAAc,OAAOJ,eAAPI,MAG5B,IAAIyB,EAAOd,uBAAqBhB,EAArBgB,cAAXK,GAEAS,6CAGa,SAAAzB,GACT,OAAOU,EAAP,KAJJe,qDAUAA,sCAEmB9B,EAFnB8B,iBAGe,SAAAzB,GACT,OAAOQ,EAAER,EAAFQ,MAAUA,cAAjB,KAJNiB,aAMmBjB,gBANnBiB,gBAOkB,SAAAzB,EAAA0B,GAAA,OAASC,EAAY3B,EAArB0B,KAPlBD,eAQqB,SAAAzB,EAAA0B,GACbjB,6BAEAH,iDAGAA,OApDR,SAAAN,EAAA0B,GACE,OAAI9B,EAAJuB,eACSnB,aAAiBJ,eAAqBA,SAA7CI,IAKuBA,YAAhB4B,KAFEN,4CAAkD,SAAAO,GAAa,OAAOA,EAAPC,gBAEjEF,MAA4ChC,eAAqBA,SAAxEI,IA6CoB+B,CAAc/B,IAA9BM,aACoBG,IAADuB,MADnB1B,kBAEmBG,UAAD,GAFlBH,QAdRmB,cAkBoB,SAAAzB,GACZS,4BAEAH,kDArBRmB,SAyBe,SAAAzB,GACT,OAAOU,EAAP,KA1BNe,iBA8BEd,uBAAqBhB,EAArBgB,6BACgB,SAAAX,EAAA0B,GAAA,OAAUC,EAAY3B,EAAtB0B,KADhBf,oCAIa,SAAAX,GACT,OAAOU,EAAEuB,OAAOrC,SAAhBI,OALJW,cAOkB,SAAAX,GACd,OA9JVN,IA8J0BgB,EAAEuB,OAAOrC,SAAzBI,OAGJ,IAAIkC,EAAWtB,uBAAyBjB,EAAzBiB,kBAAfI,GAEAkB,6CAGa,SAAAlC,GACT,OAAOU,KAAP,IAJJwB,oCASAA,sCACiBvC,EADjBuC,qBAEa,SAAAlC,GACT,OAAOQ,EAAER,EAAFQ,MAAUA,cAAjB,IAHJ0B,+DAOa,SAAAlC,GACT,OAAOU,KAAP,IAEJE,uBAAyBjB,EAAzBiB,0BACQ,SAAAZ,GACJ,OAAOJ,eAAqBA,SAA5BI,MAFJY,oCAMa,SAAAZ,GACT,OAAOU,EAAEuB,OAAOrC,SAATc,KAAP,SA7IJG,sCAsBF,SAAAc,EAAA3B,EAAA0B,GACE,OAAI9B,EAAJuB,eACE,UAAIgB,EAAAlB,GACKA,EAAWjB,EAAlBsB,MACF,mBAAIL,EACKA,EAAUjB,EAAjB0B,GACFT,EAVJ,SAAAmB,EAAAV,GACE,OAAOR,EAAiBkB,aAAjBlB,KAA6Cd,EAAasB,EAAEtB,EAAnEiC,QAWSC,CAA0BtC,YAADsB,KAAhCI,KAkHNZ,KAAAyB,QAAe,WACblC,kFC5NNmC,EAAAC,QAAA,CAAkBC,cAAA,8BAAAC,cAAA,8BAAAC,aAAA,6BAAAC,mBAAA,mCAAAC,MAAA,wBAAAC,MAAA,wBAAAC,eAAA,+BAAAC,UAAA,0BAAAC,kBAAA,kCAAAC,QAAA,0BAAAC,KAAA,m0CCclB,IAiBAN,EACA1B,EAjBIiC,EAAe,CACjBxD,UADiB,iBAEjBC,WAFiB,cAGjB0B,wBAHiB,EAIjBzB,OAAQ,SAAAC,GACN,OAAOA,EAAPsD,OAEFpD,aAAc,SAAAoD,GACZ,OAAAA,IAIJ,SAAA3D,EAAA4D,GACE,OAAOC,QAAPD,EAKF,IAAIE,EAAJ,EAEMC,cAEF,SAAAA,EAAAC,GAAmB,IAAAC,MA6BjB,+FA7BiBC,CAAA/C,KAAA4C,KACjB5C,MAAA8C,MAAAE,EAAAJ,GAAAK,KAAAjD,KAAA6C,oDACAK,MAAa,CACXC,WADW,EAEXC,iBAFW,yBAGXC,WAHW,WAIXC,aAJW,GAKXC,SALW,GAMXC,SANW,GAOXC,MAPF,IASIZ,EAAJM,aACEL,EAAAI,MAAAC,WAAwBN,EAAxBM,YAEEN,EAAJQ,aACEP,EAAAI,MAAAG,WAAwBR,EAAxBQ,YAEER,EAAJS,eACER,EAAAI,MAAAI,aAA0BT,EAA1BS,cAEET,EAAJU,WACET,EAAAI,MAAAK,SAAsBV,EAAtBU,UAEEV,EAAJW,WACEV,EAAAI,MAAAM,SAAsBX,EAAtBW,UAEEX,EAAJY,QACEX,EAAAI,MAAAO,MAAmBZ,EAAnBY,OAEEZ,SAAeA,EAAnBjE,OACEkE,EAAAI,MAAAvE,MAAmBkE,EAAnBlE,MACAmE,EAAAI,MAAAtE,OAAoBiE,EAApBjE,WACK,KAAA8E,EAIDZ,EAJCa,6BAEHC,EAFGF,EAAAE,OAGHC,EAHGH,EAAAG,OAKLf,EAAAI,MAAAvE,MAAAiF,EACAd,EAAAI,MAAAtE,OAAAiF,EAtCe,OAwCjBf,EAAAgB,mBAA0BhB,EAAAgB,mBAAAC,KAAAC,IAA1BlB,KACAA,EAAAmB,mBAA0BnB,EAAAmB,mBAAAF,KAAAC,IAA1BlB,KACAA,EAAAoB,YAAmBpB,EAAAoB,YAAAH,KAAAC,IAAnBlB,KA1CiBA,yPAFAqB,kEAgDjB,IAAIC,EAAJpE,KACAA,KAAAC,KAAUD,KAAVqE,eAA+BrE,KAA/BkD,OACAP,EAAoB2B,YAAY,WAC9BF,OAAUA,EAAVA,eAA+BA,EAA/BA,QAxEc,KA0EhBG,0BAA0BC,IAA1BD,cAAgDvE,KAAhDuE,oBACAA,0BAA0BC,IAA1BD,cAAgDvE,KAAhDuE,oBACAE,iCAAkCzE,KAAlCyE,8DAIAzE,KAAAC,KAAUD,KAAVqE,eAA+BrE,KAA/BkD,sDAIAlB,OACAuC,6BAA6BC,IAA7BD,cAAmDvE,KAAnDuE,oBACAA,6BAA6BC,IAA7BD,cAAmDvE,KAAnDuE,oBACAE,oCAAqCzE,KAArCyE,aACAC,sEAIA,IAAId,EAASe,aAAcJ,0BAA3B,KAIA,OAHIA,0BAAJ,MACEX,EAASW,0BAATX,IAEK,CACLA,OADKA,EAELC,OAHWD,EAAb,2CAOY,IAAAgB,EAIR5E,KAJQ2D,6BAEVC,EAFUgB,EAAAhB,OAGVC,EAHUe,EAAAf,OAKZ7B,GACEA,YACFA,EAAQ,IAAA6C,EAAA,EAAU7E,KAAVqE,eAAAT,EAAAC,EAAAhF,EAARmD,GACAhC,KAAA8E,SAAc,CAACnG,MAADiF,EAAgBhF,OAA9BiF,+CAGiBkB,GACjB,IAAIC,EAAWD,EAAfE,OACAjF,KAAA8E,SAAAE,8CAGiBD,GACjB,IAAIC,EAAWD,EAAfE,OACAjD,GACEA,YACFA,EAAQ,IAAA6C,EAAA,EAAU7E,KAAVqE,eAA+BrE,KAAAkD,MAA/BvE,MAAiDqB,KAAAkD,MAAjDtE,OAAAC,EAARmD,GACAhC,KAAA8E,SAAAE,0CAIA,OAAOrF,IAAUK,KAAAkF,KAAjBC,+CAKA,OACIC,EAAAC,EAAAC,cAAA,OAAKzG,UAAL,YACEuG,EAAAC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,gBAA2C0D,EAA3CxD,UAAA,KAAqEwG,YAAwBvF,KAA7FkD,OADF,OAEEkC,EAAAC,EAAAC,cAAA,OACEE,IADF,eAEE3G,UAAWA,EALnB,8CAWGH,EAAWmE,GACd,IAAIuB,EAAJpE,KAEIyF,EAAc,CADIC,YAAtB7C,IAGA8C,oBAA8B,SAAAC,GAC5B,IAAIC,EAAYD,EAAhB,GACAtF,EAAkBA,GAAmBsF,EAArCtF,GACA8D,uBAHFuB,MAIS,SAAAG,GAAK,OAAIC,cAAJD,uCAGNpH,EAAWmE,EAAOmD,EAAM1F,GAC9B,IAAIJ,EAAY+F,YAAcD,EAA9BnD,GACIlE,EAAQuH,SAASrD,EAArBlE,OACIC,EAASsH,SAASrD,EAAtBjE,QACAoD,IACEA,EAAQ,IAAA6C,EAAA,EAAAnG,EAAAC,EAAAC,EAAAC,EAARmD,IAEFA,iDAIRmE,EAAA,oyEC3KA,IAAIC,EAAgBC,cAEpB,SAAAxH,EAAAyH,GACI,OAAOC,QAAoC7D,IAApC6D,IAAPD,EAGEE,kBAEF,SAAAA,EAAA3D,GAAmB,IAAAC,EAAA,mGAAAC,CAAA/C,KAAAwG,IACf1D,EAAA2D,EAAAzG,KAAAgD,EAAAwD,GAAAvD,KAAAjD,KAAA6C,KACAK,MAAa,CACTwD,UADS,OAETtD,iBAFS,yBAGTC,WAHS,WAITC,aAJS,GAKTC,SALS,GAMTC,SANS,GAOTC,MAPS,GAQTN,WARS,EAUTwD,eAVJ,IAFe7D,yPAFKqB,kEAmBpB,IAAIC,EAAJpE,KACA4G,mBACU,SAAAZ,GACF,IAAIW,EAAiBX,EAAI,KAAJA,cAA8B,SAAAzF,GAAI,OAAIA,EAAI,cAC/D6D,WAAc,CAACuC,eAAfvC,MAHRwC,MAIa,SAAAd,GAAK,OAAIC,cAAJD,oGAMGe,IACjBA,qDAAJ,YACQ7G,KAAAkD,MAAAG,WACJrD,KAAA8E,SAAc,CAAC1B,iBAAkByD,SAAnBxH,MAAmCgE,WAAnC,WAA2DC,aAAzE,iBAEAtD,KAAA8E,SAAc,CAAC1B,iBAAkByD,SAAjCxH,mDAIWwH,GACf,IAAI7B,EAAW,CAAC3B,WAAYwD,SAA5BxH,OACAW,KAAA8E,SAAAE,qCAGM6B,GACNC,mBAAmBtC,IAADuC,cAAuB/G,KAAzC8G,wCAGM,IAAAE,EAAAhH,KACFiH,EAASC,IAAbD,OADME,EAYFnH,KAZEkD,MAGFwD,EAHES,EAAAT,UAIFtD,EAJE+D,EAAA/D,iBAKFC,EALE8D,EAAA9D,WAMFC,EANE6D,EAAA7D,aAOFC,EAPE4D,EAAA5D,SAQFC,EARE2D,EAAA3D,SASFC,EATE0D,EAAA1D,MAUFN,EAVEgE,EAAAhE,WAWFwD,EAXEQ,EAAAR,eAcFS,EAAkBhB,SAAqB,SAAAiB,GAAI,OAAIA,QAAJ/D,IAA/C,GACA,OACEgE,EAAAjC,EAAAC,cAAA,WACEgC,EAAAjC,EAAAC,cAAA,UADF,qDAEEgC,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,eAEIgC,EAAAjC,EAAAC,cAAA,SACIiC,KADJ,OAEI1I,UAAWA,EAFf,gBAGI2I,YAHJ,kBAIIC,SAAU,SAAAZ,GAAC,OAAIG,EAAAlC,SAAc,CAAC4B,UAAWG,SAA9BxH,YAGjBiI,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,UAEIgC,EAAAjC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACGQ,MADH+D,EAEGqE,SAAUzH,KAAA0H,yBAAA3D,KAFb/D,OAIU2G,MAAmB,SAAAU,GACf,OAAQC,EAAAjC,EAAAC,cAAA,UAAQqC,IAARN,EAAmBhI,MAAnBgI,GAARA,OAKlBC,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,gBAEIgC,EAAAjC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACGQ,MADHgE,EAEGoE,SAAUzH,KAAA4H,mBAAA7D,KAFb/D,QAIUoD,wCACAkE,EAAAjC,EAAAC,cAAA,UAAQjG,MAAR,YALV,YAOMiI,EAAAjC,EAAAC,cAAA,UAAQjG,MAAR,YAhCd,cAoCQ,YAACgE,GACCiE,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,iBAEIgC,EAAAjC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACIQ,MADJiE,EAEImE,SAAU,SAAAZ,GAAC,OAAIG,EAAAlC,SAAc,CAACxB,aAAcuD,SAAjCxH,UACXiI,EAAAjC,EAAAC,cAAA,UAAQjG,MAAR,IAHJ,cAKQ+G,GAAiBA,MAAkB,SAAAyB,GAC/B,OAAOP,EAAAjC,EAAAC,cAAA,UAAQqC,IAAKE,EAAbrH,KAA4BnB,MAAOwI,EAAnCrH,MAAmDqH,EAA1DrH,UAOlB,gBAAC6C,GACCiE,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,qBAEIgC,EAAAjC,EAAAC,cAAA,UAAQzG,UAAWA,EAAnB,gBACIQ,MADJkE,EAEIkE,SAAU,SAAAZ,GAAC,OAAIG,EAAAlC,SAAc,CAACvB,SAAUsD,SAA7BxH,UACXiI,EAAAjC,EAAAC,cAAA,UAAQjG,MAAR,IAHJ,cAKQ+H,GAAmBA,YAA0B,SAAAU,GACzC,OAAOR,EAAAjC,EAAAC,cAAA,UAAQqC,IAAKG,EAAbvE,SAA4BlE,MAAOyI,EAAnCvE,UAAmDuE,EAA1DvE,cAOlB,mBAACF,GACCiE,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,qBAEIgC,EAAAjC,EAAAC,cAAA,SACIiC,KADJ,OAEI1I,UAAWA,EAFf,gBAGI2I,YAHJ,MAIInI,MAJJmE,EAKIiE,SAAU,SAAAZ,GAAC,OAAIG,EAAAlC,SAAc,CAACtB,SAAUqD,SAA7BxH,SACX0I,SA7ElB,YA6E6B1E,KAIrB,mBAACA,GACCiE,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,0BAEIgC,EAAAjC,EAAAC,cAAA,SACIiC,KADJ,OAEI1I,UAAWA,EAFf,gBAGI2I,YAHJ,WAIInI,MAJJoE,EAKIgE,SAAU,SAAAZ,GAAC,OAAIG,EAAAlC,SAAc,CAACrB,MAAOoD,SAA1BxH,SACX0I,SA1FlB,YA0F6B1E,KAGzBiE,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,qBAEIgC,EAAAjC,EAAAC,cAAA,SACEiC,KADF,SAEE1I,UAAWA,EAFb,gBAGE2I,YAHF,IAIEnI,MAJF8D,EAKEsE,SAAU,SAAAZ,GAAC,OAAIG,EAAAlC,SAAc,CAAC3B,WAAY0D,SAA/BxH,YAEjBiI,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACEyI,EAAAjC,EAAAC,cAAA,UAAQiC,KAAR,SAAsBS,QAAShI,KAAAiI,UAAAlE,KAA/B/D,MAA0DnB,UAAWA,aAAyBA,EAA9F,gBAvGN,YAyGIyI,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,eACIyI,EAAAjC,EAAAC,cAAA,aADJ,cAEIgC,EAAAjC,EAAAC,cAAA,OAAKzG,UAAWA,EAAhB,cACEyI,EAAAjC,EAAAC,cAAA,YAAO,gBAAA4C,OAAAjB,EAAA,6HAAAiB,OAAAxB,EAAA,mFAAAwB,OAAA9E,EAAA,iDAAA8E,OAAA7E,EAAA,mDAAA6E,OAAA5E,EAAA,+CAAA4E,OAAA3E,EAAA,+CAAA2E,OAAA1E,EAAA,4CAAA0E,OAAAzE,EAAA,iDAAAyE,OAAA/E,EAAA,+HAAAgF,QAAA,iBA7GnB,6CAiIRC,EAAA,4wDCtMqBC,kBACnB,SAAAA,EAAAxF,GAAmB,IAAAC,EAAA,mGAAAwF,CAAAtI,KAAAqI,IACjBvF,EAAAyF,EAAAvI,KAAAwI,EAAAH,GAAApF,KAAAjD,KAAA6C,KACA4F,OAAA,KAFiB3F,yPADmB4F,IAAMvE,kDAKnC,IAAAwE,EAC0B3I,KAD1B6C,MACC+F,EADDD,EAAAC,WACgB/F,EADhBgG,EAAAF,EAAA,gBAGP,OAAOrB,EAAAjC,EAAAC,cAAAwD,EAAA,QACEtI,KADF,UAGEoI,WAHFA,GAIXtB,EAAAjC,EAAAC,cAAAwD,EAAA,QAAQtI,KAAR,KAAkBoI,WAAlBA,EAA0C/F,MAAO,CAACkG,GAAlD,+BAJW,8BAKXzB,EAAAjC,EAAAC,cAAAwD,EAAA,QAAQtI,KAAR,IAAiBoI,WAAjBA,GALW,wOAMXtB,EAAAjC,EAAAC,cAAA0D,EAAA,GAAYC,cAAZ,mwoCAA+xoCC,WAA/xoC,EAA8yoCC,OAA9yoC,2DAAs3oCC,QAAS,CAACvG,MAAO7C,KAAOA,KAAP6C,MAARA,EAAkCD,SAAlCyG,EAAA,EAA2C7C,cAA16oC4B,IACId,EAAAjC,EAAAC,cAAA+D,EAAA,GAAU1K,MAAV,MAAsBC,OAD1B,QAEI0I,EAAAjC,EAAAC,cAAA8C,EARA,2LCjBJ1G,EAAAC,QAAA,CAAkB2H,UAAA","file":"static/js/src-components-race-for-seat-barchart-barchart.bd2f658c.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---bar-chart\"}}>{`Race for Seats - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJFFSUYAAMWFZwJQIaC0PgghJA8GDyEo_hVVQAV7SgmC4Jgi8iECHJEPYZDJFQ9DPg3GgcLwxEiIEEjonIuiOMkcj2JFc8uOyBi7Q1dggylN0TQVc12g0h1gHYTQfHkXS5XaAABGAiBEAZUAwrpDIDVBdFRY5TgAL2cAhEmxdhuHYYB1iiARnlQK52gABnYZMZiwdp9xrGZOxYWdooAFkS9gADZEuS9YwBAgifWgRJov4ZxDkRR1MHYAAFIR-CWeyfjgNLESKmsSpoZwIG8y52AARiylL5HBdzqE8gBBOYgvYSMTLo6B0HDdh5E5IKxCWmMZHYVEApgbhgEPXz_OxeRt1rYBVqgdbggAMie8ZEnmShmnux7zG4P75TAUJ3J7VB2nYAB-DY1vDSNtqub7w0mmspBkat3zMWFNMwMAwigKZYZ2vbkfmlca0TbSCBwAjMhSa8CBu2s60Uyj8y4CY-BAPKYpi_hfBgCAUkIDmACZhZ5kB2C3VdE2ZjiVO4yWGbrXCtSpmm6ZuqQSbRsxvxAQSMIzbDcPwyTpLI2jKOoy2OIArQKBA_QGGYzSKaWEz1ywrMLN4_gzSldSmMg9gjBCOx0GTSy-JACPA5dh0jsC32QE9GiKNts44Dj4PgCUggffdZDPVlkVpGTNO5JFQOjKmGBWGwqOi8kHBPTr7Ds5YkL1jPc24G1aJXDMAuTSblvJFmCAO800LUpguAYF7_uCFcFKLDPAA5aJHN1ARmt-NBEU348h8blPPTH8JoCzkBGKm1gYOOAfxRleA8EsAVumC5M4tDkbuZixi98jiVwILqGYIM7DBRnhYEBlh3rDXaOJbokl2C9x6hYRIs0sC2AADKuECFAaKvdHRA1fKvY4iRUDlXIAATSwbYamkQABq8RGT3HGOiGA5DEgsKgIyK4gNgaOUjOgba0DaxdAIH0cw6AcDz2iHARiFglDrB4awwiwoogEAEUDKUwj5EEDgGI1ckjpGHVIoo9YFkh631QIIvRLJyBQH8HAI-MBIzCgFmgNxxiaymIEOYRO8AADanjIpuIALrsAAD7RL2P0cJPoYCMSRmYIBGwOKAIfmlEUiRHBQGFH3AeWSjhdBfnAPADQ9ACHvlABo2pFoAKmk4lx7AS61ywKBdAdhPaZimDPVcHk0ShClMKSMA5KB3F8YzCwDI4TjMHEYpRMyJi2DkcvWgi1xEzPYKgUIRBGocQgPAK4ABWchOy240G1PAcg_RwGOSuPwMWY12CbxBn2S8WwQatWlhImAzxqBwPmE8kAVCPlQF-WTGZEy_juRgG40FUKdkWCIEDCAiLo7IpRWipijhMBIpABcmZxzyAPkJcS5RfyIDNAWZMuAOA9kHKOfAaZKLVkMtRFkRl-zDkimOZA_siyeXMv5fAZZjMkY7JpUtCZdwwwAscsCmAbKdkcvWdyrogLUDKsWnKhlWqlXwIlbWKVJLaX6pwLCg-CKkmqpWYSDVtArVCDhYfJJerhXWvhW4k1VLoUWBlXS-VuKMV2q7gG2s6quXOtDW4z19KcBxqSX6za1KLXCtDfilVEaUUEjWTG_8WbiwJpDei7NqazWMyDZa0lD57WM2jRs_8dacjBVrVsB8lb02yuFbidAhYXpCsTZsAWhAG1RsdYWnA_bCztr7WzPAqaLBNu5aOwWUx50jv5huytMIoDz1zSi9J2ycVOBpQAdUpTM-yLAwAAAk_nKMWuqs8F7F33p3YQO8zg7lBFQANIasNl35s5c2mdi7Fq3svSB1dzr12ECg-eh93bI3qr8BgWA4ptXsVnJ_UD-BKhYcVdQXDaQcAeFUJGDln4_noaIzAZqddjkjHPPXLMwV6OYcY10P4MBWPscppRjA1HCS0bQ46ro61XAjDzi-yT2RMiycohRqjNGTVmsGZhPp2ouD6jaDQAmp6LDpPnlAZonHCSpvVdJkYom1lnkcDQVwaAoyciWHBlVqayldAqVU2gNT4j1MWvPAg_mMi1MjATbgu1jO1jM2AHAtnIwJdPGOJzy9XMCFhksVLhb3w7KUI_Zez9fNvw_uJnZh59knnSmx_QODbCgSjFcwxOBRTngAOINF1OvAA-vYe9s116dfPB5x1GH0DEZwxhtIlWZnVbpjgOrgnGuonSNl1rDLBuzVFJYPrjUOtMIaOeK9BHJuwCY3xgT-h5uM1xBgUYy2uz1ZoGt5r2W_bwEGkyIlBGpNKbzksMWMU7tprcozYSXsdRcAAKozHQFkIzdHHXJdfelkCLmXTZfcwR_Lq5UnQqh3099CRYeoHsqQ5HkaQGLT2QkVNi2TxdHsvXV7BB3sbcjFt9rXWev9Z2yNsb52GPYccmRrzfymc0AVazmA7POfY-54J7bQ29sHaOyds7XGps8eY_x9nYOLAPZOCMWXvx5eraa1zr7-QhqtX-4pmTecjc9ApAIcLgWoCRh86_T3tT6lg8J4zN9H6v1kUSL-rodBAPuInek6DYAL2LX1NEPASa0CRgABx_yWNLoTThEgfCgMcmg76B14AtPFU5oPU1BvzxRwvxfS8EHL4WRg7AADsnfTkFbPXe5PwUG9eHQEXpxLe2_4irzX1NCfkP3qQwPyQyYcCnO82OMxcXUXIavU-9gifH2RqreDkxTvlMcWpzsk9e_E-78jdvu9h_CvyYc2OSfn6x0R6j_-2PwGe2RhAT7x2RASS3gDREoESD_xpxZmChdDGDznswZUc0xyyxy33x3zannyWBaTgFcSSWwMojAQgVd2jTHD8iR2AFnTwCuFvyWAQ20XQMfy2g01sUZguxgDF1I1m3cVa3jwfjgPIM2WCla1AMyygGsynTIObUjAEObSAJP2hXYKuxY3Z2V1uyPUZnSVkKyEWhEMwDELr1pUAL3xAPKHAMgNd1p1gP4wcEokQLSwIAyyxzc3GwLXAyoNcLAzXXD2wOcVwLcQII4iIMciWRRwLSkKR20NoHkOD1rGQOc1QInX8RkRXzM2-XsLKQZT-G8l0Ey2xxiL-VPwjCOGpz-WSKJjzUTAOhwLwOPA5grnohACVjzVjA4BqLcVOnaKSWjB0EogtBiAIFgH4E5GujukIIeRmg-EomVQsmWg3i3moB3j3jdVtWPHsPyy2iuBRjjD30ZlaL4nvxRTKQ5myNyOcIEF5l2JmS6LqLuj8NqPcX4BAQtBH0SGGOsUOJ2QkF3FkCuO2N-MOIKIh1rGSzOKyzJEWT4KOASxf0sUjVMwsSXlcBwUoE7AyEWh7kRIHmDVCPhIfkR2XhRLRIEEFWCQMSKUJNROnAiVYJmT3iIBpGWwSBEQHiJOnCMRwAmDoEjHsRBkjFqTYU5BMj3wRIUSRMWgFJCRihpL3xyX8nyUKXFPbQ4jyUoAKRJPFNiXYElLgGCRGhpMqL31S1s060yBmDwAAJQOxwhPpVyyxOXjJBVIVI1IHldy2g-GiDom5wECECOBiyLFQDgDVP_AyF9O9N9M5CDymkZhNLNItLBOtOHTuDzwHkdNyWdIpNcAnRMwfhASVP7DngXntNcBZIdKTNxLzXSSoL1ULP8xxIgwr1dxzKOHoJrJJJgDrMtXoKbM4FpQAEJjDPiMkHRrD4C7CEyMglgPC-ZP9fCXEAjhzQEJjAyeyTCVNQTKIkS0z5S1TFTXSNMh4ppMYHRsZcZWJYJKJGI9YDZidjYkEzZSJZIrZ2l5Zsg7YgJcinZwJ45NRzR3ZHQjZvZT5_ZRAb4a4AzIA5xk4x4x5dBIKp4HQvARBUQzS_Jjo7Bk4kLDE0RZhdxURARcDqIXwULZgM9UAPhcCEKpggkMLC4U5rZ05lJVJZFM4qKYQVdT4YLW4Vc2LT0zwvkHFUB2c4BiUzxlibVMyT5oLz5PQJ5q5UB0lvVERMyMSxxxL4VMyoCzBeTHI3d5zuiwk0B7B7ifENDJwN8Al2AsKSKZg0LsRQkEkjKTKkkoktSaKHKvFUBjL9LjxXK4lDKvLnLjwUlml7i2k2JKJXychsAukeltNXRT0tNAzhlRlst9VszDpQh5l0rYMp1m0tkriLAFw7J9ByVo4hARBsVKj2L9Abk4A7kIBlzQUXkso3kFiqEoB2ABKfkiVCrzLtVlVQVwVHJ4gqrKilLVjhp-Axq81k1jwKU-ri0CUsVeqhzA1O10AFq1rdleUWV2Fzlozqr91vlHJhKrhgkIk99j9YiYF4rrk9MDMCBL9j0H4YTLNbAQN-LYBBLhLYY-rOTNhUAeTdE-SCSsyzKjrtSH5iqfqOKh8B5gl-Awb-AIlEaQB4goBhKUak1Zhud0A0hCZsg0g0bygGrlyUb5DIa8sIjaBloYaQZhLmC-r3S4gCAvTQzhRCYPJgycAObNsfThRIyDzgTbrAKYd0B4cCS48zKbq9ghLBM6qyaQYJducMqg1_xl4IoxwcBJTOTKAUSRgMh7BKRYYcBVBsBdQwAejhrexIUQBtp_oLQRp2AXo-rG08rNUSMdV4Egpgp-AbaOrhiIb2VJCCBBD3FgBWtFb7kQYrgNaYIzwdb1ElhDUgV4FQUJqHcJrMV-AL0wCMhzBjb5h-AmbDiLIFxD0t8HVwiw7pDI6FbbkY7HkYROSE7tbJTNoezrrDqLBqBODvb5gVac0q6tD-Nw6tlU6B7hp46tbKZJT5Bcqa7w6ZCx65DhbVxqBlD-NVbg6V0Ek0hYI8gIgiBVCecdt1dDtzxjtTtPCnVJdoVj8LAijpwloMr0kQxZoGh15Fo4KBYcAP6v6QNr9triq6YHxr1LkG76qm7qAIGZlJ7lUlgjq-rs78DFr0UAj0G8Viw4Hq0NrcHawmU-UYh4ACGirvqGaeKy7YS77aSr9cy-h1LER8yJrMycBIA8YowXg7JCZuGiBGUPV_pUHjxORglpSQNyjowhzWjmiUUkxUwtJ8J2AUFzZwqjg5MorUElb2BOsNt2rlYqw-r9ibiTo7ifLHjwBNELQUghAsr3jZHqrGBnECExAvk6ZGgGkpBnGFwHHKjGA0AZhwgDjIa81_J5gOZaBOlLjtq80THOigqLGSoBAiALRcihA7aRjgmQmdlyR8JhgHoMgOZniJyLiQA3aUUuD3A0hTpP5dpSDa6KDQHSrNqW7NbE756RjymdkpZtr_jfGdljGEn4nzGeikmUmbG2gZh7GunawnH8EfH2dlZvGoB-m_G0idI4mzH_Duj-AxnUmQJ0n3isnsmZlJSamoGlbHJH6Tm5aJdTp1VqB2do7GrlbuDVMRMaNroZm80q6bnGZ6bTqVccaZhIw-HCZfm_mdlJHGBJkQZ2BtgYBEhTo-GLIzngAUWxB0XaAiB5ApBYXHIxBKbIWZktpvmUVrnIapB1n6Zym-naXqihmtmHjRmrGJm7H7avmYmZk5mXH-6rAfavH5mVmyXGBqW9LtnbiTGWXkn9maBDmOXjnIW0WEH4EKXsnKm8N7nHU-6vblUJd3nHxPnVnsnhSuXsmo7G6XnHI9aDajaTbOQzaIwsBLbrb2rRr7b2A-zgonaXbXoyXHH8WWQzn_a3W7axAA74g8XlzjWQm1WbmYXlyoa-ETp-BM6miJqo2QYY2BmBJ6bs3lZUZymIW80fddWfavXo4I2MnfXFX42GXzHhmJXEnWXbGpmOX83HHlmxAmHug3FBWXH_XuWxXNmpXdmrG0m1SjnB3Kz1FTphGYA43iWNXqnI7CZ6nl7gB5247W7Z6k7k2toLIO2QmE24Xg2ymmiSIKH2AW4cBM2CXp2UVi3iWLBWHxSh1X2B5gW6UVjwWH3snyiT3dKEWkXN3XUbUBHjxUXZ3QP954UIOF3MWJr4PcXJBA3UAj2bnSWzXY2_3lZqWMPZmfj83F3GYn2dlS2Bqfb_p-BQ1yBGr4gXg3iPXXbsO9j62m3G3mWx2ZW2W22RiCOBmu39R0U6O0oS9_I2rjx-2fHcPRX6bxWHjOO3FpWUmJ2MmPjn2Z3k3To5qF3cPGZl3THam8caaI7dPt22n271ED32ABO_G0Ok3GQOZxBL3vlr2W473qA7Ofn9OUVehd4wP4U33Xp_Oe2kSk10UGUogQXQ1f3WPiWAOHPgOdP0UIumI3EoPtPgBQ00uw1IPMWcvdOUO0PvOjqsPNPyXZPc2KG7O6WuWSPboyWKOjV5hfbo5aP6PxPEgLRWB0Ag6WPn3BmG2mXlPuPxnW3pn4vBOhWxBhOmJROGOJPs1pPhWpvuWAmgnfOV14EImYromKvgDGXR3LGZW1Op21u81cnER8npwOZ7BGpLBpqLuXqsulq9PnudlDOam13Q6N23uLO2657rPMmtvjhbB8FYAeBgBmu07wmOYq33ienBuiPymGuLAyOZkYep62uaORPOvGOeu-vmOnpB2huOORudmTvxvJnJuDu6wu2mEHJZx2BdMULYgph159lAgBAVvSvEwNuphQewmU2QBInQLa2DuR2EmVPZXwD1OJeKuruYAbvCn-AABOTvLPLmGKU5U5J7unzQ6D1tNHk5r71d_09duu1tAH3djpjTg3iwFgCoDwSH06LH5VP6ENiFRH2rlH-r-ltgBTjointYsb6xib9tkVrtzn1SI4S2pqPa3nkVgXhXkJ4X-HrnsECWQdqXkZsPs7hVwdpXlXgQDmPXsptbtFohvak3z7ry7g77i337uu6vsVdhGe9p4HiyJH49v37JsnxTkP5tnjiP_jmZxgDwcICIcwdP_gSfm4agXmUjEvHYLVtZTe3jFjA1xAzJ3PptnojwAgAMD1gAamjnP7P-O8P9QAtAHAFBgiY-2mui3pGCkHn-n_zbq_7_Y8H-O72d49p5_MeWCzZivVBgBJ94uA_YPsdzsjcQgQgAyFqKzSjodgAxQUVto0EgcwAAJMAAAbrx5AXoZioQO4h2xxAVLJWrV2gYvMxAFSUYO0ikZ08G8X1EqreHvCPh-AOAppjQAfCTR7aZDEJhj3NYXMYGUUaOJwOEFWtqAvA_gTcxVYgoxBwAOQXp1WoO8X2gXd1PNQUHztpBoPczgoKK4zUDu_3fQeWmLA6CPuJKDaqChwHG9DBFXVviQ3YQcDgADggVOYNUGswK8VwbXjIJOb0ErgosHmBYOYLkCY6YgOoF0CV6RhJA0YXgBcTMDRJeACQpIQIE5BPAiASwaahyypbICCOX_XvoW2kZ98UUQJJGMeSmCnlQgeMNRnnCipfglA-sNCIbBEiGITYEkYiI-RtilwGiGcXAh-UdhgQU4zxZZkej6iWg7cw0EaKvjsjLIS8LoC0P4N2SaJ4gyyKgOqSuAu9JQ2wEKm5CmIcR-iLwWAKMJAgWhDan-DYWqXQDLIxeFoBjikFEGIhqkOwswHsJFAvFC8EaQnFagyCPDl4aQC0CMPERjCLQQSK4C8AY7kBnh5FWnHAFYBzhxEFuAQGAAKQjArgfwfIC726B9kfy7gAgFCNeGUxnEWtI9IsKyjcxEo-I7rq4GwRwAARQrI9CMBsC0AQRXUYaD8BGBmlKRdIghAyKZEwAWR-EK4OyM5GHk3IEcMAOQBBFwjDo0ohEfXCREoi0RtgCAJiM9Y4iaA-I9wD8A2SOQARrmWzuwDmHdAgR0AKABaEmSShGOVwJpDWBQqUAEWVwAAMRq8XRyyO0Qi1OGLorgI0N0eAQ9GI4KkMETIJVHihLBkw-IiIGqRiAzAu4ogVKJQHyCx0QgHgIMnwloCqhRAmY9YDcLuEPD9AGQDMbwCzFxjHetgXJiGLQBGiXiBSHYIWJLEFkuwBQK4DlCwB1iix7Y3qCBG9HCxcoxIWkfPH6BgA2xNYGiDsDZYYArgjI7hoWJrBO9yxYI1AFWJd6nBth6wLwAIGnDWiKR7Y-seuOnAWhMgLAPIFcASitidxHYl9pQDQABYLQW2IUVhDbFxivhNjLgEejWHCgrgNjRFikmvJNDbyokBSBFXkgRwehIod8toE_KDCfyIcMOMcEjjJxY4YFIOJ3DuhmhaAlgYQHjEarDwkIZ8ZuJ6EvgHpeKb0VrjhOjgJj5K5Qo0CDV0oIESmU5RdHQR8JB98CewZckYgjSHUg0fZNDhxNPS8StkC9KxFk24m8SCRyqe1GJNgRUdo4SCZRpzUZ60Br4yyM1KJPYk4BMENIvBAQkknqTNJuCekX7RACNRzwooewOeHXiWBZoo2dgEwl1CWBzwzgQOP6kDT9kxJaiZNrpIgQaTeEjIRaDpWoAiIkiFlGRN8LQiW1FJ4qAnFYnWBqTvJHkxkJJC0ReSQiPk9RElOiD-SaJgUyUsFKkSWUO6Z_doAAFJ_QkqGKcCWrLBRO83MZZK2WCgg5VhVpDIHInpqzRmS_AWEYUHtrm564WlaFOkgAAa1I2wJbTAChZFoNUk1OkhoQjS4AY0iaQ1JtGG8jgA4bIDADAAZlFoaNF3oyAdz8BEgC4FEftMEBqQQAMpEWlDWhLSjgoJTZbHMDoDsD9YcI4YnvmWw3BPsIANaQOPrizROo3yPCD2BOlYB9QaAGhKDPMDHgxwwxdZMdAP5bDxx6AfZuqV-QgBHRYADGZjNemHF3paIHotdhvDeATpcUOKLzDP6RgqCJ_YaTSIWljhtoZ_S4hLHJn0ET-s0mmRjNCyRk3pNRbID0S6my99ADuYZPfTzSrh0kkYrCTMF0wcBbpaEmABhKjGNUACCTebGLIfg-Ah8qROILAGggiYiWYYKphwQMyPhgk1M0aRzLHAMSK8ESPvGrKODJBNZcibWTAEawugYIf1SNAbLwyihjZkYYJPQSWBszzZ40scDbOWSrgup90-YCJn4DdT9Z0QPGfwBwqBkxmJ05OXAGcS00xY-4EACf0jD0FJAwsVmXNNplURhYnIE_q9Ptp_Io5j0nomL2xk7JcZn0mog7mO5whfhrgf4cs2GLxyPp9czICnM0QnShA0hC0Gr1ByNyZknJGKh4j0n0I4A2khcH3MTmi8Yqtw9yMMFKaZCQADJLsEMXtrhzoUkc2YNHKelxya5CclufcWBkhAaRU8xmM3IHnuA4Aqcv7EnMHkZykcMUHOewDP6tkGZ1c6uTWAjlwja5MckABfM9lXyeirc9-SAGSBzSH5tYJ-R_Jflvyd56czORYz_nsAzZ80i2VMErl_ZJ5wCp-gNIfhpxnAN0mUSkHAXnzkFFgVBToBvl_Yr-MEWXucV7nTTKFMESwDFWoVzhgoJ8h6RAqgVNyYFTxVhXOX35z8OI68kptwrtkwgBaAgfhZ0hCxgLT5dc2OYwuvaSLRen8jBdHCwVI5-AecqgoXIrmoy85Bc8ucQu5BkLp52iiBQ3KcWPyDFOYzecKBOl7zdcwxI-e7TWS2YspQiQKXmVTJFh1SmZXxP_gHKblXSu9FRb6XUWUwxesClmGDU4B2BtRIQe-NAAh6_YeyyRPdBXWNF74-aqSmeZ0h6IBK_k1zRSk6V3ICA7w8aKBEJMumuSloYkn4PgrvDENEgsSo_PukroilskTS6JfmXfEull4IGGtBMr3LLwa2cpVUpMoRpI0B4KNNGhjWIYCotl_AImvAAppJKX2CymZa4BJqbLzp2yhILsqOXXKDl-Ne5REnYbChzwkoC0ocri6Q0VlzpVpUkmCSHLGUxYeDlEmEJPLgVmAD4LuT6AgZlERLFySSx7q1gAp5gM8ARFNHOlGEoqfyMpxWULkIAGVcor8uaX_LjwwSfFUkjkTkgXgPRPkPbTEYRI_KQqdaZtOaW6kIAxUtadjAzI4BYAs4CYBdMKzIqLAqK0cAQAxUJBnSIiJYISqSVBoellAPpYkAGUZUul1GeBJ9CiWLLXAOPEAJQA8DqBvkeiqFiFO1XnLgksiKhL5ThW9klowvLVdMpUrUdwA2U4_givgZmqnVSJGVZwB7IWByi3q4pFdRGXlKhy5RdFZiuaXYqBlynWRCsqqQlR4OsqruvUpFXUSwlaKscArMlmpLfVcqqugqvUm9K5p_SlUmqvMr5TQp1q7oIAvYCgpcF7k3yRomSbRA558U5tUFK7qhqTlGawSkaGWEEBY13RGtRWoDVmqa11K8TnSuGKMqbWowO1vPFNqRDnEiIaIUkI8BJCRgTwJYKisjBQAhSlasxFAD1rw44QxtJdU_w9WIq805RMZtEGHVrF41KpRNZQHg70zz-Das_k2vSmDr21qUhKe4lESpr6x5UzpewFwDWgscABBJcvC_Ziqgpva8olapTRXUhafyBPGgFTxYAaE20n-aNG5hCrzU3S9SaPmtWxA6ENI7Fc2r4k34sN1ImhHqTBVwScaWAGDRxC3J9rQaYiI9ZZR_XJsgpyoTummsjRF4oNmeBkqgGw00JVZkaSOdSx6I4BcASCnqenJeDCIHW6APoO1UjDfxQcHpZkhHGWw0jCZC_IgJGCwDoa5NYChTchCLwqaHWamvkppu018k9NDrbWd7iM1zScEG0p6oMrekxAdgcASMHlA9WclYg2wDKU9T3WiIQovG8wPxsSl_rREQm8rjMltl4kjgacQVFQps1tTmSdQHAewtKYjFigmm7EhEuXiyadkOW3mtgierhanNGmt6VpsyBubuY4WgxUx13VurENELcopAVrxoa3pBi-gg7knk4ygkozU0eaK6iMcHcI0fkWFreks4LcUBchbVrni81qkHs6qvQp6JdAA47ilFMwrgUyKuOIANOL3KuLMKsADuBDXFqfblE2NKGkRif1wA0QMAVBWGIXOWmVF0teaZhVQQdyfbKgP2zkEYDV6SA_416_Rf3N2amiHcMquVf6UjVSrml-armUORwCBSaOgwOyBbge19bFgfq2MReJCZGaFNNGGZswotF0d_IE2nAFnn9UrJMJ0Y6WZyU_nqbAp3ILMfFySyubhEIOPnRTpuawzYAPRenQtr-w4A1etGfndkwlkc62A-AYgN7jPA5roxea0nYSrh1A7pt_AWAGAFApLAREK-EQmlDSCDSP1qbe7dXMV1_MJdFjCIG2zN1GbLdXcmALhqrzCwWduCu3XUtA1ldRdxYsXadrx27yCd-wYnZmv63niuWVO-mjv1p0GLpdjOv7CNFZ2Np2djVTnc1t50J7IWgu9rcLs61F6ndhu_VfNoz1LBhtwewrHDuYU9auNwiJ7X1UG2RhhtQ5QHadrG3h4Jt20FFOsD3x5a6F1Ldqd7iK1D94ZpW-QOVqSyVbYNWZW7QYo4Z213dKawmOjqgDSrdd2O_bQXqBpN62tOm9zavoR0ILY9_a-PdtU70x9ue_6yYoBq7Ws7e9Eiy_eNr-yPax1CWmchunYBV5ICD-qMElqA2Rk39cOsZdlr4UxVctsBzpIItakUNJ9kYafSVrcVlaKty8djSKCRI1aUUacVJQymwC0qm9R-vbZURL1n7y9OO7rdfu429rx1ValoF3u2jT5bV7-6eVXvX1zbLRte0aMtqb1ra-pBBrbWorgM7aAsptFxU9MwMX7V552liaHyu3yKom9tJvQYvt29bM1S0dvXfrNWvb31H2ijODsXS_bhYnBzQ5fq8V0QfF8CvxQfOsOrzgREwk6SNB7H27nDn0lvbFt_2d7QcgB9gGviuJcGLARBgRflpQOFacAxW6XnItzDqGsDi-nA1VpX0470lfhpg3_rAPRan9gZNKQJuA1WHbtFBk_ULsCnn66Dl-3w26r0P-GzVwBzPtljAOv6gjIRnvUCSCUMozCQgB2a3t53B1I5IhuPMLWUS_j0IW2SQObQ0D2xgIegQYUMi0h85esA2IbELkWhfZtUqTbgoHCWPn19sl9a-oPmjjPE1p12PYzNCmD6hZojUDXFfS1ybHd5swW_pv34yXHkq7AAAIqw4Gg9gAANJ9YOszgWHDgksDOB7jxxp4wAEdQgkWg8fACqGGJXj-uEYE9wxhYBO4lQ6oaeg6zdZVjguUbMSgOOQmtcxKG43caONknVwPxv44CeBOgnwTpJ07DYgmPjwZgEAaY063AkOwFjBgb8jnHYDzQ1SBSYyi3k2inxZgIpygKkxLyCyK-0EkyPehuAzBXZuwMifwClMJAZTcw7YAsJVNPdFTjQKTYToEB5IPl3QDU-jSFDanUmFpi0GgGPD2QzThp4OCkGhOdVk4NjWYHgA9P9Eu5rplCePn0BWnPQv9bqUeUxPTxMSYpAeKGckCZBEQFoJJiCIsRPcqJwAM8JFMzL6glgZ4VPGgDuVwB4ziZ_kSmdYAiB7lGJlCZrukT7BONtZgJPWYHiSRJ9jNTipICrUx6K-GZnuEKGgA6g4zHZzqFeLxjpmozxkMSkIC_G4FszjgUhPGYmQpAeulZ-qo9XRMugJz0oOo8wNhrYRnqgauUzLlhMZBICp6E82ac_Eenigq4OLBjWEpJLSaIgkTWBsZg3mawWHQnFRLFViUzlIWtlIeZbw4ALzZ51cCBavNQB3zpHP5Dsr2pJLDlcACFj8EwBPsa1fVfBB4E37tU-q74voKEauovnTUq4KC8JtQBfmtzAxrNUOvUHwAfVbKRSjRedXsBEakaCFiG2PhIBo4jWdUEKDsG1hNTHgTC8xmwucX-AOCBoPqD4tP1d5kXfgOdVChfSaLbiOS2JZdi8XeqMl9LkkhUsgBxL-oZMMmGdpV5TSpEdEp1ggCJB3AEAZi-ZcstMRLqGlt7jpb0sGWRoJdRQApfnbOW1LlAVGbp2csSWDLwsIIyZayBHBfNy8GiMxe1BwnDaB6bYAUk-gOWc5TlpAGJcCvJhhY7lzy0pe0tpXdLPlvyxgzyuIB0r-lgyyFbllHBLA3kdwP-mYs1W6rdAZK7j2waYAAr5V5MNldTa5WOLpVgqzxd8uOXirfVsqwZdapV5oIFoRqH4GcbCgRguq4JDNfiD4J5rrgFq5pYgDZoOr417q4pdg4aDfs_V7i0KHUspWRrR1sa8mFORBHU86IflXOGCT3pKA2QTqOiBeAbXUrx1jK-XyUA5WDrk1by4NaKtaXRrulwK1lCMvsBhO-QKhMxf1DwBYb61kG1teLA7XIbe1ry_lZOuTIhr510G5dfBv6WsowVqvMJ2XhHDgk5N-IPyNTz5B8gn10we1exsQ2sr34f6ysWUvY3Crw1gm-jcjhV5rAVQpJM4gavDBhgdlk4KEEZttXCbLlrKF1fZs9WAbXN46zzfxt5c5bENia9DdcDbA_AJwZiyiThN2BLA_QSuAOhluo3mb314m1lExu9W5b6t1q5rZ2unIobN4ApG8AyCPXCZdEfZJIH1DJB-4AgOYSkCtvbWWb-l92w7ZVslXVLwN3m67ajvXXSbQplIO4Cqbw3gyBAdQJydTyDEVrEdtGyndORs2_rytzm_HYGunW8bLt1W2NdOQC3obwZeyJTZuQYAhATkXTNsAzuwBi7Ntxu4rYrv7Wq7YNnG2dfrvV2XLpyHW41F3LbAFrLoZi41GOQBY4Ak_CKAPa1vR37bSt0ezagbs13cbKNo-zPZutV5fN8wWABaHXjbB9kHJo2zAC8ALXe7kQSgNvbdu_WPLldw-9PedubWz7gVvKFDesD4JXA3kAUJRjFvgPIHXECAJ_ZTsgPY7Y9p24nY1tAP9LeUNO1fdms03mLl4EvKhH8CIPbbyYbByg7_vj2AH_lpBzrf0z2iUguN5nsEk3hIUiAb1uEwQFIdjW8oe9ke1jbVvoOp7494BxfZbssA27lN9eAFDtGRAeHRN8h9_Y5tUO0Htd0-9PeAd5QgjN4BcK4AtC6PRbwSC9DBC4idgFHLlvKHlEoc-p_7wjwB5o6wed5brlAPu3rcNpw2lrIgZ4GOAyCoQ8gFj4B53hseHWgb6jpO5g6yid4ob54c0tSDlD6Y-73QKmzBFVH3oMagT_UFE7cv73BHCd8Jxg8cdRO07l4CAP4BbuGJUSkPay8ElNIGrYAJJRHFAEyfFOQngN7m_Y9oe22onzd1PPrdCBaaJgPoLuYtfXgpAFr_QQxAg5RuR3unneYez_YPu2PqHnTi6x1aic62CIY4PW0w_sjMWtny8N-3s5aed5-HizvJ8fcnsOPRHWTnvJVdMvVW3gCiZJzeD6AH1X5GoSQLqDwAJIuU6ASQO8vWyWVLATzwxDABOe_XLqR-a9GxbBQlXo4-oQJlEGcSzhB4Kgw0ujUEtYWeqoKfUI1CkvtdZLnF4JCo-WeE3EX-yFa6i40dg28X38KG-1O55TAcE4QPAFUJqeXhQgi9reExEkDG10maAZG0ndmf8A6XMUHJwI8ds6WKXyLqpmi8Ke0vGo38NO_qAZDbA7hC1gh8kwXAf2ZnJd_q2K_LvnOpX-VmV1S4zs0vyXSrmKL0_1vUBDbS1te1pDHDHIwACjsVws9JehPTXSL81_K5EdWvv4c9iAFgFgDJB_juqkiMeGYuM8oA2wfx6iHdfWuznXr9pwa99couLXET6u2K_Ee-buXzF8gsUWn5Jvv4yj3-2S-lcZu5Xlr6V9a-0dV5dMYneAHQF9vxASofQUtzFGse5OTX6byl5m_9fXPA3MUZx8Zd-DuBobgQbYDU_vRjp64D0LSFwDSBdvgnvbuO7S-rfUvs3irwy1DZuRQAogdgYJAe6PeluRoEr41xu_Jdbus3CrwNx4aCMqQVreAflTU_fQEAvt2wc90a9TdH2zXg72t6a6VcjRm7fkNuFYAqSG1NkVNrgJgCgCb3w7erweyADpege2n_7290O66eiuQPOt59_rYgd0AanhjnGIm-Q8PuU3Fb71_29lfbv73dbwy-I-sCwDlRlN_4wtf1Cvu5X578t0s5o-iusPQHg1yB4bcs8jgAAKWcAt2hA6r-G4M_UCZ3z3PbyV9e6rcDua3O7wN8LFAd-AorcEQ2tCGCRuBKM4Lij4x508Yec3QnrTxZ5VdeBVIRj9eBXQHBcPS3osKz5u40_0eA3Fn5u7DiIB52MAJH1JxkBLfmfgPmVz19R7TeCfvPd73z5F-Fg6277kQCBzU9S9RBIH7nqj_x9i-oebPDHpL-I9ecVJJ-OwfoE8uYule8A5X7YJV5XcReRPmVyF_UphdXF2LR16OJ1jCCgRupBDAS0Jb-AiXQUnWR7ui9FmbXr48lmL0fZ6_hBW3wn_gOeH-Ow4n399gQGy7fcEP_AYoSoAo5W-w5PPhN-b316W8gAxvJNmJ0QEBjbfgkTCC4MR8ihIfhX-r_gJd8s_rvUHOl074t9s_5WPvKrrgPfD7BU3EWYX6gAo8B_HefvvXv70V_6sffm7vm-eCwGYsf54P3PF7xrZFcXfLAJN6L3l7m9w_Zw53y7znhcdJOHAjHZi_8fRDvOTgAgGYFD_x854YfAPkn_18S-I_WfadvCBgDGH8xzAwSfn-gEF9oAWfWULPL-9m_V3fvpP_7zz6l_N286qIXsP0EWuq_p-MEMp5L6zyE-Ln8vrn8O5--s_6HGQVwH1DnD2AafwSfl7AGn5_AEgZn17yh_J-5fDfnP87xJ_vQ3ggjNviTlqok-UAMMLoDe28-YvB_Q_8ARDwo5983h2fiPr34r_4DgmF8gtqD3VehtjghAK9yRJ4iFc4-3vIANPyXSheFZ2vQ5Tr3JejgcfXAAALSqGhBb7A8DfR18xdDeynOL2v_X_XgEuXb035i3--rt1_G_fCFvxTfO_nhLA6fmECx8XtoAanMVgQF9uz_gEDvM_xP_wFH9N-J_7rBH9v9786eobTCYW8eFfcjgT3Az6_wo_-NH-L3W_kADv_H_vJ9_3Pw_-vB09p2AvJwJiIW6oA3AiHngC3-9_jL5E-I_gtZj-zfq_5t-JvvlZ3-n_qB5BGAXt5CZ8zFigGZ8IAYgEG-fbtv6QBu_jAHneCATp462sOMJyQOC1l9pSI6PjBAZQ2Pi7a4-xAWNCP-z_tAGt-RAff7iO54JA6oA0JsGR_-wSA0A8BfAVAAeO0zq76E2TAXx4XOrAXv6wBOHk_73-YnnO6UY9VHkCOgu3ivaaQzgJsB3A0_C75F-KHkwEqeV7t97wB-AS_7sBKfooGf-OnkEahAqrngALWqyMxYmOIoLH5NeH_qLCXuw_mDayBhAdYHEBosPYH6geGAIHPWuIDsBYBosGAEyBFgWwGT-gQUf7CwvTsIDWWiLp9CZ22dleL9AfGAIDRBKQSwHxBcgRwG2BOtg0CCgj0pTYVBZ8v3aeBNgaLAe-uAU_7FBAQQf4NBwsOI6quQMFpqQOK9mvYZA4UC8DeQHgRIE6WQQdIHNB_gVYHtBQQWJ76ghHmY6rIAgcbSVBG4qMCoABQSYG-Bkga0EzB7_h0FjuS7nRDtQOQCL6xAeAKcEFBa7qp5mB_VtMGJBswUf6ZWT7kQDWqlGKsiSAeCKPhwADJIWDBI3wYkC_BeINEGZWRQQ34EB-wXAH3Bzwc3ZVIiOHJ7GOrgC5jDAMAN-71BxAQZbghUASUFJBn_smCkBRAIYibAfQcEjngqIFQB9A3DhiHPBTQWp7mBEIZYGPBBwZiHiOuoIR7ceZjtV4-2TvnUFjB8Ac8GTB9IfcF7BzIdCFeB5DkEYVBNEDRC1Wy9gCEJi2wJMigh2wbL5-BooW_7ihDQZDZPuGADVgCBMVhGAGBDAcX7EBGNl96qO4wRqHyBazgKGf-JNkEbrwsJtQGsOzodLY0h9obEFTB1oaUHJe9DrDYZ2WgceB9G0QVlB0hdwXgGMhCQZqEKBZoeI4BeFZjEA2WXQIkARAIwJsEehyXkKERhLQVGG4hTwZ_5l2jofxhxAqINI4lhu3nyGGBkgUf5l22IZCFihsYbWHN2MAKnhTYhsgIGw4aIFsCEA0QU3b1hTITGG2hMIYWE62_cKgCoAfgHkDokV_gEiSgapH2HhhloQyE4hbQSyFH-IDkEYwAMVqpAr2uMBya-OJJKMHVh4wRuE-BaobsF5ha4VqHEB2DsgEzW1AEw4FIWgbOBqkhfiaFGBG4V6HChkYauFQhTYZ_55QzdrNA0QsJnwj5AMbmaajo6ANEFARA4dGE2hfNnaHCweUOI7rwj4Wl7MW6Ea-FRAsEdmHLhIoVeH_hw4V4FWOyAXwjBe6ARREsAsEaqHgB6oURGNhJEQ0HROyAUQDcek_JZZh2WQWSFRAs4HkDiBJ4chHRO8EfmHrhn_p3hp2wfjwE1OCwaEBDQ0QZJGiR14QBHCw8zkEYsebSALDBGyjPECHo0EMkBPWfCK-6hAhtIpE4BP4bmF_hTEUhEjhakTrb3ozjODyFukQAixVhH4TWESRS4ZW4rhDYUOG2RXgXc5k2UiDRAhRi1vqBhRYUYpH4RPkYRHWR_kcnZ2RFPmTYlQBSKSF1--oF4DvBgkR5Gnhn_mz4WhsUb-F-RiEYlFeB0viEHcerwENDMWooBcG0BdgAZHRB0vspHERAUQ0H6-jocvBmOnjuvDdRX2u-GbWjAUf76-rUTZFlRHUTrYOBziM4ikh5IcMBmRmYVnjeRAnlZElRvoVnhdBEwNQCKemYLJELg9kIKpLRMUatEPBCUUfbEBWvI6HqumGKM43R7Yc1F0RcQYxHnRI_kf5q8UNqngRgAgV9GYA9lpmEfRY0a9F-B70WnZ1-MVvfa1WhbsvB4Y-QQDHfhOYWdGlRF0e9HN268OgCG0GMck7oxmMYtH8hdkWrwWRiMT6F4hwsGrz0OPpvshVCl_qnjmkVMQUjRB5MUDHIxb0evAK2UNlUjjOyTvYBdAn-JD4eh7MczGlBCtmDGaubgJ2HFEWPlgEixQsXiEK2zdqFYBY7AP8b2ifzrT6qxy8DBECxWIYVGnRJMQWEK2pAZPyvuz9jADeQhtMxYNAWALjbSxBIbLEGx11mxFwO_TnwjoBRAM7FN-tsa17QufyLC5oWoliADoRIoPiBa-_fh37YujkDX78A68BehhxoaIP4kuF4TpZBxhYKHHWBMccmCsRZNsKC-OlNn06zAL8prEKOGcSJG6x-XinEhxYBOd4lxKrp2AqirbtV6TOcAMXEXomcQjEER0cRqCVxqINXGtx6kVXiigR9HQCIetUUPGoAx4blH5WJcUTEdxgcV3HsAace0ElxOtv8ZngD1rkHHIRwMEgqxQLi3GZxK0eXHzxi8QcElxXQQmLwAysSIBZ-VNq44LW88HvE94j_hXELxVcenGtxyUYoyDEKwMZ5jgziE-HGhQ0cX4ZxBUbcGzxz8cfFahwCWnaWAcAAtYFA0Vno4phvIQAlfW0ce_HtxRUXPHBxL8T3FvxyYJ1Fk2lvhAAIsLDqniQAJCfQGAJKHsAkzxmCeAmvxS8e_FjhLwEGReAhdkbYXBoEBPFUJhNsAkHxR9vQm4JjCfgniOeEIdEVIFwC3bQAqJMxb1-QQOiDke-MWgkiJT8UfEMJJ8a3Fq8adpvDVOkEYkDcJqCYHGaJGCatGCJpuhonJghMbdY-geQIta_oTgfzBDQAgBaDigLoAix7xhMaonYJECQoEZx5Mfc5hWVgGEAsO4oGwDSJHifwnV2Zib3GWJYnvm4LWFoPwp2Q18XBD9AqIGU5UIHiU9HNB0SXgka8joZonOOKJNrLQ2ePGJy2-PXqgCHSFQJIDz2N3pIgeJNwaYFgJaiUIkaJZIif75ijTsKAxi93l0lwAjPsz71BMcR0leJqceomQJF6GSLQJBSIvbJO89mzSbA40uATyOwyVMkxQJiYfHeJEyb4nrJvTtEAFIxIItb_GDTvG6DJLcWSK0Jpia0nmJkyWSIUxsJi4jWWc7gkDHuF6GqThQL8n84XJMUPw7l-JLJX7VU1fgHHUwQQKgjNoYcRhYRxi_CClOSE3sPpTeNfonH0RhNqCndA4dOd4EQzgCNCbhl9mODzw14I9YqxGMq66OwEvvUFYpOKeeEopOlmingpWQJinYpd4VXgqxyAo-ENWsoHcAGJTNqilMpmyUfZ0pGKdYGUpQES47DA6rl0CyJu3l3YKOIqVcn5egqRCnCpTKSl402aPie78Y-KeckUpKqY_6KpDKcqkjQH8XTbSJVSTxEsekXPPAZhSiSACUpICc0mYJ-qbQCMpRqdAn2iu5Ew4IJNNrCKmiKCTym0p2KS1FlxAqdHj0pzqYakEJkHnFaTIxVOj7CAegeY46pRqfKkhpYKUKntBdqRTG52eng3HGOC4EqFEAsqYGmRJYNk6m_YGaYGloRK1tV4iAfgMglFpRqSdEKpoaemkHBlKR9FBGJEJU4RAhbukDquzTkmmAxwadXZlpLqVolBGumBxG5pujhMCwAmwIWmDp_KSOktpSqRWkjQViVXh32Y4KiSeOoSQQDeQDaZ4nDppaSukGpa6f4mEJaYtZa6qD4YIiPWXxgkkPpg0YYntpJaaimnp4aeeniOM1jViwARjkwhSYfqbLYBp66U2mpp6Kaultp2KWrzzBuIkGRpQRtp2D6Jg8lrE2p7adkmWRo6cqkvILjtCZ-AiIXT7CAyVImloZzgC8h6pH6eWlQZYsGjHjOaePMkP8zcTqk0ZFGWmmQZWoViliw5vlM5RA-TJf5uAqYtynAZ-Vpxm_JrGRBlnp1GTrzWJgMIED7Og8tsBJM1IaRliwYGculsZkmVqE3G39IQmouQML7YFIdkOL7WpQkQa7DYZfm16-x7fv7GgogLgFiF0swFRlV-4ccJbd-y3vYBxxRLjN40p-VnZkF0DgI5nneN4LDgEQOjqEAYy8QCOAB-hkXZnsAKJI9gmZk8f1bBZBEI_5-ZllEXRUZWoeeD2Af8FDarBmAEhTJhyIRjIuJQvqHL1BOWXllpZu3v5mZZU_rlkbJOjsmwOAg8t0A-yC3i5HBhE0nZkHejWUulg26WQ5nF01gVVk2uUoXMmkhEni_J0A9aZVmNZKadXZDZAWSNntBY2RTE3Ri1qaSuAfgBw5phiWTwk6W62TVlAuw2VlkKBY2WhHthu4V44Og7Ui_CoZpme5l_wamYNm1ZGWYFmjZjWWJ7OAPQa4BAhS7vKK2SGNIiy0-EAAICL2wgI9lJZz2d24nZ9mStnnZzEWNlHB0EMN4vyrgaaKjAzpkBnW2hNijnw5dWZ9lrZjWVnhBGKsRiCLW96JS6Bk2qTaljZWeITkfZq2QcFjZavOTltAFoBG5EAUQLT4wQQQFLYjAfWX_Bq8TOWdkNZHhp9EeAfgBImWxgzokALWwuZ96gJmCctn1ZX2R4YquvAZS7VeU_BkAjAXcUrkDZ-Oe9ni5GuSkEBJUwP8b8w6sUQAZ2SuYtlvZp2YjkS5yXkEazQvGZnI2A0MXrmbe_MAun05uWcl5i5LueblieYzrCaZ-K9tkAsAuObj5VZKESHnq5JOR4ZHBqXqgBKhcmcEjtSsQHHnF-CeU0k7BR2abmh5KeX7qOhWAE87MWs0PB4uYmAErmM5x6SbnO5yeazm5ZhllKGoAleVFY0IY4POlRWdvoeIriwuYZZJ5xOW3mge0CamJL2i1pYAwQ6rt8nzZk-WPks52We3lwhGeUvZxA2dpww_AI-Y7nN5COa3lr5oHjrYsuhHqgB52zFl8aMgdAGr7phI-W-nF5LeePkn5jsVXj-Y-QHJ695rwMxaOAkAEQD3wNECPmvZh-UTmr5F2e3liez7s4gmxAgYCHKMXQF0Aj5GGTmFq5r-ZAWgeRweeCzgVAF4AEOuBQaq6ugeVgUr5SOe1FVZ-CZ2l62hIINAWxZIQkADAymU9kgAlBY3kq5q0egUQFyOblk6hVeJy7BeP0Y9TKMDvnRAZAwueaEcF-XlwXkFE0VVkOhVeCRDa5iGaPg6MKYRIXG5z-UfkYFPBWND7JDvrAkuY1eSXgLWnVBXESFB-VoXgFshUfbyFOtj17wgvSa85a03SUz4SFT-b5kl5x-ZgVN2joe6byRuqi8mdUwSARB_xXKBjLC5_YU3lWFzOTYVLZuWbPZBG89g6B-Q7AFH6BkWgSkVTA6RUxkkFs9mQUS5uvI6GS2xHhwkj4eeSh5VZuvAUUa5pyPMEX-NAM-HBIN-VxDuheRagWzxMhYUVHB_xvAkmeA8CzwMcGAIdL4FwSAF4bIz6f6m-ZCRYXlJxnhS_ncFFBfYBhhn0QPAkMecWsXHI7kYdnTFKxTUUk5YYd_7uxAoKwBvARnvpikIQpgFA0obrvNmHF-xW3lhhvTpRhyhi1jeCDQSnncUK2DxWvlhhKXpFbuA99q7GsOAJRnmexXxR4X9WXRenE3GxYQegsgv0Xo7hUhkckVTApTrVaBAR0TanrwNxhZk-xrFtZnwunccHHWFkKVi6uZkcQHHrwHmfCk7IA_kilF5U8V3Gkl6cfYDduUNqKB_G96A5KigzgEwjngOCA0i3ZHPNKZYlLBdSXslYyZsCxF1cWyXMpbyLNCwl_xvei6gDQIW538s4F4Doh2JXKWaFTJSSUylrJd24rxipSdjOAN4KZKdYNljr7wAxcXKWQlxJVySGlS8XKXiO6xlZKGgdvvEBwouvsMmulUpSyUul3bmJ7_Gu2LqC6g7ACqW6gnWDgjDYQpdTCUgK_m852lwZQGXOlJ8XKU9F96AABHDQBaCwlXjjjBdg4hX6XdusxT5n9WFcYGUZlo7lDaw4wWZZJre93uzwF-OCcwUw5gcWyWlxUhQInMl6ZZAldl3_vqDOAuoDeAGgTCE2X5IMfj7YplSkdEX6lTpWblBl_cV1T6gM_sNgSeFkmqUapQpjBCzllhQuXSlS5TWWnO5Obtjng54BaWigVpV6VzhNSPzE6lo7g6VYJi5aXknloiRZK6gzgDyVXlN5TNamijVPfkHZhiRKWPx85ZWV9lx5QOWjuYnjP7ng-oBaXiW96DgjngcafMD7Zs5R0V0JkFW-XQV3eJ2kNAdCHBUIVs0Hn4Co6rrOXllFzlWX9lviV2Vk5ihYRXDY9gGQGkVtTvCDcui-Y-Wa8aZVBV0VMUMaknYooPDabxKZfamMlEFQaV8VzERKUVRLKZ_SesnWLtgNAfvtvH-5L1rkXilbJUGk9lUSThXeFMldpXN2ypbtikVQ2A0DSeYxRyYCqD5VpUCVB5ZJWvlBle1GyVOtn2TKl54BZXJh9Tn47DAyoaWXLRvFbhX8Vm0RpHOAw2OCazQN4MNioVXjqiBHuQmXjnJx2laAXJx-lToUuV2lSGVKVDkjgi6gJkihXRWVlhXT320AGJVYV1yVJXBVhlTFAdpihWqRNQziNEBGqYObHxhuKZUOm6VYNjRXSVmVbVVp2PdhnZfxLDuRAJWoOVr4dVepY5VHl1VX1Ubputhnbhgj1m4Hhg4Xo-VHpXVbwnpVixRNESlF6U1DipS9sk7pOIoIYUBYHVc-U9Vs1btXLF7tkEbB-3QPpjpM7KdvFuOGdjRF-lWUDHbgVjpTNXOVN1V9Vp2SlRaDOAXWL1h0I68GxX_GfQDTl2lgNUFX_VAibdUKxipdZKmVfOa8Bw1URfID_JkqICkYuNmdHBa-1Zc5lQpFJTCmgoF6DSUDeiKcS4SVudPnS0VzEfdyWA_vjT5aqmWVYAbBf-Y5lc1D-fUEs1j_sTVM17UVTXiuqxfunEJwzpBHrSGAPEAKOYtQ_4_VIAMLW9VE0YrVp29gOtIr-Ptn_kvACiU04K1bJR4ZC1jNWrVH2itc3a6OEUBvEzhD3g9DrQNKEbXiuDlQzULFcRWDaK1Otm4APQ7gH4DIlrgWAQaBnkI1DEegZMLbO1zAcrWq111RbXG14js4ATOhdhgDw28QMeDh-ZppHWpV-VjHWI11dmLXBBVeB-5DQ48brV2-FwJpUdlBdVNVu12hTtVx1Gyc3bagmQCQnrYaAHuEwQA6TakF1rtSrVm1sdfnVslbuYoW0AzvuPEJidENDFHSw8RPXAB9QQXXPludRlXq1Q9SV7R4DULwhhurgcKDKU51fPWr1pte7XneBdXEmGyWPrVEGqYXkGTAVUxf1Yn1h9XXUe1hNmLUd5gtpsD8YYVnAAJWwgM0BelkPLZVV1bJaPnR1_dXnWe1QDWna6g8oiRQp17FQ86Rlgwe4ABO-9Ta411fdUfXWBL9c3ac1s0CkBVCMuY3HZA_gHTksFWDQ_XVlWoS_Xe1cVvyqI4coMEjkQZpk04wAkgInXT1ctXKDO1dsSA0YN7QWLV8FysVqJUuZwd8G2AfwXPXd1bJZIUOpq0UvX11g9b8lp2n6LgQwAjyej78wmPj7a4QbAH47MNztSTbkNItSvW_JqQSo2dUBkdnZmNyJfo291cjU_U6W_DfYUwAwoATS1OzjVrT6Ni9aA3L1DdV9VBGuoAM7EhwgJZTBIATQOi0CwoDfXCZd9VI3Z1d9d43yN4Db8mo5LwN_GKx6JI1AO-XCbrVNRKDVE6GN5tQo1S-5OVUlwAnjv8alNmSXk3sFMjfl52Nx9WyV3Vl9ljgpAGdY9Z4IBQG03O131ZtUONCTfY051jTWnbNQNqEKYIeYXmRUZFjLmF7dNaDfU2YNjTVbUSg4WZpBa-3IWEBKZbZd03D2uNURY1g_ycSqMWSJFCLfmO5mOAI24BJpT0WD8MeCXN-ZCxbQWFZct5eFPjdXYpZYWRFnPh0WTt6eQ8Wb_4KOKWe5a3mcxfE28NBwSzVs1gfs0Cc1GEumE81rXLC1RNSVflaC134MC1PNF3sn7tB8fpC3JAQfiH5aiMfhH7BIUfoS1dN9QfH5At0KPTWYtC3gr7tBafhpGZ-y9hc25-S1vn4a-CjqX5ot1LSC3veWLazmre63n0BbepRWSGaBovgd6reVLY83PR8USzGDZM_luHz-D2Ev59Aq_qy3EFLBdP6PoPLbK3NBWGe0HaZ1iXpkjVhmTd5kpSLbj7aZMrY1wYt0JUvGwlm6RXQIllQEiUWNwpV1Ql4GJX3nFxuJQoDrABzWaq3NQgJmQ_iDQgbCESOEDMY8m8xqBD8mEEJ3Chw5ThHCnwiErYhiq2suQCh1aEPoCRgK8FZRsoQaB4BtcgRqejlE_2uXQHoYaozCSMrgNRBGAf8PpoRAGKjUCPg5cipKii1ZppBiqOSPPDZmPqmDQ2kUyGZTpIvmEiYiURoODmog54E8o8KpSGWytcW6PKhKCJqEGhKCeqgjwescWJAAkkF4FV7w0y8JcrLw-yujQJA0ENqaGI2NAhaMqGmD2rrti7Z_BGSabBOi7tM7Qe3FYFyhsontDyme1QATDGU5QAF7QUhXt50rzRPKupOIwE497bSgbtLqh1zlJGeq-3Tt-7dUyftx7Wi6o0mpgkBzcsQJ1zAdyFNe0Qdt7dB1lK8Wo8Au2C3F1yE8-vDMhvtqHfhhg0GHae0Y0ikgUCs8aIOzwEdoHS8o3tUHQ_Srg3EvR2ztc2HFjc0sALzSqKPRCsqft2SjCCCg_kH2R9kdSpGjlE9OOITRSl0loTFg-ZMJ1PKaNMha_YRGs2QFkuSOKAMgeMIKiGdSJGjQrK5nRO0o0MSHEjWd6yqLyTI9nWObnSJqOO2WdbZP5AedhiGjQIWKNN52ImvncFA-dbWEGQigwNHHoFtHgGIjlE7wIZ1hS5ABFKrmQRq4CQq_4B3LpdSkqXSn4FnYYiLQkXZygr87iPhqWorgqyh0Mf-qV3wafWoZ1v00NJ1SwExYAZ0l2xnZ6osGqFkkhx0UALZ0qkLHeSXDePVBEj8CtSFwDZm_XWjSTd6ANmYo0_Arl1gA03fui2dPwnl3PKS3S-p2IlADN2psQ3edIEWD9OJjkWncL22Fke8DOZwAc5o9SlkBbelRHo6SHp1pAyyGO2PtpaAaiPtyyA-2UcS7UZJbt9qC92MdrncjS_tGNNx3XwvHcR38dz6GR2_dLXE-3RwL7WZTA9i0Ex3ftmHTcr_t6goB2Q9RHWkCQdRGlW2HoCPbDxI9lHfjxIdqPSh0idJ0Oh2Y9LHTh1lJ8QPj1gdfHcT09qJkBR2bWVHQTy9ctHaKq09H7Rj0xwVylh1_tbHbOAcd5thbCXtUPeB2E9JHR-axS_ZMD1CkSVKmIhkUncrbXd2pBl2UhWYFkq2A8neAiJASnSp21tE6lUIadKvcCTadmALp3C9xNP7SddtJOUQPNjXJGg1qoKOuAO-Z0tegdy-gPDDxA2bT8J5tLnUe38AvXB-54AAXXABF0-UmdLjdSwo72udvXPOY0AFNNegRAFNpn0MEkfV-0gAGfeubnS16Ib0F9Onen3oAsffH2J9fQMn0E47sH8g-90cOhFTAfvb45E8gfeH00A3otzBBGWbTm2_CMhFX1R9xfTX14gdfbMBJ9RPCn2F9s3egD592fXRhXxu-o9T3iafeP0l9pCIt1_IFfZv3bh1fcv3nSQRgv3R9k_RMDT94CA31z9mnRYBQuhOI8AwgFFhd3tkBZqgADKg7ZEqPdM8M_3Vo_ZGDRD6anTb2MQ__bWDpINYu1QYSH_QMqCSYA5ICnM0NBB0IDSAwu1_d-GJairtZgOAMmd0XQQB9YpXaEqCU4yCqSEDYXYYi-IuAzChkDpXUF0QdjncqS5I5A0V26kjyoT3Y0-A7F0kD8XVQOIDkNEl3ZdqXZt12AVeFl0pdy3dmaoDeaFhzUDVvSwYrKLAxO3SDezdQNk92PH9AA9obEHR_9_AyigIW6PaD3i92PQB2s9GNIR3s9KAzgN6DlyBB2vKAgO8peke6ocp8DITA734YQKoZ0qD1VAxbXudOO11G6pwCJYS9_sRdJyDL1KtIqk8fSFgagSg5Z2j9mAIN1mdFA1D3iY4Q_QyRDuSG0qmd_nSkP0DHA9crSkHXczYS9Kyqe2hD3g5URQDIMDANY4AyhSqO2zGpSrBU1gwDrvg1AyT3dA6g7qiaDyPTRY6DrQ3mgGDh7UX1g9EvRjS4dVHWz3Q9hPZUP_Mdg0kyODFpM4NPKrg5DTuDuhBCpeDgw0dQJ4PKf4OJDgQ6zSUlEvfAJedOwz4PjKyQ6wMxDIoHEOGICQzABJDuQ6wMU0tiOkNoDOQ4kDZDdnXkPsDzyoyrFDRnc8NMcIQ3lZhDNg1UNBDNQ5QCwDKpMEhvcTQyqS-oFwySztDkI50MhQz_ZT2IdTHKiPzDhPYYPj9Yw9j1S9KQDL1cd5gzx2K9UUk5CQjBI_AD2DSw9wN8kLgxGgfDK0qn0eDWw8WBzDEQ5wAbUBw08NHDwQ2jStoIXfiP8jvwzcPCKsQ6V2PDII_H1vDU0ByMQDVw7iqCMXw_H35DAI0UOu9JQyCPlD4I3yM7I1Q0qiwjdQ_COtoSI1kOoadI20OojSMNQPlEZo0CgWjhZiqSoDhOJGbnddRn22thlo7kjf9ZZL_2q9S0H2RADzBmYjqdb3Q_CujOqO6Of9KpPAPrA6SAhaxj6A4j2fdCqBgM_dsHR929DXvCNTVscWMMMM9YvT-0S9rukWb9K_Q5YOzDfyAhZMjHyiyPCIbIxCwbD4KuRjbDQ5L4OoOQo2jTxjRoxxZddGQ18PZDhnWjTVjh3aUMzjBncaNXE8Y7UMejuSA0PXuNoxqMtDR-H3iYj3Q1RwuqKPaWMQdRI6MPGDScpMg1jiQJMNU9oIzSNwktg4T3NjTg31rtjVxJ2MwgPI5gC2qew7LYDjIo2N1o0Zw6OOfDzQ_hiTj54zMADKp7WUO_tFQ4uPQj5o3COrjiI353fDdo43rCSZHcADYjvPTeOC9tYGWOi9JIxBOXjZIxSPHaMw7SMPjjI4sMtjKw3Ni9q7454O8jb4w_Ctof4yABDjv7eKPnDvY-qNoT0bm12HDbnZBNzjB3bkjDjRnbapLjiY_UPWjqEyiPbjFUlGOWUMk0hP-QJza_1-jhZIvDYkQ7eWRFtgA4kp_6MY6mPIDhIyMPMd4PQkDmwxtFAC9AmciEQE9VE1dL9UWY8u1fduY2ZMLtMox-OPj0XHjQE0_pKehMTn48kjKK5JI0hrt-YxgO-0Wg97zbtfyJFNCTwo3C4QozUBKMP0XPTz1psSUxYgcTk9O6xddx-OURxY5JNeit94E19JiTLmaN0nDgfTt0lQh_YaNHdAnR-aZaFgM_31dXA3uorwCXUejgDSXWjTkkjnWIPDTaZrxOdTiA-lrlE3U-V1d6w7QyjVduJGd09t2k-2QguTZuEDBjD3ZCRHo3EpGMmToA95OGiCE26ObTPwEEztKGY35MuT73bFMeTOY4j15jS0HB0uqgPcHSETRg5WMmDuPWYPy9zk_eMzITY7RPPjceq-N8TRwIZ2bD3YyxOQzw6P2MpTg42dPH8YIyOPfj2SD8KRSainWZXTXI-t1oQ2MxdPdmBpPBPHD507jMEAa46g5NDWM5WY4zW03iL1KO4zB2vTBYweN1jE6F9PEjZ43-3XjYnNMN3jqaCDNvKdEy-OrDjE_wQloXY_-A9jlw0cBvcHE1xOnDbvaxOrSdMwFjEzeM1VMdyRM5TMhdqfBYAyTWs1TMoT7aBrMZAJs5WgszWEzhMIdi3HiORo3M6eM_T2HVABkTTWLL2Cz6Y42MLDos2DMkDEM_LNcjMM7LNwzwc-xNIz_4ycNijG1JlPBzus_TMmzHE4nOaz-s152Gzp0-TMJjJs8EjyT5s4TNJzlM9bPKTf-sbPFzXbZua-juhv6MmzSJK2YJAv1PpOhjNYAdPGTIAwzgnTPszWD3T7k-WRPT5PS9Pu8-45WzaDiU9CjOzVk-MPntVIwr3dzcPdW12qw8_919DANgMMTzx45ZOM91kzj0HWePbPOAzKkqzPLzFPbhO4j68wyOCoRE7zMTDLPUB0Hz9Yy5O7jMU-5NGS9s9R0C9485fMnjU86SNM85I57OUjAM4_NAzmmH4hmqTYwFP0Tw9MorQzMs9l3ztNVBxj4zByoJintT5pIKoziC6nOWzlMynMWzDM5dOgUpM9CilTLfX11ILBAD32Fzac4zP39ndOwwDmLWAe27Qng1SoRAtrLBD2sjrGoAuslqK1gSSnrN6xZ6lc6c01zOk_2Z4wA7XpM_9e0-IjPdzveFM9zD8HB39z2A63Mvz5PZu1jzQPYos_z289PP3zwC5RNE9R8_D2aLGg8-2czNPXu109-ixWNY9bs6YNGLIHXPMw9nPeYtszD02_N3zMurou2LTylvMOLTPVAD8z_064uAzyvQvOV0ksPSrvz_PUTyrgaPUEvETkvf_PkTcvREsgLUS-DjqqfZOr2no4ndr1hknUpIsVCAxSb12QZvRb2Hyp-CwamTdvSdOF9_kootAjmU-sAe9wLd70UL_ALwhcAhgkH199qwPZPD9EfWP1F9uffEB9L83auaLdXIzZ3njFNnOa7eFNE33B0rfdVBlLAy730MEQ_TsuPDCy_rBlLC3WX3zLrnZMvuzq5herELXRuwCP9Po2tO6GZ4P3TKc-WKMJ1GgQL140oxyOgC4dynLpz2oQaLpw8LFtFbS8wVeEHQVsTtBlS6cUGBdZTqtKuCvRwojPqRjGtYECvwrMxi6z8AaNNtBQrWekkqwrwUMCudQ06jiuzqsPXs3yDZiLpydtGi0tDTob06PMJT9qOUTVQ-wPiCzQMoLEBoudK-qqMr7M6vMrEF8_8gsG06POx8rS8wKveLhLvNx4TX86KtmIny5fCQA2QH8vdE06ACuSrQaNKuvzsq3h24jNHQqsqT5gMqsxAqq78sXWKWOBgArAeiAAWgZModDgYraHSurTCEGc1h0bwC8vdEcqGF4CouWHIT7TtKLqtaLhY2lPFjIq9SuWUvq23w4AzgIdi6gx2NSXngZi4vM6r4GG9NWLa88auKr0a4OB-rjI78F3zyyvmuxrRa3KticCK09RIrs6vqRVrPRLiu3tWTJiPYTkgPEuM6qnWaoxrjgnGv6gsOOvB_GDQI1CzQOCCWsxpsa84B9rA6_YBDrI6_Ws1rDKnWukriKyACNr4jM2uiLWk08tjg7yNvABc17tatZAhkwysZrgq0WO20ka3_rsrrLkKbcrcQM5K5Lf-uKuO2mk9XP9qf6FkBa6SsiYzHrIiKcD6hlMMwJ0wcAHeDeU-_MdzK6jVL3KMqrK2apJ6FDGgaxGM-ueOKyfHPPrzYLa3UtmI8G-kRz8heDDKyGPRDICvSDevDqKG0isoYu6uenxyh6Feo_JV66ei3rd6_qG6vbm26wQBhLXXNmjBoBa7RrgLCg6Ws9rQIE529o46z2vlrBq32DvsgmwKhyI78_OsSwEKwyrSkCqFEJ8gvADhApAO8kopkWDy-6u6GkACDKzAS8nUjVI88FKDPUkA0KxuMDcEPj_rS2EBvYQoG_EZfSq6vyI9ytS8ouZjM0CmNebewPKLOIMwPYDILwAB0omdEALSRJMS0NZbBQACJwB1ghotZtXg2EHyqtuEwEJrWWJ_CfzBS2qByrMayzDZuiQecy8pnghMj0EFAYpvoDigFmxhuHUUW6CxRT8Wx3gFbyW6JCpbAqkujxbWW6-2c0_JA_DqAjWwNsd4EW6ZB_y2W5LMLtUoM7QRdXtHlsYzk2wQDBWM27lvBI6gMBOcjiIoFuLQfZKWxTbYYJ_gJbR2otupbJuiJvlMR21MLG6UwLtBHbwsPtsAGWpOdvfIUwmwnH0h298h3brumdtcsF23rQxiN2x9uN4ZmqzoKqAW7MC_6vdGDtBbNAMVuLQm27MDBbVMwg6QwHiFDuI7sO2fxZ63opwaEWAA90po7MOwg4Gi5cr2otbLAoF0IOrUgQCzQH0iqILeUujXpMbRLM_P47GQIFvo7RO7tCg4ELGTvAbxW46zY43JfqCjrwULzvYQ_O2gCC7lgMLtyI80_hrJgtumfA4AD65Khc96amahIwrG5RYcIAsAfT2AR9JECn0gmAuStYfKD6DXNRwK1h04NhPrtq-J9IJhqENAAuQmQ-hC5iEIlC2btygpdI7z2bJ4HOKekeAEbu3Y4bcoA3k1AJBRcmagLG2QSCbekjhmBVNCj8AeAlHEgAhALcD3AjwM7ySir1qeBsg7wAMBegFDCERWgA8NkRPcWu9iZTA4ZvUKh7f4ndStC95B0IyQXQlRCgSnECQKZw_QnybOwqAIEz9IG9OEBGi94i6A7CvNMxTCbp6HOLOIIYsuK1iq4GlCNimUOwBq8q-NuLQo4UJFDWi7AHFB_wa-4zCuGP2N6KniJqFWKLCUwiTabRneCagG5G4i8Rmg2wBsL37twp3PQoN-0jIciswI_sSgepm_smo0yk6IGW4YquCjivdrYwYAyMh-LsA6MqchgAMBx0aMwe4hkDeivYmqSvijouQAYHJqIgfOJh4hADHi7AC2Ih7jQuhATwGEHYh_0gEBBIDCCbUabCm2ppVtAUycFqYFIspi3iBm08JGUqmaphKZMHNpiwe6m-prcDsHxkMaYI2zpuaZiFPB3RTMHMpnEBiFDphTimmjs2kgPwtxg0B9YsOJyVPGae3cAPAheydQzQLyCvtYAiQN5BPAcZB6byUZgEsbBmyC3ARCmfB5QAMHT1Kei6mQojYTKmtwGqbLQuQP0BXAahxoeclSwNOGjYlgJJA35GQAKhXAwskxLEk7CApYZY-gIknwIvMKCinyK_O1TmHPppYcSwFkFtDEoch5sDuHYwFUhiHwoBIebAlBlhzdtxkKuABHmhw0AFHR5k-JsmpB6WbJmwoKmYKI0e9QfOwbph6anw3puaR-mfwsIf9Ith_nAdm4ZhuY1HbG_2oxmhiD6q8S9qGmMSCibMFBiSFrFQLLk0U-GNbHlzNQBEsJSoJ20oYkkyvnrgdDmsmrbuEBYgWy0HvjgWqQNeZ74T7BjS2TofcLYQIpA8wPs4fWM8xNUzgvsciC0gvEjTgd4IgBo0FoFWx9YA4BTQY8CFoIJcjMzIicWAVbBlPxchU5CjxcKyiieEM2lmtxk1dU4vzxctfLWATUuJ6if4nz7BX1mmFJwROCYdJzGSWs5NM9yknr5n8yknJvA1xqsarCRaSoMRFz2xL6qmcdnreXnopAnmC7oRrHIMKptubPRLusXr8Cs4uW9wM9Ke6UwhGqfUAsp_hDyns0JYD84I6ydIJrSazOuGnnm5Ay1UzJ3Cwanlp9scynK6jqcXH-_kKsHwgHSqdRr5gBMfAWjIGab3HhxI8fumkFi8foWNk6RB2TDk-1QhaE1H1iIozgmJLaCWdGQO_H_x7HSAnmp7pt_YwoGCeVQkJ5idwn5TAiczMhncidksaJxcQYnXtKNTYnKpHSdoWBJyN1d-kcSSdks5J4Ox1n1J49S0nD7K1iMnIJFadNnFXGydUrHJzMxcnzNMd15ofJ6ai3LYC60ccmCZvhAdHziYmGMjlB7ybxtfR53CBngxxYdmioxwqY5wEx_GbTHFfLMfa7WZquZIk-oPkZ8bnIxKfrHbEt5L3nIMLseRgfZM-eOQ8hMcfQoRat5LnH4a4qd5SZiF6d3HVdAGfPHhxBCwQ9s8wwJHUrWH8f9n1AP1biCtpwccZnVxBr0gMEHRjyGdiJ9KMTt2RtROIWbZ8WC9nc3Qt3Pckg7MuUXyY72eBofXBYLtnB3ISeNnxJ4OeDsQ50OejnMzPGOEXJKAxeQsTF9kxjn21Iuw8ne-FOfwqpHWmunH6kv-eHjZRF6rNH3p6eZ-neaOBdBnkF1cQ7Kf0y4vIUsF9VTwXKZ48hpnqF8CcEuRsyjMxnfXXGfqSCZxXzVUmF5DSFnXLLhczM-F7524nLl8-xuXz3ORfUXivBt0rdAV5pwyddF5wACXB3EJeacLF9hasnHF2SycnPFyjN8X1aJFc3M0V5DQiXWV_hZl0El8zPSXpPbJd_nop-2uP8wdD-N45cO-pKKzWpGJIkrNKtWuKbyKzkuKXLBiBc-noFv6edXEFpJde91VLfMVr4S_pd9URl4hdRQpl9cjjX7gkdTxjB2DRbWX81LZfeS9l5kLbUc19mjWC2XDym8CGF9kbeXITNDN4XUQykOpXBE9hckXKFg-xhXJzLhyZXxLLFc_I8V35cMcMy0pLXXQVxRfPsnF2SzcX2HLxe4n8AvFz3XkNAUizgylthzZXZXLlcyD-V0pNZTnizecDzli_qt89_kEatAXllB1eqXYFz1dPHmlz5xDkrHekuALUoJD0GXlRGNd2nJlyAAoXU19TdSCFl1nPtUfWA0BWCy16lK2C78utdWXbgegB9YnG4xwDYxYMhfAA9Vztf4TOyL_oHXkNL5c3MAN2SzijkN-5cnXNw15cXXa3HLehXNZ3ddUnmnEOeMwVF-9drcnF5tonMUN9VRiXE5yih9Xvehrsj6NYM_1iL8x-c2Bjjgjedso4A6sdmXkpxsfqSH59QDLI4A9xIB3H4OsDOjIUkHd6Dv56lL_nH0-IgR37V8pegX4d_SPsAGlyRbhDCd2ncWAOl3vPDXDw6ndwXgmAhcM3E17Tf10Pt8uS7XjtznfsATl0KeGXGt1NOHXpF0XfZMHl8V3Z3fzAdeqjeaFrd93lRP5fG3Ld8-xG3RyrXfa3uSANN132TP0uT39gnreD3A1w2dxXo98Sxmoy90ioL35t-3c4cO96DcpX3dzczz3699kxMXW95vez3w56qNX3AOnvfsn4Q5ncYjfeOAMs7SN_JfWLx97muenyd51dqXjdzMgZ3D9_1eAPOyINeSbel4XcH3-gyXfGXSF5Nc6g019iiqjc1z2yLXlwBzeTE9lyA-Mwnt9fe93196iclo39z8qq3BF6Q8hMhD8SwD3RD-NS0Xt1zA-CXS93Q8r3nfmvdgPI50w8nMw9xPdn3fzOPdZw3DzlfCP99_Fy4PYj_w_VUCt6I-xMaNrI8ooF96w-1gYNykAQ3Uj5I-cPsNwo9332jxo-6PMyM_doje9-_cinMqziMOzIq9QOVX2GNkPi3BNgptBGta0RrUDRS3yquOH94-1LA9j5rZtQ6KLY92oUd0cRKXtx__eUPjMMA-iP4TzMjE3MQNL2k3mS_pdZMqo1TdoXot6HczXqD7ze0BAt74v-QwtwShYPBRm9y8C-D1Q_N3Wj5US0PfzDI8aPkNErd1Pmj1venK1wxQ8SPzlxU_NPMyNU-K8Otwo_n3LDwbyPXA55U-Yc7T_veNPlt2bddPBjyI-TPN99fezP29409GPGEzvd333ozWDO3cLPmZu3AqB7ejt0NOmfVXT5-mevn75-mdHHkdycckaJV-Y8AXlx5je_3oTzjcPHeN4Gd9X6PFcTTjbfLWMA2-6lZf59Zpn1jJn41-k_pnpT_tfHjOFyQ_JX2c7ien3fzCDeaPSumv3LLPcdhw_P_kLie8PQj5CyCPLZ7RcPsiLz5d63z7MM9sXXD2M_-8olzDeVchxLbcCniN2Y96rMXpevXH2N76e43p5r1fBnQ5Fi8Cod4ILf-QFN3mhoPC10C-JAIL3A9gviD_A8Zna14ffZz81wDYYPot_GeO2kL0-yjX0L-UxHXcL-1R0nQN6S_Hwa3Ko_qPu95i9ovVyystWvok7ki4nN19kxtnZL38wUv4GnM9_MuLy2efXIV8Jeo845z3rW3OyIy-FXXQ8Vex3pV3k_lXcWDY8AodjzVfwry601dOPi68BNuPBSCkCePGA94-JvBNn49MQATyIwSMITyeAp3Q5JE_VUT7AK_wAd4B7Ns8Fm-UxzXfN7k9DXXXCq8rEwt6QjAvoL2XfgvVdyDAgnTb9k8birb5A9C36D7GcV3Gr9e4zXSryzctvwr1K-bXCgj4_ZoNd5DQQ7mc9_OIn-r_FzxjdJw09UvfzFi-JAdJzicPsyL9kzuvCV82fK3NL5696PlRJ8-kW7J7OcRtTQqQddm4QD0fd7AplucDHXpruf-mEZshLTwR51Mfh7AsBuZFUW6y7cEAdc9iTLHhz5bvHPft6c8DvjkOc-h3Vz1WqvnLL6GvxTEa1cd_6nL11fqX7zxBeE3A17cq6X5N6Ncyvfb3K_IPDl5UQN3Td4T0wvV19hw4LhCzHr_XR94rfpXJzFe_0v_r7S9BveVwy8FXCNzJe3Pkb_c8KXna0ncvPXL2888v-Ny-9QXzPW2_0fIDIx9pPzH2XdzvUI8q-TvNl9O92Xmr5LcZaUL5x96vsLzx8ELJswa9wsgN_I_MPpr5Czmvrr4-_Q3En5bfBvhjzJ-q7zL3JdRvbb34sVXNzf4_xvmoz49uIjj0psor6bzNA80mb9m-I9ub95K6cBbxABFvIssE8qfZb2E9XElb5USvHCQPW-cdZNzBfbvlC6XeGfFdxk9M3zbzk9LvGD6zcJk9wM4KhoBX1q8FnFT-fdt3-74J9rcR79S_4vzn_rP3v4n35_CqQ5C-923pc-sDbPulI2ZEL9c8KBtmKuAc-noMd5MRx3Oi8HSAWJX68_dXGnx898vNH1A_EXWF_Z-uXI3zcxW7uJxgssnk3ycy8fLnw-_-fgX1J-TnIX6ajHzBHyjdsvJH6d_HmpXxd-Xmmn9d-VEed26j7z8vaK8ooc11O84CM76g4bvbH3Z_wAXHzW0nML32SxvfT1x98d3033Qs_ff39T9ifNt4D_RL4b_J-HfEX-O_U9I9DF-_j6H6lK1X_lHm-a2SXy1f8de-BD-Uw5b9VTlf1H0dQQPUw3V-ufjkB282oar0U8Moq1_V-MwG1yLcmCsttj-OXfFzLet33H5CxE_a3CT8jPZP598U_RC39dzfv3yi90_ZdEy9yfmX4R-o3N4xjdJKIvypdqfFb5R8E3FXyGeXLcTwAsNviT9A_y3Vl2zdkom1Mr9m0G1EO8Cfyr4u_RvBT5g-WfOXxLesfuv_CdDfBvzABeXgmGddMnZd4lc-vNC7guU_5vzT9V_tPwD8O_hFvIBznnJiOYDmv7xuf_vmkNudAf2R3ucBmB50GbNHx51B-gfq33B87PZBGUtLH7EisdHPmHyyBc_kxKHfYflz21fSI-H-F_3P8dyv9Y3f9-d8Ufl31R-Ps2lzPPI_DH_oCNfIgv2_03aFzr8lCT7Pr_VUWt9kzN_Ui369p81r0pLXLMzBcvTLX1ycy1PfzCS8RPr59bfvN8a_mAD2TiG96fhKYwvnc9WXmKdwfqW9Ifrv8UUBL8ZkNp9d5oj8C7iFpT_jQBz_pgtL_kg9jPq18rLuj8xblZ9Z3jZ88Hrj87vsN8GoIidn_gQBf_qi8llja8MXjcxv_q9cmASEx__pCxAARldgAdX9BAeADlnsICSgFADTHuv84AWVd2XmqMFZvsN5_sU99hnVc-fol9k3j0RU3qIwhfocRPfmL9KiKgCdkJV9QlnfNybmr96Tmf95XgQD5XiZ953iDAFfvCglfmn9UpKr85ftQAU_ltcSnpQDbPtn8HvhlcnvjU8xvh2d2rJrcBAdwDHwha9K_iEwGAVwDmAVMtWAaRtIaBwCS8G9c-Hpa8bfkICIAfb8ZBo78irkz8CjP-cyru78q6DoCofuL9ffi-8vnttRYnux0Ennp9nvgZ8L_kZ9r_kzd1fhH92bo4DJiFzdFXn_8R3vzcOvptcY_h4DM_jj9vAXj8izn4Dw_tnNC_uis45ne9IWFEDX_jEDA_vABP_vFxEgVN0FgSADNgU-9tgZkDyWMztS5o39JAEuYVzEpIK-q38vyIm0O_oB86KEMdfTD39QPoqYIPtBQyDvBRTzlXNHlvB8rur5gbulcs7ush8QpjP8r_iIITnqlJF_jc83zjh8sNgEg1_rACXfk6cSxlv9nnmd9vfnv8Yfld8tLkTdj_q4sUfhadcARYDGgeZchgVLc7_jn8H_uMC3Bkv11zNhwY-lP0UhvX0pMAG8Avnb8MgW-ZxAcD9JAXCD4AU88bjsiDyPigCygXD880Aj9XTlgCcQaqdzAbK9mvhC9iAcq9SAZj9VHDf9iQTq8fAbn9ETjv0s-tSDL-nH06QTP1b-oyDQASyDhzpAD4bqF8nfiD8ehj4tIvmz8MNBz8qrgoCouEoDefun8HHmoCF1poCiNIiCeQUgCUQfyD9_n78DAUf8jAbp8YLjgCCBviCpQbP8FXn1RxXqq85QeQCsfvtIebsq8V3r18M_ntcSQSqDZbo58bmOqD4gUPctQdf1Z-vqCtgSICFvrX81nqaCcgc79QfmfMHZoUDPQWR8AHjsh9AaA8hQVV8SbiH9agcXcJQUx8IwUCDMFtYDUfq0Co_uq91JJ0D6vm19R3n0CRbgMC0wUORpbqSCqnuSD1hpSDd-pqDa-jqCb-gyCqfsyDSwXuDWQSaDhzg38GhF1B1XORhNANQAu9m38QAOIhgUqCggQMSAqgN4AMgLeIsAD6ByQE5lpLNA1KSqCgYoDgA_weLByEEjRxrintSKvkA_wC_13wUcJMAOSAICHmABIszwQKPsxygCCBnwdvIR9M8Y0ACnsY2poBsUMBCz5AiA9lJxZEqKdJzQCnsAAHo4pZnQ4AHJzEoJGiK2UFDkQ05By6GiFjUPDbIUHChtsUFCK2OiHWmaUysHeUyMQu7ZZQGiE8Q1cCamRw56iDPKCHLiHRwSiGr4GiG0Q8SF8Q20yFHfkSOmJQ4UQ8_Y4AMSGJ7SBS7nLSEiQqYRKQvSG3AkY69_ISE0Qv8EmQxmBfYc0BWgSIBaQvKDUQnJwVSY8Gh7VCG4AcMx2wS8FUHP943gpORVLbBQ6WD9bMiJCGnyEugKAeQDyAIAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};"],"sourceRoot":""}