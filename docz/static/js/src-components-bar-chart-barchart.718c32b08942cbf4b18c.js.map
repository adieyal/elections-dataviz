{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","tooltipDiv","predefColors","svg","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.155fe93c.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={vdNumber}\n                            onChange={e => this.setState({vdNumber: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJGg2D4IISQPBg8gCP4VVUAFe0oJguCYIvIhAhyRD2GQyRUPQz4NxoHC8LokVcNogjz0Y7JyLtDV2CDKU3RNBVzXaCSHWAdhNB8eRZLldoAAEYCIEQBlQDCukUgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ28gAWQL2AANkC4L1jAECADEfWgRJvP4ZxDkRR1MHYAAFIR-CWfSfjgMLESSmsUpoZwIGsy52AARiikL5HBczqEsgBBOYnPYSMVNI6B0HDdh5E5JyxGGmMZHYVEHJgbhgEPWz7OxeRt1rYAxqgCbggAMmO8ZEnmShmgOo7zG4e75TAUJzJ7VB2nYAB-DZxvDSMZquG7wy6mspBkat3zMWFJMwMAwigKY_tm-aQYGlca0TaSCBwVLMhSa8CF22s6z4gj8y4CY-BAOKfJ8_hfBgCAUkISmACYWdpkB2C3VdExJ-iRKYrnCbrSRMex3H8d2qRUfBsxvxADiMIzbDBPw-iiJIgiAK0CgQP0BgqMkzGlhU9csKzDSWP4M0pXEyjIPYIwQjsdBk001iQFdu3DYdZbHKtkBPWItCtbOOBvYd4B-IIS33WQz0-YE13g9I-i7aUqYYFYbD3fjyQcE9LPsIj6iXPWM8ADURHgbVolcfUQosM8ivoxJHCgYU4Eb0cCBK340EROBa4IVwzFjk084LyRZggEvJNc0KYLgGAq9oIe6-7s9xWeagADkfSZVBx6QwPPSn8JoHDkAKLMVgYP7IQ_nMmu66G5vH4Hl-R7-m_UDvo50B13FDKeAeBLACm6M5ZMfknatRpj5X-T0XqGR6FAfwcB97HkjMKRmaBMEwBmgvCwXQCB9HMH7eAABtHBnl8EAF12AAB9GF7H6LQg-FFgbdVvvfVOIoKL_37K3dundh6uAEffLoIC4B4AaHoAQd8oANG1ENBB3VBF8IILqGYr07DOSIRseilgLotX4KKSU3RUrCnYKveAZV1iJD6lgWwAAZVwgQoBXH4EVc8op7Dnl3pYPqABxc8NjdSWHPM4exNZEgV3iIyK4ORuBzXQDgOE5BdRgFsV3Bx8SoCMisQIKIBAriKMZEjcp3QADU8oACkpkuHmTQXAOwidM5YFAugOwZtMxTAXquCyaJQhSmFJGAclA7iEJ5ktUIcJxmDjgJ-GZgjl5QGaM5CYtgKJEwsFsuAOBURZCGgY3Z7BUChCIC3EUEB4BXAAKzdzOUXGg2p4DkH6DowyXiQDs3auwfer0-yXi2K9GJZziEwB3qgYx8wfmoGiIZeI4KIUTKfoifBPyUVnKIM9CAmKPbYt2biyijhMBYpAE83ZrB0C70uYEcshLKUzOBmciAzQFmTIORcq59FblLLLujXZ-zDkj1oDgHl1yYjwCGhMu4ErLlSv5Ts3ZrLdnsuGnKg5XRoWwoIYKiFBJbCiqyGGKFhk9WysWWa3VJiVVEzVUTDVnL5Vos_vg6ZQqiYiqOeKt1z98FWq5ekj-AaOEspmc6rVOASX4oPp6w1PqxX_ljYG5y0bU3hq9VNSNHKM14rJfq05wrCQmvFbGwtQb5UVuLPa2sjraxRutTSulokBAJohUm01Lb6UZCrQcntba60WAbRYJtwbcToELKdB-wbNiM0IB2s5XbxWTsLOm61a68DDtrCu_886mZTA3XOhmh6d0aQXMvA1ELBHFpxU4dlAB1Kl96WBgAABIzJHUNEVZ5H3kzwO-09hA7zOA-UEVAjVmo_y_Uag5vr_xbqGvpN9j6d17NLQh_AwGj3sBQ-y9956Zkir8BgWA29DJ0VnJAuD-BKjkfNdQKjaQcAeFUJGfZyzs0kfozAEqWdbkjHPNnLMmzS2kfQLAfjfwYBCZE1jNjGAOOEi48u0tXQJquBGNHH96nsiZG01rRTj5ON1rVYMzCfTtRcH1G0GgiMBnZseJwDle6cBIZnW5g9i7BUzOcxeqAV671c0kLWW9fnQtE3w2AZ9EXiUPo_XF79YnjV_oA0BhdBBQPgboFBmAMGnORdo1hpDzlotoaS8V5N2HMvIYS4RuLTSzmrIXBsuDO6RWaZGMp1LY5HA0FcGgKMnIlh7tU7sqRXQZFyNoAo-IyihrLwIDNjIijIyIxSdes5aywA4C65GHbp4-sgUGy6AQf0liHYQ--M5ShjhAJgNIsBEDxtE0PJck84VhP6BcbYUCUYXkEAOaKc8wSGi6l3gAfXsO-vqu9QmjfE7xijTHSNpFe7Wd7-McBffk791E6RzuA4OTePqfjYeiksJDoqIOK4NHPM-2jEmpNdBk3J_QGOLC4gwKMHHXZvs0Hx_9871t4BNSZJS2jGmDPRyWOzHyGOmu1i4ubHUXAACqMxAG0Ac8R0t-3f3HYG0N87I2qtZBu_W7qRMVd9P_QkdXqB9LPQILr7NFlKCwBwB3FI0YQAp1Js9Z3NB-Cc8MQ6ZyFyEg7qxyeLo-ls4C4IELwnkZic4BB2DiH0PYfw_PIj41zOYAo9QMxghMfTgfZoGahPMAk8p7O2n-TJOycw7J1Tmn546cM4Lwcov0nBNJ7D9zk4Iwa-_Dr3jv7qfRf5GamVKX-mtPRzD-QCkAgVtzagJGSboDN-KOUYr63tY0tTsAzh7LXRcvi7d81--5Whr6miHgGNaBIwAA44FLFj9Xrw6BEgfBQC3I0D_pn4Wj-T3IK47rOo_4KZOAAFr7AEECgGFiMDsAADs6B9ylur6T6Q0sBrG8BgBSBKB-I4BkBO6gi0W76dWqGkgyYOA9yO6JCZCW28WqGL6tY1BEaQqSukKXW0ct-uyzm4WhWXBCWsWYhFg3BYhGkKWByp-EwGWh6l-EGeWBWZyzmzqmiOBtYzmFgmie28AaIlAiQGhwhoWmiQ0LoYwghhuBA_WI8JuF2eGEh5U9WSwa-6CHqO6zmPqY4dkWQI0W6Vw5WSw3mpSrhb67600Zmv8RMReJeZeTeHObBFggiNhgRtAQ0gORhThUAHWmGARyakYmRyauhfB0wZGfGrOg-8mKRNAS6YW98ZRxyzkuRmA-R0BHKOhsGhh5QJhZhq-pMkesmDgBEPWChRuThjeZubmW6veZa-6OGnhLSGC8ahRxqS2WR-WrRtAFRx-Tc0xp2w2aRk4Y4rBrshyC4oKkxZqYAA6TUugMxGQBx2aq4U4faQhRMLBAg5g0Y2aRMsYHAXhrS-ClMAeacIAwshqwJqC3hB8a0oJ6xWC_AmiFoMQBAsAoeO0-0BE2iuiHwBEeqGkI0W8jGqA-Cdx1200VwoMcYsGQJi0jJE2j2lMfw1kzxJxAgdMLJNuax4J-0ApB8fu6Jf-iQOJrEgJEKEgu4sgLJ9J8p0pbxq4-2XJJuZIiyTRBhvUnu_4PufuXWBQ7ABcrGmsUJYeLW6yum2yKy98rA1c68I8LilAnYfazklcjpYi-oLqSylB982urgLpbpAgei7AlCDpa8YiwZ04dC8R6qHKAAhGFCKG3J7qInXNqc0UcCmfZCIqGTGe6T3FKmmR3KGeYWcoGYWaGeknkHgOMsIumQWa6dOGHpURYH3EQDSDjgkJGFWS2RkEsjgBMHQJGEglKIZJGFUksipLBoIpGV_K4ENNOZQj5HGbBrmaWRmSPLKo2WWU6UucwuwCua1HGYahYLBodl1sEpkDMPWeqWdpqVyksAuQeWSHudua4G2ZyB8NEKRGngIEIEcJth7l7hkEBQBUBZyEfmZG9gZjebMPeSdhqbOncN_hvEIqmfmQeVmekbwgRGIruaGSvF6XXH2RhVqmHlKYaoIqVphcvDNr6e5gBlRceffBEURQxfZtGhEaxc6omb0dKQYSMecmMYIQ-RkEsAsfTJlqsQiceKxaBfqZQL7miaTLbvoAvoJYav0QZpGJomIu-VhU2ThWZmPN1FDA6DDHDDRGrPwnLEoArGhErNxEDqrNHO5cJKJGkoBNoM8frOBD7JqOaCbI6MrBbLnIIFqHPA6LoJAHOAHFPFPHFYzDFVMF4CIKiLeXZCtHYAHBlUDmiLMLuKiICK0kRC-FlbMK_qgB8K0mlUtFtDKolRrCHPzN5XVVfBREFTCM3pFUlYXM3g1cWmeCChOdQEnrkkKu_P3M_AeWPP1WfJ6DPOnGZIIv6oPIRR6WOH3OiouQVmYOOa9PCWCSKTQmgPYMKQpWwb8eYAVVVTMDldiNQmwhdVdTAAwkeRQnAC9bgqXu9Z9Swudf9fJTAJwt1MiewO0gLHmNgF0j0pZq6MWhZqgFlSMhEOdpRWcRYAyPMpRehubtkfonyTCFePoA-D8kICIESoaoDm8nAB8hAF8tQD8n8lFACoir2FAOwGNWCsykJbWDqhaiYj8htRLpwWcmLQSvwI-sYRkOYPYLMOLSTZmseBShLcSgWsWOrSTYOgyjrQLRYJKnyncuwI8oceeTceNagJNVcJQnQrBg2pURpa8jZnZq7rhWxUcDtjaXAATaNbANbZNX9CTcOZsKgGOc9NbeRSPJ7TRffFba9JNfgXXJQvwIGfwHQmnSAPEFAJNZnTGrMGnugGkEjNkGkNneUIzczQGCAHQroeebWFdsUUEcAInYZJNbESTdNL-QQP-eBdYiBbqWBYBWMgPe2jBRZuFWrugJrtrvlk0ZURNfJvTdXa9MkUWrBv4QQDsSNHTe8p8q9FcP-CPB5GODgFUl3bwRbdQCXnqhvZ7RkbJjsSckLdQHqsfcOTBGeBfQkjAPIATdvbvXseXquEvagAPrJmno_QnfJtYWJXkBEEQEng0UDjgKTuTu3tTrTvTozipJ0YNp4oTd0FfYagQSwFVH-XgCg4DjBWch8XQNOMNDA0cCGH1A0LvENClSkDgGwxwwTaIY3RYDcfjA-BrUTPvQzYfYZOI4LRSXqksEIyTVLQfLI9IXivgmo3hlrZgFo3rZJSTcbTcvAFo-3cvcXNKXIcQ_GXfkcL0AILtZ_FtbOntQeTgJAPDFGC8HpEjN40QBKgfE5MentR6queudKbdcjI3cCTCRCkmKmFJBYuwEUjYo6VDffDpjDTkGBofewMEoTpzeYJWKmCTXCciYKeUyKfwClMUhaCkEIHMjibE9E2gh4mICCvjI0ColIK0wuM0-eYwGgDMOENRUI4miYpTLQJ0ryYbeeZU8eEie9X7jU0QBaM8UIFAJKSTYauSBYsMIdBkJTOiRJTySANsxCqju4GkGtJAnNEAyUW3WTTQBTTCF_WfVjJfZyKOmM3of00CXKX87smU-9Ys6Dcs8KKs_U20DME0-c0Cb01AO03Az0-4n03C7WIwGsqCidSiatEKWC9UxC2syBBs1s7M-eVUjcyvQfUza9N8z8xYJc9RmtCKuY68jSzXWXqxuxpxjtOi4asFgy7TYHUnc3oXTMJGH40jIK0K43ZE5GIwJMsddsDAIkGtH4xpJS8ABq2INq7QEQPIFIEq4ZGIA3bKxCtNPyxa1a1IFi1KIC_82DOc8C6DaC6daieAES1C40yAF8w63Ewi2ICXlYCYiLIGza3a1MPM3i9G-C7U-s57mS-a0TFq2_TCiYvSwy0y9c8AKy6gHfSYly8ZpMX61a2coqzXWxQUqtPwAikCps9CXW0ilAEazXf62MxW8dZS_wGLeIGLa269O20I52ygt2yALGuQEzfEC8BKdCRO1O0AfZAOya2W0C8ayyGO_O2FIu4kBaDSuIJGcaRQ2iLEAQMu9QEO_85G0O4qUOzK43TvvI6G4mc5LW4U8ir6-wDOquy6-6zG0s4S7U96zC763y-S8O4G448_BzceCi206u0CZGzixUwB56_GyS4m6B6M8m_HdW2tCo8eJmzh3sKXmjni7c8Vi3TrsAARy1Cfd_efZ8xpJez8_e8R7WGLQeV-2dJx2IuK5yntdKwh0K5EyOyyCq2qzR6GoiAE4R1W4yPh9J_-AioR7q2LbJ__ee6gCx7K5a-Bwy0R0K7a4nTpxiwC-c4Z0TGx4ao-7avMEEx7Fu9O_ZKHtxz-4tNG267i3G5Cw0yB6W_pwM4G_qHipO9uzOzBzAHB2i4F7CUh55_i3-z58SzQKS1h8J3fnh8AKrf_Rl7stm-R0jPc63Tl5_afT_Ux-wKZ43dZ-x_Y1B4iIRTOvV0p3x7GgclEBK7GkJ7Fzh6J-u-YBJ2tLGjGhowfJq3_cN3iqN5RPgriSNzl4a5IAN9Vz83p-x9a71-W-xCZz--Z-B5Z3tFa7Z8LfZw9PwE5zu3u-gK56dO52wMh4iYl954B759C7C1t0C8F6FwuxF4WtF4i3l4M6gMM1MHl96hM_wFM6IJzOD8riC891Sa9ylyYQ2189hxtxx2goiPs9OJTPYEVJYPwHD3hVlzWpgId7KwVzc0V0UTvQ8-T3R28xV3_dNBpCT0LHt06wd-c7V2cid-_aG-d-Oz9-F_ZNd7d8dPdyCQj7G8j8Bx95j3WIG6vMadZllaewCr2gIAD6t0CUMyMxz_ZPMJM3DTM0r_ya64j1U2h6swm2j-z59zs9jzALj4c_wAAJzoHv7Uw-T3L3LE9O83qTfAD6MCCU9CvU9t209bFUf5ah-0ra9lcMcfOs_o8c_cyfe3sWfOseey-ocrN1N-eK_muMCButoMrsBZLFQm1wC682sG9g-ffG81sgA8oMrm84cJdy-28o9pfp-fe7M4-e54_8AB9nOfdatGPSpwAR9nJR8UfFfUfT_8rJ_vO_3Vts-c_gfZ87959W89-F8K-gcseMAeDhARDmAt8QkX_UB0xMZAE7AsulrUCQNj7Fu8uPcLPW8eseAEC10zRakvJTmLUh75_9UAFoAcAKBgizsZoO0N_lIHP43AL2zrfbgy1_a4svOSPXvsfwC7Jsy-qLRFlkwKhRdJA4bXrhgJQ4EsQAekJiECBL74DKG2nYAMUExZr0loaESmAABJgAfDXePIC9DeVBBTEbWOIFtZr1VubAw-mIBkSjB2kAJJXgQQDp6R9Ad4B8H7h4EiNya6ALqL6y0ZjM-eQrSRmvW-QexNB1LKRrS0Mi6D9BInJ9nCjMHAA02JJGmpj1o4_IeBtHGwRz1K6ODFurgjbozw8HZcdGuXfmhbzCyJ820wQsPt4KD5nIV-ptfgDwMSGz8Ah7HEIvFBpi2CGWERK4GzFpjxCpon4cQdILqBdAh--WSQNGF4A8kzAjCXgPUMaHtongRAJYMT1A62swo2nG1mgJ-a79omfQs5G8WBiWUpg1lUIPDHSZ2UGITEL8I5UVgu03K7SVqoYTDhAR_KYEQOOiQRbXp6oloOfC1FaiME9IKqIAi6AtB5DzkELeICqioBlkrgHgbHtsHBpmQiS9EDEi8FgB7CQIFoEYDhkeEj9XhZgd4SKAtDilBUTSdJBkERADY0gFoXYQYn2EWgKEVwF4NO3IDAjaqVhOAKwDnAGIJ8AgMAB3BGBlJbAEAJ4d0ETJBV3ABALEaCKxhoIz616K4VFBpiBR6Ru7VwM4jgAIjCB16EYDYFoAojqoLUH4CMFvKci-RHiAUUKJgAiiLEVwcUZKPMpmRXYYAcgCiLxFLRtRBI7OESJJFkj8glI9gNSMgi0j6R7gH4GKkMgIihsVXdgOcO6BIjoAUAC0JMklAzsrgaiGsFlUoAqsrgAAYg94hiVUfolVn8IAxXBWoYYkwhGMAQyIYImQLKP5CWDJh6REQT3DEBmBlxRAoUSgPkCPohAPAcAT3OEDBq8BRAVY9YNDwtDTsUgXkHoPoAyCqhqx1YmsBQ12Ypi0ATo8ER3B2CtjKx6wMKF2AKBXAYoWAQcW2OSggRoxLMWKMSF5HLx-gYAKcesGIg7BvWGAK4IKO8aDiOxtgLsWiNQC9inhpwF4euOFDThvRHIocXmIsBeABA04C0JkBYB5ArgAUScXeKHH5i0As2C0MTiVFYQ1xeYqEfUy4DXp7hwoK4PU1VacJ5YiwxGjxE8rqxk45pEUNrA2F6wthPVJ2P4GOBuwA4Xsa-BZSwClwjqKCcSshUfJkwz84RFYl_xgBLABuAqRzOsH4osSmiLEk5AA3WCO8x0SZFiQyL1RcSa6ByTRJalfYgBzE-UFJjkjtgjp2JgksSTgEcQ8i3EHiUSYSTUmuJ-RUknxH4gCRBJQk4SSJNEhIk1g1UHElSXEj_paTDIByWydWyGgUTqAfZLMpEzSQZIskOSMypZKUnDREyQkpyYUhuEEB7JvUVSfklCnFJogLkqOq9CnJ2SzikTKpOwFqTtAGkfkxSbBVonroMCNMFVBxWcjy47h1EjINcRFZ9Rey_AXEYUF9bj5s4B1IVIIgAAa3I2wFkgeJjgho6BH0Sm3vgABNDqXAC6lLYho7MOtOtQ0yPZsKQ0bOk8MZAL5-AiQBcCSOWlRUbuddGxl7R1FzhnIJzHHHMEYZ-46poeWDDjhuAi4QAA4eAKthgB9QqooKcxD2A2lYB9QaAQaR9PMDHgxwoeUVCtD9wbjtgW49AMSzLL2IQAgYsADDNhnnTpSl0tEH7jZw3hvAG0vyH5Dpi1JIwW6apO1J5FjSxwgAj2CTOxkRFqkw0gmTDKWzQULpyJbIKdLxEo9NKkuYZKA2lKrgRC98OqVw3KkCAjp8wJTLVLxHwyiY-hWsIjOulboF8KZLiq7i3TEz8ZnU6mUTM5lFYLAksv3BERllLwYAjFXiulPYCUzlZ3U8KSqlXCCJMx8MJmtZlYB1oYClebHMoPxhwA7wl1agVbOzGh4wmWZT2TbIe7OQrikbP3MOWEDWz_OZmUmkFmIxhzsxts_AgwWDn8BxS_02YILMfDp02A50-8RCk1lok1iWlVDn7P87chpxOcs5ADNgB-4PRk7FzpLigJgN1gFs--D4EDmJy4gsAaCEpjNZhgrmxeOzI-EoRKzRpKsggFJQAz10m5LU--MkDbmHIO5MAX7C6Bggh1s0vc6jKKAHmRhKEERJYMbJHmmz665soVHVIFknT-A9UnudECRlQ9MgqNFZhtKKqo00EOudmPuBADVJIwERSQCzApkjTCZhEFmJyGqTnTfWMyM-ULJADQ9RZuyPOToALmS4e-GSfQK4HhEItQ8V8q6X7iflwAH5kua2CICCIWgPeCuGBUTGHJw1sENkpxLpM0ngLr5102se4FIjCgNpXZLsNiV9bHyiYp8tOefJACXz6FWC_OegjekhAeRZCiWQwuwV3zcFELR-bIpfn5YfI78w2RxSAFgKwFNYVcLwuOmQLBFa86RSIvqr4KQAyQEaZIo1lGKoFsivBe0JsXuA4ASiv3IbOHkAL0pC-UhVoovLTyjgwcZwNqOci6L05fuAxRXOsXIlC51A4OCj25IYKpp98YOJYDhoBL9pe0iBRnIEWWKTSEShBXJSS7Jz6IcNWJSbniVTzvU-uAzPFOQRuSDKFFD8qGTERZl1qDSu8Gmhci8Ts0UaBpVxxnSblsKYiSunXEzrZ1c6SqOxHXWzrl0Jl9dbGphTzImVBl6dYZZMv4BjLa-Iy_gNMqvh0J3Gwoc8JKHrLTKeujdfpU2TaUHxKE0yiVMWA04MJ2iJdZTrcqgl9ACa63VVBbQsCuTzAZ4VKK6PzI4xIgJZKkpuU0acBPakTM5WWQuXHhKEoKg-IcnJAvA_cfIX1mE0BoPxsgs0kypQggB1JbpMMbCt7joApAJg4TW7DMlwDWhTs-lAinXH47fLho6AOOucVIR_FjgGnN5dBX9JHAuyqAJ_FgEGnzSVFbUGmOSoTLDQhJ_-FTrEEGk0K4AgKogNFPgCe0-VAqwaZQlPIJzC6WAWlfREMpGgEpk5ZlS5FZWsFgpyq9ycqGKE8EzkABalW_jVXcjBp42GZKfKTmBxcAFihqTgpeCTkfy6APoIU0jDQIFcv5XslcRGmozkBRASMFgG5Vuq8RlU24shAALeqfyvqxKQGqDWJTQ1P5DudvkjXqTHsruRIGaw1kxAdgcASMHFHLUmlK12wIpCUkjo1KI6JqlSJEwtV_0m10QK1TauzSW47SfipeENH8VJrI21U7fHUB4FgCYIOJYoAGrIp1LY63C3ZMHAOTYBkVda4crIr9VuTt1gazILmppjbrrFs7JYN8vclzLIUbK8wGYQbmWNT1wikANrPrnbqKEyzV0e6OqgzsF8rUeUbWounx4J85hGZOupwDNjTcLJDJX7i6C2xvF55OBZEsQWodg4GC6DdYqwAL5GVV62rpE11VpIVOBCapLgGIgYAt0f0H-f1PPLvLDUcC6WZLlI2VAKNnIIwB70kBwI61Vi59R4wbZLA-yigCADNE2x4aLi7K35f8qbKKrgVIpLya3DkQpQNOSwITQTRHRcaTSbki7oMD0gT5sNRqtye2u_Hgcg5idEtuizgU1zf19cnAO_lYrLpY5_s1gDuscV7qI6pcn8cmz2w5rJy8udzeXKFaVz8s_ASzXXKWA4APeyydsQy0ZUrNogMmrBERpZVnJImRGxFYuxRXey1yocl0v8NgiUg_oZqSoZGD5C8APAjQkYE8AvX6aI6UATkB2rE3mAoAoczXHCEVrLxEYtGoRhH2Lm2z8AxAbfLFt7itwqScm1MgpsoAadiZdMH5IbK7XVse1ruObYyHcm0zeugWv3LADAAw9-NVxXImFDSCtSptN0rDWAqi3mt1tUPSZAvj7IME9tqCmAEKvAIsxbNhsntidsi0Wc_N34_zRXM03jttN-wPTa2tw1GaGWJmkVmZsC4Waf1oWtqHZuFQOaZgvWzNf6tB3nbD1wa3zWjtlYXaQAIW89ewAbk_bVU6muBQTsvWGbZmkTe9fDs63hLn1r6pYArkNTlKIUY6nhhOt7LTqf-QW_3HOtA4Lq9sS6ulbHQw08bXR12xYOCqRgSaEgAK2UPFvyyjb7I42pTeCtJ0o7910GjHcetIUC0ydQO62kyqS1mr2VZhCvlGCW1K7oKtO0ndYsZ2GrW1xu69XI1vUyVD07AcAubu15ULtJlq5lQmoFp07dkc5RJTBGSWdIwySSlJeOsTqTrIw3O2dbmGmYC7F138ZdV-VXVnJo9keiDc4g9rQbNdbm7Xd5rcl5qxdN8sxYbsSmU6xm1OyMMzvIKqb-1jdXHbxu_WejYd_6i0IBv13Aamprq6UjnrQaQaCtfCyBdAoQ10bcloilDdEqKUp7VtrezDdXpQQg6qdDW9gARsm0kazS5GgDJRpZjN7g95C6xUwvMjDBTm9i9hZJglx26eNvww4RtNajzj3tFe66eTuq3r669m-mnZ7rNrH661w-1JcmqlDx7E9qGhfTDy-aC7AyeqkUE0sL2UKKdJuztTZOVULbfdDkqKX_RW2AHC9u6rNSXqPWTly9-us9avpZDf6hG9ei3edit0raZoTelkp1obSdZjCQgWeY7ujpZlT5_ehetlKmgITnKxOSQKoGwCYS_K2EgwOBCGRSRQc4OKHG3jzxDRRc0KNZmRzthyGMGbeSnNgy7y4NVDfOtqmCNuls4tDvUKYPqD6hFR9D3eR9EYc66QDaismVamMOOCPYbKbBTPIoZzxw4Ecq4HQxTg7w4Me8q4aw7Yc7z2Gx48w5QIrBnhiGIwGgHWMBD0A4TI47AAaJ7g7iXUkCU0SKrMGyOUA1mQBFmRnFNXvobgMwJebsGPgexCjCQYo-cO2CXCqjgfHqipDkT6gdNAgNuIcpIYFGhQjRtZv0YtBoBjw-kXo-0YdgpAAAjtzQDj1NEK8xjEqgsD6QwyJ88M8M4AlBA4xEdRtiJkERAWgamKI3Y1fA2OlxgAnpKMnXAbg9wn8aAcZbP36qSAjj8o046-XWN_x74NhhoJDnVyigGgRhwgLcHuCPAzGqNP5B7xwBYBEg1kJ4LeTwDzGLDqNKNqUdEyiUxgWRxo7kf0AjR1gzRpUWMUqO3AajI0XIP0CuB_GATQJpYHkBgChJLARSAAIqMh4Q9wcYOiCYn0wQynJ1yCAEcL6ALQeqabfUbmCP9CmiJ5Yw23yPTRu4cQUiGKLGJdGejfRpU6vL06XHJIjK5QUHWbxCFImiBE8LMfZNmFi0ppjICmLmNQBigq4YLLnWToysq60jO_tmidqrg7Tlk98E0ncO6mdqPSw05vuNPV5LTvRgk0KjDPWn5jXpqzjMnWXGM7AMrbZWxx-CYBauRGkmu4g8C1FCmJNF5TySD2O1bVVuIVLGf7W-nNjCEarcWSU4HkhC002aptVfjOQ062aNjm-2PD8Afkv2dUEKHSEXkc6HgHMwJjzNIAPYLiBoPqAHOOc8UV8O2gKdo7dn-AvZoUP2eZQi9ZuB8ZcyAEnP6hkwyYVqP_pvK7G-0wSCAIkHcAQBwy55y85RAdobnGeO5vcwedaj8AlAi5pTvgmfOGx1z78nLs-anMHmWYx5s0LNnYAuIxw7iJcpQm1ChAIA_wwLNsA7hXQHz_50IYBf3PJgWY75xQJ-abMwBvzSAFc7-coCQyALxF3c0BYPOgXTzRwSwNZHcAQZwyDFpi3QDQsXcMLlFl8wedwv4WQm257i6RfItjcuz3F6i-zXALQQLQRUPwK02FAjAYLsl-IO4gUuuAOLm5iAIWkwsHmoofFntl-cEuIASLfZsi4-dEsS5jLVFrC_cn_1P50QsAWcOGXfSUBsgVUdEC8A0tPnxLNl_SzdMMtiWrLq5yZGZfQtbnArK5oC1FCPPgEQu-QBFOGW6OtI0A6lkS6SmLA6Xorflpc0JdMtpW40EV6y8mCiggXYr4QeIN0EoQhcR4sAC0E_nyD5AvLXFoK1FZwvfh-L7qIyyZbXOhXOL4Vyy5Ff3NRQ3Y4BawJMIPhoIWLwwYYHeZOChAmr6VzAJleTDZWArA13c8JfMv9XMrkl9gE_m2B-ATg4ZF0vBbsCWB-gfCKdAta0sZWfLxVvS-1YMsEWiLQVza2FYKvrWXz9yGK1DQ7hvAMgc4ShKjNIiXJJA-oZILXAEDnCUg117S3de-urXnrXVja3la2sfWdL9yUq5kZSDuArmiVvUgQHUAQAwb0QNBGglhu3WWr-5zG4jYEuFXgrf5vq-jfhsjW9repfSN8NguMMhARkazCDIqsU2lrLN2m51fptvWmbL1wa8mHuS7Wio6ZbYIpZdDhkiotyWbHAHP4eRBbn1oCzLZFthoxbqN965LaKv-9_9kF-YLVd3jbBLkMwa85QkgteBFLIMyIJQC1sY3x-H5p63Tc-vi3NLxtl83FB-vWBoL1kAUGximsh2w7EAN23dcDt62MUyNhm71b9uJ2gLcULG-bbksVXwyl4IAqhH8Ax2qbyYdO_HcIuJ3fbFFou3FF2u2Z_RKQEK05coT7wMqRAdy_BYICF2pb1d0u_7YrsWWdLcUWy7FYfQc3Obu8ByH6MiCd2irg9nu-XcNsS3U7-5uKHFH_03gFwrgC0OvcmuUJH0MERiJ2GnsB24oc9g2z1fyv-2076BOyypRUsK26ASlkQM8DHCDl0QcAI-1fdPs-2F7Kd-m1OaijoEfr54O8tSDlC2YcbnN-yyaPfS50P7-oAB2-cev-WkbZ9kKxfaXsAOsbl4CAPhNsxA5XSsAFgDeaECUjQygCKAHA8wdf2fzP9yu4NYAes39reAUIIGomA-hUFMF3eCkEUv9Agc0d_K3DapsMPqHuV8-2jcvvwP0Cu11KFBedv6RwyMjkeHI5HCUOpHIj167Q_7s-WAHQ9vJmBb7SWA3g0QK9EDb6BpBQyNTQiLqDwBsIjk6ASQAcoJzsrDHxEIHB9QEeU36HWBd8w7XdOcEOzbfIyx7H1DDMogaCWcKPHCHnk1lw53M3zR-T6gioM5pm_OfDIdX9b61kJ5chUsRP0HhVxJ9Ah-vVSGUUwFxOEGYdAEc7BSBW4ikoiSBFaGzFK9PYKc-REHnt5B97Z3NZOwnVzSJ0beRstOsb-oBkNsHrGKWc7xSBcK7Y8dC2rLgz9R_wG6c5OcbeTzJ0VGgSMODr1AI65QhVs9TxQ0qMAM0_Wc-QVrSDnK3M9CfLO-ni9_Jyc9lsQAsAsAZIAAGklyOx48OGSrhQBtgqERBsc-gQPX2nFzxZ1c_CcrPxHAzk57o8gs1PwygRCMCKGoAAu_eCzkAEs_Bc3Pf7az6BKvfALWZt2d0xu9BHWSHAUXJ9852ta6dgvenqzrpyc-vvgFgkvwdwHtcCDbA7b76BdNnEOhSQuAaQFF-gTRcYvaXkLu54eZ-tvIoAUQOwFzelcF2ZnOL1qG07wte3RbmTml7k7FdKusHPTvAI5btv_oCAZG7YAC5f3CvNXEL_p-K9ais27IRcKwDIn-HZEqrXATAFAA1sw3FX9Lw82c-BdUvKLIrrV9a6Ve7WRIrgA664GaiURwy292GKiDNdAvVXHT9V9S-yeYu6Xgb9Z61F0fWBaB5Izmy88Uv6h9XvTs1x7eTcgv0XlrrF3Q_RfZu8X7AbUEcAABSzgNm0IFGeJXWH6gXG2a4pf-uUHGr9N6K5Dc-uWYQdvwMRHGL_DoQlCNwGxncdo3BHiz9ZxO4tcjvg3tznF2zDsteBRIO93eJegHDt2AXbMDdz063fYvx3rN9XEQCJsYA7beEEp8i-9dZvsLfrytwG8ueburX278d7tatuRAo3dtoD1EFDtnuk36ThO_k5reZu5na73RzeDrLn8dg_QR5bG5Q8jJtg6HgV2-4Q_YWPbvj27P45ZKdnLLHsYJGEFAj1TZGMTkc38DHM_JgkRPKJyzs0upPKE0Hsu4Vao_ljZw8H_gOeBefq5_954a2wIAqd0A7bjjsUJUGnvCf1caLvjzR8E8gAWPJVoB0QCegGuvnFwaT55C9fLvPH6nywJp-U_UeSVanjT7u9itcA74fYKq6qwyCX9p7Nntq4O86eUWVPVn7VzuZs-s3ILy8Ih5QgyzuuGURn96yu9M8lXP33H42z54E9-fvPZnz_DfYgfdB7AEXShC8_RDmO4AJwAQDMDc-peVX8X5G4l9o__uUvUUd_FjfMQYB9hDMcwJQga_oAmvaAEr7V489fuh3_nyz0l7Hc1f38rN2WqiF7D9AYLY3y_jBBwddeRvFn_j1V-vfDea7GQVwPVDnBZf7I4ZBp7AEv5_AEgS7qLyZ40_v4oParjJ_16W9qeW376G8P_u2_JAro7AFt5QFIwuh1bZj8Mm94-_wBPX09u7zeEW-qfkvVlywM4BoKjWnXTFva2OCEDK2SEOCVK8Z9mf8AIfn6BQMR9VSkeBa5H7sx7CLeuAAAWpMNCAWhAUH7Oj0OYY84P4nhP4n7vGScceCfXHy7zB_WtE_SfBSCn3XD43VerL54SwFD5hB5uFbaAO23BYEBka4fJhBT8L7Rdc-yfvPmq2p5eeM-J3P1iuONePD6uRwsFlh4b-nvq_d4mvxX4pe5_k_Kf_Plb1ZZN8Tusbd7k4DG_ndUAbgnrvAMb41_mvKXfXyi0r55_W-1f3v290QGsi9pwyd78P6JC9-m_bX5vkn8r6D9g_-A9v_5OAXVwhdQ7ilsjaQmcswQIokXpm9F7T8XeU3V3_3xb6T98_g_cf3R-eFDuoBZjepF3w0Eb_N-oA_w-8_h9T_e-K35XwqwH6t81-U_IANP4265dsYGaeQR0P4CmC7PJIzgTYHcEv7Hfi_Jn8fwn8t8q-qfAv3v6b4nf_7QgwzvAIpa2Thk97IoAHz37H8a_13vvrz3b6r-B-R_Q3u33f6xvH_qMLvly7iB2Cx-2YHrwH9OfZ_2H9VfUf3t8WYRh2EBrzEJyuhcbfG0oAIAfoBkwBAAAKgCt_av3AC3_ffzZhdrBoEFBGGTmwID05WAHQCy_KtyH8d_G3zrdIA3R2GdnoQNVDtlbVWwyB3IF4Gshr_VH0587_fv3Z8ePEAMT8X_bAL39b_A_0bd9QSNwPstkF30VpCAp8VGBUAdAIHdevR_1T9QA6gNr82YRlz5dSICqByBWvWIDwB9A9AKFcH_VN0r8hAsAN39bfXAOwsxPIgBU42MLZEkA3Ef_DgAuyQsHttOwRIA8C8QAAOwtMA4QJsDaAjXxotwCOREAQu3Xe1cBBsYYBgBTXG_3t9eLcwIr8n_KwM0CIAsIN2s73IHE2BmAyhHPBUQKgD6AO7JIOyCgg6wJoCtHd_1N9pbf_V1BI3UtwPtY3AG0O8yA8oLqC-A8vw58dzKgOT8cAsQKgDG3AgOIhiIRiyVt7bAsW2BJkAIJUDgAvoI0CBg0QPt9orMTwwAq8SX0YCggAAKytUg3oMsDt_ZYNsChgkq3_1d4U0zz8m7S4PmtOglmBKtKgzIMGDVgmu3iscbZW0iAMgUwl2CKA793UCMg44NCDTfKKF0c73Q9mIdVWCIBGAlAu4JBDHgwEJqDcAzG3ODZMOIFRAx7VELn8Og7gL6CNfGm32CBAxYIBDX_FYLxDWbGACfxJMPuRd91cNEC2BCAAAPuQ4vfgONt-gkkJOD7fGW3_1a4VAFQA_ABkyOADfP4klBPcRkN-C_fdIKOD2QoEJZhA7f_RgA4LUSGVs4YW2xftQyLgJO80fIYLjsCQ1kKWDpQxEO1DHfWS2oB67DuA-DZwT3BR9NQngNN8S7XUORs2QkQI5CNfOKFZs-oYiFNMCkfIC-dejedHQAAAt0PhCDQ7a399XQ3R13hTQ4D3DJIwy0KiBAw7oMoD9Q50JlCV7f_XVwCkR90j9MwlgEDD5glkMdDkwkIMND7fQB3TCiAUt3P5LzaGwQDCgqIFnA8gfhxxCww030AdgwlMJLCNfdAixs3vRvzttJA0IGagAA7sPbDiw0MNqCWYdAlZs83KGkZgzaZJniAr0aCGSBQvApH1dQgf4WHDmQnoMJDDgrALHDmbCcKkd_9d9FaZbAGC1ygiAFVmxCbQ3ENbDxQtQLH8iw6oPHDcArAjstSEVxyMdErT8OiAjHYcMTC_gp8OJCOw18KGC0vWKxSgO4AoKJ99QLwCcCmw28JbDntMrwLDB_Z8K0C6vI_xLcX5Zh2ahwyUUCMCC_NpFcBEgAALq9Rwl8MPDcAkb3OCR4A-wSsm7eiLI1rQ9fy1D7fBbwdD0IkCIPDWQjX3O9sIsmxA8c7WQU3C7g870ojMI-gImBqAXt0zB-whcH0gyVcSMAiJQ_4KlDQI6iPAjG3K23oxOHUZzIxWIzSxL9-I_MJ3C9QniKoi-I03w94frJ_AjAXfeyMwBu_ZsInDbIySKyCbIrGyJ84La20Yt4XEeGow0Au4I94gAtCMECNI3iMdCNfD3lZtd4dAH-EEoyq3ijEosSNcjcA2KI8jngmKJrtEKS5EmF9fJ_DvJ8ojuAACPeB8IsDJQ_cKsjoo3eGGsfrORG4dKrewC6BMsV93SixA-qKyjSQuqPsDwCIn3YA3AGkMRcIvWP2Gswo8yMLDLI2v2GtWbE8yyAjgF539E7HcMiWjfnEeADDOg2aO6iXQ3qJyDz-fVxgBAgayH-FwyBoCwAQrMaOKsdooEOGtQQsPwFADrMn0j8Hoq8LJ8roojxZRcfRunx9xzfgEjCRQfEGm9mfbMzidDIAn3-jH0Zn3a5WfBYMosAYwsGBjR_XeEfRkwMsOHsSEG4kSsI3WYEcUNo6exRi0Y1CMmjCrBGKBjjCNT0Jjuwuy07AKRElVjdeHd-xv8qYiaKrcyY9gCRjBgqmNZtRQRBjoBPXAiL5jUADULYj1rbmLRd2YzmNECqY3axeczwRy3AlUA1aILFZsAmNRi1HLiLFiNQcmNRBKY9WPoCCxGVCWjAoyq3AdFLZeDVi0Y1SMfDJYimORjUYiCMSYsSFYHncxwNBDNC1_YyJM9CYz_AljtYjmLtiuYh2KxtLAOAEUtjSOVxghVWdoM9jvLKyx9jWYoCNtjdY-2OTBaI2Kw28IAFVkbsn8SAGzii_L2K1CfY7cLZj_YqWJOCfY3a2sx8HLwCxIYLX7FIhQIEWMLixYh2Iqi0g_6LLjA46WIdjdHcxCUiZEC4DZtoAV0nDJifIIDfsygjqJ9jrYyqM7jAYgOJTig45MFCjzgiqxC8K4Xo2bi44yGJXjE4tSJABk47bR7iV4xhx9A8gC8NIh_hcXAEALQcUBdAVWS2MyjNYncyPi9YleN2t5o8C0sAwgRu3FA2AEeKfj24g4Pjiu4peJPiPeRt1hdFLEUyCB6w5qJsc_sHBwRQn4syNLiF48uLrdCYr3nODUYnBJdIO5Pa1F5nOFcKo9UAVaQqBJAOW208SEJ-LMDPPOeMPiwE4-IrjH0NkS19INAr2FAcxShArhOEwr2K9mYthNac_YjBO7jWEtkRDiO4e-w-C-6TYAeITCKeyETJE0RMRjxErBOESz452OJAYLF51gABAX5wES1YtkRLik45hL1i2RXKNNN0Ea8y5cEgWV0fRPcdyEcU7HYxJ8ggXbHwdRvo6J0CdArD2BxgggQaOTQQY2J1HN6ffgFShzJanxhjxzNnxJj1rAJO6AdiNT0iTWoOUPAJILNx2vBAbJaJhlbkDrxhCOo1JJ1CGEjuJABEkoJKyAUk5wDSTvIj0R-BG7c6ydAvvTWxv9ik_eMfCKk5JNH9ik6AOGBRnLoDHi5_Hm2ntektFy6TgknpJqTq7NeMIdJfWTDHAuEor1GTpk4BN3CrLCZKqSpk1qEdj6rEePITawvNznNl4QpKQiNkmpN9iX4yi02TaAapJ2SQ4_0XTJ67cMjeQKrXEVdFY45qwiSLkjpMYSbk5WhODUk9OMddELSZCxjQvYQBX9D7NpIuTTEg-P-S7kgSIzjCbKd3pjd7BcBmCiAFZJ2S1k42wRTtk9_AjCVLWNxEA_AGOOxTCU8ZKvxKk25O2TbI__R2N8HCIHhd0gUZwocYU1qHcirkjZOpTukwYNSTV4_FwgBKwtFPXsJgWAE2AsUjlNCiqUwJL5TRAgVLiiVWCIFrD_4ggGshsU5-NKSQEiJN5TJk_lJqTyommIKQYgEIGKhhgJBEBsWTGBOtSjInePKTDU3FORt8Ug1M5TdHWSw-xYAHe03isVTVNniykl1IVTDUiQNpFSxMKGOsfAnM3k9pUtBKAjA0wFOcA_kG-1mM_AaINy9hANE2hSikxNJETuU3VLlT9UoNPZg4o7h2fxKra5F8CVk4tNlSkkwtITT2YNbz4cogfZn183AUsQ9czHKtPcSa0mlIBS63SJPZh6Ajb3-sFHO-W2BLHLtP9SdU8pL1StkwYOsNOGDOIidnoQGxvAO4PSAKTmnOHB8cvomZACdMzP6JABZPeWgcAlaEJNp8mPD2HPB7AaGLnNYY8KJ3Nj09lUVp5gNTxvB1cVKDXtQgGGXiARwJ7xzs5_CC22d2os5P4B301KDRcn0hWjPTR_a9LgQfrOQMwAMqYh1iCYZO-Oa8xwBT3sB4MyDLn8T0l9L7TDQuDJ8gsbNdIqQWo2H03lyxeF0-DiKKYFk8sMuBF-SykqDNPTX02DOwzTnf_QaB77AoJbdHFOgHJSb_YjLhTHw1jIIy1PYjNyiDImCwQo_AVuyhDTk0WMfTOMp1MKtxMmDMGDiMiMKpClQhfwdBqpEBE2iOo7TNwynHaDPYytMzjMbdnARgNIi7AQiP1EbEXOlVZVo5AIVthAYzNAyj06zLMzZsCzMIywI4jJ0DoIRj0cUL_V0VGBJjT5MWt1rYLL8z8MzTNEDiM9_H_0lojEBgt30bJ1RojE4TM4z38BLOfSksk4OIyPeNLLaALQN5yIAogVaKjjsgNoBGBGMnyA95CsgLMkzsMw_1isPAPwEHizo1h0SBFLRjPv9tU9ZKE88MorMszksjrKGcm_bJ0w8bgDIBGBtYobOYzp0jTMmySsjrLmiwLdgBecGYZWKIAcbIbNEzGE9bMCytIuDPuD_9PqGbTcIu2zsgL-DIHnQpUkzI6y1MuLPGy2sjjJf0dIuYzrJxnXZ2yAWAGLJustQy7NjSD4s7PayX9HQKA9UAGYMCBwyaqViAQc6L0uz6E1QNOzPstjPOzjbS7NSzwCXeCwBvwyhD6h3XQbEwAhsgrLzSj07HIkzvsw824zUAYnOndBpMcElTp3ShAozDwRINezbXYmKrcochnJDj20xWxgsf4gxLn8s07zLgzAgmnKFyrM211Zs5EGp3MgYLWzE8YfgRjJSCRsvHLpzisut1lzdrMp0jdUAIm3DI2TCDHG9oQ7XPezH0_XI2zDc7DPqCIgniCzilyNnNeBdvK6AFA74YiG1yp00bNpzzMnHOhzi7BwJUtDol3zcDkgAJK6BtciHLEyHc3HORtZcnQPPBZwKgC8Ac7TPMoAvAbXIxy4YwX2Tyw8gnMGiI3QkCahTowoISABgKeJlznc6nN1zU8kvO-y1g8AkvBGAiX3xsXcZJn28lTYKL5y9g5vPUzW8xXLODwCHY1myI0__D0dVWRjIeD5csfKmz2oM-P28w4wbCRygCRS25oyYhfJOyWM5fM2z2oT-Nm8YAHhOQ8z6Mh24SF8u3MosFclfKZDzgv7P8i7E7mkoRUod2KOQYZRjKZDWs0PO-yuQ8AjlsHQOyFe93vVGg-DQCqYF-9UaX_Lvzi8kPPpzFc020JzZraT2OsKRYsF_zA8vXKQKDcojOwz7kCQL18aAc0MoQ2TRiFuC-c4gv_zkCx_J0CXnY0gXdX4WuHOF_8I6P19cguuF_zC8h9Pvyj8p3Kih28vazrhpUSBzELbkG8OUz78-wGEKBcoCIfzNs4Qsd9Xo1gDeA53WzF7y-oByHZQjnPLJUK6CggqCy5C4az3cmoWsJvALClBIMLhrIwsdzCC4QsA8R4E12eimI6C3hz3o2woQKxs_AocKwI3eGsMUQwLBZAnIje3SYVwkAvoygCRi0CBlI6eOsMd0vxz3SyPXxIo954kcgmzlaPHxp8wYu_kPTd4G9LY8IUFJ3vT4k1-O1jEs_wq0jCinyHSSpIBoBhxIkUUGcAK4c8BcQVEfTKmBIwxo3iLvM2opKTMcspLJiqilPNJj7AOoqxtd4PqCCKXnd9F1BgTedygFZwLwF5z-iiYvtCR8rWMBjRiymI2LZYmYvpxnAG8F8RgkG8zPymY6eP2LVEzYCyK9iuot0dc8IJENAuc-ICfg5vZmI2LcC5GxGK7i5GI2LG3F5zJxdQXUHYB5i3UGCQXEOHE6KcYSkGl9O0z4rqLE8xhN-KvsrmI2LGC99AAAjhoDqs-oD4NhguwDIAJiMSm4t2L_inyHRj2AdXHfTAkUT14TT2ZH0Xj68mQvjiJitsJpzUSgAvRLKSx331BnAXUBvADQCuHpL24f7wBsSS3krJK_inkqnCxPfUGF84cFtwCRFit5EyMYISUqnDpStEulj2Sg4pBxzwE4tFAzi14uFCFEEDNZL_ovUu1LuS3UspK-4gJF1BnAZoqNKTS2S1dEmaa3KUyW41-PZLvi0mMqKZSu0vQJG3YX3PB9QE4snN30FxDCQIU-YEUzNS5EuGLAynUorj2SnQOcAGgOVTDKIy_Et2cOTUZ01K-C8ovhiUy20rTLKSsvMzK5VQosz88ym8luQanVxMRLveG0voKKy3ZPpxRQRK1uRB89Yp8hLkrYoqKdioMo7LvI9hlNFgkMnAaAHvHLwZh9IeAElKKIzkrLL2yrBImLgUuYrJx8S2HAaB23ShE1wCgVz0RLOIoctLKRy1MvXKBy3a0TI5i88D3LiHPPP0TZBWYJPKfCphIvLyyq8sJT_9CHzhw_y0nF3hYyuW1RAZXbeK-TD4jcv9LtizIsvLDQ2op940sqcsiQXEXUB8QYyl5KvNL0a22gAlypMunSuStcvgqJi-lMnzPcYqDQRogdQEqsmCttGedJSrlLPLQEz8qIqAikiqxs-bHG2djiXGCGQtXM6bwYrVsoPMIrjCmopIqz4nG3DBAbS_3DBjyq4uayD8gitXLRK421qKjU4Av6TFbSqxgcRQDfNVjES8qLbKVKn4rkLvrf_Te9ugWzA2ZTQ1aIgcOHXMM-KQQhQoPiRK6otUrTKrGynKLQZwFBwIcGsrzKXnPoGyySSkEKErVK5SrcqTKkELmiZikJG3Las14BCq_8rH13T2zVIoPSfkab3JLqfUGLCTwYw9MfQii6JLvTYkovJlo5aUcrrcCeSwEe8IuF7wIyrARQN28laRqptyb_aqrRcsqyqsNDCq1pzsjogUO1Gcas3hJmkMAeIGnteq5V06qKquCrAjJqrG3sAsVaXwBtdvF4DftyHCaomKffJivKq_CsYvWtJq1m3XsPIFAN7K9PQ6Amh2UTatadFKoPK6rZqrSMmrdrNwEOh3APwAiKL_Ywln9LIIqGk9Uaca2ur2oaar2q1PSat0dnAHhzriMAbGOld_vPoDIib_MGuBr_Mr8p6qJi2zw5iOA_mJWquci4EuLvM3qvPcac-6tRq5q9GtZtm3CNzoACcNAGVCYIdlI6jCa26uNsSa1iser0a56toAjvYWILFSIAKLWl-Y3ms99EajmuRrsq0QMJqkPK_EKh8kZ5wv9hQQeH0rGa9GugqdzVmuMrCrQmqgS-5CLwIi88lz1LFvS-1K1qxa7qrJrTnSdyCAz_QcmQthAZoFeLCHC0p9LKLXqsPNTah6pZqJivqKr59RKqmhrKEL-L7QgMWKQuR8ay0pABXasKuRt1ayKs1qva1mwaq-oFIEmEeshmOyB_AXLOVrTnZmujqZq0mvZrTnZ6sQtHLQBDlAgbJMUSByHGAEkAIagWrGq5Qa6uujiavOrZrPa9xJ-s3nXkJycDAtwNsBPA4Wqzrh8oYunSY6_arVqJiifLBL4AZeGsTnLBmHC8AbUWDYBByKuuurF8naojqW6jWoOqJ66ANaQFwD6qqsCxNZAiK16nOs1qt62Op3r3Ez-JgBhQUugDq76s-jXr3y0etBqJ63R11AWHPIOEB2VShC_qp0F8r-I161WpdrL6sepdqJ6kLJeAXYwOqOAiofbybiVq5cLXriyqtzfrR_Xqtq80s8hLgBGIl51wabCweqbzh6u6vAb36v3h-s3EAoBaTAbahtnBaG66oRtm6kGswaJi5EOAKZwfKGKcXPRHzQA7AHhpFAmGqOovrWGwYN6qn8qSwlBv0ySGm9WgsIEsdmSphr9dPE0swsBsfSFTrMxEV4WEN0IC-ECxEjNQEkNdYNIxkMaBKs2lAazWWRIpbjb-EDInyKZDYJBEKbEmEgcC9WQDUQc8EeUElI4GcEheVCm1R7BCsSFRnUPxrO4pJJti5pXOYLEgBQyC8Aw9A5VOmWUR4TZRzoEgElw7ggcAum2UwmSOUvRugUJqCaHOfgOiaZkWJs8aEm-7BHghlFJtWU0mqAAa4cHKAAybMqbJseUfqNcjybAsApo5QwmyBCklLuKzSzJym-JuuYqm1wBqbInLOjWUEgELkogwueIBaasmuugg12m3JrAYo5Z0RCwmbBZqu592CfjOQRmrxtLpEm6puSapm0ZQSBVeWcHV4T2KUCWadlVZrSAOm8VRyknUJMiObHlOrRmQlKCDVHprpTcnGbOAOwD0gdERIETJEyUPGYJN9KPAKJG5XKTwojgNMwVCWzI0A8bRmmAGzpkWzOh8b5lRIHFAGQeGDDJkWpZRulW4AltcadlJhBYQSWpJqgVJkClvhgcWhhkJagcIinshGWoHCmV2m5lqFQXGolqGh-WtBicUUchvQcbuURVFr4uMBhjd0hWjriLpL1ZFpYZSaawmLAsW261ebWSN3QzMD4Y-igBs6TclSbcqxjz5o6EPRmnZ0AHJD1bs6RRC4B5JOui0ZvJbJEdJrWnthhEfJR0kzpHW-TVQAUoV1rJbUyTOmLNeCLjErNyJKxt1lHjCBlbgxEGOlcBxWpon4pAyGaFN1zAWFtxb-xQpksBKAKNpLIeJXFu2VcWvpv7QbUU7mCb3m4aGLb7oCJvfY0eOZW2UU6M5s9gVlaZvqbGmxZtzpWmlZsLbYMbZT2UBAA5X_JL1aZRN0MiYsByJHlG5UwBm9RFpcZ1XVVswBs6TNtNasWwS01b46HMnJb4ASloXbMWnti3bWWqlqPJkW7OgiAZgTlpxaMeDdrxb2lTck5afqLZR5bJlNcnVahbVtsNa6mg9PXaIUZdotQc207BLI4VNa3uUb2rNENRWDTZpcxK2opuraPYXtk_ZkzdpsbaJm85qNbZm4hOabO25Zt2Ue26Uj7aamQdvrJh2r5pd1Z25FonaWMZFpnbdpRnl3al204DHNW2-gW2ldae-Dvbt2gVsjw1W_dtTJ72zOmpbrhRdsu1z2jjph4zyVjs3bUyW9oPbKW7lueaRlF9trYNWg1tbhUmr9uo7f29-n_anjVuEoRGeEDvhVjwLlQ2b8mlyGcwdm37jrle2pDtOaUO5ttqbW23OmuaUgW5ousssLDsebcO2mnab-2wjpbVo6EdtI7dpcjoeVKO2tAk7jyKIUr4uOoTpABNO2ulbaw-XlrGYWlXjtE7iW7joDaOW9Lv47j2zLrPaL27aSvbg-STvshpOtLsPa5OmZTCZX2iXHfbVOz9rXaNOhjtehs23Nt06w-AzuG0wOi1jeIfiTfXi62ugDtbgsRP0wjbiKHY2MdY2-xoCaO0JNszIb1VgnTb1gQRAbbbOyZrQ6oASbocJ4gXoBfkHJNpueaVUZxpg6Am0tsF55gY7skR0uijvgB-OY5RE1m5JFvHbQup5WnanupaHONVEe2V6aYO4XkiaEUOtuCxl4Yxzo632ethKhku-tEg7gAR4BKaDm3ZBB62WmLr3aoqaFA_ZNWhtEiZge8404IiNICVi6P2xztCSTW_KrNaZkTcnG0Ce1HqJ74WtTVZ1nMOVsOQNQfzsSl42jwA7RxZSJg8Bs6JHqpbwCOzr56oe_zEtxImJnpFbEQMVrO7UhUNtIlw2p3XJJoUKkmuw9hGs0CBqPdlFuR0AOZo-tIwHLkTaOUHLhwBxDLACyQXFcAlc4X2T3VahVVCy2QwLLNLWRU6YC3rRVTyQQwElhoI3pN6ze_gGzoZoK3otAbeuZRy57e_q0d7XcX3sy1MemVtYIcuFVCskOULDCraa2-tlKa-WzfRyh9gfED6gZQWIEid4-gKQOxqsZPrg6lONPv663dLDFo4C-msGdQk-v7tnN5myztgEbqTfXV6L4SAGyAde5Xuqx9emvo96i-01BL6LOsXl3Z9mpom57pGmIE77teiy0H7y0CyyO0LQLGUapu0KLpbE-JMeF0aMIX1sZhDGiQ18oTG0CDMaNEagHioTkVcH4A-BCGJfUqjcE3Yh3ETUTctTwNkHeABgL0BFYHJK0DrgOSQPjDboYTw1caiwXfpSBYjJyk4gkJZYSEh1YSEhFAsmTqiwlTGg2BB4RmYtH2AnRICRdBXhCDW8ogQNgk7E0EFMTPEBxVcBHFC_K4BhN7kW8SFR3ITyG9FCdUVWoGiYZEUOFoxT8TrRexK4WOESrQlPQI60JbKfFwRM0G2BHhYQbrFo8VcAEGwZCUVmBRBiUBaMpButCglGUQMQPN0xVcGBlQZcGWgl2AaGXuQwAfQaYINBq8QyBoxBcU9wIJQMXIBrButEfFnxV8QgB3xdgAnF4JBYWcoEjd4xONhQM42MdjG1I2P6DYDIxxMcjDEymADjHOiGMO4EoyQJpjK4zBKqjGo3yMA4BoyiHmjVo1uBYh-eEaB-VNU0VolTJIbjgIhooxGMlTMYydw1TTIYdAbTSKiWM7yFYxHh6pbhB-MjgGk0BNgTKSVBM7gB4A_7QUByWhNYTeE2lM6hhtgog5DEM1wwbCTI0iHKAPE3swDEIkyxN4hskzQBtgCkz6AIAakyKh_jNofpNl4Jk1ZN2TVfi5NGQeiT5MrgAUyFMaAEUxMQxTNZQlM8-16CGHkTWUw0h5TdYEVNNgYkzGBVTSY3VNNgTUwhgzIMboV6Aic41jbOJJxtgZ9AVeldM7oPYBUljBWEZ-7ApREasFqAM1lupkRrA0ilh-wJ1T6EOmZCNNQhnACjMIzQ1CjMYJGM1gxauXOm27FaKAD27CmatTForLHWVTJIcJPEhwYRtEa8hkhNugsETBagBsFWEacDvBEAbOgtAAe-IEhwBwTOm-bwOFM3RZsWwLkMEiYKUYabCzZNjTZkUXrk3JVR3ZEzNPuY1rp9wY3rjn4OOJTn1G1R7c0-4Sg1LkSArR3ZEBxHRysg5YwUIPnNGHUK1nNGI-Q7kzZM2cswdQKiSDudQhJXEfg6PJYM2JHSRmVgpHUgKkelIaRhIDpHdu8a10QBOT-EhxMUPkaEkvBNkfsgOR-TC5G3R75D5HURmumFGTBgQDFGJR7UYbZ66QwUVHAuZUdlZHR9Uch7euOsatY9R1dkNHiOY0bzMzR7sctHexm0eI47RtEAdHhOZ0by4XTHkeE5PRtRvNYfRnPlmZ_R2DEDH60PrpzQawbfo8GLELwdvjXyPwc2EzGjoymGijWYbCHBjYofGHKh_pCWHqjFYYKGJ4IoeGM0hzofvHTVH4eFA_hgY2SHphkoc2AyhiY1_Gvx6ocWMkTeobWMJ-dRF-Mth2k3aGPYTofv7ITOAH6G4TBE1qHnh1E0shxh-BmxNphq8bJHHRFYa-HHx8kxUh1hzYe2G6TXID2GhfA4YyAjhtmVOHpwfk34BLhy0FFNOYH5DTlJTR4ewmUTTmFeGRsd4f6NyJn8d6M8h_4Z9NAR4EaN0bjRch9IIR4tFW6BR2EaGghJcsdegsRxMh0nDIXQkxHVwUMZUlcR9UfL6tW1gnGGSRs0xImzkOMZtNNxuMwFpc6B5oUEhGQHGLHLBGuistzBaEZLGhRwPkbp5RsZibGGWZFv1H2Ow9qC7nkdppdHBOmAASnSeO1s9ag-J1vkl0p1uFimhGLgDy4-xzHgHH3RjbkXG3m5catZ0Wc0fi6cpp1Bu5euAqYM5VxsZkM51x6UmcmW9aHtM7TJwknDGy-gkezQiRpAlsmrTeyd2RHJhMYFYWSMZWk4mm9yZJovJ7kd8myxjSZ5G4hMZni6sxg-EhwGgB8nuAcxlSTzGEew1FCnPJ-KfOZIp9Fmimd2x0fCmcOC6aD5bWy1rSmNuDKeen2OQFuSnG0OqaV4Gp9jiKnTRkqdXZFxlccC5qpx0byn6pscaFZfR7uhYNg2w1HamIOrqY5QwxhvpH6SEyyYGleVUIS0mVJI3qqh0tZ3o9hOQdZu0UBpqMaGmYx2DHGnbTakamn0Opvu3Y5p2ZgWnAp3kZAB_J9lh8m6WGcwsANphrhgBNptWn2nCSQ6faFZmDacLRghRnl0EWSE3VumxmcjqimZOgVpumzpz7numXp7KZUgGWfKahmNuf6bdNAZh6YtbMpl6fdbnWteCBnvRiqcC4qplrpQRHR-gUhmuzXrg7hZwb8ztmmprrThnLGDcZZRgx5GclUzJtGc0tdmmdgl5-p5LQpmTTOydjGzTSkdpnEx-magBnO1ztPZmZxulZnuZ0sY5n-RgKZzmgp4orOQNpimhFnsDWIWWkBaDacv90ASHB17w5gsfwRtp3ab8ngAISRlnMZy2nVmIp4sH1GwZq1iS6vZwLiunVZq1gVnzWTWfenW4T6aNp9ZnDlKmOOC2bNmF570Z8VdOb2cboWp-GYhREZ7cfMwawBSeOozwdrsTNsR1GiaJ1JgucFG4R7SZWma6PSYMn0RwkYa0sR1Gbs5-mj2Asmo5qyfZUbJqmelIaZ9qYsA2OaaabNZpjzo8ms5oscWmj6ZaevnYR2WYFoTprOZ7mfmKeYZZR5tlrVnnmhKYwWcOR6ZXniOV6atmsp1MhqnzyCGZ-n55_sZJ6TRo2fY5F54Gcqn0WAed64qFyeZoWfZnnjXHfZ8Dv9n3TQOe6aoO8-cCaP54pp3Cu5xbr_noxuOepmE5-MaTnJp1yYZnYgBdkznPJmBbZm25p-aPheZx0QdnqAanCU4hZy4HLnIpQ6blmguiecbolZy6ZVnsF8ebQXk2fBeTYPpoVj1nXZpXkNmEW1eZNmgCJ6dIXzZtCA9aglvxeTZFxlhdBnDF8wCdmMrF2cPhk2d2ZSBPZjeZ4Xmpvhc24EZgOZM7hF7qewNcRwZrrlmle_DxRt4dpQ7mHegmad7OYF3pJm3en5uHplKX3Hfmy25iTxmLLcqDKWoUHwlgxBp2OZGm2OIBZZIkx1OYMgbmv7Dc73J4rueQtFwufZnOZnUDZm1poRhrmC_euYw6Z2UxZbnqJPabznY0cpfG4pF7udwWlRvuatY2F4jiHmIl7sYcWkzVdhsXJ585aKEexooTnmvFi3h8W8uRebKmIl9efKnh5xqd4WizAWmAWOpsqbVR5YaqFGcWMTQGoBEBgIfAgDEX6J-QgQYkCqBvADIAAksAH0HJBsiwc19r8qn5B8gcAElY5hu4dOjZmb-_EvyA_wGEBxW6VzAHJBTCPMEbCnLG2EtA0VkEExWr9JuXHZTsG_pN7RBKJ0pX05BEH5QCfZGiipzQG_oAA9NJJs0cARBypR06M5x-RZV-5HC0lVolGTlKqIqhA4fkM5xVW3xqIbvHD02VZZgcAKKCVWjVy_pNWmjFYfSGDVj2HlXGCJVeVW7VlIeKMPh-UXGMKh81e4GcAW1aFQL5KCYbZ1V9qCVXtV4otDWZTVY3ql1Vy1bgRo141Y5WrQSIDlWFV9_GjXN-o-AQluV3AG4ZtYeFakMkBpFah5QWpRR3NwMLIBfEtQOsTmB3zBQHkB5AIAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    // var svg = container.append(\"svg\")\n    //     .attr(\"width\", parseInt(width) + XaxisOffset)\n    //     .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}