{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchart.mdx","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","errorText","this","draw","groupChartData","colorsData","partyColorByName","partyColorsData","edge","minMaxY","dynamicYAxisFromValues","d","groupSvgs","barSvg","groupSvg","concat","partyAbbr","i","barTextSvg","length","chartData","data","bars","name","getFillColor","getTooltipText","pageX","Number","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","l","toUpperCase","destroy","chart","barchart_partyColorsData","getProvincesData","barchart_className","originName","styles","refreshIntervalID","chartOptions","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","react_default","a","createElement","config","ref","dataLoaders","getVotesDataForComparison","partyColorsLoader","getPartyColors","values","votesData","error","console","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","JSON","replace","TVVoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container"],"mappings":"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","file":"static/js/src-components-tv-vote-comp-barchart-barchart.df8d2c6e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData);\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d, i) => `translate(\"${x.bandwidth()*i}, 0)`);\n\n      var barSvg = groupSvg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n      var barTextSvg = groupSvg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n\n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return x(d.name)+x.bandwidth()/20;\n            })\n            .attr(\"width\", x.bandwidth()*9/10)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n    \n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x(d.name)+x.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparation-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  {/* {fdsweger} */}\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-votes-comparison---bar-chart\"}}>{`TV Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};"],"sourceRoot":""}