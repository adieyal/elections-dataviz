{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/turnout.js","webpack:///./src/api/spoilt.js","webpack:///./src/api/prog-votescount.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/mapEmbed.css","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/components/RaceForSeatDonut/piechart.css","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.css","webpack:///./src/components/SeatCompBarchart/barchartEmbed.css","webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css","webpack:///./src/components/SplitNatProv/barchartEmbed.css","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutMap/mapEmbed.css","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css","webpack:///./src/components/embedBase.js","webpack:///./src/components/BarChart/barchartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchartEmbed.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutBarchart/barchartEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/SeatCompBarchart/barchartEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/VoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.js","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.js","webpack:///./src/components/SplitNatProv/barchartEmbed.js","webpack:///./src/components/embed.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/Map/map.js","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/RaceForSeatDonut/piechart.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/SeatCompBarchart/barchart.js","webpack:///./src/components/SplitNatProv/d3groupbarchart.js","webpack:///./src/components/SplitNatProv/barchart.js","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/index.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsDataForComparison","options","query","gql","_templateObject","_templateObject2","provinceName","getSeatsData","eventDescription","_templateObject3","_templateObject4","getVotesDataForComparison","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","race_for_votes_templateObject3","race_for_votes_templateObject4","iecId","getVotesDataForAllEvents","_templateObject5","_templateObject6","_templateObject7","_templateObject8","getVotesDataM","_templateObject9","_templateObject10","_templateObject11","_templateObject12","getMainParties","_templateObject13","_templateObject14","_templateObject15","getTurnoutData","turnout_templateObject","turnout_templateObject2","turnout_templateObject3","getTurnoutDataForOneEvent","turnout_templateObject4","turnout_templateObject5","turnout_templateObject6","turnout_templateObject7","getTurnoutDataForAllEvents","turnout_templateObject8","turnout_templateObject9","turnout_templateObject10","turnout_templateObject11","getSpoiltData","spoilt_templateObject","spoilt_templateObject2","spoilt_templateObject3","spoilt_templateObject4","getProgressVotesCount","prog_votescount_templateObject","prog_votescount_templateObject2","prog_votescount_templateObject3","prog_votescount_templateObject4","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","getProvincesData","name","abbreviation","munis","muniName","getMetrosData","module","exports","ELVIZ_percentage-label","ELVIZ_tooltip","ELVIZ_grouprect","ELVIZ_barchart","ELVIZ_stylesheet-tv","ELVIZ_chart-title","ELVIZ_chart-body","ELVIZ_groupbarchart","ELVIZ_deltabarchart","embedcode","barchart-map","ELVIZ_map-title","ELVIZ_loading-spinner","map-widget","legend","ELVIZ_stylesheet-web","ELVIZ_stylesheet-none","ELVIZ_menu-widget","piechart","ELVIZ_component-transition-menu","label","active","quickresultswidget","quick-results-title","race-for-seats","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","ELVIZ_current-progress","ELVIZ_current-turnout","ELVIZ_current-counting-progress","ELVIZ_current-spoilt-votes","donutchart","multievent-container","horseshoechart","multiparties-container","EmbedBase","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","loadScriptsForEmbedMode","Component","react_default","a","createElement","provincesData","className","originClassName","bootstrapStyles","styles","BarChartEmbed","barchartEmbed_classCallCheck","barchartEmbed_possibleConstructorReturn","barchartEmbed_getPrototypeOf","state","elementId","regionType","numParties","electionEvents","stylesheetFor","componentID","self","data","error","console","e","setState","value","newState","triggerCustomEvent","events","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","bind","key","description","onRegionTypeChange","nationalEventSelected","province","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_barchartEmbed","barchartEmbed_className","RaceForSeatBarchart_barchartEmbed_classCallCheck","RaceForSeatBarchart_barchartEmbed_possibleConstructorReturn","RaceForSeatBarchart_barchartEmbed_getPrototypeOf","disabled","components_RaceForSeatBarchart_barchartEmbed","SpoiltBarchart_barchartEmbed_className","SpoiltBarchart_barchartEmbed_classCallCheck","SpoiltBarchart_barchartEmbed_possibleConstructorReturn","SpoiltBarchart_barchartEmbed_getPrototypeOf","components_SpoiltBarchart_barchartEmbed","mapEmbed_className","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","disableNavigation","loadCanvg","MAP_PREVIEW","checked","Map_mapEmbed","TurnoutMap_mapEmbed_className","TurnoutMap_mapEmbed_classCallCheck","TurnoutMap_mapEmbed_possibleConstructorReturn","TurnoutMap_mapEmbed_getPrototypeOf","components_TurnoutMap_mapEmbed","TurnoutBarchart_barchartEmbed_className","TurnoutBarchart_barchartEmbed_classCallCheck","TurnoutBarchart_barchartEmbed_possibleConstructorReturn","TurnoutBarchart_barchartEmbed_getPrototypeOf","eventType","components_TurnoutBarchart_barchartEmbed","barchartMapEmbed_className","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","JSON","EXPORT_SUPERWIDGET_PNG","BarchartWithNavMap_barchartMapEmbed","quickResultsWidgetEmbed_className","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","electionYear","nationalEventDescription","provincialEventDescription","electionYears","year","exec","yearFilter","nationalFilter","provincialFilter","length","QUICK_RESULTS_PREVIEW","onEventYearChange","onNatEventDescriptionChange","onProvEventDescriptionChange","QuickResultsWidget_quickResultsWidgetEmbed","piechartEmbed_className","PieChartEmbed","piechartEmbed_classCallCheck","piechartEmbed_possibleConstructorReturn","piechartEmbed_getPrototypeOf","ProgVotesCountPiechart_piechartEmbed","SeatCompBarchart_barchartEmbed_className","SeatCompBarchart_barchartEmbed_classCallCheck","SeatCompBarchart_barchartEmbed_possibleConstructorReturn","SeatCompBarchart_barchartEmbed_getPrototypeOf","eventDescriptions","partyAbbr","partyIecId","allParties","Object","api","then","edge","filter","thing","index","t","catch","values","i","l","selected","multiple","party","components_SeatCompBarchart_barchartEmbed","horseshoeEmbed_className","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","SeatHorseShoeChart_horseshoeEmbed","VoteCompBarchart_barchartEmbed_className","VoteCompBarchart_barchartEmbed_classCallCheck","VoteCompBarchart_barchartEmbed_possibleConstructorReturn","VoteCompBarchart_barchartEmbed_getPrototypeOf","components_VoteCompBarchart_barchartEmbed","TVSeatCompBarchart_barchartEmbed_className","TVSeatCompBarchart_barchartEmbed_classCallCheck","TVSeatCompBarchart_barchartEmbed_possibleConstructorReturn","TVSeatCompBarchart_barchartEmbed_getPrototypeOf","partyAbbrs","partyIecIds","partyIdx","onPartyAbbrsChange","formatPartyName","components_TVSeatCompBarchart_barchartEmbed","TVSeatSwingBarchart_barchartEmbed_className","TVSeatSwingBarchart_barchartEmbed_classCallCheck","TVSeatSwingBarchart_barchartEmbed_possibleConstructorReturn","TVSeatSwingBarchart_barchartEmbed_getPrototypeOf","event","components_TVSeatSwingBarchart_barchartEmbed","TVVoteCompBarchart_barchartEmbed_className","TVVoteCompBarchart_barchartEmbed_classCallCheck","TVVoteCompBarchart_barchartEmbed_possibleConstructorReturn","TVVoteCompBarchart_barchartEmbed_getPrototypeOf","components_TVVoteCompBarchart_barchartEmbed","TVVoteSwingBarchart_barchartEmbed_className","TVVoteSwingBarchart_barchartEmbed_classCallCheck","TVVoteSwingBarchart_barchartEmbed_possibleConstructorReturn","TVVoteSwingBarchart_barchartEmbed_getPrototypeOf","components_TVVoteSwingBarchart_barchartEmbed","RaceForSeatDonut_piechartEmbed_className","RaceForSeatDonut_piechartEmbed_classCallCheck","RaceForSeatDonut_piechartEmbed_possibleConstructorReturn","RaceForSeatDonut_piechartEmbed_getPrototypeOf","components_RaceForSeatDonut_piechartEmbed","SplitNatProv_barchartEmbed_className","SplitNatProv_barchartEmbed_classCallCheck","SplitNatProv_barchartEmbed_possibleConstructorReturn","SplitNatProv_barchartEmbed_getPrototypeOf","numPartiesSplitNatProv","components_SplitNatProv_barchartEmbed","__webpack_require__","d","__webpack_exports__","Chart","container","width","height","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","getFillColor","_typeof","partyName","getFillColorFromPartyName","minMaxY","dynamicYAxisFromValues","maxValue","parseFloat","customizeDynamicMaxValue","bars","getTooltipText","pageX","Number","barTexts","destroy","barchart_partyColorsData","barchart_className","originName","cn","chartOptions","maxVal","Math","BarChart","comp","fetchDataFromOBJ","chart","refreshIntervalID","exportAsPNG","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","getContainer","setInterval","document","clearInterval","detail","targetState","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","ref","dataLoaders","partyColorsLoader","votesData","parseVotesData","fetchLocationTrackFromVDdata","needUpdate","REGION_CHANGE","BarChart_barchart","RaceForSeatBarchart_barchart_partyColorsData","seats","RaceForSeatBarchart_barchart_className","barchart_cn","barchart_classCallCheck","barchart_getPrototypeOf","barchart_assertThisInitialized","getNationOrProvinceName2","barchart_chartOptions","seatsData","parseSeatsData","RaceForSeatBarchart_barchart","percent","SpoiltBarchart_barchart_className","SpoiltBarchart_barchart_cn","SpoiltBarchart_barchart_classCallCheck","SpoiltBarchart_barchart_possibleConstructorReturn","SpoiltBarchart_barchart_getPrototypeOf","SpoiltBarchart_barchart_assertThisInitialized","SpoiltBarchart_barchart_chartOptions","spoiltData","parseSpoiltVotesData","Valid","Spoilt","SpoiltBarchart_barchart","map_partyColorsData","regionColor","map_className","map_cn","Map","map_classCallCheck","map_getPrototypeOf","map_assertThisInitialized","drawGraph","selectAll","remove","prevProps","prevState","rect","rendercanvas","window","ignoreDimensions","scaleWidth","scaleHeight","canvg","canvas","filename","lnk","createEvent","fireEvent","loading","react_loading_default","color","fullRouteGeoJsonFile","getRegionFileName","h","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","getMunicipalityiecId","topojson","projection","path","parties","availableCnt","b","legends","parseInt","getLegendXY","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","undefinedText","mainPartyName","subRegionName","tooltipText","smunicipal","appendSpan","foDiv","regionName","addSub","appendLink","setRegionType","fo","currentRegionName","setTimeout","alert","Map_map","TurnoutMap_map_className","TurnoutMap_map_cn","TurnoutMap_map_classCallCheck","TurnoutMap_map_getPrototypeOf","TurnoutMap_map_assertThisInitialized","all","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it","turnoutData","TurnoutMap_map","percVoterTurnout","TurnoutBarchart_barchart_className","TurnoutBarchart_barchart_cn","TurnoutBarchart_barchart_classCallCheck","TurnoutBarchart_barchart_possibleConstructorReturn","TurnoutBarchart_barchart_getPrototypeOf","TurnoutBarchart_barchart_assertThisInitialized","TurnoutBarchart_barchart_chartOptions","parseTurnoutDataForAllEvents","TurnoutBarchart_barchart","barchartMap_className","BarchartWithNavMap","barchartMap_classCallCheck","barchartMap_getPrototypeOf","barchartMap_assertThisInitialized","zip","JSZip","imgs","base64","content","saveAs","assign","instance","barchartInstance","mapInstance","BarchartWithNavMap_barchartMap","d3piechart_Chart","margin","variable","category","floatFormat","colour","radius","pie","arc","totalSvg","transformX","labelSvg","toolTip","selection","tip","toolTipHTML","arcTween","_current","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","piechart_cn","PieChart","piechart_classCallCheck","piechart_getPrototypeOf","piechart_assertThisInitialized","piechart_chartOptions","progressVotesData","parseProgressVotesCount","Completed","Not Completed","ProgVotesCountPiechart_piechart","piechart_partyColorsData","viewBox","RaceForSeatDonut_piechart_className","RaceForSeatDonut_piechart_cn","DonutChart","RaceForSeatDonut_piechart_classCallCheck","RaceForSeatDonut_piechart_getPrototypeOf","RaceForSeatDonut_piechart_assertThisInitialized","getNationOrProvinceName","RaceForSeatDonut_piechart_chartOptions","components_RaceForSeatDonut_piechart","VoteCompBarchart_barchart_partyColorsData","VoteCompBarchart_barchart_className","VoteCompBarchart_barchart_cn","VoteCompBarchart_barchart_classCallCheck","VoteCompBarchart_barchart_getPrototypeOf","VoteCompBarchart_barchart_assertThisInitialized","parseVotesComparisonData","VoteCompBarchart_barchart","SeatCompBarchart_barchart_partyColorsData","SeatCompBarchart_barchart_className","SeatCompBarchart_barchart_cn","SeatCompBarchart_barchart_classCallCheck","SeatCompBarchart_barchart_getPrototypeOf","SeatCompBarchart_barchart_assertThisInitialized","SeatCompBarchart_barchart_chartOptions","parseSeatsComparisonData","SeatCompBarchart_barchart","d3groupbarchart_Chart","XaxisOffset","groupChartData","groupSvgs","groupSvg","formatClassNameFromString","_loop","subX","_ref","_ref2","partyInfo","SplitNatProv_barchart_partyColorsData","SplitNatProv_barchart_className","SplitNatProv_barchart_cn","topLabel","usedValue","SplitNatProv_barchart_classCallCheck","SplitNatProv_barchart_getPrototypeOf","eventDescriptionsSplitNatProv","SplitNatProv_barchart_assertThisInitialized","SplitNatProv_barchart_chartOptions","parseVotesDataForAllEvents","SplitNatProv_barchart","cssPrefix","metrosData","CustomLink","navbar_classCallCheck","navbar_possibleConstructorReturn","navbar_getPrototypeOf","navbar_assertThisInitialized","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","activeLinkId","handleNavBarSelection","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","SEATS_ELECTEDS_EVENT","icon","metro","join","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","quickResultsWidget_cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","currentTurnout","currentCountingProg","currentSpoiltVotes","quickResultsWidget_assertThisInitialized","fetchCurrentResultData","newProps","progVotesData","parsedSpoiltData","parsedTurnoutData","parseTurnoutDataForOneEvent","parsedProgVotesData","parsedVotesData","voteItem","parsedSeatsData","seatItem","zipfileName","imageLoadPromises","_toConsumableArray","barchartInstances","map","element","idx","triggerState","getRegionName2","getRegionName3","_this$state2","mapState","_this3","_this$state3","Array","onShowVDResult","vdInput","renderQuickResultsTitle","renderTurnoutProgressSpoilt","renderMyVDEnterForm","renderBarchart","renderMap","QuickResultsWidget_quickResultsWidget","d3horseshoe_Chart","mainSvg","originChartData","totalSeats","rows","poslist","J","R","angle","Totals","PI","onMouseMove","onMouseOut","Counter","partySvg","pythonConvertedCode","horseshoe_partyColorsData","horseshoe_className","horseshoe_cn","HorseShoeChart","horseshoe_classCallCheck","horseshoe_getPrototypeOf","horseshoe_assertThisInitialized","horseshoe_chartOptions","SeatHorseShoeChart_horseshoe","TVVoteCompBarchart_d3groupbarchart_Chart","bandwidth","YaxisOffset","barAxisTextSvg","barAxisTexts","TVSeatCompBarchart_barchart_partyColorsData","TVSeatCompBarchart_barchart_className","TVSeatCompBarchart_barchart_cn","TVSeatCompBarchart_barchart_classCallCheck","TVSeatCompBarchart_barchart_getPrototypeOf","TVSeatCompBarchart_barchart_assertThisInitialized","TVSeatCompBarchart_barchart_chartOptions","desc","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","d3deltabarchart_Chart","newGroupChartData","_objectSpread","delta","deltaData","barTextYDelta","axisThick","TVSeatSwingBarchart_barchart_partyColorsData","TVSeatSwingBarchart_barchart_className","TVSeatSwingBarchart_barchart_cn","TVSeatSwingBarchart_barchart_classCallCheck","TVSeatSwingBarchart_barchart_getPrototypeOf","TVSeatSwingBarchart_barchart_assertThisInitialized","TVSeatSwingBarchart_barchart_chartOptions","years","TVSeatSwingBarchart_barchart","TVVoteCompBarchart_barchart_partyColorsData","TVVoteCompBarchart_barchart_className","TVVoteCompBarchart_barchart_cn","TVVoteCompBarchart_barchart_classCallCheck","TVVoteCompBarchart_barchart_getPrototypeOf","TVVoteCompBarchart_barchart_assertThisInitialized","TVVoteCompBarchart_barchart_chartOptions","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","TVVoteSwingBarchart_barchart_partyColorsData","TVVoteSwingBarchart_barchart_className","TVVoteSwingBarchart_barchart_cn","TVVoteSwingBarchart_barchart_classCallCheck","TVVoteSwingBarchart_barchart_getPrototypeOf","TVVoteSwingBarchart_barchart_assertThisInitialized","TVVoteSwingBarchart_barchart_chartOptions","TVVoteSwingBarchart_barchart","CSS_PREFIX","calcPercent","toFixed","results","edges","shortenedNatProv","nodeData","partyResults","longEventDescription","node","el","validVotes","edge1","edge2","edge1Year","edge2Year","firstEdge","locationResult","result","partyfilter_edges","reverse","new_results","available","totalCount","count","getTopPartyNameFromNode","beautifiedMuniName","tooltipClassName","labelElements","regions","overlapCnt","rect1","rect2","bottom","eventName","eventParam","CustomEvent","toUpperCase","PKLVDNUMBE","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","loadScript","id","scriptURL","callback","script","str"],"mappings":"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","file":"static/js/src-components-quickresults~src-components-race-for-seats~src-components-race-for-votes~src-componen~3364f670.bbf0d157.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\n\n\nconst client = new ApolloClient({\n    link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n    cache: new InMemoryCache()\n  })\n\nexport {\n    API_URI,\n    client\n}","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getSeatsDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            party_Event_Description_Icontains:\"national\",\n            orderBy:[\"-national_pr\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  } else { //  if (options.regionType == \"province\")\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(province_Name:\"${options.provinceName}\", orderBy:[\"-regional\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  }\n}\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(party_Event_Description:\"${eventDescription}\", orderBy:[\"-national_pr\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else { //  if (options.regionType == \"province\")\n      eventDescription = eventDescription.replace(\"National\", \"Provincial\");\n      eventDescription = eventDescription.replace(\"NATIONAL\", \"PROVINCIAL\");\n      eventDescription = eventDescription.replace(\"national\", \"provincial\");\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province_Name:\"${options.provinceName}\", party_Event_Description:\"${eventDescription}\", orderBy:[\"-regional\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getVotesDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots{\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          location_Name:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          location_Province_Name:\"${options.provinceName}\", \n          location_Code: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                      iecId\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n          location_IecId:\"${options.iecId}\", \n          location_Ward_Municipality_Code:\"${options.muniCode}\"\n        ) {\n          edges{\n            node{\n              event {\n                description\n              }\n              location {\n                iecId\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getVotesDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            location_IecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                location {\n                  iecId\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                location {\n                  iecId\n                  ward {\n                    municipality {\n                      code\n                      province {\n                        name\n                      }\n                    }\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByProvince(location_Country_Event_Description:\"${eventDescription}\") {\n            edges {\n              node {\n                location{\n                  id\n                  name\n                }\n                totalVotesCast\n                topParty{\n                  validVotes\n                  percOfVotes\n                  party {\n                      id\n                      name\n                      abbreviation\n                      iecId\n                  }\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByMunicipality(\n            location_Province_Country_Event_Description:\"${eventDescription}\", \n            location_Province_Name:\"${options.provinceName}\") {\n            \n            edges {\n              node {\n                location{\n                    code\n                    name\n                    longName\n                }\n                totalVotesCast\n                topParty{\n                  party {               \n                    name\n                    abbreviation\n                    iecId\n                  }\n                  validVotes\n                  percOfVotes\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { //if (options.regionType == \"municipality\") {\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            topPartiesByVotingDistrict(\n              location_Ward_Municipality_Province_Country_Event_Description:\"${eventDescription}\", \n              location_Ward_Municipality_Province_Name:\"${options.provinceName}\",\n              location_Ward_Municipality_Code: \"${options.muniCode}\"\n            ) {\n              \n              edges {\n                node {\n                  location{\n                    iecId\n                  }\n                  topParty{\n                    party{\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n\n\n  export function getTurnoutData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                percVoterTurnout\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                percVoterTurnout\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { // municipality or municipality-vd\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n            event_Description:\"${eventDescription}\",\n            location_Ward_Municipality_Code:\"${options.muniCode}\") {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n  export function getTurnoutDataForOneEvent(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n              event_Description:\"${eventDescription}\"\n              location_Province_Name:\"${options.provinceName}\", \n              location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              event_Description:\"${eventDescription}\"\n              location_IecId:\"${options.iecId}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n\n  export function getTurnoutDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getSpoiltData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                    id\n                    name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                event_Description:\"${eventDescription}\",\n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    code\n                    name\n                    longName\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                event_Description:\"${eventDescription}\",\n                location_IecId:\"${options.iecId}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n  ","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getProgressVotesCount(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport {getSeatsData, getSeatsDataForComparison} from \"./race-for-seats\"\nexport {getVotesDataM, getVotesDataForAllEvents, getVotesDataForComparison, getMainParties} from \"./race-for-votes\"\nexport {getTurnoutData, getTurnoutDataForOneEvent, getTurnoutDataForAllEvents} from \"./turnout\"\nexport {getSpoiltData} from \"./spoilt\"\nexport {getProgressVotesCount} from \"./prog-votescount\"\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n        eventType {\n          description\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            abbreviation\n            colour\n            iecId\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getProvincesData() {\n  var provincesData = [\n      {\n          \"name\": \"Limpopo\",\n          \"abbreviation\": \"LIM\",\n          \"munis\": [{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM331 - Greater Giyani [Giyani]\",\"muniCode\":\"LIM331\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM332 - Greater Letaba [Duiwelskloof]\",\"muniCode\":\"LIM332\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM333 - Greater Tzaneen [Tzaneen]\",\"muniCode\":\"LIM333\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM334 - Ba-Phalaborwa [Phalaborwa]\",\"muniCode\":\"LIM334\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM335 - Maruleng [Hoedspruit]\",\"muniCode\":\"LIM335\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM341 - Musina [Messina]\",\"muniCode\":\"LIM341\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM342 - Mutale [Mutale-Masisi]\",\"muniCode\":\"LIM342\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM343 - Thulamela [Thohoyandou]\",\"muniCode\":\"LIM343\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM344 - Makhado [Louis Trichardt]\",\"muniCode\":\"LIM344\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM351 - Blouberg [Bochum/My Darling]\",\"muniCode\":\"LIM351\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM352 - Aganang [Moletji/Matlala]\",\"muniCode\":\"LIM352\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM353 - Molemole [Dendron/Dikgale]\",\"muniCode\":\"LIM353\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM354 - Polokwane [Pietersburg]\",\"muniCode\":\"LIM354\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM355 - Lepele-Nkumpi [Lebowakgomo]\",\"muniCode\":\"LIM355\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM361 - Thabazimbi [Thabazimbi]\",\"muniCode\":\"LIM361\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM362 - Lephalale [Ellisras]\",\"muniCode\":\"LIM362\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM364 - Mookgopong [Naboomspruit]\",\"muniCode\":\"LIM364\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM365 - Modimolle [Nylstroom]\",\"muniCode\":\"LIM365\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM366 - Bela-Bela [Warmbad]\",\"muniCode\":\"LIM366\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM367 - Mogalakwena [Potgietersrus]\",\"muniCode\":\"LIM367\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM471 - Ephraim Mogale [Marble Hall]\",\"muniCode\":\"LIM471\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM472 - Elias Motsoaledi [Groblersdal]\",\"muniCode\":\"LIM472\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM473 - Makhuduthamaga [Ngwaritsi]\",\"muniCode\":\"LIM473\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM474 - Fetakgomo [Fetakgomo ]\",\"muniCode\":\"LIM474\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM475 - Greater Tubatse [Burgersfort/Ohrigstad/Eastern Tubatse]\",\"muniCode\":\"LIM475\"}]\n      },\n      {\n          \"name\": \"Mpumalanga\",\n          \"abbreviation\": \"MP\",\n          \"munis\": [{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP301 - Albert Luthuli [Elukwatini/Carolina]\",\"muniCode\":\"MP301\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP302 - Msukaligwa [Ermelo]\",\"muniCode\":\"MP302\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP303 - Mkhondo [Piet Retief]\",\"muniCode\":\"MP303\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP304 - Pixley Ka Seme [Volksrust]\",\"muniCode\":\"MP304\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP305 - Lekwa [Standerton]\",\"muniCode\":\"MP305\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP306 - Dipaleseng [Balfour]\",\"muniCode\":\"MP306\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP307 - Govan Mbeki [Highveld Ridge]\",\"muniCode\":\"MP307\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP311 - Delmas [Delmas]\",\"muniCode\":\"MP311\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP312 - Emalahleni [Witbank]\",\"muniCode\":\"MP312\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP313 - Steve Tshwete [Middelburg]\",\"muniCode\":\"MP313\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP314 - Emakhazeni [Belfast]\",\"muniCode\":\"MP314\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP315 - Thembisile [KwaMhlanga]\",\"muniCode\":\"MP315\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP316 - Dr JS Moroka [Mdutjana]\",\"muniCode\":\"MP316\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP321 - Thaba Chweu [Sabie]\",\"muniCode\":\"MP321\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP322 - Mbombela [Nelspruit]\",\"muniCode\":\"MP322\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP323 - Umjindi [Barberton]\",\"muniCode\":\"MP323\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP324 - Nkomazi [Nkomazi]\",\"muniCode\":\"MP324\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP325 - Bushbuckridge [Bushbuckridge]\",\"muniCode\":\"MP325\"}]\n      },\n      {\n          \"name\": \"Gauteng\",\n          \"abbreviation\": \"GT\",\n          \"munis\": [{\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT421 - Emfuleni [Vereeniging]\",\"muniCode\":\"GT421\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT422 - Midvaal [Meyerton]\",\"muniCode\":\"GT422\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT423 - Lesedi [Heidelberg]\",\"muniCode\":\"GT423\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT481 - Mogale City [Krugersdorp]\",\"muniCode\":\"GT481\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT482 - Randfontein [Randfontein]\",\"muniCode\":\"GT482\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT483 - Westonaria [Westonaria]\",\"muniCode\":\"GT483\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT484 - Merafong City [Carletonville]\",\"muniCode\":\"GT484\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"}]\n      },\n      {\n          \"name\": \"KwaZulu-Natal\",\n          \"abbreviation\": \"KZN\",\n          \"munis\": [{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN211 - Vulamehlo [Dududu]\",\"muniCode\":\"KZN211\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN212 - Umdoni [Scottburgh]\",\"muniCode\":\"KZN212\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN213 - Umzumbe [Umzumbe]\",\"muniCode\":\"KZN213\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN214 - UMuziwabantu [Harding]\",\"muniCode\":\"KZN214\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN215 - Ezinqoleni [Izinqolweni]\",\"muniCode\":\"KZN215\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN216 - Hibiscus Coast [Port Shepstone]\",\"muniCode\":\"KZN216\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN221 - uMshwathi [Wartburg]\",\"muniCode\":\"KZN221\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN222 - uMngeni [Howick]\",\"muniCode\":\"KZN222\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN223 - Mooi Mpofana [Mooirivier]\",\"muniCode\":\"KZN223\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN224 - Impendle [Impendle]\",\"muniCode\":\"KZN224\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN225 - Msunduzi [Pietermaritzburg]\",\"muniCode\":\"KZN225\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN226 - Mkhambathini [Camperdown]\",\"muniCode\":\"KZN226\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN227 - Richmond [Richmond]\",\"muniCode\":\"KZN227\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN232 - Emnambithi/Ladysmith [Ladysmith]\",\"muniCode\":\"KZN232\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN233 - Indaka [Waaihoek]\",\"muniCode\":\"KZN233\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN234 - Umtshezi [Estcourt]\",\"muniCode\":\"KZN234\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN235 - Okhahlamba [Bergville]\",\"muniCode\":\"KZN235\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN236 - Imbabazane [Loskop]\",\"muniCode\":\"KZN236\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN241 - Endumeni [Dundee]\",\"muniCode\":\"KZN241\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN242 - Nqutu [Nqutu]\",\"muniCode\":\"KZN242\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN244 - Msinga [Pomeroy]\",\"muniCode\":\"KZN244\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN245 - Umvoti [Greytown]\",\"muniCode\":\"KZN245\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN252 - Newcastle [Newcastle]\",\"muniCode\":\"KZN252\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN253 - eMadlangeni [Utrecht]\",\"muniCode\":\"KZN253\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN254 - Dannhauser [Durnacol]\",\"muniCode\":\"KZN254\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN261 - eDumbe [Paulpietersburg]\",\"muniCode\":\"KZN261\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN262 - UPhongolo [Pongola]\",\"muniCode\":\"KZN262\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN263 - Abaqulusi [Vryheid]\",\"muniCode\":\"KZN263\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN265 - Nongoma [Nongoma]\",\"muniCode\":\"KZN265\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN266 - Ulundi [Ulundi]\",\"muniCode\":\"KZN266\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN271 - Umhlabuyalingana [Emangusi]\",\"muniCode\":\"KZN271\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN272 - Jozini [Mkuze]\",\"muniCode\":\"KZN272\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN273 - The Big 5 False Bay [Hluhluwe]\",\"muniCode\":\"KZN273\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN274 - Hlabisa [Somkele]\",\"muniCode\":\"KZN274\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN275 - Mtubatuba [Mtubatuba]\",\"muniCode\":\"KZN275\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN281 - Mfolozi [KwaMbonambi]\",\"muniCode\":\"KZN281\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN282 - uMhlathuze [Richards Bay]\",\"muniCode\":\"KZN282\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN283 - Ntambana [Ntambana]\",\"muniCode\":\"KZN283\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN284 - uMlalazi [Eshowe]\",\"muniCode\":\"KZN284\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN285 - Mthonjaneni [Melmoth]\",\"muniCode\":\"KZN285\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN286 - Nkandla [Nkandla]\",\"muniCode\":\"KZN286\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN291 - Mandeni [Mandeni]\",\"muniCode\":\"KZN291\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN292 - KwaDukuza [Stanger]\",\"muniCode\":\"KZN292\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN293 - Ndwedwe [Ndwedwe]\",\"muniCode\":\"KZN293\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN294 - Maphumulo [Maphumulo]\",\"muniCode\":\"KZN294\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN431 - Ingwe [Creighton]\",\"muniCode\":\"KZN431\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN432 - Kwa Sani [Underberg]\",\"muniCode\":\"KZN432\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN433 - Greater Kokstad [Kokstad]\",\"muniCode\":\"KZN433\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN434 - Ubuhlebezwe [Ixopo]\",\"muniCode\":\"KZN434\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN435 - Umzimkhulu [Umzimkulu]\",\"muniCode\":\"KZN435\"}]\n      },\n      {\n          \"name\": \"North West\",\n          \"abbreviation\": \"NW\",\n          \"munis\": [{\"provinceName\":\"North West\",\"muniName\":\"NW371 - Moretele [Makapanstad]\",\"muniCode\":\"NW371\"},{\"provinceName\":\"North West\",\"muniName\":\"NW372 - Madibeng [Brits]\",\"muniCode\":\"NW372\"},{\"provinceName\":\"North West\",\"muniName\":\"NW373 - Rustenburg [Rustenburg]\",\"muniCode\":\"NW373\"},{\"provinceName\":\"North West\",\"muniName\":\"NW374 - Kgetlengrivier [Koster]\",\"muniCode\":\"NW374\"},{\"provinceName\":\"North West\",\"muniName\":\"NW375 - Moses Kotane [Mogwase]\",\"muniCode\":\"NW375\"},{\"provinceName\":\"North West\",\"muniName\":\"NW381 - Ratlou [Setlagole]\",\"muniCode\":\"NW381\"},{\"provinceName\":\"North West\",\"muniName\":\"NW382 - Tswaing [Delareyville]\",\"muniCode\":\"NW382\"},{\"provinceName\":\"North West\",\"muniName\":\"NW383 - Mafikeng [Mafikeng]\",\"muniCode\":\"NW383\"},{\"provinceName\":\"North West\",\"muniName\":\"NW384 - Ditsobotla [Lichtenburg]\",\"muniCode\":\"NW384\"},{\"provinceName\":\"North West\",\"muniName\":\"NW385 - Ramotshere Moiloa [Zeerust]\",\"muniCode\":\"NW385\"},{\"provinceName\":\"North West\",\"muniName\":\"NW392 - Naledi [Vryburg]\",\"muniCode\":\"NW392\"},{\"provinceName\":\"North West\",\"muniName\":\"NW393 - Mamusa [Schweizer-Reneke]\",\"muniCode\":\"NW393\"},{\"provinceName\":\"North West\",\"muniName\":\"NW394 - Greater Taung [Reivilo]\",\"muniCode\":\"NW394\"},{\"provinceName\":\"North West\",\"muniName\":\"NW396 - Lekwa-Teemane [Christiana]\",\"muniCode\":\"NW396\"},{\"provinceName\":\"North West\",\"muniName\":\"NW397 - NW397 Local Municipality [Ganyesa/Pomfret]\",\"muniCode\":\"NW397\"},{\"provinceName\":\"North West\",\"muniName\":\"NW401 - Ventersdorp [Ventersdorp]\",\"muniCode\":\"NW401\"},{\"provinceName\":\"North West\",\"muniName\":\"NW402 - Tlokwe [Potchefstroom]\",\"muniCode\":\"NW402\"},{\"provinceName\":\"North West\",\"muniName\":\"NW403 - Matlosana [Klerksdorp]\",\"muniCode\":\"NW403\"},{\"provinceName\":\"North West\",\"muniName\":\"NW404 - Maquassi Hills [Wolmaransstad]\",\"muniCode\":\"NW404\"}]\n      },\n      {\n          \"name\": \"Free State\",\n          \"abbreviation\": \"FS\",\n          \"munis\": [{\"provinceName\":\"Free State\",\"muniName\":\"FS161 - Letsemeng [Koffiefontein]\",\"muniCode\":\"FS161\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS162 - Kopanong [Trompsburg]\",\"muniCode\":\"FS162\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS163 - Mohokare [Zastron]\",\"muniCode\":\"FS163\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS164 - Naledi [Dewetsdorp]\",\"muniCode\":\"FS164\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS181 - Masilonyana [Theunissen]\",\"muniCode\":\"FS181\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS182 - Tokologo [Dealesville]\",\"muniCode\":\"FS182\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS183 - Tswelopele [Hoopstad]\",\"muniCode\":\"FS183\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS184 - Matjhabeng [Welkom]\",\"muniCode\":\"FS184\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS185 - Nala [Bothaville]\",\"muniCode\":\"FS185\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS191 - Setsoto [Senekal]\",\"muniCode\":\"FS191\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS192 - Dihlabeng [Bethlehem]\",\"muniCode\":\"FS192\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS193 - Nketoana [Reitz]\",\"muniCode\":\"FS193\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS194 - Maluti a Phofung [Qwa-Qwa]\",\"muniCode\":\"FS194\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS195 - Phumelela [Vrede]\",\"muniCode\":\"FS195\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS196 - Mantsopa [Ladybrand]\",\"muniCode\":\"FS196\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS201 - Moqhaka [Kroonstad]\",\"muniCode\":\"FS201\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS203 - Ngwathe [Parys]\",\"muniCode\":\"FS203\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS204 - Metsimaholo [Sasolburg]\",\"muniCode\":\"FS204\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS205 - Mafube [Frankfort]\",\"muniCode\":\"FS205\"},{\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"}]\n      },\n      {\n          \"name\": \"Eastern Cape\",\n          \"abbreviation\": \"EC\",\n          \"munis\": [{\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC101 - Camdeboo [Graaff-Reinet]\",\"muniCode\":\"EC101\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC102 - Blue Crane Route [Somerset East]\",\"muniCode\":\"EC102\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC103 - Ikwezi [Jansenville]\",\"muniCode\":\"EC103\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC104 - Makana [Grahamstown]\",\"muniCode\":\"EC104\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC105 - Ndlambe [Port Alfred]\",\"muniCode\":\"EC105\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC106 - Sundays River Valley [Kirkwood]\",\"muniCode\":\"EC106\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC107 - Baviaans [Willowmore]\",\"muniCode\":\"EC107\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC108 - Kouga [Humansdorp]\",\"muniCode\":\"EC108\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC109 - Kou-Kamma [Kareedouw]\",\"muniCode\":\"EC109\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC121 - Mbhashe [Idutywa]\",\"muniCode\":\"EC121\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC122 - Mnquma [Butterworth]\",\"muniCode\":\"EC122\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC123 - Great Kei [Komga]\",\"muniCode\":\"EC123\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC124 - Amahlathi [Stutterheim]\",\"muniCode\":\"EC124\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC126 - Ngqushwa [Peddie]\",\"muniCode\":\"EC126\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC127 - Nkonkobe [Alice]\",\"muniCode\":\"EC127\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC128 - Nxuba [Adelaide]\",\"muniCode\":\"EC128\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC131 - Inxuba Yethemba [Cradock]\",\"muniCode\":\"EC131\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC132 - Tsolwana [Tarkastad]\",\"muniCode\":\"EC132\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC133 - Inkwanca [Molteno]\",\"muniCode\":\"EC133\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC134 - Lukhanji [Queenstown]\",\"muniCode\":\"EC134\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC135 - Intsika Yethu [Cofimvaba]\",\"muniCode\":\"EC135\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC136 - Emalahleni [Lady Frere]\",\"muniCode\":\"EC136\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC137 - Engcobo [Engcobo]\",\"muniCode\":\"EC137\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC138 - Sakhisizwe [Elliot]\",\"muniCode\":\"EC138\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC141 - Elundini [Mount Fletcher]\",\"muniCode\":\"EC141\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC142 - Senqu [Lady Grey]\",\"muniCode\":\"EC142\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC143 - Maletswai [Aliwal North]\",\"muniCode\":\"EC143\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC144 - Gariep [Burgersdorp]\",\"muniCode\":\"EC144\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC153 - Ngquza Hill [Flagstaff]\",\"muniCode\":\"EC153\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC154 - Port St Johns [Port St Johns]\",\"muniCode\":\"EC154\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC155 - Nyandeni [Libode]\",\"muniCode\":\"EC155\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC156 - Mhlontlo [Qumbu]\",\"muniCode\":\"EC156\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC157 - King Sabata Dalindyebo [Umtata]\",\"muniCode\":\"EC157\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC441 - Matatiele [Matatiele]\",\"muniCode\":\"EC441\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC442 - Umzimvubu [Mount Ayliff]\",\"muniCode\":\"EC442\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC443 - Mbizana [Bizana]\",\"muniCode\":\"EC443\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC444 - Ntabankulu [Ntabankulu]\",\"muniCode\":\"EC444\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}]\n      },\n      {\n          \"name\": \"Northern Cape\",\n          \"abbreviation\": \"NC\",\n          \"munis\": [{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC061 - RICHTERSVELD [Port Nolloth]\",\"muniCode\":\"NC061\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC062 - NAMA KHOI [Springbok]\",\"muniCode\":\"NC062\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC064 - KAMIESBERG [Garies]\",\"muniCode\":\"NC064\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC065 - HANTAM [Calvinia]\",\"muniCode\":\"NC065\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC066 - KAROO HOOGLAND [Fraserburg]\",\"muniCode\":\"NC066\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC067 - KHâI-MA [Pofadder]\",\"muniCode\":\"NC067\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC071 - UBUNTU [Victoria West]\",\"muniCode\":\"NC071\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC072 - UMSOBOMVU [Colesberg]\",\"muniCode\":\"NC072\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC073 - EMTHANJENI [De Aar]\",\"muniCode\":\"NC073\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC074 - KAREEBERG [Carnarvon]\",\"muniCode\":\"NC074\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC075 - RENOSTERBERG [Phillipstown]\",\"muniCode\":\"NC075\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC076 - THEMBELIHLE [Hopetown]\",\"muniCode\":\"NC076\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC077 - SIYATHEMBA [Prieska]\",\"muniCode\":\"NC077\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC078 - SIYANCUMA [Griekwastad]\",\"muniCode\":\"NC078\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC081 - MIER [Mier]\",\"muniCode\":\"NC081\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC082 - KAI !GARIB [Keimoes]\",\"muniCode\":\"NC082\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC083 - KHARA HAIS [Upington]\",\"muniCode\":\"NC083\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC084 - !KHEIS [Groblershoop]\",\"muniCode\":\"NC084\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC085 - TSANTSABANE [Postmasburg]\",\"muniCode\":\"NC085\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC086 - KGATELOPELE [Danielskuil]\",\"muniCode\":\"NC086\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC091 - Sol Plaatje [Kimberley]\",\"muniCode\":\"NC091\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC092 - Dikgatlong [Barkley West]\",\"muniCode\":\"NC092\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC093 - Magareng [Warrenton]\",\"muniCode\":\"NC093\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC094 - Phokwane [Hartswater]\",\"muniCode\":\"NC094\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC451 - Joe Morolong [Kgalagadi]\",\"muniCode\":\"NC451\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC452 - GA-SEGONYANA [Kuruman]\",\"muniCode\":\"NC452\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC453 - GAMAGARA [Kathu]\",\"muniCode\":\"NC453\"}]\n      },\n      {\n          \"name\": \"Western Cape\",\n          \"abbreviation\": \"WC\",\n          \"munis\": [{\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC011 - Matzikama [Vredendal]\",\"muniCode\":\"WC011\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC012 - Cederberg [Citrusdal]\",\"muniCode\":\"WC012\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC013 - Bergrivier [Velddrif]\",\"muniCode\":\"WC013\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC014 - Saldanha Bay [West Coast Peninsula]\",\"muniCode\":\"WC014\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC015 - Swartland [Malmesbury]\",\"muniCode\":\"WC015\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC022 - Witzenberg [Ceres]\",\"muniCode\":\"WC022\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC023 - Drakenstein [Paarl]\",\"muniCode\":\"WC023\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC024 - Stellenbosch [Stellenbosch]\",\"muniCode\":\"WC024\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC025 - Breede Valley [Worcester]\",\"muniCode\":\"WC025\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC026 - Langeberg [Robertson]\",\"muniCode\":\"WC026\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC031 - Theewaterskloof [Caledon]\",\"muniCode\":\"WC031\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC032 - Overstrand [Greater Hermanus]\",\"muniCode\":\"WC032\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC033 - Cape Agulhas [Bredasdorp]\",\"muniCode\":\"WC033\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC034 - Swellendam [Barrydale/Swellendam ]\",\"muniCode\":\"WC034\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC041 - Kannaland [Ladismith]\",\"muniCode\":\"WC041\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC042 - Hessequa [Heidelberg/Riversdale]\",\"muniCode\":\"WC042\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC043 - Mossel Bay [Mossel Bay]\",\"muniCode\":\"WC043\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC044 - George [George]\",\"muniCode\":\"WC044\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC045 - Oudtshoorn [Oudtshoorn]\",\"muniCode\":\"WC045\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC047 - Bitou [Greater Plettenberg Bay]\",\"muniCode\":\"WC047\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC048 - Knysna [Knysna]\",\"muniCode\":\"WC048\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC051 - Laingsburg [Laingsburg]\",\"muniCode\":\"WC051\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC052 - Prince Albert [Prins Albert]\",\"muniCode\":\"WC052\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC053 - Beaufort West [Beaufort West]\",\"muniCode\":\"WC053\"}]\n      }\n  ]\n  return provincesData;\n}\n\nexport function getMetrosData() {\n  var metrosData = [\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},\n    {\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},\n    {\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},\n    {\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"},\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}\n  ]\n  return metrosData;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\",\"ELVIZ_grouprect\":\"barchart_ELVIZ_grouprect__3r-aC\",\"ELVIZ_barchart\":\"barchart_ELVIZ_barchart__2NZ_A\",\"ELVIZ_stylesheet-tv\":\"barchart_ELVIZ_stylesheet-tv__1BK01\",\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_chart-body\":\"barchart_ELVIZ_chart-body__Zewz3\",\"ELVIZ_groupbarchart\":\"barchart_ELVIZ_groupbarchart__3A7Qi\",\"ELVIZ_deltabarchart\":\"barchart_ELVIZ_deltabarchart__1KKc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__tgFvS\",\"barchart-map\":\"barchartMap_barchart-map__1q5Ah\",\"ELVIZ_stylesheet-tv\":\"barchartMap_ELVIZ_stylesheet-tv__2Oynn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"map-widget\":\"map_map-widget__2RFiV\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\",\"ELVIZ_stylesheet-web\":\"map_ELVIZ_stylesheet-web__QqAjU\",\"ELVIZ_stylesheet-none\":\"map_ELVIZ_stylesheet-none__3Bxph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__1KFQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\",\"piechart\":\"piechart_piechart__1_rKy\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__1l-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__1UVX7\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__1faC8\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"quickresultswidget\":\"quickResultsWidget_quickresultswidget__1za_y\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__284h0\",\"quick-results-title\":\"quickResultsWidget_quick-results-title__l1vy0\",\"race-for-seats\":\"quickResultsWidget_race-for-seats__2jA3-\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__1QzTz\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3beRX\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3OaTN\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__1_krp\",\"ELVIZ_current-progress\":\"quickResultsWidget_ELVIZ_current-progress__2hsjC\",\"ELVIZ_current-turnout\":\"quickResultsWidget_ELVIZ_current-turnout__3BLN5\",\"ELVIZ_current-counting-progress\":\"quickResultsWidget_ELVIZ_current-counting-progress__3GJGf\",\"ELVIZ_current-spoilt-votes\":\"quickResultsWidget_ELVIZ_current-spoilt-votes__2nH8V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__1v6iW\",\"ELVIZ_tooltip\":\"piechart_ELVIZ_tooltip__nq19G\",\"donutchart\":\"piechart_donutchart__2UxpS\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__23IoW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__2O9dV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__29vdd\",\"multievent-container\":\"barchartEmbed_multievent-container__1G-dC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__3KEZl\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__2bLlY\",\"horseshoechart\":\"horseshoe_horseshoechart__2Js34\",\"ELVIZ_stylesheet-tv\":\"horseshoe_ELVIZ_stylesheet-tv__1-bHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__38M9g\",\"multievent-container\":\"barchartEmbed_multievent-container__2OlKA\",\"multiparties-container\":\"barchartEmbed_multiparties-container__3Xu9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3Hovq\",\"multievent-container\":\"barchartEmbed_multievent-container__2y7nI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3iHSi\",\"multievent-container\":\"barchartEmbed_multievent-container__3dDi0\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2Ln06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};","import React, { Component } from \"react\";\n\nimport {\n    loadScriptsForEmbedMode\n} from \"../utils\";\n\nexport default class EmbedBase extends Component {\n    constructor(props) {\n        super(props);\n        loadScriptsForEmbedMode();\n    }\n\n    render () {\n        return (\n            <div></div>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 1\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 6\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForSeatsBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 9\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    loadCanvg\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();        \n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,  \n            stylesheetFor,    \n            eventDescription,      \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    loadCanvg,\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,       \n            stylesheetFor,     \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 10\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 2\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var newState = JSON.parse(JSON.stringify(this.state));\n        newState.componentID = -1000;\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionYear: 2014,\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n\n            electionEvents: [],\n            electionYears: [],\n            componentID: 5\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"];\n                var electionYears = [];\n                electionEvents.forEach((item) => {\n                    var eventDescription = item.description;\n                    var year = /(19|20)\\d{2}/g.exec(eventDescription)[0];\n                    item.year = year;\n                    if (electionYears.indexOf(year) == -1) {\n                        electionYears.push(year);\n                    }\n                })\n                self.setState({electionEvents, electionYears});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onNatEventDescriptionChange(e) {\n        this.setState({nationalEventDescription: e.target.value, eventDescription: e.target.value });\n    }\n\n    onProvEventDescriptionChange(e) {\n        this.setState({provincialEventDescription: e.target.value });\n    }\n\n    onEventYearChange(e) {\n        var electionYear = e.target.value;\n        var nationalEventDescription, provincialEventDescription;\n        var {\n            electionEvents\n        } = this.state;\n\n        var yearFilter = electionEvents.filter(item => item.year == electionYear);\n        var nationalFilter = yearFilter.filter(item => item.eventType.description == \"National Election\");\n        var provincialFilter = yearFilter.filter(item => item.eventType.description != \"National Election\");\n\n\n        if (nationalFilter.length) {\n            nationalEventDescription = nationalFilter[0].description;\n        } else {\n            nationalEventDescription = yearFilter[0].description;\n        }\n        if (provincialFilter.length) {\n            provincialEventDescription = provincialFilter[0].description;\n        } else {\n            provincialEventDescription = yearFilter[0].description;\n        }\n\n        this.setState({\n            electionYear, \n            nationalEventDescription, \n            provincialEventDescription,\n            eventDescription: nationalEventDescription\n         });\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            nationalEventDescription,\n            provincialEventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents,\n            electionYears,\n            electionYear\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Election Year </label>\n                  <select className={className(\"form-control\")} \n                     value={electionYear}\n                     onChange={this.onEventYearChange.bind(this)}>\n                        {\n                            electionYears.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>National Event </label>\n                  <select className={className(\"form-control\")} \n                     value={nationalEventDescription}\n                     onChange={this.onNatEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.year == electionYear)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Provincial Event </label>\n                  <select className={className(\"form-control\")} \n                     value={provincialEventDescription}\n                     onChange={this.onProvEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.year == electionYear)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 4\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showProgVotesPiechart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 7\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties\n                // .filter(party => party.event.description == )\n                .filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`                 \n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatsComparisonBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 8\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatHorseShoeChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 16\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showVoteComparisonBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 12\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 13\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 14\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 15\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 17\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatDonutChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            numPartiesSplitNatProv: 3,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 18\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents,\n            allParties,\n            numPartiesSplitNatProv\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numPartiesSplitNatProv}\n                    onChange={e => this.setState({numPartiesSplitNatProv: e.target.value})} />\n              </div>\n\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSplitNatProvChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","export {default as BarChartEmbed} from \"./BarChart/barchartEmbed\";\nexport {default as RaceForSeatsBarChartEmbed} from \"./RaceForSeatBarchart/barchartEmbed\";\nexport {default as SpoiltBarChartEmbed} from \"./SpoiltBarchart/barchartEmbed\";\nexport {default as MapEmbed} from \"./Map/mapEmbed\";\nexport {default as TurnoutMapEmbed} from \"./TurnoutMap/mapEmbed\";\nexport {default as TurnoutBarChartEmbed} from \"./TurnoutBarchart/barchartEmbed\";\nexport {default as BarchartWithNavMapEmbed} from \"./BarchartWithNavMap/barchartMapEmbed\";\nexport {default as QuickResultsWidgetEmbed} from \"./QuickResultsWidget/quickResultsWidgetEmbed\";\nexport {default as ProgVotesCountPiechartEmbed} from \"./ProgVotesCountPiechart/piechartEmbed\";\nexport {default as RaceForSeatsComparisonBarChartEmbed} from \"./SeatCompBarchart/barchartEmbed\";\nexport {default as SeatHorseShoeChartEmbed} from \"./SeatHorseShoeChart/horseshoeEmbed\";\nexport {default as VoteComparisonBarchartEmbed} from \"./VoteCompBarchart/barchartEmbed\";\n\nexport {default as TVSeatCompBarchartEmbed} from \"./TVSeatCompBarchart/barchartEmbed\";\nexport {default as TVSeatSwingBarchartEmbed} from \"./TVSeatSwingBarchart/barchartEmbed\";\nexport {default as TVVoteCompBarchartEmbed} from \"./TVVoteCompBarchart/barchartEmbed\";\nexport {default as TVVoteSwingBarchartEmbed} from \"./TVVoteSwingBarchart/barchartEmbed\";\n\nexport {default as SeatDonutChartEmbed} from \"./RaceForSeatDonut/piechartEmbed\";\nexport {default as SplitNatProvEmbed} from \"./SplitNatProv/barchartEmbed\";","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        barSvg.selectAll('rect').remove();\n        barTextSvg.selectAll('text').remove();\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        var maxValue = d3.max(chartData, function(d) { return parseFloat(options.yValue(d)); });\n        if (options.customizeDynamicMaxValue) {\n          minMaxY[1] = options.customizeDynamicMaxValue(maxValue);\n        } else {\n          minMaxY[1] = maxValue + 1;\n        }\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange,\n  triggerCustomEvent,\n  fetchLocationTrackFromVDdata\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  dynamicYAxisFromValues: true,\n  customizeDynamicMaxValue: (maxVal) => Math.min(100, maxVal * 1.5),\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        comp: \"votes-default\",\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 1\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n\n        if (props.comp == \"votes-myvd\") {\n          var newState;\n          if (chartData) {\n            newState = fetchLocationTrackFromVDdata(data);\n          } else {\n            newState = {iecId: \"\"}\n          }\n          var needUpdate = false;\n          Object.keys(newState).forEach(key => {\n            if (props[key] != newState[key]) {\n              needUpdate = true;\n            }\n          })\n          if (needUpdate) {\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n          }\n        }\n       \n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName2,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 6\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName2(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n        \n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName2(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 9\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            disableNavigation: false,\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    // componentWillReceiveProps(newProps) {\n    //     var newState = JSON.parse(JSON.stringify(this.state));\n    //     fetchDataFromOBJ(newState, newProps);\n    //     this.setState(newState);\n    // }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        if (!this.state.disableNavigation) {\n            var newState = event.detail;\n            this.setState(newState)\n        }\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                var regionType = self.state.regionType\n                if (regionType == \"municipality\") {\n                    if (!geoJsonData.objects[self.state.muniCode])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                } else { // \"municipality-vd\"\n                    if (!geoJsonData.objects[self.state.iecId])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                }\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    // if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    var undefinedText;\n                    if (self.state.regionType === \"province\") {\n                        undefinedText = \"New municipality - no previous results available\"\n                    } else {\n                        undefinedText = \"New voting district - no previous results available\"\n                    }\n                    var mainPartyName = getMainPartyName(d, i);\n                    var subRegionName = getSubRegionName(d.properties, self.state);\n                    var tooltipText = (typeof mainPartyName !== \"undefined\")? \n                                (subRegionName + \" : \" + mainPartyName) : undefinedText;\n\n                    tooltipDiv.html(tooltipText)\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {                  \n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                    } else if (regionType === \"municipality\"){ // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                    } else { // \"municipality-vd\"\n                        return;\n                    }\n                    triggerCustomEvent(events.REGION_CHANGE, newState);\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    self.setState(newState);\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 500)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                \n                function setRegionType(regionType) {\n                    var newState;\n                    var newState = {\n                        regionType: self.state.regionType, \n                        provinceName: self.state.provinceName,\n                        muniName: self.state.muniName,\n                        muniCode: self.state.muniCode,\n                        iecId: self.state.iecId,\n                    }\n                    newState.regionType = regionType;\n                    triggerCustomEvent(events.REGION_CHANGE, newState);\n                    self.setState(newState);\n                }\n\n                function appendSpan(foDiv, regionName, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"span\")\n                        .style(\"height\", \"30px\")\n                        .style(\"cursor\", \"default\")\n                        .html(regionName);\n                }\n\n                function appendLink(foDiv, regionName, regionType, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"a\")\n                        .style(\"height\", \"30px\")\n                        .style(\"cursor\", \"pointer\")\n                        .html(regionName)\n                        .on(\"click\", function() {\n                            setRegionType(regionType);\n                        });\n                }\n                \n                var foDiv = fo.append(\"xhtml:div\");\n                var regionType = self.state.regionType;\n                if (regionType == \"national\") {\n                    appendSpan(foDiv, \"South Africa\", false);\n                } else {\n                    appendLink(foDiv, \"South Africa\", \"national\", false);\n                    if (regionType == \"province\") {\n                        appendSpan(foDiv, self.state.provinceName, true);\n                    } else {\n                        appendLink(foDiv, self.state.provinceName, \"province\", true);\n                        if (regionType == \"municipality\") {\n                            appendSpan(foDiv, self.state.muniCode, true);\n                        } else {\n                            appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                            appendSpan(foDiv, self.state.iecId, true);\n                        }\n                    }\n                }\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);\n\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            \n            if (self.state.disableNavigation) {\n                return;\n            }\n\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(`${currentRegionName} has been disestablished`); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            if (!window.canvg) {\n                return reject(\"canvg module not available\");\n            }\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                var regionType = self.state.regionType\n                if (regionType == \"municipality\") {\n                    if (!geoJsonData.objects[self.state.muniCode])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                } else { // \"municipality-vd\"\n                    if (!geoJsonData.objects[self.state.iecId])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                }\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    \n                    var undefinedText;\n                    if (self.state.eventDescription.indexOf(\"2019\") == -1) {\n                        if (self.state.regionType === \"province\") {\n                            undefinedText = \"New municipality - no previous results available\"\n                        } else {\n                            undefinedText = \"New voting district - no previous results available\"\n                        }\n                    } else {\n                        undefinedText = \"votes not counted yet\";\n                    }\n\n                    var turnoutData = getTurnout(d, i);\n                    var subRegionName = getSubRegionName(d.properties, self.state);\n                    var tooltipText = (typeof turnoutData !== \"undefined\")? \n                                (subRegionName + \" : \" + turnoutData + \"%\") : undefinedText;\n\n                    tooltipDiv.html(tooltipText)\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n                if (!self.state.disableNavigation) {\n                    var fo = svg.append(\"foreignObject\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", 10)\n                        .attr(\"width\", 500)\n                        .attr(\"height\", 30)\n                        .attr(\"class\", \"map-controls\")\n                    \n                    function setRegionType(regionType) {\n                        var newState;\n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        newState.regionType = regionType;\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    }\n    \n                    function appendSpan(foDiv, regionName, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"span\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"default\")\n                            .html(regionName);\n                    }\n    \n                    function appendLink(foDiv, regionName, regionType, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"a\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"pointer\")\n                            .html(regionName)\n                            .on(\"click\", function() {\n                                setRegionType(regionType);\n                            });\n                    }\n                    \n                    var foDiv = fo.append(\"xhtml:div\");\n                    var regionType = self.state.regionType;\n                    if (regionType == \"national\") {\n                        appendSpan(foDiv, \"South Africa\", false);\n                    } else {\n                        appendLink(foDiv, \"South Africa\", \"national\", false);\n                        if (regionType == \"province\") {\n                            appendSpan(foDiv, self.state.provinceName, true);\n                        } else {\n                            appendLink(foDiv, self.state.provinceName, \"province\", true);\n                            if (regionType == \"municipality\") {\n                                appendSpan(foDiv, self.state.muniCode, true);\n                            } else {\n                                appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                appendSpan(foDiv, self.state.iecId, true);\n                            }\n                        }\n                    }\n                    // foDiv\n                    //     .append(\"button\")\n                    //     .attr(\"class\", \"go-back\")\n                    //     .style(\"height\", \"30px\")\n                    //     .style(\"color\", \"black\")\n                    //     .html(\"go back\")\n                    //     .on(\"click\", function() {\n                    //         var regionType = self.state.regionType;\n                    //         var newState, event;\n        \n                    //         var newState = {\n                    //             regionType: self.state.regionType, \n                    //             provinceName: self.state.provinceName,\n                    //             muniName: self.state.muniName,\n                    //             muniCode: self.state.muniCode,\n                    //             iecId: self.state.iecId,\n                    //         }\n                            \n                    //         if (regionType === \"province\") {\n                    //             newState.regionType = \"national\";\n                    //         } else if (regionType === \"municipality\") {\n                    //             newState.regionType = \"province\";\n                    //         } else if (regionType === \"municipality-vd\") {\n                    //             newState.regionType = \"municipality\";\n                    //         }\n        \n                    //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                    //         self.setState(newState);\n                    //     });\n                }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);       \n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(`${currentRegionName} has been disestablished`); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 10\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n    \n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 2\n        }      \n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n      const {\n        stylesheetFor\n      } = this.state;\n\n        return (\n        <div ref=\"superwidget\" className={className(\"barchart-map\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = options.variable,\n        category = options.category,\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n\n        \n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var totalSvg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom)))\n        .classed(\"svg-content\", true);\n    \n    \n    var transformX = height / 2, transformY = height / 2;\n    if (options.chartType === 'Progress on Votes Count') {\n    } else {\n        transformX = width / 2;\n    }\n    var svg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + transformX + ',' + transformY + ')');\n    \n    var labelSvg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + height * 6 / 5 + ',' + height / 2 + ')');\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n\n        if (options.chartType === 'Progress on Votes Count') {\n            colorsData = colorsDataP;\n        } else {\n            var partyColorByName = {};\n\n            var partyColorsData = colorsDataP;\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.abbreviation] = edge.node.colour;\n                })\n            }\n            colorsData = partyColorByName;\n        }\n        \n        data = value;\n\n        if (options.chartType === 'Progress on Votes Count') {\n            labelSvg.selectAll('text').remove();\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', -15)\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle')\n                .text('Completed' + ': ' + data[0][\"percent\"] + '%');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .text('Captured Votes' + ': ' + data[0][\"count\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 15)\n                .text('Total' + ': ' + data[0][\"totalCount\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n        }\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        if (options.chartType === 'Progress on Votes Count') {\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n        } else { //'Race for Seats Donut chart'\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Seats' + ': ' + data.data[\"seats\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Party' + ': ' + data.data[\"name\"] + '</tspan>';\n        }\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count',\n  variable: 'percent',\n  category: 'name'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 4\n      }     \n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"piechart\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"../ProgVotesCountPiechart/d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Donut Chart',\n  variable: 'seats',\n  category: 'name',\n  viewBox: '170 0 360 320'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass DonutChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 17\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-donutchart-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"donutchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default DonutChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 16\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 7\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      \n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 250;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 50;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n\n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n    svg.selectAll(\".topLabel\").remove();\n    svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n    if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n    } else {\n        errorText.text(\"\");\n    }\n    var partyColorByName = {};\n    var partyAbbrByName = {};\n    if (colorsData && colorsData[\"data\"][\"allParties\"][\"edges\"]) {\n      colorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n        partyColorByName[edge.node.name] = edge.node.colour;\n        partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n      })\n    }   \n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.eventDescription));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = Math.min(100, d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) * 1.5);\n      }\n      y.domain(minMaxY);\n\n      var availableParties = \n \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(4)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.eventDescription)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.eventDescription) + x.bandwidth()*1/20}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var eventDescription = groupChartData[i].eventDescription;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*9/10])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(eventDescription)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n\n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n          \n          var parties = [];\n          var partyIecIds = [];\n          groupChartData.forEach(({data: chartData}) => {\n            chartData.forEach(({partyInfo}) => {\n              var party = partyInfo.name;\n              if (partyIecIds.indexOf(partyInfo.iecId) == -1) {\n                  parties.push(party);\n                  partyIecIds.push(partyInfo.iecId);\n              }\n            })\n          })\n          \n          function getLegendXY(i) {\n              return [XaxisOffset + (i%5)*100, height + 30 + parseInt(i/5) * 40];\n          }\n          var legends = svg.selectAll(`.${className(\"legend\")}`)\n              .data(parties)\n              .enter()\n              .append('g')\n              .attr(\"class\", className(\"legend\"))\n              .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n          legends\n              .append(\"rect\")\n              .attr('width', 10)\n              .attr('height', 10)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr(\"fill\", (party, i) => {\n                  return getFillColorFromPartyName(party);\n              })\n          legends.append('text')\n              .attr('x', 30)\n              .attr('y', 10)\n              .style('font-size', '12px')\n              .text(party => partyAbbrByName[party])\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../SplitNatProv/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForAllEvents,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: false\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numPartiesSplitNatProv: 3,\n        eventDescriptionsSplitNatProv: [\n          // \"National Elections 1999\",\n          // \"Provincial Elections 1999\",\n          // \"14 Apr 2004 National Election\",\n          // \"14 Apr 2004 Provincial Election\",\n          \"22 Apr 2009 National Election\",\n          \"22 Apr 2009 Provincial Election\",\n          \"2014 National Election\",\n          \"2014 Provincial Election\",\n          // \"2019 NATIONAL ELECTION\",\n          // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"province\",\n        provinceName: \"Western Cape\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 18\n      }\n\n      console.log(\"SplitNatProv state and props\", this.state, props)\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForAllEvents(props);\n      var dataLoaders = [votesDataLoader];\n\n      chartOptions.topLabel = `${getRegionName(props)} Race for Votes - Split (Nat/Prov)`;\n      if (this.state.componentID == -1000) {\n        chartOptions.topLabel = ``;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesDataForAllEvents(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"Race for Votes\",\n            activeLinkId: ''\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var eventDescription, regionType, selectionData = {}, chartType = \"\";\n        var activeLinkId = passInfo.slice(1, passInfo.length).join('-');\n\n        if (passInfo[1] == '1') {\n            eventDescription = this.state.nationalEventDescription;\n            regionType = \"national\";\n            if (passInfo[2] == '1') {\n                switch (passInfo[3]) {\n                    case '1':\n                        chartType = \"votes-default\";\n                        break;\n                    case '2':\n                        chartType = \"votes-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"votes-CSIR\";\n                        break;\n                    case '4':\n                        chartType = \"votes-progress\";\n                        break;\n                    case '5':\n                        chartType = \"votes-turnout\";\n                        break;\n                    case '6':\n                        chartType = \"votes-myvd\";\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[2] == '2') {\n                switch (passInfo[3]) {\n                    case '1':\n                        chartType = \"seats-default\";\n                        break;\n                    case '2':\n                        chartType = \"seats-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"seats-electeds\";\n                        break;\n                    case '4':\n                        chartType = \"seats-women\";\n                        break;\n                    case '5':\n                        chartType = \"seats-age\";\n                        break;\n                    default:\n                        return;\n                }\n            } else {\n                return;\n            }\n        } else if (passInfo[1] == '2') {\n            eventDescription = this.state.provincialEventDescription;\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n            if (passInfo[3] == '1') {\n                switch (passInfo[4]) {\n                    case '1':\n                        chartType = \"votes-default\"; // done\n                        break;\n                    case '2':\n                        chartType = \"votes-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"votes-progress\"; // done\n                        break;\n                    case '4':\n                        chartType = \"votes-turnout\";// done\n                        break;\n                    case '5':\n                        chartType = \"votes-split\";\n                        break;\n                    case '6':\n                        chartType = \"votes-CSIR\";\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[3] == '2') {\n                switch (passInfo[4]) {\n                    case '1':\n                        chartType = \"seats-default\"; // done\n                        break;\n                    case '2':\n                        chartType = \"seats-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"seats-electeds\";\n                        break;\n                    case '4':\n                        chartType = \"seats-women\";\n                        break;\n                    case '5':\n                        chartType = \"seats-age\";\n                        break;\n                    default:\n                        return;\n                }\n            } else {\n                return;\n            }\n        } else if (passInfo[1] == '3') { // metros\n            eventDescription = this.state.nationalEventDescription;\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            chartType = \"votes-default\";\n        } else {\n            return;\n        }\n\n        if (!chartType)\n            return;\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType \n                && this.state.comp == chartType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName \n                && this.state.comp == chartType)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.muniName == newState.muniName\n                && this.state.comp == chartType)\n                return;\n        }\n        newState.eventDescription = eventDescription;\n        newState.comp = chartType;\n\n        if (newState.comp == \"votes-myvd\") {\n            newState.regionType = \"municipality-vd\";\n            newState.iecId = \"\";\n        }\n\n        if (newState.comp == \"seats-electeds\" || newState.comp == \"seats-women\" || newState.comp == \"seats-age\") {\n            triggerCustomEvent(events.SEATS_ELECTEDS_EVENT, newState);\n            return;\n        }\n\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, newState);\n        // triggerCustomEvent(events.REGION_CHANGE, newState);\n        // triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                label: 'National Assembly',\n                content: [\n                    {\n                        label: \"Race for votes\",\n                        content: [\n                            {\n                                icon: `1-1-1`,\n                                label: `National assembly`,\n                                to: `1-1-1`,\n                            },\n                            {\n                                icon: `1-1-2`,\n                                label: `Comparisons`,\n                                to: `1-1-2`,\n                            },\n                            // {\n                            //     icon: `1-1-3`,\n                            //     label: `CSIR Predictions`,\n                            //     to: `1-1-3`,\n                            // },\n                            {\n                                icon: `1-1-4`,\n                                label: `Counting progress`,\n                                to: `1-1-4`,\n                            },\n                            {\n                                icon: `1-1-5`,\n                                label: `Turnout`,\n                                to: `1-1-5`,\n                            },\n                            {\n                                icon: `1-1-6`,\n                                label: `My voting District`,\n                                to: `1-1-6`,\n                            },\n                            {\n                                label: `Metros`,\n                                content: metrosData.map((metro, i) => {\n                                    return {\n                                        icon: `3-${i}`,\n                                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                                        to: `3-${i}`,\n                                    }\n                                })\n                            }\n                        ]\n                    },\n                    {\n                        label: \"Race for seats\",\n                        content: [\n                            {\n                                icon: `1-2-1`,\n                                label: `National assembly`,\n                                to: `1-2-1`\n                            },\n                            {\n                                icon: `1-2-2`,\n                                label: `Comparisons`,\n                                to: `1-2-2`,\n                            },\n                            {\n                                icon: `1-2-3`,\n                                label: `Electeds`,\n                                to: `1-2-3`,\n                            },\n                            // {\n                            //     icon: `1-2-4`,\n                            //     label: `Women`,\n                            //     to: `1-2-4`,\n                            // },\n                            // {\n                            //     icon: `1-2-5`,\n                            //     label: `Age`,\n                            //     to: `1-2-5`,\n                            // }\n                        ]\n                    }\n                ]\n            },\n            {\n                label: 'Provincial Legislature',\n                content: provincesData.map((province, i) => {\n                    return {\n                        label: province.name,\n                        content: [\n                            {\n                                label: \"Race for votes\",\n                                content: [\n                                    {\n                                        icon: `2-${i}-1-1`,\n                                        label: `Provincial legislature`,\n                                        to: `2-${i}-1-1`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-2`,\n                                        label: `Comparisons`,\n                                        to: `2-${i}-1-2`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-3`,\n                                        label: `Counting progress`,\n                                        to: `2-${i}-1-3`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-4`,\n                                        label: `Turnout`,\n                                        to: `2-${i}-1-4`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-5`,\n                                        label: `Split (Nat/Prov)`,\n                                        to: `2-${i}-1-5`,\n                                    },\n                                    // {\n                                    //     icon: `2-${i}-1-6`,\n                                    //     label: `CSIR Predictions`,\n                                    //     to: `2-${i}-1-6`,\n                                    // },\n                                ]\n                            },\n                            {\n                                label: \"Race for seats\",\n                                content: [\n                                    {\n                                        icon: `2-${i}-2-1`,\n                                        label: `Provincial legislature`,\n                                        to: `2-${i}-2-1`,\n                                    },\n                                    {\n                                        icon: `2-${i}-2-2`,\n                                        label: `Comparisons`,\n                                        to: `2-${i}-2-2`,\n                                    },\n                                    {\n                                        icon: `2-${i}-2-3`,\n                                        label: `Electeds`,\n                                        to: `2-${i}-2-3`,\n                                    },\n                                    // {\n                                    //     icon: `2-${i}-2-4`,\n                                    //     label: `Women`,\n                                    //     to: `2-${i}-2-4`,\n                                    // },\n                                    // {\n                                    //     icon: `2-${i}-2-5`,\n                                    //     label: `Age`,\n                                    //     to: `2-${i}-2-5`,\n                                    // }\n                                ]\n                            }\n                        ]\n                    }\n                })\n            },\n            // {\n            //     icon: '',\n            //     label: 'Metros',\n                // content: metrosData.map((metro, i) => {\n                //     return {\n                //         icon: `4-${i}`,\n                //         label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                //         to: `4-${i}`,\n                //         // content: toShowCharts.map((toshowchart, chartIdx) => {\n                //         //     return {\n                //         //         icon: `4-${i}-${chartIdx}`,\n                //         //         label: toshowchart,\n                //         //         to: `4-${i}-${chartIdx}`,\n                //         //     }\n                //         // })\n                //     }\n                // })\n            // }\n        ];\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatDonut from '../RaceForSeatDonut/piechart';\nimport VoteCompBarchart from '../VoteCompBarchart/barchart';\nimport SeatCompBarchart from '../SeatCompBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\nimport SplitNatProvChart from '../SplitNatProv/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getSpoiltData,\n    getTurnoutDataForOneEvent,\n    getProgressVotesCount,\n    getVotesDataM,\n    getSeatsData\n} from \"../../api\";\n\nimport {\n    getRegionName,\n    getRegionName2,\n    getRegionName3,\n    triggerCustomEvent,\n    fetchDataFromOBJ,\n    handleRegionChange,\n\n    parseSpoiltVotesData,\n    parseTurnoutDataForOneEvent,\n    parseProgressVotesCount,\n    parseVotesData,\n    parseSeatsData,\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"65010035\", // regionIecId\n            comp: \"votes-default\",\n            stylesheetFor: \"web\",\n            componentID: 5,\n\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n            partyIecIds: [null, null, null, null],        \n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            eventDescriptionsSplitNatProv: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            currentTurnout: 0,\n            currentCountingProg: 0,\n            currentSpoiltVotes: 0\n        }\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.refreshIntervalID = setInterval(() => {\n            self.fetchCurrentResultData();\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n\n        document.addEventListener(events.SEATS_ELECTEDS_EVENT, this.handleSeatsElectedsEvent); // \"seats-electeds-event\"\n\n        this.fetchCurrentResultData();\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      this.fetchCurrentResultData()\n    }\n\n    handleSeatsElectedsEvent(event) {\n    }\n\n    fetchCurrentResultData() {\n        var self = this;\n        var newProps = JSON.parse(JSON.stringify(this.state));\n        var {comp} = this.state;\n\n        // newProps.eventDescription = \"2019_mock1\";\n        var dataLoaders = [\n            getSpoiltData(newProps), \n            getTurnoutDataForOneEvent(newProps),\n            getProgressVotesCount(newProps),\n        ];\n\n        if (comp == 'votes-comparisons') {\n            dataLoaders.push(getVotesDataM(newProps));\n        }\n        if (comp == 'seats-comparisons') {\n            dataLoaders.push(getSeatsData(newProps));\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var spoiltData = values[0];\n            var turnoutData = values[1];\n            var progVotesData = values[2];\n\n            var parsedSpoiltData = parseSpoiltVotesData(spoiltData, newProps);\n            var parsedTurnoutData = parseTurnoutDataForOneEvent(turnoutData, newProps);\n            var parsedProgVotesData = parseProgressVotesCount(progVotesData, newProps);\n\n            if (parsedTurnoutData[0] && parsedProgVotesData[0] && parsedSpoiltData[1]) {\n                var newState = {            \n                    currentTurnout: parsedTurnoutData[0].percVoterTurnout,\n                    currentCountingProg: parsedProgVotesData[0].percent,\n                    currentSpoiltVotes: parsedSpoiltData[1].percent\n                };\n    \n                if (comp == 'votes-comparisons') {\n                    var votesData = values[3];\n                    var parsedVotesData = parseVotesData(votesData, newProps);\n                    newState.partyAbbrs = parsedVotesData.map(voteItem => voteItem.name);\n                    newState.partyIecIds = parsedVotesData.map(voteItem => voteItem.iecId);\n                } else if (comp == 'seats-comparisons') {\n                    var seatsData = values[3];\n                    var parsedSeatsData = parseSeatsData(seatsData, newProps);\n                    newState.partyAbbrs = parsedSeatsData.map(seatItem => seatItem.name);\n                    newState.partyIecIds = parsedSeatsData.map(seatItem => seatItem.iecId);\n                }\n    \n                if (newState.partyIecIds && newState.partyIecIds.join(\" \") != self.state.partyIecIds.join(\" \")) {\n                    self.setState(newState);\n                } else {\n                    if (self.refs.currentTurnout && self.refs.currentCountingProg && self.refs.currentSpoiltVotes) {\n                        self.refs.currentTurnout.innerHTML = newState.currentTurnout + \"%\";\n                        self.refs.currentCountingProg.innerHTML = newState.currentCountingProg + \"%\";\n                        self.refs.currentSpoiltVotes.innerHTML = newState.currentSpoiltVotes + \"%\";\n                    }\n                }\n            }\n        }).catch(error => console.error(error));\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'votes-comparisons' || comp == 'seats-comparisons') {\n            imageLoadPromises = [\n                ...this.barchartInstances.map(instance => instance.exportAsPNGUri()),\n                this.mapInstance.exportAsPNGUri()\n            ];\n        } else {\n            imageLoadPromises = [\n                this.barchartInstance.exportAsPNGUri(), \n                this.mapInstance.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            values.forEach((element, idx) => {\n                imgs.file(`image${idx+1}.png`, element, {base64: true});\n            });\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState);\n\n        var triggerState = JSON.parse(JSON.stringify(newState));\n        triggerState.componentID = -1000;\n\n        triggerCustomEvent(events.CHART_PREVIEW, triggerState);\n        triggerCustomEvent(events.MAP_PREVIEW, triggerState);\n    };\n\n    renderTurnoutProgressSpoilt() {\n        var {\n            currentTurnout,\n            currentCountingProg,\n            currentSpoiltVotes,\n        } = this.state;\n\n        return (\n            <div className={cn(\"current-progress\")}>\n                <div className={cn(\"current-turnout\")}>\n                    <div>Turnout</div>\n                    <div ref=\"currentTurnout\">{currentTurnout}%</div>\n                </div>\n                <div className={cn(\"current-counting-progress\")}>\n                    <div>Counting Progress</div>\n                    <div ref=\"currentCountingProg\">{currentCountingProg}%</div>\n                </div>\n                <div className={cn(\"current-spoilt-votes\")}>\n                    <div>Spoilt Votes</div>\n                    <div ref=\"currentSpoiltVotes\">{currentSpoiltVotes}%</div>\n                </div>\n            </div>\n        )\n    }\n\n    renderQuickResultsTitle() {\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        if (comp == 'votes-default') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    RACE FOR VOTES: <span className=\"regionName\">{getRegionName2(self.state)}</span>\n                </div>\n            );\n        }\n        if (comp == 'seats-default') {\n            return (\n                <div className={className(\"quick-results-title\")+\" \"+className(\"race-for-seats\")}>\n                    RACE FOR SEATS: <span className=\"regionName\">{getRegionName(self.state)}</span>(#SEATS)\n                </div>\n            );\n        }\n        if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    RACE FOR VOTES: TURNOUT - {getRegionName3(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-progress') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    COUNTING PROGRESS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-comparisons') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    VOTES COMPARISONS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'seats-comparisons') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    SEATS COMPARISONS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-myvd') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    My Voting District {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-split') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    {getRegionName(self.state)} Race for Votes - Split (Nat/Prov)\n                </div>\n                \n            )\n        }\n        return null;\n    }\n\n    renderMap() {\n        var {\n            comp,\n            iecId,\n            muniCode\n        } = this.state;\n        var mapState = JSON.parse(JSON.stringify(this.state));\n        if (comp == 'votes-myvd') {\n            if (iecId && iecId.length && muniCode && muniCode.length) {\n                mapState.disableNavigation = true;\n                return (\n                    <div className={className(\"map-container\")}>\n                        <Map \n                            ref={instance => { this.mapInstance = instance; }} \n                            key={comp}\n                            {...mapState}\n                            componentID={-1000}\n                        />\n                    </div>\n                );\n            }\n            return null;\n        }\n        if (comp == 'votes-split') {\n            mapState.disableNavigation = true;\n            mapState.regionType = \"national\";\n            return (\n                <div className={className(\"map-container\")}>\n                    <Map \n                        ref={instance => { this.mapInstance = instance; }} \n                        key={comp}\n                        {...mapState}\n                        componentID={-1000}\n                    />\n                </div>\n            ); \n        } else if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"map-container\")}>\n                    <TurnoutMap \n                        ref={instance => { this.mapInstance = instance; }} \n                        key={comp}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        } else {\n            return (\n                <div className={className(\"map-container\")}>\n                    <Map \n                        ref={instance => { this.mapInstance = instance; }} \n                        key={comp}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n    }\n\n    renderBarchart() {\n        var {\n            comp,\n            partyIecIds,\n            partyAbbrs,\n        } = this.state;\n        if (comp == 'votes-default' || comp == 'votes-myvd') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <BarChart \n                        key={comp}\n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state} \n                        componentID={-1000}/>\n                </div>\n            );\n        }\n        if (comp == 'seats-default') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <RaceForSeatDonut \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <TurnoutBarchart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-progress') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <ProgressVotesPieChart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-comparisons') {\n            var {numParties} = this.state;\n            this.barchartInstances = new Array(numParties);\n            return (\n                <div className={className(\"barchart-container\")}>\n                    {\n                        partyIecIds.map((partyIecId, partyIdx) => {\n                            return <VoteCompBarchart \n                                ref={instance => { this.barchartInstances[partyIdx] = instance; }} \n                                key={partyIdx}\n                                {...this.state}\n                                partyAbbr={partyAbbrs[partyIdx]}\n                                partyIecId={partyIecId}\n                                componentID={-1000}\n                            />\n                        })\n                    }\n                </div>\n            );\n        }\n        if (comp == 'seats-comparisons') {\n            this.barchartInstances = new Array(numParties);\n            return (\n                <div className={className(\"barchart-container\")}>\n                    {\n                        partyIecIds.map((partyIecId, partyIdx) => {\n                            return <SeatCompBarchart \n                                ref={instance => { this.barchartInstances[partyIdx] = instance; }} \n                                key={partyIdx}\n                                {...this.state}\n                                partyAbbr={partyAbbrs[partyIdx]}\n                                partyIecId={partyIecId}\n                                componentID={-1000}\n                            />\n                        })\n                    }\n                </div>\n            );\n        }\n        if (comp == 'votes-split') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <SplitNatProvChart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000}\n                    />\n                </div>\n                \n            )\n        }\n        return null;\n    }\n\n    renderMyVDEnterForm() {\n        var {comp} = this.state;\n        if (comp != 'votes-myvd') {\n            return null;\n        }\n        return (\n            <div className=\"voting-district-enter-form\">\n                <input ref=\"vdInput\" type=\"text\" placeholder=\"65010035 or 86550385\"/>\n                <button onClick={this.onShowVDResult.bind(this)}> Show Result</button>\n            </div>\n        )\n    }\n\n    onShowVDResult() {\n        var newState = {\n            regionType: \"municipality-vd\",\n            iecId: this.refs.vdInput.value,\n            muniCode: \"\"\n        }\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n    }\n\n    render() {\n        var {\n            stylesheetFor,\n        } = this.state;\n        return (\n            <div className={className(\"quickresultswidget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar {...this.state}/>\n                    </div>\n                    <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                        {this.renderQuickResultsTitle()}\n                        {this.renderTurnoutProgressSpoilt()}\n                        {this.renderMyVDEnterForm()}\n                        {this.renderBarchart()}\n                        {this.renderMap()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 8\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"horseshoechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('class', className(config.CSS_PREFIX + \"grouprect\"))\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true,\n  viewBox: '45 0 655 340'\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 12\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => parseFloat(item.data[0].delta))) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => parseFloat(item.data[0].delta))) - 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n\n      svg.selectAll(\".xAxisLine\").remove();\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"currentColor\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 13\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 14\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 15\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","export {default as BarChart} from \"./BarChart/barchart\";\nexport {default as RaceForSeatsBarChart} from \"./RaceForSeatBarchart/barchart\";\nexport {default as SpoiltBarChart} from \"./SpoiltBarchart/barchart\";\nexport {default as Map} from \"./Map/map\";\nexport {default as TurnoutMap} from \"./TurnoutMap/map\";\nexport {default as TurnoutBarChart} from \"./TurnoutBarchart/barchart\";\nexport {default as BarchartWithNavMap} from \"./BarchartWithNavMap/barchartMap\";\nexport {default as QuickResultsWidget} from \"./QuickResultsWidget/quickResultsWidget\";\nexport {default as ProgVotesCountPiechart} from \"./ProgVotesCountPiechart/piechart\";\nexport {default as RaceForSeatsComparisonBarChart} from \"./SeatCompBarchart/barchart\";\nexport {default as SeatHorseShoeChart} from \"./SeatHorseShoeChart/horseshoe\";\nexport {default as VoteComparisonBarchart} from \"./VoteCompBarchart/barchart\";\n\nexport {default as TVSeatCompBarchart} from \"./TVSeatCompBarchart/barchart\";\nexport {default as TVSeatSwingBarchart} from \"./TVSeatSwingBarchart/barchart\";\nexport {default as TVVoteCompBarchart} from \"./TVVoteCompBarchart/barchart\";\nexport {default as TVVoteSwingBarchart} from \"./TVVoteSwingBarchart/barchart\";\n\nexport {default as SeatDonutChart} from \"./RaceForSeatDonut/piechart\";\nexport {default as SplitNatProv} from \"./SplitNatProv/barchart\";","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\",\n    // \"DOMAIN\": \"http://127.0.0.1:8080\",\n    \"CSS_PREFIX\": \"ELVIZ_\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst CHART_PREVIEW = \"chart-preview\";\nconst SEATS_ELECTEDS_EVENT = \"seats-electeds-event\";\nconst MAP_PREVIEW = \"map-preview\";\nconst QUICK_RESULTS_PREVIEW = \"quick-results-preview\"\nconst EXPORT_PNG = \"export-png\";\nconst EXPORT_SUPERWIDGET_PNG = \"export-superwidget-png\";\n\nexport default {\n    REGION_CHANGE,\n    CHART_PREVIEW,\n    SEATS_ELECTEDS_EVENT,\n    MAP_PREVIEW,\n    QUICK_RESULTS_PREVIEW,\n    EXPORT_PNG,\n    EXPORT_SUPERWIDGET_PNG,\n};","import * as d3 from \"d3\";\nimport config from \"../config\";\n\nfunction calcPercent(a, b) {\n  if (b == 0) {\n    return 0;\n  } else {\n    return (a/b*100).toFixed(2);\n  }\n}\n\nexport function getShortenedEventDescription(event) {\n  var year = /(19|20)\\d{2}/g.exec(event[\"description\"])[0];\n  var shortenedNatProv = (event[\"eventType\"][\"description\"] == \"National Election\"? \"Nat\": \"Prov\");\n  return `${year} ${shortenedNatProv}`;\n}\n\nexport function parseVotesDataForAllEvents(data, props) {\n    var results, edges;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      edges = data[\"data\"][\"allBallots\"].edges;\n    } else if (regionType == \"province\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n    } else if (regionType == \"municipality\") {\n      edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n    } else { //\"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n    }\n\n    console.log(\"props\", props)\n    return edges.map(edge => {\n      var nodeData = edge[\"node\"];\n\n      var eventDescription = getShortenedEventDescription(nodeData[\"event\"]); //nodeData[\"event\"][\"description\"];\n      var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n      results = partyResults[\"edges\"];\n      results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n      results = results.slice(0, props.numPartiesSplitNatProv);\n\n      return {\n        longEventDescription: nodeData[\"event\"][\"description\"],\n        eventDescription,\n        data: results.map(function(node) {\n          var el = node[\"node\"];\n          return {\n              name: el[\"party\"][\"abbreviation\"],\n              iecId: el[\"party\"][\"iecId\"],\n              validVotes: el[\"validVotes\"].toFixed(2),\n              percOfVotes: el[\"percOfVotes\"].toFixed(2),\n              partyInfo: el[\"party\"]\n          }\n        })\n      }\n    }).filter(edge => props.eventDescriptionsSplitNatProv.indexOf(edge.longEventDescription) != -1)\n    .sort(function(edge1, edge2) {\n      var edge1Year = parseInt(/(19|20)\\d{2}/g.exec(edge1.eventDescription)[0]);\n      var edge2Year = parseInt(/(19|20)\\d{2}/g.exec(edge2.eventDescription)[0]);\n      if (edge1Year == edge2Year) {\n        if (edge1.eventDescription > edge2.eventDescription) {\n          return 1;\n        }\n        return -1;\n      }\n      return edge1Year - edge2Year;\n    })\n}\n \nexport function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            iecId: el[\"party\"][\"iecId\"],\n            validVotes: el[\"validVotes\"].toFixed(2),\n            percOfVotes: el[\"percOfVotes\"].toFixed(2),\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function fetchLocationTrackFromVDdata(data) {\n  var firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  var nodeData = firstEdge[\"node\"];\n  var locationResult = nodeData[\"location\"];\n  var newState = {\n    regionType: \"municipality-vd\",\n    iecId: locationResult[\"iecId\"],\n    muniCode: locationResult[\"ward\"][\"municipality\"][\"code\"],\n    provinceName: locationResult[\"ward\"][\"municipality\"][\"province\"][\"name\"],\n  };     \n  return newState;      \n}\n\nexport function parseVotesComparisonData(data, props) {\n  var results, edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else { //\"municipality-vd\"\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n\n  var partyfilter_edges = edges.map(edge => {\n    var nodeData = edge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"]\n      .filter(a => props.partyIecId\n        ? (a.node[\"party\"][\"iecId\"] == props.partyIecId) \n        : (a.node[\"party\"][\"abbreviation\"] == props.partyAbbr));\n    var result = results[0];\n    if (result) {\n      var el = result[\"node\"];\n      return {\n          name: nodeData[\"event\"][\"description\"],\n          percOfVotes: el[\"percOfVotes\"].toFixed(2),\n          partyInfo: el[\"party\"]\n      }\n    }\n    return {\n      name: nodeData[\"event\"][\"description\"],\n      percOfVotes: 0,\n      partyInfo: {\n        name: props.partyAbbr,\n        abbreviation: props.partyAbbr,\n      }\n    }\n  });\n  var results = partyfilter_edges.filter(edge => props.eventDescriptions.indexOf(edge.name) != -1).reverse();\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        percOfVotes: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n  return new_results;\n}\n\nexport function parseVotesComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseVotesComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseProgressVotesCount(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"progress votes count data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Completed\",\n      percent: calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdWithResultsCaptured\"]\n    }, {\n      name: \"Not Completed\",\n      percent: 100 - calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdCount\"] - nodeData[\"vdWithResultsCaptured\"]\n    }\n  ]\n}\n\n// export function parseMainPartyData(data, props) {\n//     if (!data)  return null;\n//     var locationToMainParty = {};\n//     var edges;\n//     var regionType = props.regionType;\n//     var sort_results = function(party_results) {\n//         party_results[\"edges\"] = party_results[\"edges\"].sort(function(a, b) {\n//             return b.node.percOfVotes - a.node.percOfVotes;\n//         })\n//         return party_results;\n//     }\n//     if (regionType === \"national\") {\n//         edges = data[\"data\"][\"allProvincialBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var provinceName = node[\"location\"][\"name\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[provinceName] = partyName;\n//         })\n//     } else if (regionType === \"province\") {\n//         edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var muniCode = node[\"location\"][\"code\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[muniCode] = partyName;\n//         })\n//     } else {// \"municipality\"\n//         edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var iecId = node[\"location\"][\"iecId\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[iecId] = partyName;\n//         })\n//     }\n//     return locationToMainParty;\n// }\n\nfunction getTopPartyNameFromNode(node) {\n  if (node && node[\"topParty\"] && node[\"topParty\"][\"party\"] && node[\"topParty\"][\"party\"][\"name\"])\n      return node[\"topParty\"][\"party\"][\"name\"];\n  return \"\";\n}\n\nexport function parseMainPartyData(data, props) {\n  if (!data)  return null;\n  var locationToMainParty = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"topPartiesByProvince\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          locationToMainParty[provinceName] = getTopPartyNameFromNode(node);\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"topPartiesByMunicipality\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          locationToMainParty[muniCode] = getTopPartyNameFromNode(node);\n      })\n  } else {// \"municipality\"\n      edges = data[\"data\"][\"topPartiesByVotingDistrict\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          locationToMainParty[iecId] = getTopPartyNameFromNode(node);\n      })\n  }\n  return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      iecId: node[\"party\"][\"iecId\"],\n      partyInfo: node[\"party\"],\n    }\n  })\n  \n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return results.slice(0, props.numParties);\n}\n\nexport function parseSeatsComparisonData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"event\"][\"description\"],\n      partyInfo: node[\"party\"]\n    }\n  }).filter(result => props.eventDescriptions.indexOf(result.name) != -1)\n  .filter(result => \n    props.partyIecId\n    ? (result.partyInfo[\"iecId\"] == props.partyIecId)\n    : (result.partyInfo[\"abbreviation\"] == props.partyAbbr)\n  )\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        seats: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n      // name: nodeData[\"event\"][\"description\"],\n      // percOfVotes: 0,\n      // partyInfo: {\n      //   name: props.partyAbbr,\n      //   abbreviation: props.partyAbbr,\n      // }\n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return new_results;\n}\n\nexport function parseSeatsComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseSeatsComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseTurnoutData(data, props) {\n  if (!data)  return null;\n  var locationToTurnout = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[provinceName] = percVoterTurnout;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[muniCode] = percVoterTurnout;\n      })\n  } else {// \"municipality\" or \"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[iecId] = percVoterTurnout;\n      })\n  }\n  return locationToTurnout;\n}\n\nexport function parseTurnoutDataForAllEvents(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var eventType = node[\"event\"][\"eventType\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      eventType: eventType,\n      percVoterTurnout\n    }\n  }).filter(edge => edge.eventType.toLowerCase().indexOf(props.eventType) != -1)\n  .sort(function(edge1, edge2) {\n    var edge1Year = parseInt(/(19|20)\\d{2}/g.exec(edge1.name)[0]);\n    var edge2Year = parseInt(/(19|20)\\d{2}/g.exec(edge2.name)[0]);\n    return edge1Year - edge2Year;\n  })\n}\n\nexport function parseTurnoutDataForOneEvent(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      percVoterTurnout\n    }\n  })\n}\n\nexport function parseSpoiltVotesData(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"spoilt data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Valid\",\n      percent: calcPercent(nodeData[\"totalValidVotes\"], nodeData[\"totalVotesCast\"])\n    }, {\n      name: \"Spoilt\",\n      percent: calcPercent(nodeData[\"spoiltVotes\"], nodeData[\"totalVotesCast\"])\n    }\n  ]\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\" - \") != -1) {\n        muniName = muniName.split(\" - \")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.iecId;\n  }\n}\n\nexport function getRegionName2(state) {\n  if (state.regionType == \"national\")\n    return \"National Assembly\";\n  return getRegionName(state);\n}\n\nexport function getRegionName3(state) {\n  if (state.regionType == \"national\")\n    return \"NATIONAL\";\n  return getRegionName(state);\n}\n\n\n\nexport function getNationOrProvinceName(state) {\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  return state.provinceName;\n}\n\nexport function getNationOrProvinceName2(state) {\n  if (state.regionType == \"national\") {\n    return \"National Assembly\";\n  }\n  return state.provinceName;\n}\n\nexport function createTooltip(className) {\n  var tooltipClassName = className(config.CSS_PREFIX + \"tooltip\")\n  if (document.getElementsByClassName(tooltipClassName)[0]) {\n    return d3.select(`.${tooltipClassName}`);\n  } else {\n    return d3.select(\"body\").append(\"div\")\t\n      .attr(\"class\", tooltipClassName)\t\t\t\t\n      .style(\"opacity\", 0);\n  }\n}\n\n\n\nexport function fixMapLabelIntersect() {\n  var labelElements = document.getElementsByClassName(\"place-label\");\n  var regions = {};\n  var overlapCnt = {};\n  var i;\n\n  for (i = 0; i < labelElements.length; i ++) {\n      regions[i] = labelElements[i].getBoundingClientRect();\n  }\n\n  for (i = 0; i < labelElements.length; i ++) {\n      for (var j = 0; j < i; j ++) {\n          var rect1 = regions[i];\n          var rect2 = regions[j];\n          var overlap = !(rect1.right < rect2.left || \n              rect1.left > rect2.right || \n              rect1.bottom < rect2.top || \n              rect1.top > rect2.bottom);\n          if (overlap) {\n              overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n          }\n      }\n      if (overlapCnt[i] > 2) {\n          labelElements[i].setAttribute(\"opacity\", 0)\n      } else if (overlapCnt[i] > 0){\n          labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n      } else {\n\n      }\n  }\n}\n\nexport function triggerCustomEvent(eventName, eventParam) {\n  var event = new CustomEvent(eventName, { detail: eventParam });\n  document.dispatchEvent(event);\n}\n\nexport function formatPartyName(name) {\n  return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n}\n\nexport function getSubRegionName(properties, state) {\n  if (state.regionType === \"national\") {\n      return properties.SPROVINCE;\n  } else if (state.regionType === \"province\") {\n      return properties.smunicipal && properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n  } else {//municipality\n    return getMunicipalityiecId(properties);\n    // if (properties.Municipali) {\n    //   return properties.Municipali.split(\" - \")[1].split(\"[\")[0];\n    // }\n    // return properties.SMUNICIPAL && properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n  }\n}\n\nexport function getMunicipalityCode(properties) {\n  return properties.code || (properties.smunicipal && properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\"));\n}\n\nexport function getMunicipalityiecId(properties) {\n  return properties.VDNumber || properties.PKLVDNUMBE;\n}\n\nexport function getRegionFileName(state) {\n  var nationalMapFile = \"province_lo-res.geojson\";\n  function getProvinceFileName(provinceName) {\n      var provinceNameToFileMap = {\n          \"Limpopo\": \"lim_lo-res.geojson\",\n          \"Mpumalanga\": \"mp_lo-res.geojson\",\n          \"Gauteng\": \"gt_lo-res.geojson\",\n          \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n          \"North West\": \"nw_lo-res.geojson\",\n          \"Free State\": \"fs_lo-res.geojson\",\n          \"Eastern Cape\": \"ec_lo-res.geojson\",\n          \"Northern Cape\": \"nc_lo-res.geojson\",\n          \"Western Cape\": \"wc_lo-res.geojson\",\n      }\n      return provinceNameToFileMap[provinceName];\n  }\n  switch(state.regionType) {\n      case \"national\":\n          return nationalMapFile;\n      case \"province\":\n          return getProvinceFileName(state.provinceName);\n      case \"municipality\":\n          return state.muniCode + \".topojson\";//\".geojson\";\n      case \"municipality-vd\":\n          return \"vd-data/\" + state.muniCode + \"-\" + state.iecId + \".topojson\"; //\".geojson\";\n      default:\n          return null;\n  }\n}\n\nexport function loadScript(id, scriptURL, callback) {\n  if (document.getElementById(id))\n    return;\n  var script = document.createElement('script');\n  script.onload = function () {\n    if(callback) {\n      callback();\n    }\n  };\n  script.id = id;\n  script.src = scriptURL;\n\n  document.head.appendChild(script);\n}\n\nexport function loadCanvg() {\n  loadScript(\"canvgScript\", \"https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js\", function() {\n    console.log(\"canvgScript load finished\");\n  });\n}\n\nexport function loadJSZip() {\n  loadScript(\"jsZipScript\", \"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js\", function() {\n    console.log(\"loadJSZip load finished\");\n  });\n}\n\nexport function loadScriptsForEmbedMode() {\n  loadCanvg();\n  loadJSZip();\n}\n\n\nexport function handleRegionChange(event) {\n  var newState = JSON.parse(JSON.stringify(event.detail));\n  delete newState.componentID;\n  this.setState(newState)\n}\n\nexport function fetchDataFromOBJ(state, props) {\n  Object.keys(state).forEach(key => {\n    if (props[key]) {\n      state[key] = props[key];\n    }\n  })\n}\n\nexport function formatClassNameFromString(str) {\n  return \"formedClass_\" + str.replace(/[^a-zA-Z0-9]+/g, '');\n}\n\nexport function onPartyAbbrsChange(e) {\n    var options = e.target.options;\n    var values = [];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        values.push(options[i].value);\n      }\n    }\n    values = values.slice(0, 4);\n    this.setState({\n        partyAbbrs: values.map(value => value.split(\"\\x22\")[0]),\n        partyIecIds: values.map(value => value.split(\"\\x22\")[1]),\n    })\n}\n\nexport function nationalEventSelected(state) {\n  for (var i = 0; i < state.electionEvents.length; i ++) {\n    if (state.electionEvents[i].description == state.eventDescription) {\n      if (state.electionEvents[i].eventType.description.toLowerCase().indexOf(\"national\") != -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"],"sourceRoot":""}