{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.css","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/BarChartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchart.mdx","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","getFillColor","i","_typeof","name","partyName","length","getFillColorFromPartyName","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","chartOptions","percent","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","document","events","window","clearInterval","Math","_this$getWidthHeightB2","d3barchart","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","dataLoaders","getSpoiltData","Promise","values","spoiltData","error","console","data","parseSpoiltVotesData","parseInt","Valid","Spoilt","SpoiltBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","e","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","concat","replace","SpoiltBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-spoilt-barchart-barchart.f34213e3.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, colorsData) {\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3yxxz\",\"chart-title\":\"barchart_chart-title__3RHv6\",\"chart-body\":\"barchart_chart-body__3x1qF\",\"percentage-label\":\"barchart_percentage-label__zQdUV\",\"chart\":\"barchart_chart__1_lSr\",\"large\":\"barchart_large__cgVCh\",\"y-axis-label\":\"barchart_y-axis-label__3UnAe\",\"y-label\":\"barchart_y-label__1I4tN\",\"annotation-line\":\"barchart_annotation-line__bj9Mi\",\"tooltip\":\"barchart_tooltip__2BaaR\",\"grid\":\"barchart_grid__2TlS8\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"spoilt-vs-valid-votes---bar-chart\"}}>{`Spoilt vs Valid votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};"],"sourceRoot":""}