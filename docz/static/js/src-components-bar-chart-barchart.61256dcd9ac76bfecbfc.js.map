{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Math","event","svgToPng","refs","vizcontainer","childNodes","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.c53cb0fb.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-votes-barchart.png\");\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}