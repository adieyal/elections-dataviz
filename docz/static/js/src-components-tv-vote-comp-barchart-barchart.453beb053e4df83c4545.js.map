{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchart.mdx","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","barchart_partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","topLabel","usedValue","yValue","d","percOfVotes","yValueFormat","value","dynamicYAxisFromValues","BarChart","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","d3groupbarchart","d3","react_default","a","createElement","ref","container","dataLoaders","getVotesDataForComparison","desc","exec","partyColorsLoader","getPartyColors","values","votesData","partyColorsData","error","console","data","chartData","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","edge","thing","index","t","abbreviation","e","options","i","l","length","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onRegionTypeChange","multiple","onEventDescriptionChange","key","province","name","muni","onPartyAbbrsChange","party","formatPartyName","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVVoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container","__webpack_require__","__webpack_exports__","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","width","height","predefColors","svg","tooltipDiv","createTooltip","x","y","errorText","groupChartData","colorsData","partyColorByName","partyAbbr","minMaxY","groupSvgs","groupSvg","bandwidth","YaxisOffset","subX","barSvg","barTextSvg","barAxisTextSvg","bars","getFillColor","getTooltipText","pageX","Number","barAxisTexts","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","destroy"],"mappings":"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","file":"static/js/src-components-tv-vote-comp-barchart-barchart.89db4e6a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-votes-comparison---bar-chart\"}}>{`TV Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      console.log(\"groupChartData\", groupChartData);\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return options.yValue(d); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('fill', \"#DEDEDE\")\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}