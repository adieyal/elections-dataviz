{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchart.mdx","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","barchart_partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","topLabel","usedValue","yValue","d","percOfVotes","yValueFormat","value","dynamicYAxisFromValues","BarChart","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","d3groupbarchart","d3","react_default","a","createElement","config","chartType","ref","container","dataLoaders","getVotesDataForComparison","desc","exec","partyColorsLoader","getPartyColors","values","votesData","partyColorsData","error","console","data","chartData","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","edge","thing","index","t","abbreviation","e","options","i","l","length","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVVoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container","__webpack_require__","__webpack_exports__","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","width","height","predefColors","svg","tooltipDiv","createTooltip","x","y","errorText","groupChartData","colorsData","partyColorByName","partyAbbr","minMaxY","groupSvgs","groupSvg","YaxisOffset","subX","barSvg","barTextSvg","barAxisTextSvg","bars","getFillColor","getTooltipText","pageX","Number","barAxisTexts","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","toUpperCase","destroy"],"mappings":"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","file":"static/js/src-components-tv-vote-comp-barchart-barchart.d9c2a4a7.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparation-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-votes-comparison---bar-chart\"}}>{`TV Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", width)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", width)\n        .attr(\"y\", 40)\n        .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return options.yValue(d); })))\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}