{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Math","event","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","uri","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","config","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.fb91a5e3.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}