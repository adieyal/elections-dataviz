{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/turnout.js","webpack:///./src/api/spoilt.js","webpack:///./src/api/prog-votescount.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/mapEmbed.css","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/components/SeatCompBarchart/barchartEmbed.css","webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutMap/mapEmbed.css","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css","webpack:///./src/components/BarChart/barchartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchartEmbed.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutBarchart/barchartEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/SeatCompBarchart/barchartEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/VoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.js","webpack:///./src/components/embed.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/Map/map.js","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/SeatCompBarchart/barchart.js","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/index.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsDataForComparison","options","query","gql","_templateObject","_templateObject2","provinceName","getSeatsData","eventDescription","_templateObject3","_templateObject4","getVotesDataForComparison","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","race_for_votes_templateObject3","race_for_votes_templateObject4","iecId","getVotesDataM","_templateObject5","_templateObject6","_templateObject7","console","_templateObject8","getMainParties","_templateObject9","_templateObject10","_templateObject11","getTurnoutData","turnout_templateObject","turnout_templateObject2","muniRegName","turnout_templateObject3","getTurnoutDataForAllEvents","turnout_templateObject4","turnout_templateObject5","turnout_templateObject6","turnout_templateObject7","getSpoiltData","spoilt_templateObject","spoilt_templateObject2","spoilt_templateObject3","spoilt_templateObject4","getProgressVotesCount","prog_votescount_templateObject","prog_votescount_templateObject2","prog_votescount_templateObject3","prog_votescount_templateObject4","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","getProvincesData","name","abbreviation","munis","muniName","getMetrosData","module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","embedcode","ELVIZ_map-title","ELVIZ_loading-spinner","ELVIZ_stylesheet-tv","legend","ELVIZ_menu-widget","ELVIZ_component-transition-menu","label","active","main-left-part","main-right-part","barchart-container","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","multievent-container","multiparties-container","provincesData","className","originClassName","bootstrapStyles","styles","BarChartEmbed","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","elementId","regionType","numParties","electionEvents","Component","self","data","edge","error","e","setState","value","newState","triggerCustomEvent","events","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","a","createElement","type","placeholder","onChange","onEventDescriptionChange","bind","key","onRegionTypeChange","province","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_barchartEmbed","barchartEmbed_className","barchartEmbed_classCallCheck","barchartEmbed_possibleConstructorReturn","barchartEmbed_getPrototypeOf","disabled","components_RaceForSeatBarchart_barchartEmbed","SpoiltBarchart_barchartEmbed_className","SpoiltBarchart_barchartEmbed_classCallCheck","SpoiltBarchart_barchartEmbed_possibleConstructorReturn","SpoiltBarchart_barchartEmbed_getPrototypeOf","components_SpoiltBarchart_barchartEmbed","mapEmbed_className","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","disableNavigation","MAP_PREVIEW","checked","Map_mapEmbed","TurnoutMap_mapEmbed_className","TurnoutMap_mapEmbed_classCallCheck","TurnoutMap_mapEmbed_possibleConstructorReturn","TurnoutMap_mapEmbed_getPrototypeOf","components_TurnoutMap_mapEmbed","TurnoutBarchart_barchartEmbed_className","TurnoutBarchart_barchartEmbed_classCallCheck","TurnoutBarchart_barchartEmbed_possibleConstructorReturn","TurnoutBarchart_barchartEmbed_getPrototypeOf","eventType","components_TurnoutBarchart_barchartEmbed","barchartMapEmbed_className","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","EXPORT_SUPERWIDGET_PNG","BarchartWithNavMap_barchartMapEmbed","quickResultsWidgetEmbed_className","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","stylesheetFor","QUICK_RESULTS_PREVIEW","QuickResultsWidget_quickResultsWidgetEmbed","piechartEmbed_className","PieChartEmbed","piechartEmbed_classCallCheck","piechartEmbed_possibleConstructorReturn","piechartEmbed_getPrototypeOf","ProgVotesCountPiechart_piechartEmbed","SeatCompBarchart_barchartEmbed_className","SeatCompBarchart_barchartEmbed_classCallCheck","SeatCompBarchart_barchartEmbed_possibleConstructorReturn","SeatCompBarchart_barchartEmbed_getPrototypeOf","eventDescriptions","partyAbbr","allParties","thing","index","t","values","i","l","length","selected","multiple","party","JSON","components_SeatCompBarchart_barchartEmbed","horseshoeEmbed_className","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","SeatHorseShoeChart_horseshoeEmbed","VoteCompBarchart_barchartEmbed_className","VoteCompBarchart_barchartEmbed_classCallCheck","VoteCompBarchart_barchartEmbed_possibleConstructorReturn","VoteCompBarchart_barchartEmbed_getPrototypeOf","components_VoteCompBarchart_barchartEmbed","TVSeatCompBarchart_barchartEmbed_className","TVSeatCompBarchart_barchartEmbed_classCallCheck","TVSeatCompBarchart_barchartEmbed_possibleConstructorReturn","TVSeatCompBarchart_barchartEmbed_getPrototypeOf","partyAbbrs","onPartyAbbrsChange","formatPartyName","components_TVSeatCompBarchart_barchartEmbed","TVSeatSwingBarchart_barchartEmbed_className","TVSeatSwingBarchart_barchartEmbed_classCallCheck","TVSeatSwingBarchart_barchartEmbed_possibleConstructorReturn","TVSeatSwingBarchart_barchartEmbed_getPrototypeOf","components_TVSeatSwingBarchart_barchartEmbed","TVVoteCompBarchart_barchartEmbed_className","TVVoteCompBarchart_barchartEmbed_classCallCheck","TVVoteCompBarchart_barchartEmbed_possibleConstructorReturn","TVVoteCompBarchart_barchartEmbed_getPrototypeOf","components_TVVoteCompBarchart_barchartEmbed","TVVoteSwingBarchart_barchartEmbed_className","TVVoteSwingBarchart_barchartEmbed_classCallCheck","TVVoteSwingBarchart_barchartEmbed_possibleConstructorReturn","TVVoteSwingBarchart_barchartEmbed_getPrototypeOf","components_TVVoteSwingBarchart_barchartEmbed","__webpack_require__","d","__webpack_exports__","Chart","container","width","height","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","minMaxY","dynamicYAxisFromValues","bars","getFillColor","getTooltipText","pageX","Number","barTexts","_typeof","partyName","getFillColorFromPartyName","destroy","chart","barchart_partyColorsData","barchart_className","originName","refreshIntervalID","chartOptions","BarChart","_assertThisInitialized","exportAsPNG","exportAsPNGUri","handleRegionChange","handlePreviewEvent","getContainer","setInterval","document","clearInterval","event","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","detail","ref","dataLoaders","partyColorsLoader","votesData","parseVotesData","BarChart_barchart","barchart_chart","RaceForSeatBarchart_barchart_partyColorsData","seats","RaceForSeatBarchart_barchart_className","barchart_classCallCheck","barchart_getPrototypeOf","barchart_assertThisInitialized","getNationOrProvinceName","seatsData","parseSeatsData","RaceForSeatBarchart_barchart","SpoiltBarchart_barchart_chart","percent","SpoiltBarchart_barchart_className","SpoiltBarchart_barchart_classCallCheck","SpoiltBarchart_barchart_possibleConstructorReturn","SpoiltBarchart_barchart_getPrototypeOf","SpoiltBarchart_barchart_assertThisInitialized","spoiltData","parseSpoiltVotesData","Valid","Spoilt","SpoiltBarchart_barchart","map_partyColorsData","regionColor","map_className","Map","map_classCallCheck","map_getPrototypeOf","map_assertThisInitialized","drawGraph","selectAll","remove","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","canvas","filename","lnk","createEvent","fireEvent","loading","CSS_PREFIX","react_loading_default","color","fullRouteGeoJsonFile","getRegionFileName","h","all","then","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","getMunicipalityiecId","topojson","projection","path","parties","availableCnt","b","legends","parseInt","getLegendXY","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","REGION_CHANGE","smunicipal","appendSpan","foDiv","regionName","addSub","appendLink","muniImuniCodeD","setRegionType","fo","catch","setTimeout","alert","Map_map","TurnoutMap_map_className","TurnoutMap_map_classCallCheck","TurnoutMap_map_getPrototypeOf","TurnoutMap_map_assertThisInitialized","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it","TurnoutMap_map","TurnoutBarchart_barchart_chart","percVoterTurnout","TurnoutBarchart_barchart_className","TurnoutBarchart_barchart_classCallCheck","TurnoutBarchart_barchart_possibleConstructorReturn","TurnoutBarchart_barchart_getPrototypeOf","TurnoutBarchart_barchart_assertThisInitialized","turnoutData","parseTurnoutDataForAllEvents","TurnoutBarchart_barchart","barchartMap_className","BarchartWithNavMap","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","barchartMap_assertThisInitialized","zip","lib_default","imgs","base64","content","saveAs","Object","assign","instance","barchartInstance","mapInstance","BarchartWithNavMap_barchartMap","d3piechart_Chart","margin","category","floatFormat","colour","Math","radius","pie","arc","toolTip","selection","tip","toolTipHTML","arcTween","_current","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_chart","piechart_className","PieChart","piechart_classCallCheck","piechart_getPrototypeOf","piechart_assertThisInitialized","progressVotesData","parseProgressVotesCount","Completed","Not Completed","ProgVotesCountPiechart_piechart","cssPrefix","metrosData","CustomLink","navbar_classCallCheck","navbar_possibleConstructorReturn","navbar_getPrototypeOf","navbar_assertThisInitialized","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","activeLinkId","handleNavBarSelection","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","icon","navbar_provincesData","map","metro","join","react_metismenu_lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","comp","quickResultsWidget_assertThisInitialized","zipfileName","imageLoadPromises","votesInstance1","votesInstance2","seatsInstance1","seatsInstance2","turnoutInstance1","turnoutInstance2","progressInstance1","progressInstance2","spoiltInstance1","spoiltInstance2","QuickResultsWidget_quickResultsWidget","SeatCompBarchart_barchart_chart","SeatCompBarchart_barchart_partyColorsData","SeatCompBarchart_barchart_className","SeatCompBarchart_barchart_classCallCheck","SeatCompBarchart_barchart_getPrototypeOf","SeatCompBarchart_barchart_assertThisInitialized","parseSeatsComparisonData","SeatCompBarchart_barchart","d3horseshoe_Chart","mainSvg","originChartData","totalSeats","rows","poslist","J","R","angle","Totals","PI","onMouseMove","onMouseOut","Counter","partySvg","pythonConvertedCode","horseshoe_chart","horseshoe_partyColorsData","horseshoe_className","HorseShoeChart","horseshoe_classCallCheck","horseshoe_getPrototypeOf","horseshoe_assertThisInitialized","SeatHorseShoeChart_horseshoe","VoteCompBarchart_barchart_chart","VoteCompBarchart_barchart_partyColorsData","VoteCompBarchart_barchart_className","VoteCompBarchart_barchart_classCallCheck","VoteCompBarchart_barchart_getPrototypeOf","VoteCompBarchart_barchart_assertThisInitialized","parseVotesComparisonData","VoteCompBarchart_barchart","d3groupbarchart_Chart","groupChartData","groupSvgs","groupSvg","bandwidth","YaxisOffset","subX","barAxisTextSvg","barAxisTexts","exec","TVSeatCompBarchart_barchart_chart","TVSeatCompBarchart_barchart_partyColorsData","topLabel","usedValue","TVSeatCompBarchart_barchart_className","TVSeatCompBarchart_barchart_classCallCheck","TVSeatCompBarchart_barchart_getPrototypeOf","TVSeatCompBarchart_barchart_assertThisInitialized","desc","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","d3deltabarchart_Chart","newGroupChartData","_objectSpread","delta","axisThick","deltaData","barTextYDelta","TVSeatSwingBarchart_barchart_chart","TVSeatSwingBarchart_barchart_partyColorsData","TVSeatSwingBarchart_barchart_className","TVSeatSwingBarchart_barchart_classCallCheck","TVSeatSwingBarchart_barchart_getPrototypeOf","TVSeatSwingBarchart_barchart_assertThisInitialized","years","TVSeatSwingBarchart_barchart","TVVoteCompBarchart_barchart_chart","TVVoteCompBarchart_barchart_partyColorsData","TVVoteCompBarchart_barchart_className","TVVoteCompBarchart_barchart_classCallCheck","TVVoteCompBarchart_barchart_getPrototypeOf","TVVoteCompBarchart_barchart_assertThisInitialized","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","TVVoteSwingBarchart_barchart_chart","TVVoteSwingBarchart_barchart_partyColorsData","TVVoteSwingBarchart_barchart_className","TVVoteSwingBarchart_barchart_classCallCheck","TVVoteSwingBarchart_barchart_getPrototypeOf","TVVoteSwingBarchart_barchart_assertThisInitialized","TVVoteSwingBarchart_barchart","calcPercent","toFixed","firstEdge","nodeData","results","node","el","validVotes","partyInfo","edges","partyResults","result","partyfilter_edges","reverse","new_results","available","newProps","totalCount","count","filter","beautifiedMuniName","tooltipClassName","labelElements","regions","overlapCnt","rect1","rect2","bottom","eventName","eventParam","CustomEvent","toUpperCase","Municipali","PKLVDNUMBE","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape"],"mappings":"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","file":"static/js/src-components-quickresults~src-components-race-for-seats~src-components-race-for-votes~src-componen~3364f670.23be66d6.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\n\n\nconst client = new ApolloClient({\n    link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n    cache: new InMemoryCache()\n  })\n\nexport {\n    API_URI,\n    client\n}","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getSeatsDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            party_Event_Description_Icontains:\"national\",\n            orderBy:[\"-national_pr\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  } else { //  if (options.regionType == \"province\")\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(province_Name:\"${options.provinceName}\", orderBy:[\"-regional\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  }\n}\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(party_Event_Description:\"${eventDescription}\", orderBy:[\"-national_pr\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else { //  if (options.regionType == \"province\")\n      eventDescription = eventDescription.replace(\"National\", \"Provincial\");\n      eventDescription = eventDescription.replace(\"NATIONAL\", \"PROVINCIAL\");\n      eventDescription = eventDescription.replace(\"national\", \"provincial\");\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province_Name:\"${options.provinceName}\", party_Event_Description:\"${eventDescription}\", orderBy:[\"-regional\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getVotesDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots{\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          location_Name:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          location_Province_Name:\"${options.provinceName}\", \n          location_Code: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n          location_IecId:\"${options.iecId}\", \n          location_Ward_Municipality_Code:\"${options.muniCode}\"\n        ) {\n          edges{\n            node{\n              event {\n                description\n              }\n              location {\n                iecId\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      console.log(\"fetch vd\", eventDescription, options.iecId, options.muniCode);\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\", \n            location_Ward_Municipality_Code:\"${options.muniCode}\"\n          ) {\n            edges{\n              node{\n                location {\n                  iecId\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                      }\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n  \n  // export function getMainParties(options) {\n  //   var eventDescription = options.eventDescription;\n  //   if (!eventDescription)\n  //     return;\n  //   if (options.regionType == \"national\") {\n  //     return client.query({\n  //       query: gql`\n  //       {\n  //         allProvincialBallots(\n  //           event_Description:\"${eventDescription}\"\n  //         ){\n  //           edges{\n  //             node{\n  //               partyResults {\n  //                 edges{\n  //                   node{\n  //                     validVotes\n  //                     percOfVotes\n  //                     party {\n  //                       id\n  //                       name\n  //                       abbreviation\n  //                     }\n  //                   }\n  //                 }\n  //               }\n  //               location {\n  //                 id\n  //                 name\n  //               }\n  //             }\n  //           }\n  //         }\n  //       }\n  //       `\n  //     })\n  //   } else if (options.regionType == \"province\") {\n  //     return client.query({\n  //       query: gql`\n  //       {\n  //         allMunicipalBallots(\n  //           event_Description:\"${eventDescription}\",\n  //           location_Province_Name:\"${options.provinceName}\"\n  //         ) {\n  //           edges{\n  //             node {\n  //               partyResults {\n  //                 edges{\n  //                   node{\n  //                     party {               \n  //                       name\n  //                       abbreviation\n  //                     }\n  //                     validVotes\n  //                     percOfVotes\n  //                   }\n  //                 }\n                  \n  //               }\n  //               location {\n  //                 code\n  //                 name\n  //                 longName\n  //               }\n  //             }\n  //           }\n  //         }\n  //       }\n  //       `\n  //     })\n  //   } else if (options.regionType == \"municipality\") {\n  //     var muniRegName = options.muniName.split(\" - \")[1];\n  //     console.log(options.regionType, options.muniName, muniRegName);\n  //       return client.query({\n  //         query: gql`\n  //         {\n  //           allVotingDistrictBallots( \n  //           event_Description:\"${eventDescription}\",\n  //           location_Ward_Municipality_Code:\"${options.muniCode}\") {\n  //             edges{\n  //               node{\n  //                 location {\n  //                   iecId\n  //                 }\n  //                 partyResults {\n  //                   edges{\n  //                     node{\n  //                       party{\n  //                         name\n  //                         abbreviation\n  //                       }\n  //                     }\n  //                   }  \n  //                 }\n  //               }\n  //             }\n  //           }\n  //         }\n  //         `\n  //       })\n  //   }\n  // }\n\n\n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByProvince(location_Country_Event_Description:\"${eventDescription}\") {\n            edges {\n              node {\n                location{\n                  id\n                  name\n                }\n                totalVotesCast\n                topParty{\n                  validVotes\n                  percOfVotes\n                  party {\n                      id\n                      name\n                      abbreviation\n                  }\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByMunicipality(\n            location_Province_Country_Event_Description:\"${eventDescription}\", \n            location_Province_Name:\"${options.provinceName}\") {\n            \n            edges {\n              node {\n                location{\n                    code\n                    name\n                    longName\n                }\n                totalVotesCast\n                topParty{\n                  party {               \n                    name\n                    abbreviation\n                  }\n                  validVotes\n                  percOfVotes\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { //if (options.regionType == \"municipality\") {\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            topPartiesByVotingDistrict(\n              location_Ward_Municipality_Province_Country_Event_Description:\"${eventDescription}\", \n              location_Ward_Municipality_Province_Name:\"${options.provinceName}\",\n              location_Ward_Municipality_Code: \"${options.muniCode}\"\n            ) {\n              \n              edges {\n                node {\n                  location{\n                    iecId\n                  }\n                  topParty{\n                    party{\n                      name\n                      abbreviation\n                    }\n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getTurnoutData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                percVoterTurnout\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                percVoterTurnout\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { // municipality or municipality-vd\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n            event_Description:\"${eventDescription}\",\n            location_Ward_Municipality_Name_Icontains:\"${muniRegName}\") {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n  export function getTurnoutDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getSpoiltData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                    id\n                    name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                event_Description:\"${eventDescription}\",\n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    code\n                    name\n                    longName\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                event_Description:\"${eventDescription}\",\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n  ","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getProgressVotesCount(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\", \n            location_Ward_Municipality_Code:\"${options.muniCode}\"\n          ) {\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport {getSeatsData, getSeatsDataForComparison} from \"./race-for-seats\"\nexport {getVotesDataM, getVotesDataForComparison, getMainParties} from \"./race-for-votes\"\nexport {getTurnoutData, getTurnoutDataForAllEvents} from \"./turnout\"\nexport {getSpoiltData} from \"./spoilt\"\nexport {getProgressVotesCount} from \"./prog-votescount\"\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            abbreviation\n            colour\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getProvincesData() {\n  var provincesData = [\n      {\n          \"name\": \"Limpopo\",\n          \"abbreviation\": \"LIM\",\n          \"munis\": [{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM331 - Greater Giyani [Giyani]\",\"muniCode\":\"LIM331\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM332 - Greater Letaba [Duiwelskloof]\",\"muniCode\":\"LIM332\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM333 - Greater Tzaneen [Tzaneen]\",\"muniCode\":\"LIM333\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM334 - Ba-Phalaborwa [Phalaborwa]\",\"muniCode\":\"LIM334\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM335 - Maruleng [Hoedspruit]\",\"muniCode\":\"LIM335\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM341 - Musina [Messina]\",\"muniCode\":\"LIM341\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM342 - Mutale [Mutale-Masisi]\",\"muniCode\":\"LIM342\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM343 - Thulamela [Thohoyandou]\",\"muniCode\":\"LIM343\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM344 - Makhado [Louis Trichardt]\",\"muniCode\":\"LIM344\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM351 - Blouberg [Bochum/My Darling]\",\"muniCode\":\"LIM351\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM352 - Aganang [Moletji/Matlala]\",\"muniCode\":\"LIM352\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM353 - Molemole [Dendron/Dikgale]\",\"muniCode\":\"LIM353\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM354 - Polokwane [Pietersburg]\",\"muniCode\":\"LIM354\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM355 - Lepele-Nkumpi [Lebowakgomo]\",\"muniCode\":\"LIM355\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM361 - Thabazimbi [Thabazimbi]\",\"muniCode\":\"LIM361\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM362 - Lephalale [Ellisras]\",\"muniCode\":\"LIM362\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM364 - Mookgopong [Naboomspruit]\",\"muniCode\":\"LIM364\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM365 - Modimolle [Nylstroom]\",\"muniCode\":\"LIM365\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM366 - Bela-Bela [Warmbad]\",\"muniCode\":\"LIM366\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM367 - Mogalakwena [Potgietersrus]\",\"muniCode\":\"LIM367\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM471 - Ephraim Mogale [Marble Hall]\",\"muniCode\":\"LIM471\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM472 - Elias Motsoaledi [Groblersdal]\",\"muniCode\":\"LIM472\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM473 - Makhuduthamaga [Ngwaritsi]\",\"muniCode\":\"LIM473\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM474 - Fetakgomo [Fetakgomo ]\",\"muniCode\":\"LIM474\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM475 - Greater Tubatse [Burgersfort/Ohrigstad/Eastern Tubatse]\",\"muniCode\":\"LIM475\"}]\n      },\n      {\n          \"name\": \"Mpumalanga\",\n          \"abbreviation\": \"MP\",\n          \"munis\": [{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP301 - Albert Luthuli [Elukwatini/Carolina]\",\"muniCode\":\"MP301\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP302 - Msukaligwa [Ermelo]\",\"muniCode\":\"MP302\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP303 - Mkhondo [Piet Retief]\",\"muniCode\":\"MP303\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP304 - Pixley Ka Seme [Volksrust]\",\"muniCode\":\"MP304\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP305 - Lekwa [Standerton]\",\"muniCode\":\"MP305\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP306 - Dipaleseng [Balfour]\",\"muniCode\":\"MP306\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP307 - Govan Mbeki [Highveld Ridge]\",\"muniCode\":\"MP307\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP311 - Delmas [Delmas]\",\"muniCode\":\"MP311\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP312 - Emalahleni [Witbank]\",\"muniCode\":\"MP312\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP313 - Steve Tshwete [Middelburg]\",\"muniCode\":\"MP313\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP314 - Emakhazeni [Belfast]\",\"muniCode\":\"MP314\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP315 - Thembisile [KwaMhlanga]\",\"muniCode\":\"MP315\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP316 - Dr JS Moroka [Mdutjana]\",\"muniCode\":\"MP316\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP321 - Thaba Chweu [Sabie]\",\"muniCode\":\"MP321\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP322 - Mbombela [Nelspruit]\",\"muniCode\":\"MP322\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP323 - Umjindi [Barberton]\",\"muniCode\":\"MP323\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP324 - Nkomazi [Nkomazi]\",\"muniCode\":\"MP324\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP325 - Bushbuckridge [Bushbuckridge]\",\"muniCode\":\"MP325\"}]\n      },\n      {\n          \"name\": \"Gauteng\",\n          \"abbreviation\": \"GT\",\n          \"munis\": [{\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT421 - Emfuleni [Vereeniging]\",\"muniCode\":\"GT421\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT422 - Midvaal [Meyerton]\",\"muniCode\":\"GT422\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT423 - Lesedi [Heidelberg]\",\"muniCode\":\"GT423\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT481 - Mogale City [Krugersdorp]\",\"muniCode\":\"GT481\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT482 - Randfontein [Randfontein]\",\"muniCode\":\"GT482\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT483 - Westonaria [Westonaria]\",\"muniCode\":\"GT483\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT484 - Merafong City [Carletonville]\",\"muniCode\":\"GT484\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"}]\n      },\n      {\n          \"name\": \"KwaZulu-Natal\",\n          \"abbreviation\": \"KZN\",\n          \"munis\": [{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN211 - Vulamehlo [Dududu]\",\"muniCode\":\"KZN211\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN212 - Umdoni [Scottburgh]\",\"muniCode\":\"KZN212\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN213 - Umzumbe [Umzumbe]\",\"muniCode\":\"KZN213\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN214 - UMuziwabantu [Harding]\",\"muniCode\":\"KZN214\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN215 - Ezinqoleni [Izinqolweni]\",\"muniCode\":\"KZN215\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN216 - Hibiscus Coast [Port Shepstone]\",\"muniCode\":\"KZN216\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN221 - uMshwathi [Wartburg]\",\"muniCode\":\"KZN221\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN222 - uMngeni [Howick]\",\"muniCode\":\"KZN222\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN223 - Mooi Mpofana [Mooirivier]\",\"muniCode\":\"KZN223\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN224 - Impendle [Impendle]\",\"muniCode\":\"KZN224\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN225 - Msunduzi [Pietermaritzburg]\",\"muniCode\":\"KZN225\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN226 - Mkhambathini [Camperdown]\",\"muniCode\":\"KZN226\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN227 - Richmond [Richmond]\",\"muniCode\":\"KZN227\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN232 - Emnambithi/Ladysmith [Ladysmith]\",\"muniCode\":\"KZN232\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN233 - Indaka [Waaihoek]\",\"muniCode\":\"KZN233\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN234 - Umtshezi [Estcourt]\",\"muniCode\":\"KZN234\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN235 - Okhahlamba [Bergville]\",\"muniCode\":\"KZN235\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN236 - Imbabazane [Loskop]\",\"muniCode\":\"KZN236\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN241 - Endumeni [Dundee]\",\"muniCode\":\"KZN241\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN242 - Nqutu [Nqutu]\",\"muniCode\":\"KZN242\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN244 - Msinga [Pomeroy]\",\"muniCode\":\"KZN244\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN245 - Umvoti [Greytown]\",\"muniCode\":\"KZN245\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN252 - Newcastle [Newcastle]\",\"muniCode\":\"KZN252\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN253 - eMadlangeni [Utrecht]\",\"muniCode\":\"KZN253\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN254 - Dannhauser [Durnacol]\",\"muniCode\":\"KZN254\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN261 - eDumbe [Paulpietersburg]\",\"muniCode\":\"KZN261\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN262 - UPhongolo [Pongola]\",\"muniCode\":\"KZN262\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN263 - Abaqulusi [Vryheid]\",\"muniCode\":\"KZN263\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN265 - Nongoma [Nongoma]\",\"muniCode\":\"KZN265\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN266 - Ulundi [Ulundi]\",\"muniCode\":\"KZN266\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN271 - Umhlabuyalingana [Emangusi]\",\"muniCode\":\"KZN271\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN272 - Jozini [Mkuze]\",\"muniCode\":\"KZN272\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN273 - The Big 5 False Bay [Hluhluwe]\",\"muniCode\":\"KZN273\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN274 - Hlabisa [Somkele]\",\"muniCode\":\"KZN274\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN275 - Mtubatuba [Mtubatuba]\",\"muniCode\":\"KZN275\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN281 - Mfolozi [KwaMbonambi]\",\"muniCode\":\"KZN281\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN282 - uMhlathuze [Richards Bay]\",\"muniCode\":\"KZN282\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN283 - Ntambana [Ntambana]\",\"muniCode\":\"KZN283\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN284 - uMlalazi [Eshowe]\",\"muniCode\":\"KZN284\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN285 - Mthonjaneni [Melmoth]\",\"muniCode\":\"KZN285\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN286 - Nkandla [Nkandla]\",\"muniCode\":\"KZN286\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN291 - Mandeni [Mandeni]\",\"muniCode\":\"KZN291\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN292 - KwaDukuza [Stanger]\",\"muniCode\":\"KZN292\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN293 - Ndwedwe [Ndwedwe]\",\"muniCode\":\"KZN293\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN294 - Maphumulo [Maphumulo]\",\"muniCode\":\"KZN294\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN431 - Ingwe [Creighton]\",\"muniCode\":\"KZN431\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN432 - Kwa Sani [Underberg]\",\"muniCode\":\"KZN432\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN433 - Greater Kokstad [Kokstad]\",\"muniCode\":\"KZN433\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN434 - Ubuhlebezwe [Ixopo]\",\"muniCode\":\"KZN434\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN435 - Umzimkhulu [Umzimkulu]\",\"muniCode\":\"KZN435\"}]\n      },\n      {\n          \"name\": \"North West\",\n          \"abbreviation\": \"NW\",\n          \"munis\": [{\"provinceName\":\"North West\",\"muniName\":\"NW371 - Moretele [Makapanstad]\",\"muniCode\":\"NW371\"},{\"provinceName\":\"North West\",\"muniName\":\"NW372 - Madibeng [Brits]\",\"muniCode\":\"NW372\"},{\"provinceName\":\"North West\",\"muniName\":\"NW373 - Rustenburg [Rustenburg]\",\"muniCode\":\"NW373\"},{\"provinceName\":\"North West\",\"muniName\":\"NW374 - Kgetlengrivier [Koster]\",\"muniCode\":\"NW374\"},{\"provinceName\":\"North West\",\"muniName\":\"NW375 - Moses Kotane [Mogwase]\",\"muniCode\":\"NW375\"},{\"provinceName\":\"North West\",\"muniName\":\"NW381 - Ratlou [Setlagole]\",\"muniCode\":\"NW381\"},{\"provinceName\":\"North West\",\"muniName\":\"NW382 - Tswaing [Delareyville]\",\"muniCode\":\"NW382\"},{\"provinceName\":\"North West\",\"muniName\":\"NW383 - Mafikeng [Mafikeng]\",\"muniCode\":\"NW383\"},{\"provinceName\":\"North West\",\"muniName\":\"NW384 - Ditsobotla [Lichtenburg]\",\"muniCode\":\"NW384\"},{\"provinceName\":\"North West\",\"muniName\":\"NW385 - Ramotshere Moiloa [Zeerust]\",\"muniCode\":\"NW385\"},{\"provinceName\":\"North West\",\"muniName\":\"NW392 - Naledi [Vryburg]\",\"muniCode\":\"NW392\"},{\"provinceName\":\"North West\",\"muniName\":\"NW393 - Mamusa [Schweizer-Reneke]\",\"muniCode\":\"NW393\"},{\"provinceName\":\"North West\",\"muniName\":\"NW394 - Greater Taung [Reivilo]\",\"muniCode\":\"NW394\"},{\"provinceName\":\"North West\",\"muniName\":\"NW396 - Lekwa-Teemane [Christiana]\",\"muniCode\":\"NW396\"},{\"provinceName\":\"North West\",\"muniName\":\"NW397 - NW397 Local Municipality [Ganyesa/Pomfret]\",\"muniCode\":\"NW397\"},{\"provinceName\":\"North West\",\"muniName\":\"NW401 - Ventersdorp [Ventersdorp]\",\"muniCode\":\"NW401\"},{\"provinceName\":\"North West\",\"muniName\":\"NW402 - Tlokwe [Potchefstroom]\",\"muniCode\":\"NW402\"},{\"provinceName\":\"North West\",\"muniName\":\"NW403 - Matlosana [Klerksdorp]\",\"muniCode\":\"NW403\"},{\"provinceName\":\"North West\",\"muniName\":\"NW404 - Maquassi Hills [Wolmaransstad]\",\"muniCode\":\"NW404\"}]\n      },\n      {\n          \"name\": \"Free State\",\n          \"abbreviation\": \"FS\",\n          \"munis\": [{\"provinceName\":\"Free State\",\"muniName\":\"FS161 - Letsemeng [Koffiefontein]\",\"muniCode\":\"FS161\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS162 - Kopanong [Trompsburg]\",\"muniCode\":\"FS162\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS163 - Mohokare [Zastron]\",\"muniCode\":\"FS163\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS164 - Naledi [Dewetsdorp]\",\"muniCode\":\"FS164\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS181 - Masilonyana [Theunissen]\",\"muniCode\":\"FS181\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS182 - Tokologo [Dealesville]\",\"muniCode\":\"FS182\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS183 - Tswelopele [Hoopstad]\",\"muniCode\":\"FS183\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS184 - Matjhabeng [Welkom]\",\"muniCode\":\"FS184\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS185 - Nala [Bothaville]\",\"muniCode\":\"FS185\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS191 - Setsoto [Senekal]\",\"muniCode\":\"FS191\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS192 - Dihlabeng [Bethlehem]\",\"muniCode\":\"FS192\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS193 - Nketoana [Reitz]\",\"muniCode\":\"FS193\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS194 - Maluti a Phofung [Qwa-Qwa]\",\"muniCode\":\"FS194\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS195 - Phumelela [Vrede]\",\"muniCode\":\"FS195\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS196 - Mantsopa [Ladybrand]\",\"muniCode\":\"FS196\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS201 - Moqhaka [Kroonstad]\",\"muniCode\":\"FS201\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS203 - Ngwathe [Parys]\",\"muniCode\":\"FS203\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS204 - Metsimaholo [Sasolburg]\",\"muniCode\":\"FS204\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS205 - Mafube [Frankfort]\",\"muniCode\":\"FS205\"},{\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"}]\n      },\n      {\n          \"name\": \"Eastern Cape\",\n          \"abbreviation\": \"EC\",\n          \"munis\": [{\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC101 - Camdeboo [Graaff-Reinet]\",\"muniCode\":\"EC101\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC102 - Blue Crane Route [Somerset East]\",\"muniCode\":\"EC102\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC103 - Ikwezi [Jansenville]\",\"muniCode\":\"EC103\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC104 - Makana [Grahamstown]\",\"muniCode\":\"EC104\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC105 - Ndlambe [Port Alfred]\",\"muniCode\":\"EC105\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC106 - Sundays River Valley [Kirkwood]\",\"muniCode\":\"EC106\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC107 - Baviaans [Willowmore]\",\"muniCode\":\"EC107\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC108 - Kouga [Humansdorp]\",\"muniCode\":\"EC108\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC109 - Kou-Kamma [Kareedouw]\",\"muniCode\":\"EC109\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC121 - Mbhashe [Idutywa]\",\"muniCode\":\"EC121\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC122 - Mnquma [Butterworth]\",\"muniCode\":\"EC122\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC123 - Great Kei [Komga]\",\"muniCode\":\"EC123\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC124 - Amahlathi [Stutterheim]\",\"muniCode\":\"EC124\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC126 - Ngqushwa [Peddie]\",\"muniCode\":\"EC126\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC127 - Nkonkobe [Alice]\",\"muniCode\":\"EC127\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC128 - Nxuba [Adelaide]\",\"muniCode\":\"EC128\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC131 - Inxuba Yethemba [Cradock]\",\"muniCode\":\"EC131\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC132 - Tsolwana [Tarkastad]\",\"muniCode\":\"EC132\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC133 - Inkwanca [Molteno]\",\"muniCode\":\"EC133\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC134 - Lukhanji [Queenstown]\",\"muniCode\":\"EC134\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC135 - Intsika Yethu [Cofimvaba]\",\"muniCode\":\"EC135\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC136 - Emalahleni [Lady Frere]\",\"muniCode\":\"EC136\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC137 - Engcobo [Engcobo]\",\"muniCode\":\"EC137\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC138 - Sakhisizwe [Elliot]\",\"muniCode\":\"EC138\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC141 - Elundini [Mount Fletcher]\",\"muniCode\":\"EC141\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC142 - Senqu [Lady Grey]\",\"muniCode\":\"EC142\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC143 - Maletswai [Aliwal North]\",\"muniCode\":\"EC143\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC144 - Gariep [Burgersdorp]\",\"muniCode\":\"EC144\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC153 - Ngquza Hill [Flagstaff]\",\"muniCode\":\"EC153\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC154 - Port St Johns [Port St Johns]\",\"muniCode\":\"EC154\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC155 - Nyandeni [Libode]\",\"muniCode\":\"EC155\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC156 - Mhlontlo [Qumbu]\",\"muniCode\":\"EC156\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC157 - King Sabata Dalindyebo [Umtata]\",\"muniCode\":\"EC157\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC441 - Matatiele [Matatiele]\",\"muniCode\":\"EC441\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC442 - Umzimvubu [Mount Ayliff]\",\"muniCode\":\"EC442\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC443 - Mbizana [Bizana]\",\"muniCode\":\"EC443\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC444 - Ntabankulu [Ntabankulu]\",\"muniCode\":\"EC444\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}]\n      },\n      {\n          \"name\": \"Northern Cape\",\n          \"abbreviation\": \"NC\",\n          \"munis\": [{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC061 - RICHTERSVELD [Port Nolloth]\",\"muniCode\":\"NC061\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC062 - NAMA KHOI [Springbok]\",\"muniCode\":\"NC062\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC064 - KAMIESBERG [Garies]\",\"muniCode\":\"NC064\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC065 - HANTAM [Calvinia]\",\"muniCode\":\"NC065\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC066 - KAROO HOOGLAND [Fraserburg]\",\"muniCode\":\"NC066\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC067 - KHâI-MA [Pofadder]\",\"muniCode\":\"NC067\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC071 - UBUNTU [Victoria West]\",\"muniCode\":\"NC071\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC072 - UMSOBOMVU [Colesberg]\",\"muniCode\":\"NC072\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC073 - EMTHANJENI [De Aar]\",\"muniCode\":\"NC073\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC074 - KAREEBERG [Carnarvon]\",\"muniCode\":\"NC074\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC075 - RENOSTERBERG [Phillipstown]\",\"muniCode\":\"NC075\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC076 - THEMBELIHLE [Hopetown]\",\"muniCode\":\"NC076\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC077 - SIYATHEMBA [Prieska]\",\"muniCode\":\"NC077\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC078 - SIYANCUMA [Griekwastad]\",\"muniCode\":\"NC078\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC081 - MIER [Mier]\",\"muniCode\":\"NC081\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC082 - KAI !GARIB [Keimoes]\",\"muniCode\":\"NC082\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC083 - KHARA HAIS [Upington]\",\"muniCode\":\"NC083\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC084 - !KHEIS [Groblershoop]\",\"muniCode\":\"NC084\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC085 - TSANTSABANE [Postmasburg]\",\"muniCode\":\"NC085\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC086 - KGATELOPELE [Danielskuil]\",\"muniCode\":\"NC086\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC091 - Sol Plaatje [Kimberley]\",\"muniCode\":\"NC091\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC092 - Dikgatlong [Barkley West]\",\"muniCode\":\"NC092\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC093 - Magareng [Warrenton]\",\"muniCode\":\"NC093\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC094 - Phokwane [Hartswater]\",\"muniCode\":\"NC094\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC451 - Joe Morolong [Kgalagadi]\",\"muniCode\":\"NC451\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC452 - GA-SEGONYANA [Kuruman]\",\"muniCode\":\"NC452\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC453 - GAMAGARA [Kathu]\",\"muniCode\":\"NC453\"}]\n      },\n      {\n          \"name\": \"Western Cape\",\n          \"abbreviation\": \"WC\",\n          \"munis\": [{\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC011 - Matzikama [Vredendal]\",\"muniCode\":\"WC011\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC012 - Cederberg [Citrusdal]\",\"muniCode\":\"WC012\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC013 - Bergrivier [Velddrif]\",\"muniCode\":\"WC013\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC014 - Saldanha Bay [West Coast Peninsula]\",\"muniCode\":\"WC014\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC015 - Swartland [Malmesbury]\",\"muniCode\":\"WC015\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC022 - Witzenberg [Ceres]\",\"muniCode\":\"WC022\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC023 - Drakenstein [Paarl]\",\"muniCode\":\"WC023\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC024 - Stellenbosch [Stellenbosch]\",\"muniCode\":\"WC024\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC025 - Breede Valley [Worcester]\",\"muniCode\":\"WC025\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC026 - Langeberg [Robertson]\",\"muniCode\":\"WC026\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC031 - Theewaterskloof [Caledon]\",\"muniCode\":\"WC031\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC032 - Overstrand [Greater Hermanus]\",\"muniCode\":\"WC032\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC033 - Cape Agulhas [Bredasdorp]\",\"muniCode\":\"WC033\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC034 - Swellendam [Barrydale/Swellendam ]\",\"muniCode\":\"WC034\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC041 - Kannaland [Ladismith]\",\"muniCode\":\"WC041\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC042 - Hessequa [Heidelberg/Riversdale]\",\"muniCode\":\"WC042\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC043 - Mossel Bay [Mossel Bay]\",\"muniCode\":\"WC043\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC044 - George [George]\",\"muniCode\":\"WC044\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC045 - Oudtshoorn [Oudtshoorn]\",\"muniCode\":\"WC045\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC047 - Bitou [Greater Plettenberg Bay]\",\"muniCode\":\"WC047\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC048 - Knysna [Knysna]\",\"muniCode\":\"WC048\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC051 - Laingsburg [Laingsburg]\",\"muniCode\":\"WC051\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC052 - Prince Albert [Prins Albert]\",\"muniCode\":\"WC052\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC053 - Beaufort West [Beaufort West]\",\"muniCode\":\"WC053\"}]\n      }\n  ]\n  return provincesData;\n}\n\nexport function getMetrosData() {\n  var metrosData = [\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},\n    {\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},\n    {\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},\n    {\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"},\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}\n  ]\n  return metrosData;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__tgFvS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__1KFQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__1UVX7\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__1faC8\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__284h0\",\"main-left-part\":\"quickResultsWidget_main-left-part__2PFdy\",\"main-right-part\":\"quickResultsWidget_main-right-part__3aSBj\",\"barchart-container\":\"quickResultsWidget_barchart-container__32mow\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__1QzTz\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3beRX\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3OaTN\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__1_krp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__29vdd\",\"multievent-container\":\"barchartEmbed_multievent-container__1G-dC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__3KEZl\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__2bLlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3Hovq\",\"multievent-container\":\"barchartEmbed_multievent-container__2y7nI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3iHSi\",\"multievent-container\":\"barchartEmbed_multievent-container__3dDi0\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2Ln06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","export {default as BarChartEmbed} from \"./BarChart/barchartEmbed\";\nexport {default as RaceForSeatsBarChartEmbed} from \"./RaceForSeatBarchart/barchartEmbed\";\nexport {default as SpoiltBarChartEmbed} from \"./SpoiltBarchart/barchartEmbed\";\nexport {default as MapEmbed} from \"./Map/mapEmbed\";\nexport {default as TurnoutMapEmbed} from \"./TurnoutMap/mapEmbed\";\nexport {default as TurnoutBarChartEmbed} from \"./TurnoutBarchart/barchartEmbed\";\nexport {default as BarchartWithNavMapEmbed} from \"./BarchartWithNavMap/barchartMapEmbed\";\nexport {default as QuickResultsWidgetEmbed} from \"./QuickResultsWidget/quickResultsWidgetEmbed\";\nexport {default as ProgVotesCountPiechartEmbed} from \"./ProgVotesCountPiechart/piechartEmbed\";\nexport {default as RaceForSeatsComparisonBarChartEmbed} from \"./SeatCompBarchart/barchartEmbed\";\nexport {default as SeatHorseShoeChartEmbed} from \"./SeatHorseShoeChart/horseshoeEmbed\";\nexport {default as VoteComparisonBarchartEmbed} from \"./VoteCompBarchart/barchartEmbed\";\n\nexport {default as TVSeatCompBarchartEmbed} from \"./TVSeatCompBarchart/barchartEmbed\";\nexport {default as TVSeatSwingBarchartEmbed} from \"./TVSeatSwingBarchart/barchartEmbed\";\nexport {default as TVVoteCompBarchartEmbed} from \"./TVVoteCompBarchart/barchartEmbed\";\nexport {default as TVVoteSwingBarchartEmbed} from \"./TVVoteSwingBarchart/barchartEmbed\";","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); }) + 1\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n\n        console.log(\"before parse chartData\", data);\n        console.log(\"parsed chartData\", chartData);\n       \n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n        \n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        // var ctx = rendercanvas.getContext(\"2d\");\n        // ctx.globalCompositeOperation = \"source-in\";\n        // ctx.fillStyle = \"#ffffff\";\n        // ctx.fillRect(0, 0, rect.width, rect.height);\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+className(`${config.CSS_PREFIX}stylesheet-${stylesheetFor}`)}>\n                <div className={className(config.CSS_PREFIX + \"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(config.CSS_PREFIX + \"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 500)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                \n                function setRegionType(regionType) {\n                    var newState;\n                    var newState = {\n                        regionType: self.state.regionType, \n                        provinceName: self.state.provinceName,\n                        muniName: self.state.muniName,\n                        muniImuniCodeD: self.state.muniCode,\n                        iecId: self.state.iecId,\n                    }\n                    newState.regionType = regionType;\n                    triggerCustomEvent(events.REGION_CHANGE, newState);\n                    self.setState(newState);\n                }\n\n                function appendSpan(foDiv, regionName, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"span\")\n                        .style(\"height\", \"30px\")\n                        .style(\"color\", \"black\")\n                        .style(\"cursor\", \"default\")\n                        .html(regionName);\n                }\n\n                function appendLink(foDiv, regionName, regionType, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"a\")\n                        .style(\"height\", \"30px\")\n                        .style(\"color\", \"black\")\n                        .style(\"cursor\", \"pointer\")\n                        .html(regionName)\n                        .on(\"click\", function() {\n                            setRegionType(regionType);\n                        });\n                }\n                \n                var foDiv = fo.append(\"xhtml:div\");\n                var regionType = self.state.regionType;\n                if (regionType == \"national\") {\n                    appendSpan(foDiv, \"South Africa\", false);\n                } else {\n                    appendLink(foDiv, \"South Africa\", \"national\", false);\n                    if (regionType == \"province\") {\n                        appendSpan(foDiv, self.state.provinceName, true);\n                    } else {\n                        appendLink(foDiv, self.state.provinceName, \"province\", true);\n                        if (regionType == \"municipality\") {\n                            appendSpan(foDiv, self.state.muniCode, true);\n                        } else {\n                            appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                            appendSpan(foDiv, self.state.iecId, true);\n                        }\n                    }\n                }\n                // foDiv\n                //     .append(\"button\")\n                //     .attr(\"class\", \"go-back\")\n                //     .style(\"height\", \"30px\")\n                //     .style(\"color\", \"black\")\n                //     .html(\"go back\")\n                //     .on(\"click\", function() {\n                //         var regionType = self.state.regionType;\n                //         var newState, event;\n    \n                //         var newState = {\n                //             regionType: self.state.regionType, \n                //             provinceName: self.state.provinceName,\n                //             muniName: self.state.muniName,\n                //             muniImuniCodeD: self.state.muniCode,\n                //             iecId: self.state.iecId,\n                //         }\n                        \n                //         if (regionType === \"province\") {\n                //             newState.regionType = \"national\";\n                //         } else if (regionType === \"municipality\") {\n                //             newState.regionType = \"province\";\n                //         } else if (regionType === \"municipality-vd\") {\n                //             newState.regionType = \"municipality\";\n                //         }\n    \n                //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                //         self.setState(newState);\n                //     });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniImuniCodeD: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(\"This region has been disestablished\"); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        console.log(\"componentDidUpdate\", this.state);\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")+\" \"+className(`${config.CSS_PREFIX}stylesheet-${stylesheetFor}`)}>\n                <div className={className(config.CSS_PREFIX + \"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(config.CSS_PREFIX + \"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n                if (!self.state.disableNavigation) {\n                    var fo = svg.append(\"foreignObject\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", 10)\n                        .attr(\"width\", 500)\n                        .attr(\"height\", 30)\n                        .attr(\"class\", \"map-controls\")\n                    \n                    function setRegionType(regionType) {\n                        var newState;\n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        newState.regionType = regionType;\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    }\n    \n                    function appendSpan(foDiv, regionName, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"span\")\n                            .style(\"height\", \"30px\")\n                            .style(\"color\", \"black\")\n                            .style(\"cursor\", \"default\")\n                            .html(regionName);\n                    }\n    \n                    function appendLink(foDiv, regionName, regionType, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"a\")\n                            .style(\"height\", \"30px\")\n                            .style(\"color\", \"black\")\n                            .style(\"cursor\", \"pointer\")\n                            .html(regionName)\n                            .on(\"click\", function() {\n                                setRegionType(regionType);\n                            });\n                    }\n                    \n                    var foDiv = fo.append(\"xhtml:div\");\n                    var regionType = self.state.regionType;\n                    if (regionType == \"national\") {\n                        appendSpan(foDiv, \"South Africa\", false);\n                    } else {\n                        appendLink(foDiv, \"South Africa\", \"national\", false);\n                        if (regionType == \"province\") {\n                            appendSpan(foDiv, self.state.provinceName, true);\n                        } else {\n                            appendLink(foDiv, self.state.provinceName, \"province\", true);\n                            if (regionType == \"municipality\") {\n                                appendSpan(foDiv, self.state.muniCode, true);\n                            } else {\n                                appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                appendSpan(foDiv, self.state.iecId, true);\n                            }\n                        }\n                    }\n                    // foDiv\n                    //     .append(\"button\")\n                    //     .attr(\"class\", \"go-back\")\n                    //     .style(\"height\", \"30px\")\n                    //     .style(\"color\", \"black\")\n                    //     .html(\"go back\")\n                    //     .on(\"click\", function() {\n                    //         var regionType = self.state.regionType;\n                    //         var newState, event;\n        \n                    //         var newState = {\n                    //             regionType: self.state.regionType, \n                    //             provinceName: self.state.provinceName,\n                    //             muniName: self.state.muniName,\n                    //             muniImuniCodeD: self.state.muniCode,\n                    //             iecId: self.state.iecId,\n                    //         }\n                            \n                    //         if (regionType === \"province\") {\n                    //             newState.regionType = \"national\";\n                    //         } else if (regionType === \"municipality\") {\n                    //             newState.regionType = \"province\";\n                    //         } else if (regionType === \"municipality-vd\") {\n                    //             newState.regionType = \"municipality\";\n                    //         }\n        \n                    //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                    //         self.setState(newState);\n                    //     });\n                }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);       \n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniImuniCodeD: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(\"This region has been disestablished\"); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport JSZip from \"jszip\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            console.log(\"exporting ...\");\n            var zip = new JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n                console.log(\"exporting ended successfully\");\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n        return (\n        <div ref=\"superwidget\" >\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        to: `2-${i}`,\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ];\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatBarChart from '../RaceForSeatBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport JSZip from \"jszip\";\nimport {saveAs} from \"file-saver\";\nimport {\n    getRegionName,\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\",\n            stylesheetFor: \"web\"\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = this.handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n    //   if (newState.regionType != \"municipality-vd\")\n        this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'race for votes') {\n            imageLoadPromises = [\n                this.votesInstance1.exportAsPNGUri(), \n                this.votesInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'race for seats') {\n            imageLoadPromises = [\n                this.seatsInstance1.exportAsPNGUri(), \n                this.seatsInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'turnout') {\n            imageLoadPromises = [\n                this.turnoutInstance1.exportAsPNGUri(), \n                this.turnoutInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'counting progress') {\n            imageLoadPromises = [\n                this.progressInstance1.exportAsPNGUri(), \n                this.progressInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'spoilt votes') {\n            imageLoadPromises = [\n                this.spoiltInstance1.exportAsPNGUri(), \n                this.spoiltInstance2.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            console.log(\"exporting ...\");\n            var zip = new JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            imgs.file(\"image1.png\", values[0], {base64: true});\n            imgs.file(\"image2.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n                console.log(\"exporting ended successfully\");\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState);\n\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    };\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            stylesheetFor,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            comp\n        } = this.state;\n        return (\n            <div className={cn(`stylesheet-${stylesheetFor}`)}>\n                <div className={cn(\"row\") + \" \" + cn(\"component-transition-menu\")}>\n                    <div className={cn(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results \n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={cn(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div>\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart \n                                            ref={instance => { this.votesInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.votesInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatBarChart \n                                            ref={instance => { this.seatsInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.seatsInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart \n                                            ref={instance => { this.turnoutInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap \n                                            ref={instance => { this.turnoutInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart \n                                            ref={instance => { this.progressInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.progressInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart \n                                            ref={instance => { this.spoiltInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.spoiltInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"horseshoechart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      console.log(\"groupChartData\", groupChartData);\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return options.yValue(d); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('fill', \"#DEDEDE\")\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => item.data[0].delta)) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => item.data[0].delta)) - 1\n      }\n      y.domain(minMaxY);\n\n      svg.selectAll(\".xAxisLine\").remove();\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"black\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","export {default as BarChart} from \"./BarChart/barchart\";\nexport {default as RaceForSeatsBarChart} from \"./RaceForSeatBarchart/barchart\";\nexport {default as SpoiltBarChart} from \"./SpoiltBarchart/barchart\";\nexport {default as Map} from \"./Map/map\";\nexport {default as TurnoutMap} from \"./TurnoutMap/map\";\nexport {default as TurnoutBarChart} from \"./TurnoutBarchart/barchart\";\nexport {default as BarchartWithNavMap} from \"./BarchartWithNavMap/barchartMap\";\nexport {default as QuickResultsWidget} from \"./QuickResultsWidget/quickResultsWidget\";\nexport {default as ProgVotesCountPiechart} from \"./ProgVotesCountPiechart/piechart\";\nexport {default as RaceForSeatsComparisonBarChart} from \"./SeatCompBarchart/barchart\";\nexport {default as SeatHorseShoeChart} from \"./SeatHorseShoeChart/horseshoe\";\nexport {default as VoteComparisonBarchart} from \"./VoteCompBarchart/barchart\";\n\nexport {default as TVSeatCompBarchart} from \"./TVSeatCompBarchart/barchart\";\nexport {default as TVSeatSwingBarchart} from \"./TVSeatSwingBarchart/barchart\";\nexport {default as TVVoteCompBarchart} from \"./TVVoteCompBarchart/barchart\";\nexport {default as TVVoteSwingBarchart} from \"./TVVoteSwingBarchart/barchart\";\n\n\n\n","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\",\n    \"CSS_PREFIX\": \"ELVIZ_\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst CHART_PREVIEW = \"chart-preview\";\nconst MAP_PREVIEW = \"map-preview\";\nconst QUICK_RESULTS_PREVIEW = \"quick-results-preview\"\nconst EXPORT_PNG = \"export-png\";\nconst EXPORT_SUPERWIDGET_PNG = \"export-superwidget-png\";\n\nexport default {\n    REGION_CHANGE,\n    CHART_PREVIEW,\n    MAP_PREVIEW,\n    QUICK_RESULTS_PREVIEW,\n    EXPORT_PNG\n};","import * as d3 from \"d3\";\nimport config from \"../config\";\n\nfunction calcPercent(a, b) {\n  if (b == 0) {\n    return 0;\n  } else {\n    return (a/b*100).toFixed(2);\n  }\n}\n\nexport function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            validVotes: el[\"validVotes\"],\n            percOfVotes: el[\"percOfVotes\"],\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function parseVotesComparisonData(data, props) {\n  var results, edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else { //\"municipality-vd\"\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n\n  var partyfilter_edges = edges.map(edge => {\n    var nodeData = edge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"].filter(a => a.node[\"party\"][\"abbreviation\"] == props.partyAbbr);\n    var result = results[0];\n    if (result) {\n      var el = result[\"node\"];\n      return {\n          name: nodeData[\"event\"][\"description\"],\n          percOfVotes: el[\"percOfVotes\"],\n          partyInfo: el[\"party\"]\n      }\n    }\n    return {\n      name: nodeData[\"event\"][\"description\"],\n      percOfVotes: 0,\n      partyInfo: {\n        name: props.partyAbbr,\n        abbreviation: props.partyAbbr,\n      }\n    }\n  });\n  var results = partyfilter_edges.filter(edge => props.eventDescriptions.indexOf(edge.name) != -1).reverse();\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        percOfVotes: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n  return new_results;\n}\n\nexport function parseVotesComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map(partyAbbr => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    return {\n      partyAbbr,\n      data: parseVotesComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseProgressVotesCount(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"progress votes count data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Completed\",\n      percent: calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdWithResultsCaptured\"]\n    }, {\n      name: \"Not Completed\",\n      percent: 100 - calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdCount\"] - nodeData[\"vdWithResultsCaptured\"]\n    }\n  ]\n}\n\n// export function parseMainPartyData(data, props) {\n//     if (!data)  return null;\n//     var locationToMainParty = {};\n//     var edges;\n//     var regionType = props.regionType;\n//     var sort_results = function(party_results) {\n//         party_results[\"edges\"] = party_results[\"edges\"].sort(function(a, b) {\n//             return b.node.percOfVotes - a.node.percOfVotes;\n//         })\n//         return party_results;\n//     }\n//     if (regionType === \"national\") {\n//         edges = data[\"data\"][\"allProvincialBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var provinceName = node[\"location\"][\"name\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[provinceName] = partyName;\n//         })\n//     } else if (regionType === \"province\") {\n//         edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var muniCode = node[\"location\"][\"code\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[muniCode] = partyName;\n//         })\n//     } else {// \"municipality\"\n//         edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var iecId = node[\"location\"][\"iecId\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[iecId] = partyName;\n//         })\n//     }\n//     return locationToMainParty;\n// }\n\n\n\nexport function parseMainPartyData(data, props) {\n  if (!data)  return null;\n  var locationToMainParty = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"topPartiesByProvince\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var partyName = node[\"topParty\"][\"party\"][\"name\"];\n          locationToMainParty[provinceName] = partyName;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"topPartiesByMunicipality\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var partyName = node[\"topParty\"][\"party\"][\"name\"];\n          locationToMainParty[muniCode] = partyName;\n      })\n  } else {// \"municipality\"\n      edges = data[\"data\"][\"topPartiesByVotingDistrict\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var partyName = node[\"topParty\"][\"party\"][\"name\"];\n          locationToMainParty[iecId] = partyName;\n      })\n  }\n  return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      partyInfo: node[\"party\"]\n    }\n  })\n  \n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return results.slice(0, props.numParties);\n}\n\nexport function parseSeatsComparisonData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"event\"][\"description\"],\n      partyInfo: node[\"party\"]\n    }\n  }).filter(result => props.eventDescriptions.indexOf(result.name) != -1)\n  .filter(result => result.partyInfo[\"abbreviation\"] == props.partyAbbr)\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        seats: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n      // name: nodeData[\"event\"][\"description\"],\n      // percOfVotes: 0,\n      // partyInfo: {\n      //   name: props.partyAbbr,\n      //   abbreviation: props.partyAbbr,\n      // }\n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return new_results;\n}\n\nexport function parseSeatsComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map(partyAbbr => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    return {\n      partyAbbr,\n      data: parseSeatsComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseTurnoutData(data, props) {\n  if (!data)  return null;\n  var locationToTurnout = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"]; \n          locationToTurnout[provinceName] = percVoterTurnout;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"]; \n          locationToTurnout[muniCode] = percVoterTurnout;\n      })\n  } else {// \"municipality\" or \"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"]; \n          locationToTurnout[iecId] = percVoterTurnout;\n      })\n  }\n  return locationToTurnout;\n}\n\nexport function parseTurnoutDataForAllEvents(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"]; \n    return {\n      name: event,\n      percVoterTurnout\n    }\n  }).filter(edge => edge.name.toLowerCase().indexOf(props.eventType) != -1)\n}\n\nexport function parseSpoiltVotesData(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"spoilt data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Valid\",\n      percent: calcPercent(nodeData[\"totalValidVotes\"], nodeData[\"totalVotesCast\"])\n    }, {\n      name: \"Spoilt\",\n      percent: calcPercent(nodeData[\"spoiltVotes\"], nodeData[\"totalVotesCast\"])\n    }\n  ]\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\" - \") != -1) {\n        muniName = muniName.split(\" - \")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.iecId;\n  }\n}\n\nexport function getNationOrProvinceName(state) {\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  return state.provinceName;\n}\n\nexport function createTooltip(className) {\n  var tooltipClassName = className(config.CSS_PREFIX + \"tooltip\")\n  if (document.getElementsByClassName(tooltipClassName)[0]) {\n    return d3.select(`.${tooltipClassName}`);\n  } else {\n    return d3.select(\"body\").append(\"div\")\t\n      .attr(\"class\", tooltipClassName)\t\t\t\t\n      .style(\"opacity\", 0);\n  }\n}\n\n\n\nexport function fixMapLabelIntersect() {\n  var labelElements = document.getElementsByClassName(\"place-label\");\n  var regions = {};\n  var overlapCnt = {};\n  var i;\n\n  for (i = 0; i < labelElements.length; i ++) {\n      regions[i] = labelElements[i].getBoundingClientRect();\n  }\n\n  for (i = 0; i < labelElements.length; i ++) {\n      for (var j = 0; j < i; j ++) {\n          var rect1 = regions[i];\n          var rect2 = regions[j];\n          var overlap = !(rect1.right < rect2.left || \n              rect1.left > rect2.right || \n              rect1.bottom < rect2.top || \n              rect1.top > rect2.bottom);\n          if (overlap) {\n              overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n          }\n      }\n      if (overlapCnt[i] > 2) {\n          labelElements[i].setAttribute(\"opacity\", 0)\n      } else if (overlapCnt[i] > 0){\n          labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n      } else {\n\n      }\n  }\n}\n\nexport function triggerCustomEvent(eventName, eventParam) {\n  var event = new CustomEvent(eventName, { detail: eventParam });\n  document.dispatchEvent(event);\n}\n\nexport function formatPartyName(name) {\n  return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n}\n\nexport function getSubRegionName(properties, state) {\n  if (state.regionType === \"national\") {\n      return properties.SPROVINCE;\n  } else if (state.regionType === \"province\") {\n      return properties.smunicipal && properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n  } else {//municipality\n    if (properties.Municipali) {\n      return properties.Municipali.split(\" - \")[1].split(\"[\")[0];\n    }\n    return properties.SMUNICIPAL && properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n  }\n}\n\nexport function getMunicipalityCode(properties) {\n  return properties.code || (properties.smunicipal && properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\"));\n}\n\nexport function getMunicipalityiecId(properties) {\n  return properties.VDNumber || properties.PKLVDNUMBE;\n}\n\nexport function getRegionFileName(state) {\n  var nationalMapFile = \"province_lo-res.geojson\";\n  function getProvinceFileName(provinceName) {\n      var provinceNameToFileMap = {\n          \"Limpopo\": \"lim_lo-res.geojson\",\n          \"Mpumalanga\": \"mp_lo-res.geojson\",\n          \"Gauteng\": \"gt_lo-res.geojson\",\n          \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n          \"North West\": \"nw_lo-res.geojson\",\n          \"Free State\": \"fs_lo-res.geojson\",\n          \"Eastern Cape\": \"ec_lo-res.geojson\",\n          \"Northern Cape\": \"nc_lo-res.geojson\",\n          \"Western Cape\": \"wc_lo-res.geojson\",\n      }\n      return provinceNameToFileMap[provinceName];\n  }\n  switch(state.regionType) {\n      case \"national\":\n          return nationalMapFile;\n      case \"province\":\n          return getProvinceFileName(state.provinceName);\n      case \"municipality\":\n          return state.muniCode + \".geojson\";//\".topojson\";\n      case \"municipality-vd\":\n          return \"vd-data/\" + state.muniCode + \"-\" + state.iecId + \".geojson\"\n      default:\n          return null;\n  }\n}"],"sourceRoot":""}