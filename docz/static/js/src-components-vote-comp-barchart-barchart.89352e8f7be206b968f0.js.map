{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/VoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/VoteCompBarchart/barchart.mdx","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","barchart_partyColorsData","getProvincesData","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbr","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","d3barchart","react_default","a","createElement","ref","dataLoaders","getVotesDataForComparison","partyColorsLoader","getPartyColors","values","votesData","error","console","data","parseVotesComparisonData","VoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","VoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container"],"mappings":"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","file":"static/js/src-components-vote-comp-barchart-barchart.7d4fc15e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes-comparison---bar-chart\"}}>{`Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJAANREGB12gtD4IISQPBg8hSP4VVUAFe0oJguCYIvIhAhyRD2GQyRUPQz4NxoHD8NoIjKNIyRiOYkVzzY7IaLtDV2CDKU3RNBVzXaBSHWAdhNB8eRVLldoAAEYCIEQBlQDCuk0gNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ2CgAWSL2AANki6L1jAECADEfWgRJgv4ZxDkRR1MHYAAFIR-CWcyfjgOLESymscpoZwIGcy52AARiSmL5HBezqEcgBBOYvPYSMdKo6B0HDdh5E5LyxGmmMZHYVEPJgbhgEPVz3OxeRt1rYA5qgBbggAMmu8ZEnmShmguq7zG4d75TAUJ7J7VB2nYAB-DZ5vDSMVquF7wyGmspBkat3zMWFFMwMAwigKYwdW9aYYmlca0TZSCBwXLMhSa8CFO2s60k0j2C3VdExpliZPYunKbrSRCeJ0nydOqRcfhsxvxAXiMIzbC8II0SSJY8ixJYgCtAoED9AYejFMJpYdPXLCswMzj-DNKV5LoyD2CMEI7HQZNDK4kBrZN9WHW2zyDZAHBPSZkU5ZlkUPjgOBHbN4ApIIfX3WQz2mPE62KN90QQFop2pjgVgUksSgqtnW3-AqVgYAtVOUgtfwLRmWcTa0qYYHzwSc_dz0Pa9WuCEDxOq6LVBIDnN2m6b3Ru6DhifPWM9hPgbVolcXLhXXGDbGoGKLDPKqWMSRwoGFOAl9HAgat-NBETgSeCFcMxw5NSPJCb2YICHxTfNimC4Bgce4Dn_o4GoE_XB3s9xWeNQAAcj6JkqAL5IQbtfT04RoBt1omYVgMF-xCD-PZCeU8por1QYfDBp8wYINQEgo46Ap7ihlPAPAlgBTdG8smMKFteohWYYQr6P1LI9CgP4OAIDjyRmFBAQKvCYArUfhYLoBA-jmBdvAAA2gIoRoCAC67AAA-qi9j9EUceWi0NEHIKoixWixD-xrw3lvH-xjkFdAoXAPADQ9ACCQVABo2opohUISYwxIpdQzF-nYbyYiNgsUsA9Hq_BRSSm6DPI4b9HSCnnl_AMIAd6JDGlgWwAAZVwgQoBXH4FVc8op7DniAZYMaABxc87BcK6ksOeZwdV1iJFwvERkVwcjcDWugHAcJyC6jAG_VJrSoCMhiVEAgVxnGMixtM7oABqeUABSWyej7JcIDuwL21csCgXQHYHWmYpiP1XA5NEoQpTCkjAOSgdxREMy2qEOE1zBxwE_A8iYtgcCoiyFNIJVMLBxRFGkjwHhyx2zGkA-wTT8YAprvobU8ByD9D8ZZe47BZEPIBXbEBv0-yXi2P4vqABOUlMLsXYseHbfeaDyAQHxbAKUaKSVkpSVigF_B-rsAmkcAATMwpK7BcWWQZYSyy5KKVUypZywVPL2D8pCoKmlh96VQHYASpl1AJWSosPwXlvLuUDnlcw4lQrogirVRq362qdXSpAPqw1fKTXVRwfZVV6rGXWrZbCyVeqQpcuFb2S1nrxXep1bWO1_KuXKrdaKzVySd7hr9b1U1QCxqWAaLqNNmT1WZPPPYDNWabWSsjf601VVRS6lwg0KFDQxo5vPHmgtmagHFtrEoxNAKuiANQKE-Y-SQCoHNUGttgLXWImEQO0d7AiDfQgJOu207Z10UcJgKdYaKUQC2A-ddDzobYogM0F5ty4C9LXmNUFAh7k-trJ809PzaBnuBResFU0bl3Cfe5F9AhaLYv3QCw90132nu7ZZPtIiR43osHe75p9H2geoOBt9rywwwB7eB39AL_1U0A8ej9NzaUwGEdeyVMGH3_gI7g4RyGT29PHUR0BmGqbYdrLh4DOBl3ztASRilZG4P_k49R7y7HBOMb3Q8tjKHOOrog_8gFfGsgcbnTJmjH7pPFiY7WFjFhJO0a3eQB8PHsUKcffph8qnT1mfQJpiwazjOEhwEjEUY04BVSARUqaMGnMEBc25ipOAPCqEjHe95N6vNYAYr59zABVfonmHPeaixU2LEAAtBZCzZgkXy_AYFgAAyyzFZy0Ky6enL6A8toYKzltIaWMDBcJKF-z2XKiwBqjXLdIxzwt3i813LMA2t_BgJ1lutXHwZdXP-05mEjnai4PqNoNBMYnJvSYl-UBmjeTvZlmDC1XAjHq18s8jgaCuDQFGTkSwTMiMyzYrodiHG0CcfEVxU0X4EAexkZxkZMZdMg5KtbYAcC7f2wD08Y5junzOwIMGSxQfkffH-pYpDT7kLu1QmhjWAWHlCOTHA8Uuv6EybYUCUZ4WCRwOeAAGlVXUopLAAH0_OXYSxFjUSXMdU2x7j_HLcieonSNDsnrccCinPBUlt9P7AAAlIVVOZ718rMB8vUEK2kDntYucnh54T4nAvIxC9PdLsadPGei-reeAA6vL0rLX-tdEG8N_Q6u7O1n4rrHUXBoszGRzAJbHyHPA4O6eo7IFTsumhxdkrsGsgI608NKmbujkW-gFAaLqBzLfQIH7m9uHvEECMwCvPQP4BokoIkAh7K89TVQKEBImXtNOSPCeLo5l84E5oHzknguW6nqpzTk3TOo-Jdc-59XFhNc0FQ63mA7eCCd71wbkXYuJdG_c-ea3-BbfK9QKr67DyJ9Exb78GfvPdfh_1z3nARuB9m4aJbjfZXWv2467PsfnCJQCA-09qAkZbuUK_84q4s7vHrWMPn5iltntiqtguBtiVjdmOFIuwC6GMPvEQDSJGGwvGr_vAJQFAPnEsF0OoISgXlTEXBnFnCkN8mnL5rOBAaDjYqen8M5LoJDuHh8DYJdEAsWHALIiFB2j5EoEaN9FgX0BACQV2jgXgb7qId8uSC8E-IoG-LIr1Eom_rZm_stJpi7hYGAe5hfk7n9gCmQZnLON8q4PnM4NQa5rOEHqhmAIwV1CwWHhkOwfNFweULwfwcUJkIiBaDlAIBaKwARHABaPxIktQBaHHHnpGAACTAD_yVbAKgK2Hw7LS9KzjFDAF2RUyP5K6JE77Va-5C7iEmLIFuS_LeRC7F6Q5QDbYOZvblG0CRhlH8ax62YgEWC5EDYv4tz6E0AlHIItEVEwgjaYA1GZa56kRtGF6kTF6ohCDl5v5V7eTIEOCkS2Eh4nZQ4w5IG15QBLA14JBLDkAbI8LcZ1FfINH8bNFDaNEiITYdG7wQ7OER6GFUwSKIHWzfILiEq2EME4BMFOFQ7TEN6rhTgZDTTiEfECDmDRhQa1ixgcAnHcLCJ7TIkBzCLRggBRHUQgCcgnTspUyImcIomgJomnGYkDyCJX7ODOCm7ni5QNCU7sCLL8B54WgxAECwD8D4liDnSkS-L-LsEhJhIGQzQJE9qYlXb4mchXCwxxiEkImbSKnvEwBgB8AgCAmh5Q78BcTwnYrolnHHjkmkl8JsmkSRFOCJA8kGQqm1gSC7iyCKnylOnwkgmPGB5Anh5kivIDFHAA49ZwCZYmJBG0DHxTyZKUCdgQneRjzBE_wxIfwLyoB4ZvLBnILI6uCRnRkCABIYqhl4JZlRnThKKEIHpHoACEQK7k5iuZP84hFgJi1Z68uBW82Z04WCY4q8wKtZcAFe8JmZ7ZGQp6MweQeA1yZirZuZQ5V69ejxFgqBNIeOCQkYg5xZw5nIOAEwdAGBwhv0kYcybyOk7KIZ8ZmC3kh5nhmWgKk5m8dZ55piPZU54Zp8aiGil5KhyoSa8JoOwOFSmQMw45XpGQPpJ6SwBZL5v8j5NZz59Z9em5cQBAVE-uAgQgRwv2DkuB_4GQaFKFaFnIWRq4f5AFQF2p3pKCYFxwU8ZIt5FiU8DZ7AXipEP8b6z8r8wRSZSSP8q51FFFdyZZm6lZee0xBptMKxQ2axLEkYwFAgBxexclRxJJGJ5xlesxnpzFvFzZvZcFDx4Cw03mxwapaMjEsEpEtEwsosieEs480seeEk0czMskPSgE2gLBqs4EycSkWoWs8SAkUwECdsRsCcScZsVJPcEcUC_c1Ag87cpsw8XgIg8xswbkO0dgbsCVrcaIswu4qIgIAc5EL4SVMwHGaA_s8CHcMiaVEVnoOJjl7EZV98DoBu9cfcnoBujVxyq4Z4Vqlks-28XVXZ9GkFnaK8tFuZg0LVjcnot8lccVD8q4aIgiaQsEeQEQRAs-58k10CkgsCUA5Vdk-iRwlG6CkFnZe8Q13FoWZgmBv0SlRpvuCiaA9gFJ3Gbxk4CBMJ7AGVRVKV2I8iWiT1L1x4Ki6iW0R0cij1O-QNMAINGikNz1ppMAuiw0hpWyDl0kTlMIuydA-yvl7ub1U2qA8xFyEQ0OwGDFDIzy5N15Ue5GfydpPx5MO6gVL406VMQuiKcAyKEAqKo0VwmK-pFK_AgaQ6waYqo0LKxKbNFKdqMadKcaRKKarKna4auqIAXKcqCqgqItCtoaKtqtdqGtRqWtLqB8saYt8a0t2KeqBqmtzqOtFtXq-t4akattxtzqct7qPVWqG6qttYya2tw6otHq4tCadpUqkgdsUaSq46XtIaPtztOqyaqa6aLa9aua-aharavtftdMkdyd1Ula1ata6djamdLaVt7AHadpCGvaYSA6x1iIldjdDGx4A6FuJeGQ5g9gswTIOdkqombdi6_dFK6ma6w9idOG266A66k9tYzZ36A6kK0K3qDN8dqAfV_N1dgtFg8QUA3ZMQ8AW97KLG2hRY4sNAs26A82mekBFK0B62gZNN3V69fVYMdpW5mwKZN1lkPFp8DFkqJiPx8afVU0mZmK9sU8_ASiEDe9fV0DHGsw-u6AaQWM2QaQED5Q3NvNySqh4dtYcOY4dxM0wDv0fVmhdpaRiFyFOFwoWMmFsAjmqFVytDV6ahu8B9LZd5fZIlFKn9O5P91Af9rgAD99yCe9B9W6eZ4D_AmZ0DsDCQkj8A8j_A6DyjIASiiDMwyDqDv2ajEDPwmA0DvD4aEjLEUjU0ZjIoUjOAkA6MUYB2s4Swqg2AsOMBK0XS-DB6EYPg703koOkAGADiag32-eWMcJudqtRMOSYK7WQdXkH0nyphMTz-QdXjAKBF6TJjOqhDBAxDwAVjh9cAmhSdO9S0CF0QNDzD6Fa0DD2F1TeFwomTsKZ9Vll9nu3uWQd97R2RtY1As-nN2Dv0u--uDFJityRKlRW5MEZ4OAEzaKNNIZbS8AU0sipZ7K_h00JiEA7iSwaq3k8zo0OAsAs4EwX5OzjA7AtRnA8y8yojuGhzRNsiEAmja2hK2QojjZyzI5Y5_CODPBLzAJyz7DPTkqDe0G9RRD1xcmkqHNSKKK_iUy3zepYL7pvTFg1A2-4GIzsmJ5gxtx_Gfytd4GVw_4p8AUY4QLoyMA8gNNZGULXTQxtAhFsK1A3RQ2ozb1VMi1mIGQ9gq1kQs-fRwu1-DOFa545uVutNrRWhjx_TrOzmI-FSnLMLt6Wiy1_LqIgrvRi-fetOYr7mG-8OsrN6YJONEJ3TAKJiIYY0NaU0YVOANrNaizyCqr2KjN-gD4c9OhLcgzCLaK3r716GYSSwqtdpLdwigbg9MAUbymxYgbVmgbC9l6gbpDvVPegbhTUjJ9gZ0etAAlUBBifQctMALFwmF1U8tj0Aj2kYLwZkWMdbRAOAQ6x4CTFFhGxGV57K0JsJzpcMdpSYqYSkUS7AMSNSwRvl4R5gxEklDoLMeYzgQz7AFSAu8TlYqYA7m0hpqJ500NWJ_hRAFoKQQgTyNp7MftjAXCuSYgBK5MjQbiUgV7C457qtjAaAo5Uw6T3LYSGptAuyupX7ru0NJpylZp4Awoh7LBQgUANpKLkTAK5IUSwwl0GQGp7JMl_AgHGLBR7gaQe0tCa09LeT0LHrNAzNZLMzlLcyy04Lud9MZTLpL7kqxJ27ZJu7iN-7EHR7J7MwZ7gHl7OSz7s-HMT7UATHr7bzKks66MPNsAd1O7rHYHB7oRIE0HPJ8yAHIA8yinvu_A0nh9LcKnWx4esHWHXz1L-Hvr8LPN_itHudKuhRe0MG_TVnXN_rDnuH_4gWdWIWBJZTftbr8H7rr9l-UQ2jjbWMgXQXkqPb00jAjz7A2wMAiQe0jbBkcyqXtARAJ0wAaXUgjzYg2T0XWmRX8HdnOqUgknFM-DjHNXW7wH7HoHun4HAgh7x7bQvHeJfnxXAn172-VgYSIngnYn_HVX8nbHOnnHrXRnpeMHXXcHxXjFyze0xLopZnewOHRWTnDmmL-R2LhRo2QevJ63CJCXGX_AQ6eKc3Ygl3Fq-XOD4nQX8XODS3Fn_ALd4gLd93v0j38Hz3t153IAnGdKcUUALw1pIAYgwPPN8Q4P33lkv3kT_3HCgP0PoP4PgR6A4goZBQxwxO_QUo8P1AiPFKlXpDJPO4_b_nXLud2Bwb8w7AFZ3kF3Qd8QPJ7At0C30XLHDXk3_Ayn7Xp7XXFPr7onYgJbZqx4j7w3Iv4ajAY3OnIH91U3kHqnuBpn1PkTGXwAEboC5XxXHnW3wABHtNDLTROv9GC6FHFLRM1H-J7AsvudyPLIgP4gzgpD7AHsOARPqAjvAXJ34aLdp1nPQfP8Wjx6hGkXAfudsXzv5gSXKXFvZtiIzbevr3jIe0Ldqfx4OXWfLbNLPvfvZXpXxX-vTvPE5PZntX1PZfFgUXOqdPYGg3H0enc6IPsP7k7Pt0Vf9XiNSvmJ_PXHgvnXx3mvFXYv-obfMPYP7kkvMA0v170f8vHvivjXyvg_03UH6v830fVM2v0btf8HhveHxvWMRH-T0bpL0zNvVLjINHDvu_p3L3rvkP7vnqnvHshfj_df3_hexb9GLFTnr0AEAlsw-nGU9GF0jCcYo-Y_Rbu9UkSfU4-iXZLntE4xKY6IwidLst2ABoCD-fJXAXOkwFf9YBxfX_ofzl4V9PURfSngqRr74N6-kqRvohmb7M8geU_dHu5Ex5d9roPfNgON2NJr8B-LXNrjxz44kDsUvXZ9pPzojt8Z-yQGTAv2fZL9324QLnnAO_bzBf22ABOGoPUEWBV-fPYQTNzU479xBOqRDoiGQ7TgNS9gKqJYEw5mDAG2AsejS1_7H9dop_X7Of2hYuCr-5LWZnb1tKOCZa1AjmFT0iaH8GBFKJgXXQZ4t82BMg6fhj1YBY88SHPHgWYJ5599BByRDfiII65iC9BiYMXsJFx6zZ5isQKYEAhxyBABAigkbsEMTAqDP2jQ-TD-34B_sdBv_AwXuzyHGDt-9vX_hYJgBWDUO_AYlAAHYAAHGlGYQABWOYQ4KKFWtsBVmcgfZ024n8Te3grprl2np-DKOtvZZvf1_70c4B1fCIXVz4E9COOfQ4foUO55i9OGc_eoUX1G4r9eevQowVvzm6DDWh2vZNmCnWGSp3B-HM_pC2I67DAR4Ka3gEOOH29QhRJM7st0w6v8PeXvYgcsKiFBcs2KzTnriIgFINmyMA5YTFw-rmAkBCfTPmvAMagJoGWAizjrxpH8AUmcTL1Eolz7MjB0dIjRvIExGkj1C0fYERzCq4i8LhTvXvk13765CjB9w4Xuk0YAeBwgEQcwO5E0H8AlRNwH2ht2eqxBtg23L5Gy2fxDZDuvnfgR4MMEeACAySFaKyRAB2wWS5orElaNQBlx-g_kCHitBOjssRgUgTUSqLFGOkxRko-6tKKU5D9RB8osfoqOVEsg1Ru0DUbGOSS6DImKuMHjsANGnp5WkWJVqaIaxBC4BNwprs6OtHs87RDoxZJaOtFuiBQMET0UtBvYKspgLmaqO5j9FJjAx4QiUdcM-G3DZRkY0fj1zF7zscgCgyQGL344hiFOXwsyOxCBAPCeuTUdwHyWKDy8l2vEDUnESdZAJ5AXoJynuPqqaBxAlXIZqELXEIsxAdiUYJEkRAxI340sUOBEyKEH4wcF4K8PoDvAPgsScRUju9nQBDQ8Sgbf3q0PZquchmaKK4HEQABSzgLNLBhnDPAwA5eOFm5xs5op8SQE-Dqt37R2w4i2E1wSPT0G68h6_AOIsRIImYTIml_XCTgMIF69K6QXXwTRJcEATKJudKzAOjiJrCGJ8HaEZxKZHPpL0AEoUZ-BPEXi6gXQYYZGEkDRheAAgXgGYFUQKTUASkuSZyCeBEAlgqI_EpVzii-9-OQYmroZMFrijsUaLaGAZRRjGU0aplOqtkC_BKARYaEMWH5RwjbIfYReM4ErGAh6AwI7sRtNWgABa9OdkpyTk5BJ2oloEYDAEESEArgXgS6Jhk6ElwweKQIKD0H0AZBkadkCnJkiCn04-k-gVwGkAtCidDCkUwuODSuAvBYe5AbKWYFyn5SIguBGIDMBHiiBYolAfIL9CuA5Iv4oyfNrwFEDDT1gyU2HmlIhiZSf0Q0maSNJrAsAmoXCIqJwFQBg8XQkRTeDsFVBzSbyXYAoFcBShYBtps0maW1BAhXBeovKVKMSBCIvx-gYAY6R1IsAUQdggvDAFcBGA2BBpT0vHotNcDLS0Aa0guB4E2nbBMMXgAQNOCuAhRIoj09YBDOnAWhMgLAPIFcAihHSTpP0oUGgEewWgDcVwH4C6DhkdT5AFlZyW01bj2VbJ3sWOPLD9guVlYvkgwB5TNgWx_AxwG2G7AdixVPK50M0LQAzgtSeaAVK-E3F2r7VeZ90BniLJABdSOqncbuFtSipdxBEs1AyoI27rrEZKSwXEOgAmBLBNgsUggMcWhpLBHmbySDCAVwwVlzZBec2X8lpbrACxnASsubOFIihwMds_5u7IIBIZWBN46JHQzfgmxQWLs6aDbO9lpIMkcAbJLki9lCko5WSYblNAKRFISkZSSpNUlqT1JGksVUOdbLdktJgWb1QuSMhmTeQNZq5KEuSOOC9IMg_SQZMERNb5zXZkcsuTAHGTRB45aKHAEXOpadypgFcvcr_TmTVyEB5gOZI6PaArJm5S0EArrMLDeQJhLCdYIbJSCEApoCqTDDJW-KeoxoK5XOGnB5JT5j8_ZVcCYkpyuBo5AyewmOCmjLzNMJiAAJpXzbAN8t7JvI8TnzkEA4bIGqV7KrMNR1LOqHbESALhN4IwEBYbDkgaMC2S3f0mnHtZkUXCsweYHVkPmFA8S7KPHDcGhzvc7sn2GAC5nmBShIkPYKBSACwD6g0AT86heYGPBjgeS2C6IGiCxIO4bw3gChWFDCi6lFkkYBeXgHmSXzr5YAW-WE3LG8Lpoa8wgPMhfkiKxFzTSVB8FOLZAsSRcGbvoBAXnI988Jb-UcGakycZgs2DgN5GRQSgBZwgQxdJWhqY49F7AXxhzO-RxBYA0EOrLwzDCedRQC2R8LImEVvzRFb2HWVwAmB4Mawdi5IN5C-Jc14gMAInC6Bgjv0b0HiorF4u-g-LpFxs9gHIv8ViLVCmGVcEXDxxzAcaWJTBe4pYV4KQAWVImgewoXVK4AXCJovyn3BadIwGSyQLylkWvy4A78scB0s5AacsFWCpJagpKUdDtBTCkZbgqxKGkQFk3B1vYFpL0lGSzJO0YVJOwlTROPJcpdMo6GZAalEHChUIGuIWhiUIUbkMMuxRbltBfzBOekiTlxyHkOC1heMt2Qlx7IwweSSkjthoEuw3JPEvkthSFLRl6CkAGUqeUVKZlpxChT4G6WTKrlkKvZe4DgC1LvlSKomo0t9whQWljojJY6KYWXKuewK4paCvBVTKXlOgaFWipADJA4VhKqmM8sqX1LUVWkqpfsoaVdNJFfinpQErvmDKlg5y-FVzxMRxxLCc4fxmnCKVoLHw_AMlQit2WUruEcyr4XHBm4vFtlj85BHHEsDaCxVr2SVSCplVgqhVDKxFYqoDjKq-xccZKRhzxLq4gG1THVbsn1WUFDVpSk1bWEZVYlmVhy6lfUsxVYl5k_C4JXgH6X8r-AQa9pbygGUErylJKo1Z0I9UWAvVryy0O4CojCgKFvyxXDyUBXcsA8mQMYEPPYRCM88P8Y4rBXoqWyc8QlDSv_Rp46FHV2g65bshmW0xMynAOwD8CmDmFTsV7f5ewx7b14YQe1boIF1YZOqiYnQrErmvEwrYf5Y1O8EJgEJwKdMR6N2T8G5V3hOG16PdCOpfgNr4F0FLhnRVfKmLK1p8GmmxjGrB87oWlC9a4EwZQMNGCjfeuY3UYwNVGKDD9aI3vXcMf4T60-CoxAAEjgNajNuJo38LnhJQ45NRiSNVp_rhQS60BLIjUbNtiw2fGGlNDQ2GN_wVATeH0BpqCj4SDeM-hYA1m7xcoKeWsiTEiCcNMSzZSNpwAYqxdENAgZDceFkSMbQEshGfliT5B4lPCsNFBH_LAC9lnmSyX-SjF7LHM6AKQEJXOXRa1gKNZ4KjQkFrKrlnGDFB5t7M3XdLt1a8e5kenjFPQiw_688qwMoAeAiCxselTqli74bT1j6npPn3WaC1cMJm56A-rbb89h5PtEvvAMQKOb7y-CRYMxqI2BbPqwWyCjTQMgLgD19fWLqpuo1TlaNRAejckR6TNkHEOUTDVpti1zqHkKmscILMMWTrNNzGw9TpqFJ6bo5Bm4FKI1i4ubQE-K-0QOkdGlzlmA825T3L7mMgq57DOLaOsPXka_N5gA9tEAy18J8-nzSLeYHz68b5C_AATZyE8JblKAkZaKbBEpBgxUMUkvkLwA8AKSRgTwJYJXKgCcgdIsXKAOtq9xwge6L8TGMtEVLldYuE2veGvExJZa14OWygJhttEOj2tiyTrf3Ig7RAetRzPrb7nQAEUCtP05jPOXsVA5IgYeaSnWtcDh8KNVckbXNtrn59YtsOh5CYjQKoB9QV8p-as2xV9RmEbm8stNDdnoBEgLbWIE_PuVwA0t7ci2YFxJ1k6sAT85QiokiXJhEGWANHSxHLVCES1KZGHT5Fx0g7-tMOr8s9pvQN5EgyOqIGgCgFoBedT82xTekKVVcsSOAXAHSs3L1KXgv9TcugD6BB1Iw9Cc5R8D3qrlhd-mkQGtUjBYBCd-uyVYbuQhq7TdW5dlRbqEZW6bd-5e3RUxXJfFulmSNUlnkSDZMtyeovsmlET0xAdg3WyuTLqu01z5dHcsHVnkV3lMHkseInVqufhTRRVPu0hvvJ_x1A4ilomCDaUyJA4p4YukUDpTCU3o44p6bAPITT1B79yie63ZkHD3MJE9ZqiHmdrG3Y7EtNc8vOcoJ3MKFVGSkBYKvhKwYdo-7FPBaFuSShweIC3qAXFT3YKj8-cfsrqm73PxHMjiRJeGilVjLBAhKJNQChTXmq24SwbHRhRVVN60h5YuOPTkkXNbjwpXN_VgBAVY7s9NdGuaLuAMiJ5kuACiBgAEVgwOlX8wWsrvv1mqBFICxA5UBQOcgjAxKSQEwlANmq7Gc3T_YsDEJYxkt6mqchVrEKgGhGenQYGZGPwQGZ9YWmg75B2m50olpDI7ukzf1766Unfb5SFBwBTCQW8mSxa1OMWB7kVwelMtyD4NBcgcYe3-gqlUOnTium-2AFiVEMH7vlOAYlO8jUNRM5DPNBQ4QBICRgzwpW1qeVu4OKLou-h5rrADAAJwqDwuqonFDSCU4Ad73cA1gosORN3D3q25CAud2OYRs_hmABTotDyppDrWyKLOvh2q1ntI07I4qTmYplWDeQGAPsE4NS7Z9J06ngIc9RCGx-Ih5qMYaWC9QZD3LKw0YrYCKGiayh9-mEdzoaHR9Wh8feUb0MyJDDdR8QwKvMMvayDCqqfZLqwJQGymsXBfTIcwM6o39q-iQytCFpd7JUVeyglV1r2Rh69OQsDnHGb1W629Za-irkfIMp5ojLh2g2ODU1QANNLh0A-bqH25GR9tuiPdcemMlH4000eY37UWORhqhskaHHnoG3LGpjFK9Y9Pql2AnZtsXPFUkfLxgnahEOomr3PblQmItKx31PCRFUwRJ1eZbVbqur17yVyRxxvbmH_ZdcW9mZdvTqHop5qKUZJ3ZL3oyRZ43jg-y3Z8c0NCMfjgtN_TMaz1In59kYc5ewCSNzC8ToB4Y_zx31GGxjfUY_aAbP2-49dOx4k9oN7237Nybq1NS_tNUKrZl3ymk4mrtW_GKVIR-EwCbKMLGYDq5f7QgYCz4GQ1qB3lHKetNMrtB7yjNV8tZXZqB1PpzjjQELhdQ-6rKy6Wkbs3yqKVoprg-KfHktBJTK0GU96fhLsm8mFJwlAcepM_7aTCcfEgyYuPo63jNysUzjvES5625XWgvZidPRQ6BtmZ-_e8b5PCmvjY-9fVgb-PfLIDyZxAmiZqFRhITMOgitKfYCynJjulfNV8nKCl4IlsxofTT0KUamL9ceGsKTMcmiwDckgFxhoG8luU_JZyJSMvizSS4Zca-FOU_p7ShFCiJsU86K3pKSsbz7JX-Q7kfOjQpg-oMaFVBfN34LcN5sLm6PaxDYvzRNKYAAEVosDQewAAGl6couZwNFkySWA6S4rV86wIACOoQPUUjPgC15W4oFz8yADMCnm9WA-dzDee8xlwK4sVCi9Tn1b04ULhSUUBblcRVIDWHmVgbRcpoZBdZZ4Oi5gsISWSjKRFt6qLnFwXnV8cuVcM-cwuAXO0v5_84pfvyrgYLcFxC8hdQvoWAL6l2FJRe4vnwHJygSytFUET7mfGisICMeeZmakDEFl8VQTRADbj-AA6QgLcHuCPAKgHgcgHjP2Sng2Q7wAYF6HXohFMyTBG1PwEWUYXRcKy9y3bACkNBgpDgtZGJdRgSWwqplpyehFvhWW1ANl1yirD8meUUg2FtVG7GPazA8AFVjksVIcG8yTiW6GgDLM9BhUHBiMJsT5DPDu9ogw1XeH1dbgJlZ4ToKdm1ckA-EC4_hQuOYrbhdXh48RMcG_B_j6glgcZMMiNdghjXP4i8XeGTrQBKNimLVSa1Ej8LChAiwRBwQZSWu-ypE-wCXQ4fuvhAtrte8hidfHnFGyLLobq7decDYz0YP8Ca01EoDVtrrv17BJQGPbwA4A94hbGHBOs3Ji4EFKgJnk6s_Xh4xWt8aHTfo8YHNYPE8LhYyDl45MRNgQMtPKtQBigq4VVnAx7yHqsG7nJTaHJZvsBqbW598Ole6tY3OGvZO-vjZatEwybJN1cMLauCU32bVMWm4o3fV2Bx136uAPX1w1RD8-dpVkX8DSZlNHNfQF7SfTnUI7YUkt4vXpTsjqyxtHDCtvgh4xNlLbrgQBTenr4s9jwiV_gETnVBChpaLIy9GyNDQDpMkDQfUJ7YSG2BErsiXyCAHInuXXb6sD22ymDvCIo7IAf2_qGTDJheok5_8uYohIVIIAiQdwDs1kQ5287dEJRE0mDsyZE7yd1O71H4BKBw7kdpANHfduUAy70bSuwHdTsGokjmdrIEcFj2nwKIGKbUHheil7Vtgm8J6KXbjsuD27Kd5MLylruKB67lvHkYgCbtChY7LStu43aTsd3U7Gd_mRCUsDOR3AQQcwLImPun26AU9re3GyMY72q7qdxe8veT6t0-6a9pOzHZbvT26Jzth-3vcFRJHoIFoKqH4CvbCgRgdt2RKA_iA5IIHrgG-63xXTFhZ7qdpKM_fwWv2E7D9r-63d_vv3Xbe9uYZObJ3ogTmc4WRFLkoDZAmo6IF4Ig_LsoP_7c9xYd-BfsdtV76925N_dvsYDOHu9lO0lHTtJHJ--QIdBin1Aw20ACDvB8g_vsf2q7QjjBxHZXt_2FHuDn-3w7UeEPBHXd9gJP1PhydZEBjmJRaDJ35B8gDDme8w-TBJQF7bDzBxw-0ef3m7sjrjM48Uc2wkj1gWvKAi4QYprAlAYYMXZOChArHd9ghwI9sfJhlHDd9R6480fuPInijwB_o9cDbA_AJwDFJGTwt2BLABPeCHrPCdyPknHdpKOg4ccqOsH_Dt2xvZ4dIOknqDuYcI62QEbahFDjhVRBxySB9QyQSeAIDWkpBinEACuzY-aexPVHyTjR7w8adjO9HY0FIO4Fw4SOsKBAdQBAB6fRAuEXCYZ6M4Ucd25h9juu446ow1PpnDT7B_s5TtzCvH-jrCuZCMeIoMAQgKyLNm2CLPYAuzph1c-TA3OJn1Tjx-c_js1ODnqTqqK2W2CQOXQGKKqFukexwAlRAUL5_I50e_OKnxzqp046mcJOZnlz1FwsMnOx75gsAC0EAm2A44ZgBd2PV4EgfvPIglAZF6U-uesOMXcTrh5vYucguU7aUFp9YBySuBnIAoQLAE78AURBXbEF5m472eoueX_zrF5XaBfb2fnaUPR0S7AcxKMUl4MHqhH8CMvUHKruV6c8Bc4vOXHjju2lFSfzZKAdL50BQ5AQJUiAtDvCwQD1c2OLXhr9BHi5cd1O3HXrqu2lGIciOnAAoXAkY6AQeR5iwgIgK6-Vcsul7Jzz12c5NfAuzX3LtKJOZvALhXAFoTN_49kQW4YIbETsDG5ldpQPXE6JNz68Sd-vzXEwkh1DdgeQu6AUD8FwQGeBjhhy6IOACW6idpQJh5bt-wq-TdKudHSUCYS0_PCAVqQcoebB8-6DGOYIIM7oFLj3o9vk7Y7mu5U7ZfevuHvrrl2O70eXh6UdgebK3CjKwAWAGKf8lZtgC5lSEUANdwHYPcDu_Xir_B7PbHe3OydGT0INbomA-hipUDoBCkEgf9BW4krxJ9K4EefuX3lb3d9W_3cTDUnuUMcOk5SD0uMUKH0-HS_MhV0pX3z0d0h9g_Guq3uLxD4G-XaH2jglgN4P1fnc3g-gy1FFRqEkC6g8AWiH5OgEkDQb-cn1GjxRFbgw18PKL6DxMJZel2Vd-tR29yLUd2x9Qo5KIFwlnBnxCJ_tEDd7Y1teoB0-oKqEHfAGh32HRryJ_J5xywPlPe75xzp_oQtP95tQqYJknCB4Ba8Bdy8KEEhfmo6IkgHutB2kc9urP_qYj8Z4U9mfFnFn4z1VHoR6P9QDIbYONMgeavWuC4Bl8J_C-RfAvidkz4p9w4qeyPlniLyFC_cZPqAWT6B3C68qH0wAfn_LzE63eTOMvwXpT6F4Q95f6EYLiAFgFgDJB4Ldt93q21kT4QoA2wVCKtSq-tf0vO9zLyF5y-mvUvIUCj7Hvc8YpyiEYEUNQFG9zfxvH9yb41-m8pvZv6bpI7NlB7wA5NGKaCOtkODrey3tXgF0F9M87ewvGX_L3W-7u_B3A-jwINsALtS5Yp-cS6EpC4BpB1v_bm7_K4m8Nfsvj3ibxF96gtPEUUAKIHYFkTw_Efo32H5t_4DbfIfzX1L5dMnMyRYHeAE5gXeTwEAkD2wNH0c_jeYujP9X-79j9y-4_bnbkeFFYDsTRTaAEjrgJgCgCIuhnKXp72nZq-su6v4P-n-Z5x-C-uUSRgnxk4Fd0AC7ub1GKiDR_ovqf27rHxL8Z9S-KP1gWcbYGgDzv4LkD_UET-y9o-43hnxN5Z4h9a-ZvUvg7-wG1BHAYJdzoQLF4kd_v1ASztH9d5F-3e6fWXu33t8F-8peXoru23BGinQhZEbgQLEJ8g8EeQAVnsPxj-T-2-mv2v6H_Pai9eBZIeboBPFoHDOvRv-qNP5r8z_2_s_vKW59FiIDrOMAivxdxkBVGl_hf6v0X1t4z-7eR3yfiL7ylSdkuUdgrjFEP6iCCvS_avq3xW5t_i_K_If6vxR4Y92IlROwfoN-rO9jlV_2wdf0D4F-L_a7EnxHA8mk-q2kAdsCpGEFAiYK56Xt2Jpp99sX_7BqntWvp_P9h2E3M_yJ5f_CByaofH988HgtosfH3JcBAJz2J9NXfwDFBKgHt0ADosNPx_9r_f_34AKkSwDscJ3IgC-gIA_rwuAFfQKH59E_ET1QD0AhAKv8__SXx3tiAh1BEcuAJBD7BjHZLhb81vffw_sqAqn2n9B3SgLID6LLP1YC0Amv0JcTvS90ocYpHn3ace3KgPb8OAr10QDyA3gJQC0AqYRadZ3DV3sBweDFHgt0QJjxOABAGYAkDFAzd398wfVgO4Cb_Kvz4CkoKYT0dIkDAEikYpc-xsD0AOwLQB9AywPYDP_TgJMDf_HgPMCFAywNucO6LViHR-gKB0CCVReeBkdCA7_0UCpAjwJkDTA5AJABiAqYUtcMgVwHag5wNQNn5ZEbz1gAVRP4ASAE_GZyg9kgqfziD-HWQJ8CF_D-ygkpcG8EnMsg5IFM0oJIJ3cAXQBF0Y8MUFoJyx2gvnx7dagm8FIDvAswOqD-AdCylxJzSwHZ9T7fRzHAhAGFwkQBESIOKCk_cYMP890KT0VInbd-zthjfVwECla8UIFJcp4Sgy2D1Pe_3pQtPXYMCls6W_2Ds24fmmkD-HPYIODRkY4MMdEg88EsAJgpIxgA9fSFzQAC7YewEAkDWYNLxYA74LT8Xgw4PeC2eCgI_t4LG4LD8WnXCF8djwInxHBkfX92xCe3REKARkQqEMgdXgo4NxQ4Q-QJAA8QsPz0c6_E4DoglvKgBuA-fPAFxCkQy6UJD9gmENJDTg0YIpDWQ2vyIBnIEcwxQ6_QUNkgWQ_EN6hYgmn2t9InaELeCuQxIMpDpfdgGixJ-QV0gckDSRAxQV3SGQKBxQsPzKDpQr_0Ts5QkkJODFQ1kIo9zwQV1QBsLLCjpDZEBoBtC7QqAGikS7FgP4AlQy33KDnHU0NhDuQ3vyVDHfH70CwuaPIEdAoAmF0UhnATYDuAVRIoIacoPIMPZDiQ_0ItD8QsP0nNQgaLzwBIHT5AxQC3EUD6CPQ3kIzDDAjvwD8d7P0IVD4Qz0KRDqA3IH1AisB0KodcQHYH1Cy_UH1p8qwokM5DzQ2sNLD9UL92EAdmeTyeglnFZ1Bt-gQbAEAOwqUO3dqw_sPJDKQgf0nMGgQUBxojHdcOlVPnEsJXDDQhcN7D5QpcN8DBw3lAo9ovNJVCAR_Urw7dWueeAIBnIYsKiCTQ-sO9CjQzwM9Cjws0I-CBwlcMd99QOXyLckmAux7oNwyGVGBUADsL98Kw4wK_COQ48N_Dlw-sJe8AfKiAagcgWRFFBYgPAAwiOwkHyMDuwhEO_C0wv8KRD57fHyIAW2QLE-RJAbJEZ04ANAkLBZEeiMSBGIvEH1D57FML7CkI08MpD97JI2CZ0nUINcBTsYYBgAKfPcPIj5wzv3gjUwmsOQj8Q2x0nM6_VuE2Abw88FRBUbEUE4iDw2SIpCSIhSL4jyIij11A5fM3yLczvDIBSACg3cJfCqwkyO4jEIskOMilIx33XCKIMVxmCWIrqW2BbkTiJging30MMiTwnkMpChHfHwwAccBXyHs0lIIH1ClHLsJlCTQkKN4iwopELsdJzIBFwstQ2RGyjwgMJykj8QuxycifwlyPSjioy1zEdFnKMOPAFiBKL0jKw4iIQiyogMPfcHI4qIo86_HHivcugRIAiARgKCKKiB_d8MPCWo0iMUjzwvR0L8RgOIFRAw3IbDmiuSBMMYcRPSkMOdSoiaNcjzw25xgAydcrE84HQ6LDRAtgQgH1C_nJKONCew8aKMiKo88NSdJ4VAFQA_AQoyOAsQmEklBcCc6Mai4IgyJujQowMKRCeXSc1LYhQ6BzRhKXO8I6CkXYaNldLoz8L-j5IgGPaiEQoGOpDQHagHQ9N4KMNnBcCZYMTCk_SkINd4Yr10XC0owGPxC0oW5wvRXAXC1GR8gDFFwhybQ2XQB9QqmM2jboimN5QA3LKMxiUdUfz5iogNmNGj9IsmPKiuYtKEd9osUZEb9hQmWJYA2YwKJ9DZQ1KPFiUYusPxDx3FSKIAzfJUTztBnCcNkQCfWcDyAIPFYLWikQ8dw5jkYrR1lDLYvRxaCbQgu0AjrwlaOsdUYzWPcCPw0mNVi2o22NfDNY25z18tkQRCnNR2eIAPVoIZIEodRkIn1CBopfUImEZIpqLkieItWP9iOo3lCQ9JzKXCvZbAKB1KgiAJLjsjzYu2M1ifooiNTjnIv2NmcPYrOIvDJEAT1o8JHRuOiBaPROJFiU4xGLTia40mKRClAkhxyhN4G8L2D9QLwGoizYgmItj8QpQOtjyY9WMHCrArMNN9GlJz26gMUbCO8RcaKOP1CrAuePTja4jWN5QphW5yART4It3Ec8o8-KQN8Y1aLLjj45ON-ixY3uOeD-41J2zDtnAVxc8rxBOOGiUg_eJfjfQ_uIbjhgVAG99MwZ2IXBzIEJT_jO4p-N9j0w4-Md8yXFrCA9YvXLFvj3Yo-JmEAExBOJRlAyoBiiF3CMHdD7IuuPwTcEsiPxDiUPRz2Dh7clxPslvU-CKxZw4aJoTKEyaOJRT49AGikeE-dyAQ-EvhP1CuEjhO2jiUS1xqsccWvExCydQCikTN4YRIrjko66KRj54jOI9ikoNOzXDZwaKQxR7ALoCNlmAshI1jNE8sKCiVY_6LUTD40sM0TaE-LzcAjolb3ECio2xNESKozRNuce7R7HYB4La1048NAvxNPhWYlxKfsSY54IQSqEzRNSdosJUSJ8YAQIGchdEx0KwBuHcUKiS3EimM0SuogUIFAf3UZGFCckouMOC0k353WDJPE_zOCz_AdC4IRQfEDCCg7dW0uDH_YWgtw9POdAeCMUcxMTsakwsHqSBwoBAtxkwLWKDcJEH4gkdhIvSU48e3AZKGSzE5WO6SNQOpJLxEgmZImEovTsAgBAgbOFkQbwMD27cSw1ZK9jt3HpKWTUQFZMGSk4yc1FBVqOgD58N4m5NQBnw0uO6SLkx-MriQAE5PYA-k8kNWTUneCzPByHacK3Q3o3xN49pki5KUSroj-0-Tvk08NWSLwrqRWZfE5hPndZ3SBxfhwUoZLgT3kmFOWT-kwZIHikjMhQI0lvMcC4QsYt2IicXk5MFniwk5x1xSzk_FJpS9HKYMgdceZHyzc-o2yMpSSnalL3i6UyJwZTvDOFIJSv3dIIgAkubZLJ1IASVIIDnknexmST4tPyFTzkmlIeiXgL-C8AuSKByJwqIUCCeSp4wVIJTIUhGJVSmUqYQo9IkaBLsQLgO52gAoyDFECkggLtxdcDkglOxTlE6FMWSvkvFJ-TBkmhKyiYlYQKZjEgA1LvjqU9hIFSFk2pJ9TGUv1OTAuEkhx9A8gAuKohopSMwCJxQF0CS5MUkRKjSFU71NhSeQmZPESD7LO2o8wgbZPFA2Ae1NzSTUr1zNT404lEd8FvSBwtAdVMyG8i4IT-BiAffN1ITSlY72P4dG0kVITTUIktLrdIyZxX0d2BDvmjjL_VADAUKgSQHBdMAiRFzSCI2CJxTC031JFSkof1EnNcIKaTgAdAtqRwDHEE9OFA9At1P3S5kodPpSd0uNL3SQoFlM3gm3KMKQpNgewlLxIgcFP3Sjk_SJHTi0i3H3SxUrki6lDY-C1vchvU9L_SCvZVMfThU4DP3SJE3C24QdmH7wSAkfC3FwJ_IZFSmSb0xVDKTj_B20qTV7O2BJgggdgDuIGkjTyaSfaAdFyhc5O4Lf9Hg-ZJ3tKM7oBoyBwpjN6hgYpI37sX4a8AodfE0RS3RnAoaOMSQAXjLhjCIz1P4BOM6jP4xEgmTNoS99QmQod8nJ0Ghi5Uw1MTtVMtP0UzuM8kJkzhw4YFi8ugR1KgCXnHt1MzDMroC4zlMnjOcA-MwfyDSgQobDHBL03QNsyXM913zSP7IzKcyTMlzMJS0nfIE3hF0w2L192kl-Ekz5UwLNCy707dyCysgFTNCyWU611bJ0PIewlBsQblN8zeoflLkyoUhTIcylMtLOcyisoOLgBR7W5DGTKHYQDjDi3EsN4ylUgLLKyqM4zNPC2siRLWdRXU73zcFwPyOjdWs0LPrT-HVLNoB0sorIo8QEPNw4V_3ArLGzZs-zK6zgsnrJcz8Eyc3d4z3CIFJTs0-IEKyKEjrOkzys7rJ5DeMgNMO8IAXWMGzM3CYFgBNgUbKkyrsgDK7ipsqM02yU0U-KS4IgQ2OrTHw47LeT5Ms7PWzKskLJTQJEgaR2Y7bDGLYQKHKCzbSkczBKpSOMrbImznHT7JmziUCj1Adoo2ADzcmYv-WOyPU0rLBzHMiHO-zm0pNMEg99bJ07BQ0_ZWCTXsrbMHSUs87I2zLs5wCjR63bCz8APfWRE0DhASCxazWcqNDWzKc6bOcz-UU-JA9ogTYBhc6xfZPFz4M07OxyZcxVBIcvM2sWQ5MQtwH6kw0rBOkyecojPVzOcqnO5z-UC8PSC3gedxJh3AbYH8JXU1XLJyEYjXPJDfzIBFpzFnb6A6dN4MyAky_PSFGIysMTYMFptgl2xAAePR7G7pe6WjIuC0mc_34B80NpLogOkj_3vTInGPK7oHAePIHCbwaLFygM3UIFEV4gEcEaDIAxyEjIMAIxISz-AQvNyg0_HPM-oe6eYE-D7AJhBacwIzAASpeo0SNEULQatJdAXc-vOjzO8gL1OyW8uPPbyBw_NCYQ9HG8GpYHAfZW6BUlTn1j9IgYcjvkY82AInz3s36Ony882fPJD58grzXCm3G8KglkVOgGWypMs_JBzyco_LbyvsnkLPyJE9BKgd_yVwD8BHXAaPiy9Mne3fzm8qANzyX8jvKYQ5sg6Nkgowh0H3kKEFnLHyz8t3K9dn8_PNPyJ8x32cA0lf6TsBsI_OFiQ96ZLg0CIAAQEhdhARAsAKAAzApALePGfNfze_M_NQjoIDW2RUCwlPFGBzILoD3ymETdK6SgC0Atbz0C08LPyphSc18SMQKBylxTPImlgySw0QtoLY84_IYKF4s_NNQkjCQotBuvIgCiANAmCCCBQnEYB4KQoKWinzBC-gogLMwkRw8A_AG1IxQHwcIESBIHHgtT8zCuguULLCqL1tDTPTfxuABLRZJcKD895LQKT8kQs7yBA7u35kfEmKQCSiARZxcLH8hGJCKVC9RJTzwi1JzGgogM33zDY_SRD8KwAmKReykC9IsUKwC4Qrfzwi5BPKsxyeL2gdsgFgB5SRnJP3nzuY0oqELQiiosulx0vyNQA_IwIAxR95WIEaKoPFor4L2MgAPMKPCufPCKxCpIyAQsAZuNkQxoHn1OxMAFwqmE2iiwumLJQlpwcQFiweyfkxwZ7MHscg5GVOBJI-_M7y07TYqmKMCyUJZT-pKFygdLAGCFi8CMy4vuKbi8Au2KBIxoF6KoXOIBWd7GH4B4LQkkrKSLJi74ruLlIgTLc8csdZwxQoLRkDoAtWQaNBLMc7PMhLyixgquKKPB7HyAPfQ4teA9Ep6AFAkECiFBKUC_h2SKIC5MEd8CfLhDiSHQ1iNHYugbgvkKri9nP0iaSn4tQjzwWcCoAvATVwFKrNZLw-Khkr4uxLVCq4tmLqM9J0JAuoJJK1cBgUfKoK0iyUI2K3CpQqhKwi_qAnd5YwEJWdM8UdjyCqIDIB4LEo8EtQKsSjopxL-oPR3d5vChnMZ1KPZLgtKgi0HJ5K7izRKTS8g2rNOwBisHkgc1UE5ItLEi60vcKdSzovKcM7eeBgAz0hjwpY73K9ItKMSxOy9LdSm5yyjqixhMwy1UWRFyhyUn5FEUeCi6KtLqSm0pSLrE-fLmEwXaMKmBugomlgKpgNyHYBGylXOKLeoWsslLbS6Uq7K5skJyISicLwDWKOS_sp7Kqy1As7y5hACIxCaAbGNkQkStiEKiPimconKICuYVQj4LXHjj9MESeDWlGdeJMxDVIqeFLKxirPPTLKyjvPKcCEuDC3QjHMnTvKfiPfJvL1y6YvKdqQwpNYA3gGPxvoswMaA8hD0Srw5KPyt8owLynL90CwT7S-JvAuoPtMuKIKsCrCLynQfwHtHcw4NH80K3ouKSQK8pyQri038yyj4tFkDJ0Iwfxyjjmyj1DgrAgGBKkygEX81DzmMcPKTQZPHYOFpFksotCKI884NSYrg4WhXoWM9pIM9xi9itqTOKycuHT7AEKH4ylIOCylx6kUUGcBcIRtDcRoHRSC4IEgEQGZCDkqStkyt00HJOTxKlZN0rposaEIr4LKXF1AGgJbwHACgLwAuKx8qFGkqPS8nMMr2iiSvpTdKv5LMq78ZwBvAikDzELs4yjsrVKPkryoQyxK9yuMrpKijyvNykQ0ByD4gNBHpRpk3SqpKH0yKq2Kfk3Ssd94LY3F1BdQdgEsrdQCpEyRIUVSody7pI3LRzoUnKoirtyKKv6TdKrcqlwAAI4aAzHMaCjDUYLsHNKdK6SvPLjkjisarsqkKGGSVQwvLKRgA_r0qElg2NNVLw0hVKkqrY07LcqsquFOWrqQ_UFgkbwA0FwhpqjeHgBnEuis2r6qzYBGqNqsatudzwfUG-DIUKCVKRrKjlO5QYIVKquqzqoyqaqxq7ytFxzwfytFBAq7z2CCgiAAsWraq76o-qLq4tOWrLU0pF1BnABSv-rAq0BxTweaVEtBrjcpyrE9Ia9auhqxqx32-Cbq_yv9spcPNG1D6s__LeqJhLkq7i1q24suqJhVCOcAGgVnUJr9QG8C6roHeEDgBYvKmsGrAM4atxre_LGtlLma1nShRVQzmv_It0dz3eLHK5as1LyyjKoaqhaheKcqws_UDvxRQLnz6qTqkKFpSlawVMFr6avGqXiNC21kZ4KkY3AaB6goXMKLqHEKrBr-K_WpcrTU42qjLhaqSpPjxCmXFFAuqmXAaBnAYUMpdTmOvNCr1a8MuHT3aqUtSKwq_WtScKyCyvPBA63qJvdhyYYH8j-q_-NWro63stjr1a3X2cBIUdCzGgOaoBGqQ1K1EER9qq3lKWr9a9KqNrMqk2s9r9a3Kqtr6kTJF1BCkMmuR987eLXJdoAN6pwSc6puo9q1aqSu2ykjUqDVQqoLhGiAiCEgvBNOvN6pOzDa6NJVrm68epMK9HN50WdwM7ZOIhx7YgrCCV612obTc6jysFSJ6sVMWdwwCh0LDwwVv36q80teoLTR6mOusSnK0tKSMMY9z2hdKHFiH9LHsFerTK36jerHr86-wCShmnScxaDugebGg5MYjQI-dAPBWJ0roG5LIFr36vOs_qoGw5wzsxoC0GcAxcLNHFrOa-Cz6AZC1Kugaz6qOuwbL67pLwbPEsysqRjcchoVyVy-WugbhfI_zDyKk7iqqS7YMIM-q7gxpKTz26ASrODWMzpJEqQAYRqhre_WwUsAGg9QNM0X8qwEgi9E3ug0a0SksKUa0_eRtVrY6i3CkrYfJNMfCJUgD0ZiugTAAwAjsksJMb_UTBq7jDGzeuMbTGvR3sA_5EEOsi9El4C7d73Ht0ca2Q07NcaIG6xOCbbnTNwCggUiEhwDLoBaEPQgm0xsjrnHMJo_qvXYJtSc3AS6HcA_ANGmjiwgiMMcgqoBXyJpfHZJv9RQGj-3SacGzJtMaKPZwFA9tUjAHGSEfI6r6BEgSpq7KDGzugUaF4xxobDSfbqEeTfGnIIuBHa43MGbaGtJr6ajGiJqkqIip30yBJU_nDQAlcmCAfcHGxZtSbInWpoYad7QZuybaAQoMeSupKiCYTwFW5PObtKqTKObemyMoyb-HQZqX8HMyqBGROvAsOFAj4YBu2aX0husTt9mxIMGaW0zznacN4qzRb8kkSptaLQmuZrcaFmgr3D8ggPMOHJx7YQGaBEqi9zDqnauRqkrriuFsea6m55vxa9HXUAIKkqVpsLsqPIqoyAogGvEmaaq_gEcauIwlu1KnmtJvxbbndRoWda8WwrO8bG_wDkK7mrloeb2W4ls5aCvbJtHsTmUhDlAdkmCHJt73GAEkAmmq5rsa5QSptscxWkRtPDHGiKI0K2gsz0wj6I2wCYjbmsfP1bnG36KBaBw_Vr0cpcGGxgA0M7UNECFwdp05g2AYcmVbKmkqLZbdWnkP1bhwgOAXACmlZxDa1UHeL-bNEnVv6b3GxVFScV2YUFQZC7IowpZfW6puZb4W8JvqbFUUyN_c1I4QE-pZEXUALarxYUAxqmWvFrzbY2-Ztzax3DNxeAVgalvLTqoPIP1TfGqNpFbFUfmpcbs2jlr2apKywPELF0uAEvj4LUdqHRfWxWv0ryc21vJDHGmBoEyw8FIB0yGcgoB0zKm8Z39a42xFvwaf6mcHKhbPFvwWC0AOwGPadIv5o2id2utpJa5vKJolBS8xSCKadkx9udz5qrdp4b9bPDxrBWNW23qkMbRSCxtJHUvEgo76YnTmCupMtgxQabWRozKeQxvJLyy87GMryjYyMJrzaQnt0bzF7WDovLDm_tolbInJRpUbZ-NRu0aM4QaK0aGeCjsrba6j-30bvwXDu3dKgkYN78BgkjqaDmgboLaCOmgKC6DWgp6N47dM3FoGCcO2FH4KvApAIHDxgyYOmDoXEDvmCuascCWCe3NYMY7xO2RpY7PgoAJAC-gcAKISY84dgwBYAoALE6pbWRufjPg74JBj_g3EAdDgQ0EIU6xSpAshD1O8zrw7Asi3OlzPcyFB9zK0_3OodMAlWBcCSwr3LM6zoODqvL-kwirmLiK8wFIqVisNrUq52MHhPsaKi1vDqGKhQHWBeG2LmPBQOyxHPgyZdCHFkCrbACKtGZUCHstPKNmSthOZCKm5kQqYeDCotqDq1iprqc22cVyAUprQh9ASMCgoPAHjFwwPANtilM5MWLnQNbMfdTHUzWFM367yIIwCYQHdCICo0agR8GjVMMaGC5tMbc2yBQX4Fazb1MyUCjuQ3qExDuwiLbeCNBSC1EHPBv1TVSOB8JCzFQx6eJGlXBcMR7viFbuEdDSFVWSAFzILwDf0iUp4QDRU9P1EDQSBzvTeFbgEGcDS7YWmabrDkYhP2VYEPuH7qK1rugHt0YqKU-BB7gNCRljp4gSHsSoYehWzh7mMBHve69uFgR-VZ0uQXZ5fujHtu68ObHsfVZGZ9TB696aQViBp-Inuh6NGRzFJ6-CLQgR6dIR4AadZBZIVSF0e_7qZ7isGRkgYgNF9RZEEgUoVnByhRailBeeiDQF60gHgiF7ZzVjErI_um7u_VLtB5DqYmGXCne414Fns7UYQQUHcgKyCslnUb0WLkOJaiXSjsVcNaDuN7MemAAMYmHWnVrAmyNeHFAGQdGDzJve4Hut7gUMPou7oGN8iQJiwADQ6FbkOPvRhoGTTHO6I-1ilj7CLCPogZwNTPrNZw-1uCmhs-4XC_gRQXclKMBu0RFi53gXDTrk0IAZDiQkjDHSb6-kVvuCIKGJTQr68yfvu-R0xLFWO7T0GvHS1ZbK6lhRYuQfsgFK5XDTGZkEUNpWJiwAPvvsg-7FFi4VbUBFJYoACBmbI8eujKTzt6P2mcQuAN-F36IGM_vQBg5DRiTZ65bvrDJL-97gf7G5MMmgYk2H7S7hKAZ_ojs14aBj1sWmULG26gO3brYo4bBJF2tUAbiiO6-KLnXWAzu_PtbglgcDUwxEBl7qe78JTDEp6MBz7tZ5fhN6nA0wGaPoV7Qe19S16Se3Xs26Keo9A-6Ue-jHp7VwIgaB6cetnsV6OexRgJ6oACgf57UBp2RoHpoOgZp7EhDgXrE5McDRYHWe0gbx6EgLntkEeBzRj4GtzEXrzpxepIU4EUhJYVAIFbYgdYHpBpXvB6oAVXpSB1egngIAFBnXvgBNukAhD7gUOxkex6cZgZhAFbcPjg1fsOTFKJk-h8n0YLuQPvu7j1dPrL6V-zABT6_-vPtL6INRPqj69BiIBmBAh4vun6kBvMmbJAhngi_VdehBnsGowO21-wO-1fpj7xDDnqP72RNtnYxoRe1WsQkB8vqSGyew3sEGkBv0hHVqh0vrX6-6DftrAt-xUnz4CZLwb0GhcYDUZs0JH2hP7zBV_ov6R1ffrGGrrO_sVJstb_t_6D-jRm_bWbToZvRuhpPpCGSB_oYMHBhnBg_6HkLvrf6j6dgGxUDhr_pygrgQLnWGyh89BTZ2UMRp6k4Bz9BBQwUfWlPonZTHEQGIh3PvcgshgQEcGXBv4Z0YTedjBQlwJI5gPMBkYEf-1GebyAtBGjVDApbNTASlKIhsenH77VmIPv8IDyZBB2ZvIDxE4A6wJ4bBGmbU9HIczmQkduYC8ExF7VoAHJDk4K5CONe7YUTZhxGjgdQHcQvyDkcuZB-8kbwAuRlkjuYaeSnoiHZEdQE0Z8-UoZQwSRoYaeYXmRfqOBaR_tWKxtFGmmQJ0RpId6RfmfvrFG8ldlFiZ0nRTQNscMSsiVH6R3FjWG0RwftHI7EGaHZRrh6UbAlSR55hGHsUQ4fGHTh-EjmGLhnHQdHaMaETnoHhyyCuAbhwSVeGc2PdDRZQ5N3qtGkhgDrNsETPbvYowyTim_gp4SfkMVWsWW2EZR-vGxrlQxr9EvRCRbRmhF4NL5iOBkCfeCHBAkL3mAxHZWFErGUMUseExbhsFCz6a5VVgDH98KeBDHwBjih2tkyGAd4pGxk9CjHjbEAYQgwB3MjtwobO7Fht-x2-lgHyaQwhMRfe2XrQHKh3AaeGsB9YBwGm-OIVYEvu0WkYGWRxnsB6We3HoMG96Cwdh79e5Qfi1ugPceYEDxu2FR6C8NcfPH5euRivHOB5PlVQbxwXqD6htA9SfHYhWhFYE0eOdJPGqYD8eZ6vx9ntfU5Bnnr3pie3gcAnqBh8dl0xe4Owl6NBqXtPGZez8ZIHvxjgaMGLINXvx5KhACd17ah_9GtlYJkRDkwLe1hixIkbOccYoJ2VGyzAO1WwHt6_ERICd6Xe1UhTN3e6wd6ZPBzYbPUruwiYwZfB9foEpYuAWnM61hnfrth1wPIJgV9adZUmRVgKAG6765PruiGpBlIVJ88AVIbbyEBGBX4IjJq_vQBHANGw0YLsD5BEB4geyZoAehySeMm7J-G32Gb0LiZ0mbJ_gBMm8QcydmBLJ1IV4bbMLWAeR1h9iqmB1Jjt1SEtJgyfcnqdMKCSMuunrsRBFsQKc1J0AUydCm_EPoCsmDiXoa8m3JhOFUJ9aCIEMcKpjydLYSBlIQqnfJg0nht6p0IaamfJjRknNcp4KYmBCp8KYAGWmHLvPhhoKlATGATJMYOtUAThiHHT4XMcgwqUE0fDlMyTYzd69iWiCWng-5BE2kg6DOGmnnhQJHrGtp8secGqBswBOmj1D7u3Gqe-YE2nI6PfmQQq-ggA1Hvh4tSwJmyV6Yu7r0S6aphPpnUfSGP1H4cSAvpgvsBnte56Zr6sCOvsWmHp1Wgb70NTAGb6G5NvpCBEZijCmGwye6Z1RldX6Y6H8xteFBnW4bGYNtLp0CeR7Dx_AZPG8ZnQh0HJBy8dInPaQnpQm-exQYVsSZilHA1bGYUGg1kKSuTUYfpuGfDQJJ4rBw0NMC6aFmdUG21u9q8fIZABdp9kVpE_7NzRpmVhI6lD6kh17A1AiZvslw19-jWYiHjGDmeFmF1YFGXUUhmofBn5GPglaHgNRYbB6z_FWclnJUBWbAxKAA6ZpFyJQXWPVhEY2awx3wS6eAnHx2gdunwJ-gdftqZ52e0Hde3QakGSJxCdp7qJqwYlmdULmag0YNKGf3IBZ2GdzoRZ7DW_V0Zv2acEjgFwVlnMACBldnhhiBnnFYFFOdP7TZ9yFSGtZkUB1nmiOWYtnDZxycIRVZx6fVmzZlrRbHwhi7sL6Fba2YdnA-_WeBRgNR2aLmKUSud7R3ZsPE4ZZEFwW9nuNHRDrmKUXGclmg5nyDtRIJunu-tVZpwfgn2B19WMHTBqiZZntepQePnARnmYzn-Z03pzn65iseLB85mrFw1Z5wtiOArMMuf97-AeeeA0rMBIZ7ntpvucbnNZ_xm1n--tufLmChxIFSGjZsaajmf5n2YHmAhy2ZAAi-l9Rtm5JtocnnChpWbaHv5gFHnn9ppeZpErMNec-0xMKyFQXjbQOc3mazFM3IXF5w6zXhsZtZH0pubKcZfgPZ4FDmmoKZcaCRrZVaZYXECUSYQGdp04D2n2FmaZt6jpjcaOAlB06eun2MHcZrByZlgUpmruaCbhQ6Zi8bYGyB1PpmAjrbdQYG0J86ZvQ05h-b5mZ9bOfr485yogLmv5xUmlmsXf-YrnZFxWcjza5wWlsH3IZdT1nTFzhjtn_-gwZnnFSNhYEX3ILjUmcaF_uY3mVdWPF3ntFg8fDnCMfRfZpDF0-ZMWqlW5HMXEgJCdEHKB5OZsX75gQF5nxyJ-bVwcdZxbOn_wNxYCXkEUueCGAF-WZ8XQ0MHprn2htBfXnisEJYKWzFiJbB77Z4hYSHw0GJcoXgUFeYidEloJboW_0VJZF7952nuMMHkE-eImEJ0Jdls7wC-conbNNmesX3WSpeqXM53-kcX3FwYnfmXFz-fFmWl3-enovFwBa6Wq5_gBAX_Fk2YgXEgYJblnYhsJYMHxlvxb6WyFt5YXnYlxIGeZp6BZd-Wll_2adl1ga7XBWKFjheBR4x3hcTG2KIazA6lx30kMIxFqtVx0pFmsCAZcl7ZbPnleqACGse6PSd8d_EMpaDJpFh7tDnMB0OeUX3qN6caXix4EbLGj1XDQ_mmlh5d7mtoOa05G3ukOdwG8BvRbR79dMVfaXaRK7hqgE-xZCGXa6OEPaHd54AGwnUeh5Bfh-rF5dvMLUSZc3NhJxAlVZ9V5AZinVJoZeBWeKn22GGtJ84Z_6NhjpftmDelY3WAqUQfshnK5X-EG7DCLaYb6IGS1ciH2-kNbmsTVqlBWMZ-zUYaUhiyU1H7m2HHCOtgBnhZ26sV6cZxXUx6AcO7NKfFdEXKycReJWNp5le5XY5hmdfUaV-IF6BGlNFEZWOV9RZQxNFstYxG7l-AFcHAetaA8GblyqHbXC5uxVDXxV2FHSWw5u2CPG4Q8QiHWFVlniVWvlFRFVW5Z9Vbm5NV1ZYE1dVuVYNWZ1o1e-7NV2bvNW9Vua31p1h21dGXC-luAGHrOPYZmGb0b0ZdXT1qeaWHhpjmyrZ7GaHAr6sYUEadHZRyzB8YoRivphGmeaU0aN1gV9ZrYP137AA2712BmKHulqUf9HWxq9BsH8WEYB1nMRzDGxHtmTkcJHLmL9YRQr1oUj5HzmQUepHxGJBDpGl3KaFRhR1TTFZGTEDkfxGBRnkc1GiN3SBI3hRkOdFHxRzDXg2P0GUf-YXRhUZCByN5Uc8x0QZkclR1R60e1Gah8UfYYDRsGWWG55EddNGRN80fEIpNzUZtHxyK4dUm8Ny-gI20UF0cTpQ16GUTo71y4a6G9NpscQ3Ax2DeoAQxmzbDHZKCMZSWPVh5CpQT1sqfPXNFHYcM3HVjzcjp3R4IjM3At49V-1LNm9C2m_R_DFs2wt3ens30pAsZeGXNqLcjp_0b1bjWNQC5aEZ_VnjCDWa5DwAjX-rBPvDXc4SNa-W86Y2wkXPqTTYiGMVjNcmnsVuaxzXVrIi1k5-sbMbxXRxwwj_aEN5zZ5Xmx7ta96hsKsbzJgAWsdeR6xqmBHHYt5zeBnv0dsZTNOxuLZvRMyXsazWWtgca4o81-aaQJRt30g9XObdNdAHM1l-Bo8YSB6123hFgtd3Gi1olfWm68MtbYWLtn4FUElFstdUWrp1lfLZaMTRbXV6hqVd0XjV2VdOWY5-meMWZB_ei4Gk5plYqXde7maqXH5hxefmnF3tdFnXF4Valmf5SZ0NWgFyJZ5FQVkVb6Rx4AQFe39gQ1ZJ2CIMneetKpr8miWUVygHJ3wgeJdu815-uVJ3mdggHgp-BzCdHWEmTJdwRsl6OZWYId_QdImSl5mc0rWZywbh2wdjtfTn7F0oyuXHl11cFWB11XbaXXV7xcQpul6ub8Hrlo6g53qdrncp3jdx7C53M-lMVrAXt2nbmWSndnbQhOd2nZ537x4bW1X86HCfUGIeTZfJW9B-OapWDlioU17r5htd92EdxXZqWUdupbR235vtcaWNd75c4Bnl7dfx2wez5aJ3wF_sHN2MgU3e3Wqdi3dp2rdhnd13EMJnbt3qFt9Bz2ady7fCBXd6MZrlbd2ve53Rp020xWmt6ca53XrBIDfputk7sLWVph7ZrkSV06a-30B_ceKwNF9lbu3AdifZ81uRGVYLwtl_3Z2XDB2HYwnhtfnfiE3xwgb92451ffx6_xqXah6b59md53N9yVbn34hA-eMMl9vfcrWqVyXe4HQ9qxfKWpuvncv3nx8CeEHue0Qa4FQdkXekYKV_Jb3og9jXvMGX945bf3lNy_Rq3zALmbn7o9i0ZFWBV_teaWRVoXENXthsHt2H2RfwYL3c92nbN2ndk3aL3YFLnlWHsUdYaFxkpkg8L3m9o7bA3ScLtYT2FtCIE20-WHbU3JIRsAFTJYjfQE9lYR4DeO229xrduokx_61Bt0YA7tC181nraCRVxs8bSBG1n7ZumXu7Ac_2wJ-fYnWCBuTAYmK1yHZ_Hn96XdP2aJu8ff2L92fa_359nfb0OlDuXuAOodpmeMOT9xldomBBpHup61B0pYAPyNew7F2A9wwaf3Yd9w8wnRegTRv28JrQb8OZJhw5X3KVwwbAOzBkI_MOYDxHorIGJs3thRmJhplzgAbKYB4m7AMyH4nBJgFX3Xat0ta3NkNuPYampJhidtn_FpFZrklJiLpUmSJEABGQuANtG0mIYGtaynDJ7zdT7DHTo5v7ph6ycGOCl4Y44ooA4xgmxopto_CQQASQ7BsR6Ho90n9J3rpymJjkG2rZb-8Y88mIGGqfiB7xGY8cmDeiTwnHpQc2wlJLITEnhxypc20CAr_Q9C3Rr6fBygF8HAvFwxo2HAB4OsSSc3Z4gN-EYYpo2KaB-PFpJbXtEkjHkgF1Z5AHY-PbY347_XeD_gAgYVoIE8aND1UE-8hwTuQizxUTmE9SOVhmuWjYxJ-E_Ixnuq_eB3vugvFi4SofYHxAxoGUFiAVPMk8R6KToQY8Dhd2LgpPyJNk9wwOTn7Ygn1l8Q1pPCtx9piBIAbIC567j_jHQEknTHDomj0QU6lWf93CcSB_9sU5TMnj2BClO3j22MjAKT6NiCMQAC0EkUKTqzDEnLj5cw4RerN4G3wGNQcBb8pGWHFaICV5U7lO6B6k-PHfD_GZTN30Z047XnACtCrQa0EpA32QJj08UwvT18csWx5RAgDPrGDtcYjae9IT4pAz-9APnFtfE6hO7YVbRUJszrEjROryODi1XHgSI-tJXe_MadOkz09GcB9QaLCAQ4LBoCqh06EPhrOimHAHrPGz5s9bPMkQs91JoTwTQLOITnM-LOhe0s9b2FrU7YBMzwEWl1AQBSZ0NO3TgfeXPozoU_HWqZ307pOljhk-5RmTuIBDk0jnk7lO-Tqc8A7JxhEzMUsgRwx5prFRGmttkEAxVakEaJrntY92BZSWVxWFZVa1nznmiFVcMF8RfozIbCDvBXz5Xj_OZgcC87Y-CLU8-JhdQ3SONIL6C715MiCM5m7EhlM0qNfiDUStJj5Q03tg2AJhQyNk1M1TNNLsFoxQuQDTGV0NX9BU1llRjGY0X1EVk22nPLz2c7HAn98Hhkw8MDM7zH_Tjs5sYgQRPt4vaz75APm0zxM87OUzkQfiABz3M8JPNGSSS4REQaSQUkcIFIFZUNVc84mnbqSACoVZgWOQXAv8F-ClBwOnaeG5b2bCDAZTgaKMnxgL8mDgAwLr4WGFSpYbiEnvtntHG3pto9WPwBnWYHsAswD7dJXcRgSlZG8Rk4eI3LmUTisvycVjZ2YqRmnlroAWb2Ziv3xQSBdHXxDhTSUCgXUX0BxQMy8VOQCcK-w2LmK5ksv0r4XHiv2N37roY2RtjcY22Ny5ggABRxK9j33qKUHTtvIZK5dGItRAalADUbq_yIeCcUb6vkEPy64Q2pbyArJsCTq7DAjZIka6ABr2TS8NE-_BiWuCAXqBWupgNaA2veUea_XkpgUGnWvCULa61S1qRa8JR9r2IbWvqeDa62ubr3a6uuAsN3UiAZDB5gILJr2bQxZPrgK5oAXRqaAmu_rggBdGgYfhF-uoL_65eZHRRowuk8TJTfhOgbyG5BvobtaGjUcdNK5AuMrwFjewxoXBU2Tf_EY330VTHsywwPDpG8CuUblRDWhzlevkxvHLzK7QBw8eSv1Ac0byHpvsIRm8E6BAFm_7P411S6p1kwE0694jz8nrCPEdf9C26Tt9i9uoeWDVgFZ1qHVhbgmNIXG7IfQR85UXuscSjGBNWNaiFYhcJjR0gxiPtVJYW4NW7lBe-8fFsvccBaTihP0_W5bhgB4rpcl3cISClgnQYiDspaqDGnqovJWyxKtqu1AA_YS5cICBkehomVb3HMJymEu5MW26Wl4pUGU0w4oPaUSh2AYlBwA5hWGVXB_IQKGhkTh6nSzuWRkCAjNuoC6XRlNMIGQtAMlC6RwA7HC1ImFNMEYGFB0ASIjNBtgeKTbuUpD3thQm7yGQtARgACg7uJQbYH7vm7zTGC0rgAAGJU7ZME0wXpd5xPYMAFTjvIp7sADmE17te7nvm7jIAulrpXAi4B2ASe_IBj7re8hkMgJGQ2TUZdgEOkAOpTBk4hcNVShw3qau-NQYZHwArJk4dwBb3YUZO4SgUgC6UzuMZcBGdv8rB1gZkfJKrrVhg4Q1FDdKAPK71h64WYFgfQiAmxoBGraB6lwbgGYDiVdgGWSQfNK0qTQAR7zy064O4HSAcRJHLgvXgYNboDwehQAh7iAzSi0DQBjwKh_RsTEP8waB6caLFFBrK1gRIfvLMK1Do4AKNHTusARIGcgngEigqtZqci2_NOEQW2rwJKCaFgf4HrPDkw1pdu_22xgTB9uAcHmaFyB-gK4E4fuH3h6WBCjLixiQkSjICkYrgbRQNkJQacHRRw7CHH0B20sJF1IB0VBXTEg6KR5qsZH-0QMhloTtEYfNgAmQkoKH9g3Jse6M0rv1jbNi86pYUEx54eGgEJ9QeSZEB8pdTrXwhmtQ1irogf3KCCGHhKbeuGqtAKOq1PhMFMh-at9ACaza7pbq44RNerOay2sc1xsyG711b2U5OF9kHbguotdJ5wBhbO0ZvQxbVIAqsjbZSdMYEgatbpW610aCfFA-Qmdnx6cP1llH6cBoC9J7gWdZB3A2be_Y0ioCBgtAdDgqXnWsjv2nA1sRV1foF0mHQ-VWx-ZdfSZmyS59AlXQZ56xx_N5m1zphRVWxIEgxrVDH51hFujeeLAH56C5D-MvnK5SNB5AmfqtpaBUGlp6rR7lunt8fKPzAGp8nwhn1VlGeJbfhqmfqV8xVpXa1oOj7IW6enEnRSJYADdlyJViU0RpwO8EQBDnh58cmohC5_wZcNa57H5bn-SXuf8iNnjH4nnwDkwPgXjXA-fAOb57pFfnxLfSZAX-jGFfQXsrnwYIX3WxV1oXibFSXzzhJ5tOWQZp_6tuKW2VO6l-79Ze4Dmb2X43foTTGtkzXyyF4Yh1CVfp0unjc-2eaTpK5rl0XoW0ZBybYZ8lRsX8Z_ZQohPehmeiX_xAnJgUenGWfVnnBg_sfxI19-gaXvZ_pfDn454HBjGS59ZfOXlBzH45X_AbufiuB55IEBXswXlfiuP58-e_aYUSBezOIt-i5_J8m2FeXnmgDrf3n1CT2HghYUVZtLhAF8VfKGQAclQYX4jTFv3dqrcR63ZZF7jPNlmN44RKiCd-oA9tFS-a4HaChWcOPL-t51APn7DWnfUAWd6iQsSNNCzp60Rd6LowzutEyRl30Ag3f13_DebffoLd9UunXn09ZVG6VVFPe4DhR8JsPXkW3hIfXqmz9e1baZ4Jea1-lbRQI-XBDJed-il6pfJnGl8-nw3j56jfjeDd7jez7_Z4Zf-AAix7QNVs59zo03oLnZfM3wDi5fAOPN-K4C3uASrecRKV5IFy32V8reJXwsXhta3k7iFxG3znFFfW3szmFF1hcF-7eSNdlD7fYX0OUmxUATJ42cprc6wCIIKfJ7ssoH4p4qtSn6R6gB6rKp7mptIN17qenLdG10vbT5azPJT4RMm22hGfV9XOR3x156fnX8btdeBnzF4eQv3vj8C5rx6-fr5sP1WmVt8GIV_SZcD8VDoFqeDuYu7qzAxd165X4sEbfgt9_rMFiRZj6QJaP9QRLf2PsV-leu36nnnm_Pmbai-y37j_DRaOKF5vQYXlYzSXOnoUlHeI57c4s_BbQZ_fevXgFBs_cXilEP3aUf8evmFnuefBXQPtunA_vZal-iOMmRz4VsVbIL9c_usN548__njt8iYfPnPreenPnD76-wvzGeUYwvm3oi-yP6Lhi-zBDj_i-vPyJiS-3npb7BZ0vnGZ7esMVV6AHz9yM_teCvkz4rPhd4nQidAb72VLnQaN2VxO-NQc7zO4e1F9feMX8r6xf338W19fSM-Ek57E5hr5L2g6RnHowWvy4Da-hSDr7RVBaeeclxiwfiRYlOvqmFEZJvnVAFXU3gb_c_WPkb9zoxvsvom-ev_D-m-4BcL_g4TuHb_g4VvuATbfXuc_qusZvlvqOHA4Sj_W-guBL82_wV5L9dwM3nD9S_c6SLJSAE7Db8yNlX3b5VfsvtV5O_g5s76ReLvkU41PNB4r5TM3Xsr-JsKvqmCq__vyVFAPyJkwcOWIDkw8a_sUeH4aB9hKH57luJWH6mXmvwsPQB6cLi_cgEftdEt-jmZH--tJUNH-J-ymFz-p43PsfiG_S3refwYtv9JhAXRfv2gJ-5bdJnR_ImP37J-14Rb4F-wXszhC-5v0vmlfYDr572-JfvP8O-pf476qPWLi88aeOLggBkPXAfUHaeDXzW8vfwRt6D2BTXjd4tfKyK1-oBpiW15U25fo5m6edD4XZfe1fqz8_efvsZ-_f4Sevns_jfhmhbgVn2D4pf2_vSk9-dUTD_DQ4_jH9J_eJA2d8_hX9f_j_N_uAWv7g5YIXT_WfoiQW_o-Lo9aEqf8j8TzrUNj9W-4vkgXZ_4OMP5IEr_4rhv-Q_yP_2-MDA7-xQ-PviY4Xh_se_liZCvlktfToP9LPl992UNr9JUJP9fxnV9j9olQTfpzNZ_hG8epAv8EPpXR4fuS8QAHEQIPrd5hJILRV_qnMffvv9MAG89o_jz8clgF9K3gf9FuEf9GfkRJZvmf91BOF9L_ljxr_in9FuDT91BHT81vp28x-G_9iuB_9ouF_8_0Jz8xfn_8ePvCRAASCRybg69VTt4coJpACj1FrtHvjd8Hvnd98HPJcAToJpUjg8gBbG-8NfoFw4ARSgEAVABgjsD8ymELg5_le9gxlgD6_kzZWJHaR4fiWwIfnB9CAVi4aXm4DmvjJgkfhE5iAeGhZtHv8KUJj9Hntv9xvoK9yAYtwE_uwCFvhT9uAc7ZWhHwDafidwmAaF8WAcz9j_ukC2fs_8hAUFwRAdW8-fuICeAX7QhfiL9U_j_98_rUCC_r29IxhNhFAed9lAV7s_9sr94zv09SvsP9vXqP8cXhP9FSHr8YgBRNg9kb8T9qgD3WOgD5_vgD4Ps4DZRq4CymGb8LfjMC3ZNb8tJIsC7fjBAHfk78QZgEC3fliYPfoqRQgbEC_aPECufqXtzAMK8I_tUCguNQDd_icDxAQwDiPkn9o-BIDpAdkCUZswDFuBx9s_nj80vmUxIXv_8AUPID3NtsYqtpp9tXpxcZlkUwa_kEgtpkAxz3ia8hSIv9MMFtNLXhu9Y8JdMu_hYA0Qfl95fq0D-_gAcsQSV8TAZ684QVHNzAXjNyQTqhaviqhkAa3AnxGAs7ARgDHATMDF_sECh3hShMPkyDYgWAsQXpv8-QfPQogYT8vVgwtYWLyCxQRv9KAaKD1BJkCM_pyDiPqwCZQYn9gUIGtJQX7QxAYKDw0PK8tQTSCKPjiD1Qb_8DQd8DlQQq8awLqCMtoaCLAMUDdQTpguAcaD-fikCHQTn9zQYaDLQe8CFQfUDPQaHI8ZkbZA5piC4Znl9QASBgTPrYdTQVADugTADXQRShKQVHNqQbr9ZBkD9p_tGC1_lMCHAQ5snAQZt0wUv8d4GAt3AeD88AQQD2vpB8tBqrN8tpKCnPoKCIgSmD8fsKCY_jWDImJWCrQQCh4gbaCEOIkDImOGC4gVF82wdig-Ab2DTVt6D4OHKC2AQODAUEqCGwWaDnQX8CkgdOCPQbqCbQc2D9BKUC2wTqClwVcxMYlUChwfn9BQe6CMvl2DjRkOC9wcCCuwSsYtpkGDGzJSdrDtftFfvotLptd86IAAhl1JoDETqOd_jkOd8zkH1Lphb1N4CkBLwfhIzZDoDbYvVA50E-CVKJOCIwaSCP3nOCtfn0C_vjBDWjghCqYEMCCgJfMQ9sb84OEyC0wQ384PuyCJUHmDNgZDJHfor8XfpD8VgUBCmipgAAJOWCsPhKD4OK2D1wYuDFuNcDtwUaDWIZKg7gQeDaIXQCIIfRCBQeuC3Ri8DeIZ_8ewQJCavvqD2IS6CkIVJDJIWCxs_m2Djwf8DpIYeCwFopCvQarM_QVHMzwYGCZQdwsawBCDzAGeBYllIxYQXYpF_rd9kQS387XpGAKyIv8bXuSJW_sGCrwVodpVr08XXqr9oAaYDYAXBDx_vADFSACs9lokAS2JGB4fhVNybGG9sIUzZcIdgC1AfLt6wRQCMLkUDwVlcD7QWUCnQVOD4OEccyJimMZjmPwAocChhXiODAOKf9ioRf9ghGIDSPuUDqfhJCbgRlClIR6C6gYeCAAY0D4eiAD_waGC4zu5CgtJ5CyQd5DibL99fIRYD_IYUtAoTsCJgWCsLgWD9X7Aj9M8OFCYPtmDooXMCcGL4CNgZNCPAYWDKXsWCiAQP8tjOc8dBpc9qwUlCLgY295xIW8qoRUDNwedDv_kFwsoScczknlCRoQVDSoaqCdIJ2CzoelDi3jVC6ocODYeKMcsgdFwSoYUCZIfuCZAY1DawCCDWoZYd2oa0DLvmoCHwRAAwIa2wkQT3InvpCd9AZ-CaaMYDPvl5DBaOYC_IWUx8oUUx9lvr80IfidEvoRDtgSRCPAWFCQZvNCcIZmDV3tmCVoecDQfvb9iIbJc5BFNDCMJ4D9gSOQSwS_4JoazCtgezDf9nOlSIfxIXwZRCCJHaRvrtbs4oTQC1dsK955o28WIbVCboY9D3IMF8hIXoI3gaYwvoWrDvofVCjYWxCwYVTA-Pv29BwYJ9hPpIBPrOEBJPgHdpPopASnlVZ5Pop90HotZVPidZ6nr0wDIbvAu9m3pDPmZDEQU39LIUtDzXtZDbIRiCjAQ5DrIcZ8CQVudOgWi8eodBCYwT5DzYTjpaQebQteuNCV3vYD6YWyCYoUcCWXg8DtQU8CENNXtLdsIDufilD8PldDJATUDroSbCvQc1C3NpDDTvtDCqTrGcivonCPvu68cYb0D-oWP904ZYDrAcmDznpFDZRotCswQ38FgRdC1oQWCwPuRDofvzCjgX58wgVQd35lQCK4UXsq4RcCFYcuCjGCQJdYWCtZwFuCZwSDDjYfXDTYWzYWoQO924XHDO4SoDD5o0NOMIjDisJLDhEHoCPwbCdu2CSDsYb1DcYWnDFSP68VeiTDDftnC5YWe99AHnCooQzCWQdQBZ4arR4fmzCdgRD91nps84Pq_C0MJgIdoeKCeIVN9pQSQJigaIDp6E_9FQXQdCDgwcgYZfDG4dfCSgCfQxxoJ8dCO3tbqE9Zm9t3soAG_RA4d38O4deDvTpOsuoV0CoIZr9KvkAiBgYLQp_ifti4fgjc6GcCsPtj8SBEH8X_qN9t4VQjz4bQiNEU1CTwa3C74bL9eES5DBduggdoVjC-4QAiB4eTYBocPDBgYgC6QS4cUAX4DJoRtDvAUZ4OQV7814SXCpQYlD4OAH9iuEojqEfj9VEW9sSLk3C6EWkcr4RSgIYbojh3koDH4W0DVAUJsNARRCVMNoChSKjCczujC3vvCQTEer8zETqg8YUNCymID8OYRAj0mPmDpoU4itoT4CoFLvDQfgEDmJEECUflyCefuvDwgWXDx4a88zOH4jM_vm9AkcUZ_ERfCGoZojtEaiwmgW1CH4Xwi1Tt7tNToepskT0C8kWIjw0CAjsoahDwETYCjoaD9zfgZgZ6LzDfjtPRmYa_8KYSLD1TuLCdkYcCymLLCWkRvDCEcVwfEYtwukdFxy3r0jwgMojBkaEjyuOnCgAQJ9rYTsd0YPbCmZI7CHQM7CIqGU9arAp9Knu7CH4J7De4BhAVZEp91gL7DerPkc9Xv8xSNnX9p4UzYLIT3IUQRHC7IdHDx5I5D9Ecj1NzovtBEUnDIwf3DU4YPD-gfjC8XtnCZ_tAj4EUFA4ER89XEVyDpEfAADoW0icmPkdcgZlCXJtlD4AA9pgkeGhbob9DeUSzDbqDXCj4XXDm4a8ihkVoiFUeDDb4VphmgfiDYkWGCqzh5DyUbkjsUPkjJnjSCbEVnC1karRmQdMDo3mHDLIIgjbfo4jF4UWDl4dtDl_m4j2UYrY2XpvD0mD8iK_l8DImLdDpjvdD1YcMcxUV6jBftXCzOBVC0oWAgDYQMio0fKiwkcMiEVm3C9EeMiDEZMifDgkibvsjD3floC4aBRDP4W-CXvopdV1H6duodqiU4eYiKbPBCdUEsjR4eMDIEZMCGUWajZgeij5gTxJrQc191obajNofaiqkTb8DkZNC6kRS8zkX7QLkR4jS4dcjouMQiSgYfDKoR9Dx0ZdCZ0eoi_aB6jxUXyipjjlC_UdFxRUWDw_ofKCF0TGjFUfuilUSRoFAWMiYkRMin4ZL1cEbjoh_lGDw0HqiAUEsikjlfMx4d4iJ4ZG9mUUzCW0RuDJoZsid0Dsi1gbWjBYb9B6cCgiSIXsCl4SjCGkY6iV_s0iR0Z4ilYSGizBKrDDYbnQl0UGjvUfyi7ocKjLDAGit0cuiaEaEj23rKiW4SMjJfqHJrYUjZLrGGR_Jn8jIHizIZPpVZgUa7DwUd9YmrOk81PrCiNPiwitPudRZxjDY4bLfRuERgdg4W7JsUTwjI4RaiO_qi8CUUmiiUXe8BEaqxZkTejKURYih4T-8JERD1jUamD60QtD30TPDGkaj9nUZyix0VrxvJmjYx-H1MzJkkMLJsVNUofhiiMfZjCMfQidESqiT0S0D1UZ1CFMX_DTEaWjREVSiK0dihLAc4c6UbYDX0ZgCC4RJicwQ4jQfhUiu0S4j9MbWBSAXgiOUa6jjMbnNTMWg9zMflMQplZiwpjZipAdGjwkYVi40cxhj0VDCZMV4c4kc_CaePDCVMBmiDgVmiQ4RBjXwXid3wa99DAZqji0cIizAQsiCkXi9q0fYiQsdpj84eaim0ctCcAW2iF4a19wMUcwYfusC54bUjEfvUiSnKyizJO4iZEacC3UZljmppliCpjliipjY18sSEiHMbGizYcqiLDvfDT0cmjz0VEc1AYpiKUbqiesQFjrEcsiRgeAdgse0iaADAjJ4bpiXAeNjv0csC7UVb89kdUj5sUBiQMRzDweCcjpsfVjlsfFiLAMcD1sc58uUYAx0sVhiUcbtiIhtZiDsQ3CisbjjBwcRj40YeDtzMoBmoLF4asJoBqAP7d_keBAgkH4sB0ECBiQFUBvAOfdfwOSAvsmEpNSMORmkiABJDLziJULIxRXsnkQAF1V8gH-AsaD6A2cYZRyQGXg8wKbFs4EFQVOOUAQQMzjAzOsA9OGHgo8geZFYPzj7YPGVzWG6h1GJFsqYNApzQFHkAAHp8ZKQw4ATdydoWRg1eAdBm4uYSmGa3HRWEWDmEAuDqKUuDlwTBQO4ra5JQa3E241cC4XRKhZUTrgDoGry24sFTyfc3H9Qa3Eu4nOiyqJjENWIXFm4_a5MIePGR4_B6bwFB6C2c3H7Xf3GShV3FZ4ygCEPXopV3LB4x4jO4B4ovH0PbPGhPAuAsPKJ4Q8X3G13HAAR4oPFP6c0BWgSIAx4tKBW4zdwsXYnFu40sAfAJyyKwSnHFWanEgAcOxZcRDjS5D-zXnWgAEWLvGoKWuwKAeQDyAIAA`} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};"],"sourceRoot":""}