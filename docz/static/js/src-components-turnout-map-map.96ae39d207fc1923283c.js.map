{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","handlePreviewEvent","bind","_assertThisInitialized","Component","container","drawGraph","draw","getContainer","document","events","event","newState","detail","setState","d3","refs","vizcontainer","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","react_loading__WEBPACK_IMPORTED_MODULE_7___default","type","color","height","width","self","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getTurnoutData","Promise","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","concat","legends","text","parseInt","getLegendXY","it","selectAll","data","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","error","console","e","value","MAP_PREVIEW","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.3e039a56.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}