{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/BarChartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchart.mdx","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","dataLoaders","getSeatsData","partyColorsLoader","getPartyColors","values","seatsData","error","console","data","parseSeatsData","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","RaceForSeatBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-race-for-seat-barchart-barchart.24197a8e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n        \n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---bar-chart\"}}>{`Race for Seats - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};"],"sourceRoot":""}