{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","colorsData","partyColorByName","noXaxisByParty","edge","getFillColor","i","_typeof","name","partyName","length","getFillColorFromPartyName","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","destroy","BarchartWithNavMap","onResize","react_default","barchart","map","BarchartWithNavMap_barchartMap","provincesData","barchartMapEmbed_className","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","e","event1","CustomEvent","CHART_PREVIEW","event2","MAP_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onClick","onPreview","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","selectionData","REGION_CHANGE","loading","react_loading__WEBPACK_IMPORTED_MODULE_8___default","color","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityiecId","topojson","projection","path","parties","availableCnt","party","b","legends","getLegendXY","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","j","rect1","rect2","bottom","regionName","smunicipal","w","fo","muniImuniCodeD"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.d27190bd.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, colorsData) {\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"barchartMap_tooltip__3irZv\"};","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div>\n            <div className={className(\"barchart-container\")}>\n            <BarChart {...this.state} />\n            </div>\n            <div className={className(\"map-container\")}>\n            <Map {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event1 = new CustomEvent(events.CHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event1);\n\n        var event2 = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event2);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart-with-navigation-map\"}}>{`Race for Votes - Bar Chart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8EUAHU8QAOVcVh9VmN0TX4T04AEchASdah9DgSRoPw-CCCQiZUPQ2ZJA8GDyEojCZn4VVUAFe0oJguCYKolC0NY88iECHJjTlHDJDwgjPg3GhSPI5j-OovBaNYhimJY2YRLE9i7Q1dggylLC5QVc12gMh1gHYTQfHkUz5QAARgIgRAGVBCK6SyA1QXRUWOU4AC9nAIRJsXYbh2GAdYogEZ5UCudoAAZ2GTGYsHafcaxmTsWFnJKABYMvYAA2DKsvWMAQIAMR9aBEiS_hnEORFHUwdgAAUhH4JY3J-OBcsRSqa2qmhnAgILLnYABGQrsvkcE_OoAKAEE5ki9hIxs5joHQcN2HkTlIrELaYxkdhUXCmBuGAQ8QrC7F5G3WtgF2qB9uCAAyL7xkSeZKGad7PvMbgwflMBQj8ntUHadgAH4Nj28NI2Oq5gfDRaaykGRq3fMxYUMzAwDCKAplRk6zux9aVxrRNjIIHAasyFJrwIF7azrci-MQwS6JmfMuAmPgQFK5Lkv4XwYAgFJCBFgAmeWJZAdgt1XRNuco1T1J00S8zVum60kBmmZZtmXqkGm8bMb8QBkwiMxIsitJUvmNMYij-NYgCtAoED9AYLjDIZpYbPXYiswciT2H4M0pX0zjIMux74EcqSPeUkVvbOOAE6Dh1Nf4xz2hwT1C5FTTPZFf186mVji9LyQNKiGZ_TMSHoY8nooH8OBUOPSNhRltB-5gY6YsNroCD6cwruxABtIeEtHgBddgAB9172fpl59GAOKxsxyB7uA7CUrW3cw7BQPQOxw8zKYbNrVd_LRUIpWFSMB0oO5x_V2sGRwi_oOOAn5_4WFYDBS6C5mhRQmLYDinNObwLgDgVEWRNoTyQdg9gqBQhEE6vxCA8ArgAFZso4KQTAVg-htTwHIP0GYMMrj8CVnNdgqEYZ9kvFsGGvVwFIK6M8aglh_rTX4KgaIHl4j8MNpQ7-fw_IwFHiwkAsjKGcyIFDCAKiY5qJABQjRFgtGcUcJgVR6ijGcC2A-CxBiBFY0oRAZowCf6oLwQQoh8A_5yJwSgtBBAsg4A8YQkUxC7BRW_ncYJ-DQkxHgIgnBjicHOK2lE1BQiPKiPmD4qxBJbABKCZkkRYjNrpLDDAYRqBsn7wcQI1JrjokKLQIiUeuSrH-PQbQHAzSlGjzKSAnpQhFGtL3ok7ByTsENPKSYnRe92lGM6YE7psz-mRMGassZdTfEWGmRs7RZix7RQEcgwkhSVkHOLAMtxOBZmHPGUgyZSC9k3OIeQB8CyNFLKCW8h81zom_PQA8zmTzOYvOibidAhYfr9kGZsGWhBPmUO-d0yFhZ1k3LRXgYFfizldP_PC2WUwMXRMJYQHFFhQW1n8dQcU-QpqbRpagOlk1_weFUJGFBYDDaH0NnJCOOouD6jaDQCmWCcG4gwKMHAeVzw0JoAAGVsKBKMsd4Cst6vk1BtL1VTSWErZK3KQXrBfkRB-SEEgAFVUBuShgQMVAjJUnBGBUtyNC5X6CVaidIAhoyCF1UyAxWqcA6vpWPB5vLOahtZQ6nZMceUcVXFOKMSLaxTxnlTShsZZAnNrNm7uvdR63WPoWvefqM6UQtLoQJaAwQgE5M9XNGteKUWiqXHAKKYAOQNnknGcYm11guiW0-Ra3onz7mW_gLcq0gVcLWgQ_AG0cw0YweuwB22dvkD2qxfac1xt3cuzmRraxY15YTB0xNSY8SrgJGiQlZgcVtvbflD9FIu15ne_mldM4EGEnrdAPsgLVoDuBWuRktSh0dI7SOad_XmjzknXQkA5zRxwp6RuSGZYIe4uwLwIhUSZBmKFa6dhUMgDwwQAj9EWCokBKfBiL4qMzFuWgD4p9sOGTnqnMjnoK1e11mJNjucQAcTA9QkisHG6N3EwpDj1lVxnh4VKDyHqFKGIsGebqvwWnwG1NEVwZgo7ujQ5IRuswIAJzMJAo4vTERwD04Ezamnhk6fs_p1GibUAd2UyyYdE6B5LzQPYcdbTjmTzHBmijTHiML0C6gYLpbjxr03snEji8d5BZC3vZLW84sJZHVs1AvK_PsHLretS96Zi6TzNfOgt8oPyUfquU1qACPvwiL69JqaLCAKjF1il7BrPQKgLArVA3O2YIHQuVy-hbF6KECISxRiZM6noYw5hei2GFQ4VI3sUB2BKb4fYuNnNinVLEaoyRXCoBLY0bZ5Re87HqY0Zs48T2B13OLO9k7tZAXfbySErx9x2DkKWnk6bPnUCqco1ceeK9tmUMU7ASH0O4CowHR2zYqBIzeZhpGdA-nusaKGxDmGqPNoE8CfPfglODMgBXtTkA8QoCo_4CvW5sxIzZDSJTbnMBGflAYRAJhHk2fvjyZzOAMC0FjlClkbapOVPyso0dAbILOQfGiMxLnAghBHG4KdfylBYA4AyHrnXevOTHspWD2sL7aFCpFfaz5ka7dmod-gS1MxKcwFjca3yUaofK7oXAIXIvqB8VnL7o54qpkuP_IE-KY4cCQKgIyDtlAFWjAyPYSkqMcCqGwLqMAfqrvSJu_WyKUULQzXYD9AdpyCn4oqVUmpVe9Fl724usLeTOmy-Wb74AK2Q9h42wnmCZ4U_xEZEsM7NTVH3c1fd3R_AELwFoAIcwuf5j8FVw4mEUApc946Xi_v8uh_B7W8LsfHaJ_J9T4yQ61vHmrldxYHVrexGR7SFzonQ2XQjBy60CYJz4XYwi35J6MwP5drjan4EBAG-4AEIHP5v57CoDdTULEIjC_7H7YIk7K615RQAEOB5ARBEDQ5c7K6oL2AAASq0oolgAA-p1KKOeAAGoNDngISQaYA1pQBXATZ75xqHj4Ing0a5QEDMQUErYzTcoCL4H6DyybTEH2CkGRDSFUE4D6irSdTMGsEcFcE8Fjhzr8HBr4pP4DYiFsw4DiFa54AaGKEoH_xJp1YZBbR_5QIhirQNDISbSYYpA4BeE-EDZDax4aLTZswPjPaULD5X7h6oDRE4KgHzBLBWIDrL57yJHYKvYwBZFIKfaYB5Fgo2KLADqA5hLwBFG1iK7UCs5xoORwJ4oD4hFQK9ACBaYjIwAOauDXKdFuaBI4CQBkxRgvCuSUyjFEDBJ7zt4ZHHicjzzJQrwDbpqb6Zorq4wDpJipjsD1wADUpW76Uw1WOQzgo-7AAA4j6rtuYJWKmJsUOllseMWo8b7vwNVAIEQBaCkEIKEGxPWo2j9tgowD3IEFAGIDwmzI0NqEbCCQuIejumgDMOEPGhLn4mIiLLQFgKICrA3jgn5qOviZOuAMKJ8dWkIBXg2iiaiUguSJKDAMMB9BkCLD-jOjQHOi6AumooCRohHn4FHrdN0AbmYWfrQArleLNugFcOPpAVPmnl2g2ridgtukYgevcf2tyZzAhK4MkBED0GoUQKypdIaZUP2JQPkDDHsM0ORA4K2iad7IwB4AIMqRLjVMKLhq0ZREsK0NCHEOYHkN0DgHxiKKyTWhyYqYOmwAWgVk8WOolq8SAK5GJECIugCdSUgsAHUEGZaNWuyW4WEWmZzFilcDNOLMlBlGrtSWSgQFcMmOLOWeGZQnFAlBaLAGANWbNHWVgBWUYvIMUFSiqbuHumma6UcKxF6SsL6bkEfhzjMCGbmQuhqXmg8XGc8XGX6omdkMmf8fCaiRmTOXOfOrgQWYWULHgMWaWfWYuUYlWTWZ2d2RLk2WgC2TAG2eeWWV2Q2Sen2eGaqdyb-aifmoSTGUBfGe8Z8d8W0H8Uup-cCa4KCeCcrjCXBXCTBVLsjlMCBaudGaBSSSGeSSmVSceYNtPjdBfrQnETDP2aibye4GkLdEytDiPuth5N_myhylyqmURZzPmVxdUehUriRDOZGBMZTDxbxYIhFqsZGIwD_BadsDAIkLdBMQ5NAUpbQEQM9MAMpVILJR5GIOLuJY8gZeJVRQOWhbwjuTgv-RLoBS8Vhf5jhR8V8T8VBZxWmbBfBeKFUlYKUlILCWCahaTlGQ5fZaPH6mBXhcbgRZ-bWKpcAMkV2jFe_vFnyXRcAEyl5Vkl_qlWxRgJyoSNBVeRojZElTEZfqHsxdQBnlniMDnnnhroXlgMXqXtcTIpXgAITV614wqlVWW6UsiqUSKtUV5iCd6SJQA6XxGWVpmmXUkyXxHEVykiyL4gBiD3aTUwzTVzX9XmCDUgCzLkDC7xAvCJDiAHVHVQAnUbV6UwXSSk5bWczWV5JiVWKRgJXsCdUd7DXd49VFWPXLnYWhVEkRUQW_EpkPU2X-ViAdE6Y7bHh-XIUBV_VWXmUmSYWxnYXhW4VklRX_GEWGUQIkW3SzGJXI1GI0X8lD6Ux97wED7bQk1SkQGT7QFHQOQQ3uU7WLWMgiziDOBBXtrXXUDs3UkvUE33b9E9Ewri3dFCX3aiW9WokrE3Gc3yWKXAD3ZTHHgqVE3q0uZKKa1dpiC63ab62SJa2C2oDC3HlHQK0v5k1IJSCo3sxJVPVWKzXcWflvWVJZXzDt5TraKHW5SXVhQ_VfQu0A0hUY0OVY1OWg2uVW0rpQ36gB0XUnVw0wAI3wW22MBO3BUEkvEx2kkgT4V4222cxxU5Hu0FkU1pWCmnQ00IHbQ5GM2J7M0kWs3sAJ29qc17W8382lwW1d1WKi2GVtEw1KLdF16_Rj162Igy2zKoItyRizLy321plK11gq0KW3SzK3LaKjza1LXAC72V1G0n3717zyCD1l1JLGUE2HTZ13XoVD07gbGLlV2JgR351rlvG4Vx3g0wVQ3IT4KBBHDF5dRA6Z0oXI2MCInIlJVhTzAiweKgOSxJXo0gWF2RUUkORJW0mIgMnTgiykL8BJVxXlHxJwAf04I12kV13Cm03n4UPhIt135QHt2UnOkDlv0AVf17xA0Dy_2x0uUANFUOnhARDmCIM3T8AeASPUCSwR6XU7D0VnLUAYF_AwAursp5UcV538NR1hWyMEABiV77FoMqz7GYPGOoAWgDgCgwSnWV7PQaNYFSByM3BC24mu0ql8PAUF1CPgUiPbmAOI3gn_rtQZ2SBQ0wV-OkXWMJn_pbmFVcU525SW0Zk51nEyQiwAAkwAQRyEW6G56AXo_6Ps4gjto-L9dYFV1-YgcAwwIw58rsn6rE0Ya9tYVhJ4SOM2t494j4_A-TEREpi09aVRu5N9FgsRdT8Rqiwz5Vo-HkYzEzBZCV8z8V3tJS8wKzUzsKJtoyb2ei-TJNuznT2RF9RzQzx9lziVx299tYBR4iIA-TTzZzDzuyJRGzgK7zHzzDJCxzwA_zVDt2BNRZZU4sqzaZN57AisEs5zFhVT62YgdQXQ-Dvukg0YvAC6Zg68vAuL-LAgnITwRASwpD_xjt6TQ9PjK6g5W1NLFgd9p6BMWAOGl6oQZMBxsEF8bTAm2QX4Sgds-EDsjWb6N62slW362kzGOcQG_sYEIAGexuMQAsMUoghsQo5pHkVwcFcAxu4QtSogRrq4mJlox1KQiUPQ-gGQqoxrxrhs4hPcjUnAqAl1LoFoHgUApw2wtrvA6rnMuUXYBQVwxUH5drfrq4Y07ZM08sJUxIcAFoUu_QYAvr_rtYjEOwoNGAVwIwNgtAvrDrtgtJzraAbrMAHrXrOwDyXgAg04Vw75qbq4Nb04FomQLAeQNZ9Z4bGrlAaAG-FoK2wOPwLojbab8gT6wr9uCkzs3L_EUr_EgG2gwGCrYGIc0UDWAqh0sGcc2JomScRgIQdg6AyYsGx7cmUwXGpGxmir87IoQm570UPMBARm2EirZcLac7x7WZlmicOGg7km6Gnog7D74qZ4bBIgum-m-ohimm_EiQjgXrAgcAMHY449dm3RhmAHpmno5mIH6wuUSHMA4HtAEtKHBAmV1Ao8mHPGgHkg4Q0AwmnmQ20t-mTmqHs9kHgSHmS0Q2tO4oMo8AeAlgAogpaUqUB7JZ4snmuOXcmDcWoW4qG9l76Ww8qAq8G8uWGWanhWvKPHHp_EHEzHcHCHwoEthnUCXQAnjTDQegAgqeDQ0JUUyUTH-nIouo8RESx-P68-eioodJ7AI57AxH8AliiQq0WAtgCqiNqinU54oo9g54yElgq05x54QXuolg54zgoXbBJFVwOQQpAGcI5AxewXyH6wiQuXcpI5UQ7Z0BlM9X-x7QAApD5MVuOly0-zCFiXVnfO7lmBPC1m1h_J1iAqmr1qN24s_oTUcGhaNigjihNlFC9cC2QnkTM0s9QKoltjttdgdvxQo_c0kVs-dvMJdt9Ud9ggzXoqC487c_9jgk8w91Ml8zd5dyev_OCu4rEkDkTp2jEp4hUZ5-UsCzilSl9y3j7THgIv9-9SShkidzUmD59y4uUiTX900UEiTf8qgiTcj74hDzkRj03gPnvZxGsvs9Ejkfj3HmkvsqYsWMT6gs3k8zj2TxAPcv_OD6j4MoCkz-cv-ICmz4CjT88jz5iqeVPZT6glWfz83limz1irAST0ElWWz1WWDwfkfi9aEbmm5CwGANwXr04M4jQfvo0QUmeEhFCngDQdLESneKcV0HQBNFNNx3Gv9wr1FPr84ghMr8z6T2r97yb2ADQaL43jL5ULABRylbRaJ_4nyegNHyd6xYGexQVYt2con7AK41o9Doyln1HzALnyMNDmn7oxn__P4l0PtK4CMF1xbwj7X_X5ROX4-FyhGianyv14KugMKnarGv_I8JwC4p75LzCv97L2FkP5IFuwuNrzP7FVAjxcP5oiH0b74qv48yH2b5v7P5SgX5b2ONbxMHbwigQI7wwkEKgK777tN6rPv2YaT17-wD74bzilv5P_b4QJtG_2H4v6gRm7DZ5uhITPgUmb75Uj-BARwGyXnSowlgnae_pZy6DWdbO9nRztAgIA2cN8qeSMBTCFIvU5uNhTINgSIFngYBoZFNEsCIH4o76lKJYHxxfIoChOIne_t0xoAyouw0OL1Cql9SDscArBc4g0F1DIRGCtBVaMhFS4IDC-GAZPlUlYpsDTgohDgbKmVw8CfUlBQSuIIYJ6F2CnBbgsGmz7F8ugmjUvsrnv5OppUqgz1Mqg0Fqow0mqavtkBIFPt9U4sJwgHjdzQZe-XuH3H7iQT-IIB_icgbOjgGchpBKvWgEy1twWAp2AkK1Daidz-DOYP6ZQhyygA4p2BjMLoG6hgDcDbBHJTQQpAEHnghBIgsQXQUkHngIhkfWQTABj4KDMhSg6wjkN-B5C1BBQqMPwO0FMEWCegwwoYKL4l9ocFg1QNKlaHuoOh3qQofYI1RBonBzfJ9vf2PgSgBA2AjILgOQGCd1hdneIA5w8EKZj-p5M_g70SBO9r-t_ZIUvyOBv8EIm0DCBMBYzY4AAHCWQYHNCTwXgdAIkA-CXV9AJ_PABaDSikJDUOKBpFkMDJOAfhx8YhDQABF1h2AAAdkRGkI6B2_A3ncKigQivh0Iv4XCMl5AiQROKIbH_1_7r9JAyYHAKQhxQb0XqtwvIn_y56v4Yhk4ZwXXyfZXCLAw_XXnv3RG-9EiW_RkbyIaLBorexw7_hfzOFX8XeMae_sPwaQ_o0RW_H9DYXXxCBEg7vJUrP1SFEEtGNpfiJANQQhDYBhQ8Ia_3X59Qd-SwECnKNn4N06awAcFvSKljn8rgf_IQiCk8ycwjBDQnKkUIICpp_8WjBAptBWyqi-CYA5niKUQLBiB80QzwRYCMHDDlc_owMVAiQID5QxyucMSYTBEuJFRAiFUeUDRCUANRyw1tLqLGAcjghY4CgfOXgFP8gkWKGoQL3wASjrRLxe_vaPlwZisg8Yw4dANCGmijyFgDesexlzoVDRFSMAKgj-BBQcy86eMdghcIRgjgnI1kdPCkq5pbKK5QxkSW_YhM_ycTARvGRZIxACAsAcGm9EojucYYqCbzmIgcjbQzwMfMKogKOhXAGWDtC6LiUs4iw5xC4sMjiUXIYMAmOgStDiOiqLkJAdLbcbBLjT9iHWJAyMIBIyBkgxuI44irNxgSH84AxIqBKwAg4S0s8nYNwlFDA5ETui-oRpKAnwlHBacJE6cJ53niESSO3RRiRkCWIsjdkLidqgRzCgmckO3RDwjZmM7G5TOHE_XKOAIBxJ4O4kpDpqJwQMTKApEpDj0jyB4Av4YkxDnAEkn39ABXUWUDSBlQJB8c-mSSaAkxx0AccUMSHJGGgKgISqcaIbKxM449EooDkhYlxLjT8S5JOkyepEm0mmdJ6KWTyTNCWJGIBERA5vucUIyaTUJAgdCW4iWCuTSO_YIKUJMJxg8NccQSQppLNxukhSRuE3AVL4G65hQVuTvgmOOAkDYpsweKUOLQnS8GB-mMkBlIloiSNg_EAKelMI5lduiZkwJElN_gUp5CUCF_gRylzYCaJOALFPfyAFB9epU00VOUll4DYGk7VAsT9h1G4I9RHIhKUsGbEuiiUHYuMvNK6l3sIBP6bom1JFB-TgpWU5kUViWjnopg7LTlmVkfSCtn0PfUiM3FmCLs_YegFdknDXZhwe-W7MjDuwfYHt_AxwE9mRjPYiYrIUwWGXYAiBChNALIMjBjMoBYzbGMI_QCB3YATRMAtEJYLREhnXsd2ibLgHQDQg_swM_hLDhhmoDIYH2QoJIP5VgyczwoiNB9pe0kySAW497ZGb-0Mj_saO2HL0FQQfYMxGJBQbdlqBbIqT8ohQMWWBjCJngMIaAOJOEmeywc7pgk8robGcwHM3J1Ha9lJhw4zALMGspOOKkmkwAdZ6BODjdPWAviTuo8QxFfyyCWBhAZMYXJbNfbWy6OMQQ_D-yGxnZBJm0fgAAGIAAnOQCTlJyE4Uck7jeGFDTgY5UUeOUEHzmBpzOoko2fJLM5LQZOvmAuvJ3mTH4lOKcOACp13hJYNO28VTqPAPh6cbMHHCWmxxkndyBpchPyB13ri1YMAfXbwdP276tY34I3GiUTgm5zz_eAvSbNyRoxwVYAtEGWNcSuAkxD8uRKbIs0qqWtWEyUdhJwnLz7deEoud7pQnWZfVrst3K7hxxXz6JVmzdN7m_MuTmIP5A6P7G922T1Jxe0SBKkTgj6ti4e0vSHts1qT1FAFdPG5Oj0wnYJ_u2PeHkMnNntyEcKSIBYvVuagLqUmPC5OT2mJoLqeWC2njNLXmesHsfwFINcXwUWB_uVCjeWhC3kWk0FzCmhWwo8gDYqKCfIYSYKwL59G--AARZgTz7ZidG7fSvjyhZFXTGpiU6XvzxilxSUJCi4abRKemmpvB2oR3AP2UXISaxg4k0VQMbFRCBEEI6wYqk6F8DNC2hXQn0IMIGD-FdQ5MfoAOHd9vBFqKANaltSipU0EIiYe0JsHTCuhdinQroKcUtikxgiiRe4qqnaLGsuiz3N7nlwGK6-U440ZQN9RmjEBWiw2DEvEVmD9AqYpBVhN2mAFMxUUMMbwVzEw84CjdXseYtkXVSjBtEciHzQO7Y4Eq1AmoqgGEllKgxlSrIOtJcRw9c5IAMam1QYUVKQxy3O-QlXkD3kGksPRHqUnBhNL_wIC8MkrV4Va9ugDScZXohWozLNlK89emsrO6sjP8KRcMtdydoeQZaZtJkNySWW_zR-hCrZZcsFKViECUC07t0An6fL0FnRNZL8tJ7o8dlklVAHsvn4HKxl3yv2vtRTpB0Tq3eEehYDOXLcoVNy6aD0ruXPzHsw2K-dQBlok0oWd3YhUcweWkr9M7Pb2eGSe7ErIc89L-fvNeXKh8aTiD5ZEK-W4r28my_5W3nDJAreVIKnTGCtmUQrCVx4EVb9H-5YrwVQSInlCs3EwqAFzkqBCtmUJ7T9SDhYoYIOEGiDxBVQownwSuBnKPRSkj4RwNsJ5T9VAYpeVLkYailNlHizmFkvrFE4xxlIp2lOMs6zjJoCUxCR6rHAKzZwzgW2agGHEvUfVE43hP6pfKoIvWnYAoEuKQQrjpw7hMpa_AJAzZzlViGlfFnkmqI459gUhDNBmilR5YpDeoi0SOAYrjgtgdeVwroV8J6iuEgXssWhVrFfGkZUCT_X2qzALQkKM8KIzTLABjAZSvJO1U4Wby21XcevAix3GA09xgjIdbOUkSsAPY46j5owFJk0K9mnMd6fAVJzZBCEwsfgDNFrUfMAhmwGMhMBmzUNjy1AZsK5E6UkrUAqjApK-vUofrIcz6gsgOsxpTph1W6ndf8T2Y1Ne0lMrgMgzQgewLQUyivGgWCyxBtg362oUnxoUdK-lbfQ0WS0mUXcUmt6nBOfK7wIss0kgWiNBuHpHqcELHAYkvTloED6NRiDeowEplsaJcqtYmhxxlQeBHSmBa4rg0o1EU4NMUIjdupgh2MOOFofgLsQ1pwUhNfwETdxryRKN0NmG0RXUPaUwR_1MMfDSgkI0rUkpnREjaRoLI2QNazyh-mJvEqNrLNRiDWgvSEor1WN9m0jRxq42eanN7AXjTc04js9Dkomvzbeok1DVpNAgC0LMnk0gBdi59BnpgEA1harEmmlRulRkHYa9NAgAzR5CM2EhCN51VFSHSDSzIFSvmpzbRtS2UJAtEAelXvDQTkgXgfqOLfMXClNbg6fqRnPMUWJ2aat99KQDRvU1EUbalW62iNqBLUa0I1WiXGNr80pad0kgA9cNuXV0suVbtdgLyAMl9qOAwG6OqBtnLnjLx25YAJ7KqRvjPlDaX8j-WPFrr4yKatWYmyjVATKSf4_gI9oKDiAXa8s1WYrOka3R-Ag0NALviLCIdAdIAOOciMRGg6qyt0STg5CxTw7xY3aBOl-KzQXR3tIAACQoslj7ajGG68GujrzTwTKEIarprVNUUHSlFgyqBHN1wn1rcEw1ViDVGgCid-A92Rgl61bbwBTwMAPGXq1MZeicEFc8wOdo8is6WFA8GZaLuklocYAkuh7APEQWObrh-zUFXvH9mK7642K-2vwCVTqghQ_AVRJdSIBc7KAPOo0fzvxmPyJc_AfUEiSiA9xZwdOVRIKHN2W6-dAuw7hSuXEgBziYQUCOrNUQpACAHulAV7pt03zqS_AAANIjBXAAALQ5ahALQnCNqqom2BBRUA4e3nWkG92mNfdGakAMhA1D4g18qIY3R3hGC56rdBe23Xkn4DMwggJMgfFXreJwBa9kewXQ3rSIgBzw_gDfFvlmCBpVEWwLvfnqj1F7OY_AUvSKE2CrFt8o-jvOQAn3W6e90e1EqvnXwZBh9O-JAHohGCr7udEeyfRvqL2AaN6JNLXWztYjzwSa3kvJFXTgAFhtcNA0niAunV4lKQ988vMbqSob1kNLOtnfeRSE_6OdHHf_fbQ3pmzOiiusKu_qx4yrw04ZOIEfn9qcRA6x1UrYgAAM9rEDRCjnlcnMaKtcZUe0A10xfJXpcD0BntXggSD3kqKO28pZDASCih9gMAS4pQAABSguxXX4TZkyxAiBobwr4RIPCzZgtOPkJY2kkx94DZaQeZQjIFhq_tEal7SmgxxcY_UjrbUpqlkaVttgi6DHGiHcBatqA6ObkjYT6DXFIwBqNEdggCTXQ_UP8SUGiqDSyFhdeBKBBEGVbC5dFHAKKL7NoD-zfDMwFCZ2M8NIIhsYwKKAnKk5jSjg-IKKM8PiOaqjgXgTxkQAwjxQ0Am0OI8qGH7vF2AsANIBgASOThz-2RhKJtCJHcS3cJigQPGqlCrRTJQO1gOrI1xBLFJXh2bu0YEMNGZUcwOrH6jgDtGjDlh6IGiD9QDh4AGwmAKtEGi8I_OPYPQyACwD6g0AAATQ2PmBjwY4RdI4dgDlpJQ2wLNugBnSId-EkOsADcduPjG8kMqG4L6n4CmDM5WAVY6lFSiSx9ikYEYLsR3iEAqjaAY6CQb0TsAfjeAXYhkbIJAmPw9hpBL8N7jZARj7RkMkTPmHogUD1U8ulAnz28HqAkkinJSPxk2S2DHBrg_idQCK7zpJI9knrLcmEnyJY4F2fSbRz9Zyjyk1ScxLxOC7JJfUOk0DnYmqzOJkRsFLxN8nGyBlI9IziXJ0mMm5d7U7o0pPMnCm1JSJRplpNlMSTVT505g1pgNJS4TJUAQaa4Aska5H12OUXfZJIqOSNtPR0cDwcF09TPJixe8kNkrbXF_ZLJuDmUhghS5vTd0gaWFJXgaLzpAbdqT1IlOlyQpW8TyfLAinxoB0MpgSfJLvAU9gAby7ksmbC6CaBAaZkhdFEzN5JpkEZ1jlLVLNU4ac-mNnIzmZysmaz_APnMJhXgzKLAUZ_yfpgFzVn6ctZhIPWZ7ONn0AaQZs4MWFAD7tcfOVemmXbPCh8zx4eeHzmCTFgDaa8apUOf_A_BMAHwcSX0AoNtm4Oq0XM3Of5yLnNzG57LKGPXNLmtzymwRdcQoPzbNtaRbEyLtskWkzwkuqAIJOZiRBZJYVXyQp1xIbSAL8yVVRmmjnySKDV-jKcefv1wdR4nWlrfwGkO9aV4OWa5SxUgsDpmDnMWXdrIFN3SwqiwTgK2bV0gXjwe58pRAoIN8qoelFw5YirBgTLkN6KshlAlQXHB0FcIShjgGcAsFdQHBZCAl0ovhnCLBZj0zDC9MEWwo9-5A4_upIOQ4VI_LaOMomUnKv9RiPC8yZRXYG5JmARpBkEoakX2NPaqJIZfCTbmOoKWMy0DzQTFb4giF-1JLCBGLovJFSdFpGD5C8BSIKQQjYuhEsfd7aJItlb3OTqYHU6KZ_S0V0HDmXvEAV_c2JePCbQJLWSSgAGZktPN5LqJRS3vOijD8MDsQCK04ySpaXf0Ol4OokEBQGWgexljRFfpiu2XOosehVGwW1DIRLU-oG8OeHiv9aiKQ2IXkybKvhWStlVkovji4uxXNF9tci6JxSsiI0r0lxIPPEBRZW5tYF1YjNcYMDpSr6V-6QIB_NEAY--OJYBAFqvZmKe-F3WfBbLTEXTrlF7MznOkmfnvzsoP82Whmthnjuaq3qSmcQ5bWXz9p_Gd0RqgShNxCSd5VtFYNQB2DBrCk3wbZ0F4IwTVEvDhDIMb7jonVLquPEeBo2WQtgKcnmCKPUAkgr_bRLnCKo8naVjmOBD_AL2DFQbfQX3JTf6WtSHTlJmWpQA8DqBeEDcmi8FuLAtn_rA6IG_phBvRBGbnnZmzLTAAM2UBopnBMxyEDc3IcRJr3fqAyC5TP4GuSAPARjTzwRgSwPACGbZtOnHpWZ9i9ECSPwyvdF6zSRrm_jK28cDtz9YoasSFHoA-2M7ILELAQXLj3JUYwESdotHjTdQfJgkzOwplig8JyhDYXcwi3AkYtsG6AnDKm5bOFhtMoMfmB5UOdlt-49SUeNTH-AfmTVOHZO6Lpo7OCAu88btglj5KmqM7JnNrY555JFdhw5MertDEK8SwS667K1P7XZQMfVuwifbt-ouAmqK07ddqunYe1xQM7BaHyYQBeylFx86iSrvaGl8ltz6xYCTMW2gem0OHG6agRoQTCLa-wFmCigH3hbpthO7Ld53vFxzmk46yRanPUlszoVxa0RZOtb2xeaSIHIjbUDNVfJx0cGDXinu1h-JFl9U5pKAc9Xj70AU-xwKgeRgPD4ZHKwv3tpwOQSsAM-wQDgu2XGqgDuDpyDXi7Fdiy97C_jG5IQPederEUDZM7jmHXASwDwJyFV2jie1mDhB7g-oeoICHJeFh2vCBGcPqFODvBzxb4eRhXAxDxg5Q7ySlWFUlSOrAAA1NjwlWqxvXnjCVmuqIowDNBBGG3wTHZQx07OmkQBJAqIrbewEKiunsLO9o4CUd66bQA7TRggMHcjCh37tfqBx2Uf-JR2U7tOTU0ZZTvWsclKd2YFncfDtAUgb4MJ08afAmHWsYFLKFtEnuUx-ACTuAD3FFLfHpJCj0o-gBUdqPDHRh-tAOm8e3wwnQx7O_6njilOiqa9ou-OhLtgTyn5d2J1MfaBYpknSsIe5zDXvtAqy3Tw1O099TtBMoSwYZ_U5HvtBEgyTyZxnZHtvEPbmqQJ4kC_sv3jyMBscM9fkkHW3ryuoh8vaHvlPUE4T4Y-0FNYxOpncTsZ8k9rK9Paw_T2Z0sCrUPOLAHaa-Ks8pi-TDzjpWC75JbMDoB08olxHzaOUQHzZrF7klvyLCtZjc_4L1ikHCpjhmIpNziOnTsAmkgQwmJYNwecAiCAkM4Z4GAA1Hx3XAidiW0JQK6nRG1MLpBDtfKsnVDk1VoyxpYf4S56rP8Sa5Ze6DWWGrPFuAPZagCOXWtrlxYu5Z7iIhPL-LHy35frT3k6X_uPJIq7V1Yq2XKrp-RgqJV83yVwLx_kYnfnRWuXtlwV-VdWYav8ibKq4NrMZeRXfcRr7i-EnCF6uNEVdC14AdjEjKXX6uSqS66roQ3IwYLxFZjb0RCu3DtV5x0HdaOKt0WLZfmXU64qx2uOZLilygLefsBU7G-fPGc-qems87x5BpzoCadBoOdkr8tv5XzcFlC3UbWmVNFWMxsMolbhZ3E_SeZBEnJJce2-Y8j45x4dpgskNkRC2ckpjtliiE56timUnXu48GiB-HSMq8EyzqMbkSApBDuYDoxIO43xlIl3_lca_nuncCBoRwgWtmgCyBTXb1ztyHPYBCfXIR35hjdxkG_vTmlbn6q97Z3njhT2AFoKKDG3HdfWM0rb0w1k_jLGPn3l769yQe5AiY-3M1fZeu0eD26OWMQRd0kBXemM9m97qSbzJ3cAY93Y4A99uazknuSOXkx99SQvcwxX3m7jFLe-xwYfSPqJcj6O7fcfuv3IOX99gg3oAfWsQHv1CB7xkvvwPeiSD5yttqLbKU6bvp4s5ADfDVjOAZMKQlchNv87Wh9J9fAtDuBmIwoVYwaS7AnaJPjz01vQ7snoBe3ttBpEG_5VMXf9XeSvGw45c9qHX3Lvi6KAEs-FhLon2D-Z-lzN5VLxyyA7Z72ZjiJrJroVyK-ctCf337OQaF1v4A9avJInhFmg-6CTrhZtr06p5qC82WeLzgfUJamQgNB7ADQTqKtAVRheVYLl-tJF7K9xfXT0HhS0lRXuuu6jFCiz1Dw-rgwCrWBiq1C7TLunEaEJCTFiJtWMxembMOAHeHywHaQAsbit_K-a_E4LOJ3TzhmfutQI2hAgHuDMBweYIizr9qBBAHluaW3SwlTaM504AIiU3t95NXQFD3YpzvpDtdxhZWjLXVzxR_r-KQUgve-dF_EVGrLQ36BxQUoJU0_uaxFUijJ3pzpyogAXfr75Lq7zgFgCzgJgUP8E7sUe_g-hs6gU75yqx-MBOAOP1H495xNHAugUoQgk99awvf2PVF3hEoSihnYG56gVa1xSGzrfNvm0dql7TJ9hhz-CI0nwQHlgI-XyUwFLIF94QzQhfbZTuqyKlCC-ATIvreGL-5_QmTQeP_n4L4xktylfBACX5r9Ojq_IRmR-jxogaRs_ZgRPmhjQg2-zBRHEAV72b6280AXviMQeFb82-2-SHs0TkMWWp9iferx5U3275t9O-7f0v-WBb4sD-UBvn3u3zLlcdPGIAHjeMi4cOqlaJn-ng_kpcD8ZB3fIfteKdENR2fKEUfj75Ri-9oAOSNBSwPqAVTJX3vfTMv7H4r8ZAq_NftBMo19zJQlgyYEE3onbQJwuKSXo8g19Qe2OAbSCR4DYC7DBAYIEoI0G6Vym7RZwMIWWf7faMuO3HOEFbFF0SB1p03Sb1wJGEu_i203GOEJ-nfzs5vBm033Owm8v8tvpPG9iYPv6k_F2S3CZNQdqT38jPR76ATtww-xxUnIvzTQZ7bfy_9otBeyXtUHF_wf9O7VYwycCOdE339zDKdEGB-dK33_9jPdZ2ACLAccT9VigOOTntIAvxwRZC3AjEoB5KEdVPJNUHv1tpDjUCg9sLQFPzcMJnHAGeFjfRrweMUA_ajQDchTALxwgAiNntovPEbHAVGLDr2RVhrXS27xdlBBgDkVWfww7Q23Mw2xxuQe1gJorDTIDxw7DCNjTZxKegOcMhoFgK98erWXTOwwqCP2UtA3bzw_1xA5i2I02XC5W-tHPWy2c9XPIS26sPPLP1BcbAopDsC_PSFwC8MvBz2C8BXUL2i8kLcrwi8OtCIKcsQAGrwikvA3KxS8w3EOmCDnA0IIsscvPLwK8ivErzK9P3aIKi9mtOIISCEvAmj98_fHw0DkZgRQMIASAL2gu0FDYpxVhVEQxx7t9ne1y_s1AugJU8QAVsmxIlgfHEpEwxXKDSAlHXvw513jUp3UDDKAwPScf4FZ3HFRg1wDSBNjQoPlh2AloMbc5vPQLm1kA7HFQD_SfYH4Du3QQPto8A0nHcdCAk7nnstKXsgz9h7B_3IDKArFE1RZCXoJThwqRgOYC0_EwKSokqEQLAAxAyzwkDUgpxmOhZA8f17x5AvwzYAlA0wxeBu3HoL2DE3dAGsNtA9wV0DPgpw34BfgpxnT8C2GagOC_UGER2BTg8w3OCuKIENbE51VhQXVqASwKhDB_OQNCNFAjJyRDzDFELoD0QrQO7cdA2YP0C-g_EM1RQRIQK4o2LEn0YtgBEELotJQqVSyAlgFbB6sGLUEPsCH5IIIJo1XHALqtvlBfH89p9KxGu4XA7L34tBLBLlE9babVUrESCVEHUIUxfgUNVyhE1SkF12WpWgALVT12AIrVcSghE7VKQgdDzBanxoFoxSMDdUerIf1VC2vKzwhdOiHr0MoGXKQIqtmXLLyddHA6kk5dHXXnSBAW5VMJodwgkoN48KvVCwlc6SaV28sngOV2N9KEP305htQsX1xU3dNLz0NPNe5V8DukXV081DXTIPzCzXPZiZUbXJMKZdiwcazzDQEQ0ImQrQxChtDVCO0PIJAwwSidDjVSoVdCbId0NMJLVasOtUjwMQiLY7CB1VdtxKEMJdUYxYZSiEIw2Dxsh8rSQMKsRrG9QTCu3FkEHDbw3SyqsxwywOntvrMcJwAmrFqzasOrLq199baIZTmV0wxWj1DQ3NLwtBWAP_xLdWw5AyuAdXZAwnCXse7hlCWeW5hQjGyK13QjSeJ5iwiUkV7mfCuvE6iqsTQp1wIibcBFgUJz7CpVtCyCB1VQQlwioQkFVw44GMIPQhUO9Ctw7BD9C9w-1QXCaAHiP999ggN3ao-bOkNoV6FMCJYMRwKKGccr_GOnt5UAXUC5teEJT1XspPaYMOlCgyTkeDC3AkI7J9IqTzeD3DLEPtpC3KshoD5nIikLc3_IrWHUcaCOTv9USaqEzthjfgCwB6g_ghkANIiXHcjqnDxkkY_Ih41f9i3QjRXcPWE4xCirEfAGIBjTfgBXd3SckJciq3bgLJDDDINCtNLA9OUs9cIvwNxVqfECIHwlQ5XAeRgI9MS9DROHUNvkII1r2gUyWeCK1dqVdsP_BOw29Xfk-bHIkojLXTiAaAnmbUEQjWo_m0KI9mP-T5tAUHqNrDn4BFijDoFedwCC4wzUL-YqooVXWVrPcagH9DKSMIRU1QyCKHDStD8NrBBVCBVjCdMLaJMpQfAmmtC6I2cIYjBIyjBKEyhZcNYjqhN0I4iNwqqIsJbaPiMGh9wh6OEjJcbz1DDwwhr2_tn9aXDPBw1FIEjVm_UJ3qc-gnQ0MiJEYiH8sHEWRwVtFvRYQrEjQR8NUDJ5GsMO9BYKVBdQrFAgHUEZhf1AcEg0GvhcFPSWFncEqpM9FZYiYKg0Q8diB9BthvpSdkEMUgSQEapAZYCGBkDAcCAHdeYgtW3sQAQpnb0QAQgFuB7gR4AqAPAcgAHZb4U8DZB3gAYC9AulBNlpw5xWtWZi2WNmM5Z_CAVmUAfpbwTFYf0CVi_QsyP9EExZWJdnlYRYlQFQAkSJrENh9gMtgtViIDuVQBTcJJiuQwiJGKuBPWb1geRA2NWSuAE5KkUvJNECfDQB62dgFSgSyOONrAa3MNGLJ0oD8kNgy2C0BhYJfQqE2DSEREQeQRgLOQ9YzQbYFDiq49TwYNVwcuNrYR1QjBriJQbYBHUs5B5CoBEOK4DjlkwfuOrYTjM4wuNhQXuLABSEcePHjq2LOQyBiyONmNwuAdgDjlyAFeOnim7aLTbYIADtisdLycdm5iCIQdn5ikbQWOXYXY3NWYiXQtLgmU57ZSCjwE4XNR6FIlfQVjlwJfiFk0ile-JWg64CJUcVn4iZWnQZjUwR_ZXpdiJJh2YsIgviVw6oVXBH43-MMJVwexSfiuCQzDNihWAiHMwj4tQBPjnYwOAdl2AdaGNwvWf7xgwyMWYEISLdQmRoBa1TWXYAaCG4BmAlUVAF2AX2SSCZxOZbnTdZ24uWL-IUZddhs51bNyAPdc8ZiG6AWEvRDISEgChMlBNgC0DQBjwQROKtxZB0BSAAAR32wyMb4nqk1Ei0ECR1ZXhLHRYRZ9iFl_CWtRZYcMM7VlxQbCWjESpITIERALQd4kTYrE2tRASLEggH6koObu2ZNpLcJBsSb2OxPLZHE1KRcSWY6yDPBLAGeH2AbpaSQiTN8KJNFthQYO1Rw_Ez0DVUTgrklcSzwSNV7YyYbohSTpIIUGgBsSMxMMg3ErTG-J4AOADK5HAO1HyTv4FIGgiiJKgDtRTEl0FCTpQPGOklDsASgUh_BDekoTGYFRMZAD3baFXAhkjIGdZVEqAGKBVwHimZxycF6kFwj5JkRaVOYGZJrAxtQ2MMhSrWSWNk-kntQGScAcZJGSwiY5MmS1E9ZI9pfEOsyBwylJsxHozzRtWeUB0W82E121PJG7jDgXNCYMVkpV1rBLkp_EMwXpdpNxiAAuXX7l3MdpEVtzZHuQvt_4EeiGpZVA_X10g4I3U31n4JnFzM3k6-VUQFUBoH1Be9Aq2ExYcSTRJp_9EAAN0hQNFP3AbwqjiQB9dfFP7ja8IEVilQbNwnOIIARIHcBofeeA5SuUziHhx7EG8MORyUvFP1AmU3fEUBSU5A1FTUUygCuMciUVMZTkwJQhZSzQTdwUdAkRiHYB54bUFCAIAWqkPxtgL1kBhBUmlKeYlU8VJVTJU6VOajR9FFMN15UoVMVT6UilOVST2NVLZSjgSwCCh3Aa_h1SfUv1LoAzUgqxFTXUsVP7jkwG1LOi-kPeFlTHUhVNuZLU_uO2wgRaCAtBOoPwBBJhQBPR1TM0-IDgoc01wBDThU4sGTTkwQqGjTpvGVPDS5UxNKpV7Ut1KtTSEQoOyMOWG7x1SaCSgGyBBodEBeAS0i1PDTlUkhm_BbUjXSRTcDClLrTnUpNKHTxUwqGZSdiPIBPcdU9W1PgT3AdLZVk0hdKrSyU2tITSZ0htO3TVUpdMCRYAVdPCB4gctgwh8gfIE3SktRtIjSi43dJrTJ0ylNpt60uZAnSGU-dI9SrAPAA5Y94HuADThgYYH5STgUIHvSiDTAG3So00dJjTDmR9OnTzU2dLfTGUwqFTSOY7YD8ATgHVKzx9UuwEsB-gTOChQoMsNLQz50ytPgzq0u1PjSqUp1JQyj0udPk9F0m8C9Y3gDIDnB54TOWYh8EJuGSA9MDbwKAyMstOYyK1F9Noz90-jM_S6UijPk8T01aDoVJEZf3nhhUWAAIB1AMxweEe4HuBEyYMsTJrVqMvdLfTkMgq1kyf0-Tz_S1M1yHhcdUuhAwAhATyF0VTjK9L0zH0xlNIQ4MpQDHSJVONKkyP0w9K_T3M8VNIRMM5DwoCE9F0DzTiEDfDgA5GeKDczk00LIkzx0pDIPTGMoLKSyW0oEQUd5gWADT1tgfBFtk8MmAC8AE9U40iBKARLLEyR07zIQyldNLOkzAs8zKbTkwUqEXTrAOClcAgoAUHZQQMrrJ6zRIO30_TyMizPayUs3zO_Sp09LLMy_MuTOrVCg3LKzSr0nVMvBLqPCH8Bqs-bMMy6smjNSy6MgLIyyWsiNNKhMM4VAoCV3Z0C4zUIPDCIBe0_VIIAtssbKozds4zIdSmso7Lmyxs7LJ2ITeNyASBugeeGQhwocgMiAns1rNKhasqVPqzjs0zNpSvsiHNKhCgm8AXBXAC0BRzgM-eC1IPiRiHQBwck7NKgJs2NKmz306lNmyScxlNKhERVtMoA6FHuG2BaqSRDzSRAZ4DHAMgPCDyB8cynJh0jM19PezDs8nOCzCoREUXTzwGYDwBqQOUGFQ6cwHOyNqFWhOZwuc_UGFzr1XnMkyTMmbPhyKc5XMRET0y8AgA4ZYVEowVJWABYAdU2KU5tYAJDgJwoAJXOFyds6HL2zJsxrIFytcoXMRErM1wGwzQgdEImAfQVYJ6IgclIAT1-gSjGGzAs0bKbThcrzMdy3s6bI-zBcy1OFzMMkG0CQKstyB1TU8r3JXcM8u3MREXs2PL5z4813JdSKM4XJ-zWUrIG9S3gaICPxuMvoDSAkOd4gIBJAXUAlyZYdBFKYB9b1FWIIkxiEowYAPPNqz4cXxCUB4U3NERTl9e3Ud0C0l3UJTMUlTQNyjsVRH1BOoefIXoq9eeB8zicxtId18EWfLoUZMhHNXzayRdJaNQGKYAVRwgADMupVstPAZypETiEkBc8ckg3SRs0TMnST80-SJzEM8lL3yndWijpxPsqbK_yT0_UAZBtgc1lzT54c8A-IFwKrPfz9Mz_M6hayB3O3zf811P_yD8oAsTzMClAuSgrM7DOoBcM-eE6gYs8DHiQwAcHK_yY89Aoay_8mfOd1D85rOPz8CsLIgAsAWAGSBY9Hoj5okreeHA4oAbYA5zUQagrYKf8-gswLGCwAqPyQC_Ap-yFHB_J1S5cVcUkYxC2sihy6ClrKwKmCnArdy_8_AqRygRXRSDpZjFTOggRsQ4HULkoQnLVz9sqQv3zdC2Qt3z8C6nJZTfgdwB2JAgbYB5SaCBFBoQPoIyC4A0gawp5zXsovJ0KZClgrkLkwStUKC6EKACiA7AXVIXAki9QsrUJC7QukK586IpcLYivXIAK8ARHx5TqIRiCYT0itAphzj87IuYLgCvIpmg_00KHEwrARplqpgCVTK4BMAKAHiyUgdItoKqikApqK9C0vPt0UC9hCBERIL3L8ApodF24yYEQfXSKC8rQuqLHCqIrqKDC2Ip-zrARMlsA2dHVPj1XAfUCKLAC9Is0KBi3fKGLnCjYqrV4io4DxdfsoQEgLV033PUB3AYtMQL6i2wvCL1c6fNWKci9YrwKVUjrL8BtUuCFqpoQeeDcB2UQfI-KNi-WFVzvi-ws_zLi3IrhKwCrwD1hMc5CHn4BwB7PULFYTIpWKAC_4twLkClVL_TLUIgE0yMAHlPIgL86gHxL-ip3J3yGCv4tqLSS0YpVTMM5CG2BIgbrJ5SeSvkp6z8SpYvOLWS4kvZL9CwEvlgfsm8A0k5GHYH6B1zHVLlLGmBUu2AlSkIthLpS4fK55EiBFKI0J0vRAD0DWWcHnzXk1TWXzjSywHXyybTfOWKpsk0qD0ri11PPBY9S1EKDzwQrIEAb8ugB5Tu8sUEqBwct0stRCSx0sD0bvF0snTziSwCLjRcogFYM_SnVLYILgP0oShei7UujLYy-ErDLG0p0sjLUS11JjKi4sAq4BIEPsFUyFKQywZLMy_gGLKCSuwudzyU_MrNLCyrMqLi_0hRylwzc-eDP4ui0BgzKI8j_LrLsypkrjyWy9WQBL2y14RpyZchwDTp54WPXRBG8uABOABAGYHBziy14VzLmyiMtbKpykcsKhnhE9L84MAKNmlhzAeeFPL0Ac8rQBNy2MuPKdyosr3LJyjkv90Hyv9Ir1JGGCANydUr8t7B-gd4qHKkCw8ueExyovInKoy0CrOyMgVwDGg5wewAXKX89TOoA_gAHPvKjy0UuZKMC6MpfKoKkAG4MaCG8EKDEKsKEtJ2Abg0oA-SF0DiyG8nVMorqK-AB6LwcwipvAny3CtNLXyqUsnTLAZwBoJCgywFaK_UnYjw8RwUgqngh4ICoyzI83irN4FAEfImR9SifMNKp8kAAOLk9NPDT19MLu2UqLSpfJxS9EWPUT1kIW0s4hiUnVIdLG09SpT0tKs9PwrzwSwH4qgRGAG2KGctAB5S9UgQDKKRKksWDLHK9irj0E9DStT109HSu4q49YyvhLF0tgkAzjwIorEq9U9EPRDwcoyuQgoqgKrUqgqmytCr8K1KvhKT0ykpOBZi04hEACAHoqNtaytSsiqY2DKusrNKnKrbKIqtKoaLCgykqCgQGQHLaqOqlKuqrwKn4syqk9bKu0rcq6qswyOrUIB6yE9MounhO0mCDVkeq5qqwq48uqpCrhqxqqqrmqn7PPAes1ABUT4XWYoaAdqvaqgBGc8POkrhyjavhKzi7CskLJ0latsq2qA8suqbioET8L2UUPDyBHQQfWZyHQZwE2A7gSRhhLgKqyuqqviwvP6r7qhqqeq8q-EsKDQgcArwAE9eBD_L-IZisqqYahEvBqkSwKsGr6qtauhrIqxWDhr9QKPFmKu03EB2AFqxWEqKbqlrMhr8at8phqrM4QGh8HdQGDeLV0lmv6BNGAQCpr5YPquxqBq4KoeqwqkYsur5YTDP6iInc9PngpaurFgA-apaqLz6auyvWqYan7PAKoYdEJ6zostnI-IfyggCCg0a4GvJT1a2qqyq8a1WoJq0q-WCMKdibDJ9B-8mwFmLc8QUAyBnUVAD5qwayytNqLa1aqtrGawmrcKgi5iH6gcgK8tiA8AMOr5qwirGqbLXUlWserA6tKpVTPSogDNp2UeBEkAoub4UFc8QPDM7BEgPOomAqa61MbKWShOr9qRakapTq_0mzgJwnirHNcA50YYBgBtgUuoFr46u6qrqoa5Ov5qxqogEoxNgHWpgLUQZpJFBS6pWohqe6hmvCrLq-T0KDdQB2uOLRIQPJRz4oNCoVr0ayKvk9za3Gv9qk6ueryq2swoP6jGIRiF9Sos-eCzw4AXko3Lt6lOu9qxSyuv3rq6tWsiqF0z0owBlBDyq1qggKmp3Ty6nCpxrha3uqPqP6k9OQghkmaqBzoGyDIfqJammuWqZ6gOvAa0qjDNbT8gF3WZzjwdUQAap6wWsTrRa1DKaqJan7MpLWJHlNZTEgCIBGBPahBsKhrq5BtfqwGsWryrSESBq0Y0DC8UBzsSo_UH0t6k2oTrIqjhr3rQG2erYaRGv9OdlOwJgqTL54S1DRAtgQgCprPMsRqGrUGyRrSrQs-IvcBUAPwH9IjgXVJnhJQY3FUaCGrupAaNGw-q0bbaxdK6IOqvNNJhbZPWtoqEshBvGygG26qsbLamxpIbLqhbKBFLUTNOoAV3L1mZzZwY3CkrQ0i6ryrq1dRt8biGpjLurIq0qD_TDzVwCGS08fIGTKD3eFDxyPGzuorru6lhokb_GuJp-zS9SJqiAdUqppzzom0tJAqAmphuVqUGvxuSbSG0qDtrLUNPBpKdUnpq1qzqmJqaa4mp-tpqEcohprr5YEXNaqiAY4rkYuUt1iUzA8yYtnBl0qmpFyEmg-qSbMs4RrSrdcwoMoqdqnlP1BCsqaA2akG1ptKbNG8psiqPcgSs2BSsGWBBwAueICPxoIZIF7K08IotCBaqDZqKbgGoWusadmumrubMMmghBJm1ZQsiB5KQRvOqRmsFq2a3662umaNa6eH7ya81dPRbxbRiA2aWm6euub2m3ZpSa0qmcqBF9QaqC9YR6g4v1AvADOqGbGmkGtJbMan2pfrxGm5o6bLq48uJrji14AZQI6kjLPhtSKmsfKvGumraaQWiZsiqwKwoOQhAkVeqZygc-VrKKGmwdJJbNggFu8agWxJqmbnhTDPhqdM_ktWzGmbPBFaLG4pp8btm3VrRbhgVAFeLMwE5tSKRACqqEb1W54XxbCGiVt1a7ankqj5A831tkFVWrdL2bNgsZuYb2WoltBa0qhOUXSMICMFmK42zAAFSEGmNqRbWG25ujaT0g4r1SzmwPJULG8qmoTlLmglojbJWqbLyqE5P9OQh0AWqhrbeGutrrbC2zVvFbCWstqZb5YBOTOz6pfBA5YxK1iAAytEL1kLbzWwFsmb365CEKhYi0-tnBaqHVPsAugc_hrLXWpqsnaWW5-pKbS2musnas23NLcBZi61GnAByhau3a02sps5bUqydr_TK8zd1j0KAzvP2K72wJAKbl2jasvbT2jluJaV2itNaq5GIotKyYAIKFnbZarAFptj2itPfbI2qVonaF6oJqIBBs73LTx-muDoFBCstPDA7dS0fKUqfsSfJli59QsC_LzSrFMtKDK2fQQhTK2wHtL122fTL12AAjvWrkIBCGTAZm8luFA2cmWowhIC9Jk7zwchjqY6128Zqmy8O8vXXx8K3joObyW1NUCBzC0PLgAeOxjt1yMqoTto6RO-jvk6_00UFII6AHop1SNO6YWNr4WxtLE7m2hHKU66Op6rE7MM2PTPBEfb4jYBiEIxtvae8uTqY6R2rVtM6VO8zvk6Nas0lThb2wJCvrpchPSlxnOlEUU6aOszrfLeOslqMhogdjOUKxwHuDCagagzvJSou_jrjz3OyvVU7kwblqBFBKhPUVkUinuC6BEgTeuS7hmwzsY7RWxEssaS9cLo87Iuqrs9zIAeShUyMIFrpu9nOsCrC759ZTqy7POnLswzdFY3IyNMcpVGYhQIfToq7Uuqrtc6WszLsGDGunLp-y_ONyCHqLgX7OgAVJHVMT0ggdEFELKqqLo9bauhbtE7GOottlar0nsrYID3KbsZaZu5MCLaeu_Doa6563jsrbW0n0DyA825iFqpWUaLXFAXQeSmc7K257uE7-upbs7bCg69rcJLAMIBUzxQOzqHbDu87rm6TO-roh63u87rtrFChPQtBLAIICiAr6uCH6BUQA3MkQQesNqLzTu7LoTlg697upys8OIH2wwrF8Iqtzc5EGBBJARdwTKp4EHtjrWWydJp7PO6x2iqQnVcuFABYAQvF61y--pfaGO0XrB6-uxbqx7rHE9MsAvWBnMBzF3PKSTUSxMHJR61epXoi7Veggs-6LxM0g5rFyq3OELZeuTusdjOwTox6VesWoV7koLtqGTe4aHz8KEgZIoQhjcOKFMNuOw3vd7d8BSseQsOyKRUqZY5vW6AECQjsXzriGPuy50UyWI3yD9LfKo6QAWPtb0sgfCpqhnAKtUXTNUqXGvAuM29puNiEW8voaX2gvqL6MqnPvj71quvsCb2AW9vSZQmgNNlA7gO7rVam9QvviaxWhHMb629ZvoH7ma4YEgKugHbsH1HM8HJb7HextJH68-sfqrVuSq7o8qtGMcAl71y-foH60eqbOX7aAfPsL7oum9K27UAflMDztismylwa-lLtdS6-7cqH7D-53lz7j-1fty6rACgPEkkolIqvTRjD23K77ux_tP7i2wWqP7A0J6qf6_0_LvgK8swHK7S3EJ9r36Zobrpf6l-t_qb7oB0_q7aNMkEo7SschcF5KiAVAb1aG-rAdH6cBtAcqaC0lUudbWFdCsqqn-47otbs-ygZX7qBmNsKC-aY3N1JIS9IEgLbc5gcL7U2jAfJTIBk_pmgLu4wogB5mwgZRyJgWAHvVUBp7vEHH-jgY_6uBqtvkoIgK3sR7Da1QcX6JBzQagG3yuvqh6JOtPBiAQgLqGGAO4LjIABFPHucGg2h9IkHRBg_swGW9bAfMHRBn7MzTRCWAExybu7IGAG--7Pv8GKBnwaoG_B6Qbtq4243NygC674UdIgykQfiHohuPtiG56gvrYQaclRL8BG6pcuEBp5TsD362ELIff6zB3IecAlYKtuDzLbbXscZZOkQfqGqh3wdqGlYGCrDyogBkjEq3APVm6KG8iodD71BydMkGx-pWA1q4KjjMzy23bYGbzRh1gcBbJhp6u0JfCCTpd0oYLjLYzu0hMv9g7yyqo2Gw-vUvHzsO6PuRT-9QfV30HAEfQT67zK0v4BzwewHI7zKzPoE7G0gMtuGl9fCpvBLUGqGRzQgG43iARwUis-aAy9gCzwpUe_um7XU_4ZqgMq74cX17h9apeGSyRdNdrMAPDHNzMgOCrAALQRHpdBHsyqvRHv88YeeGbhlEf30nqskZPS2Mx_HnbhKmG3aKWoXBudUDsBYtJH7AEsnAHau5Eb30ahsWrJG66rXpHruDUwzoAyu4Mp5GCCpEapHBR-ytlGu2yAsVa6pPwDuzaG2EZAHJ0ska8HyUgUbuGaRt8rJHKmpPkdrtewyBaMBOZ9of7dR2UZWGtWw0d-G0R2UbtrnALWu1I7AUUDYA3CKri4L9iiAAEAGc4QFtG4R-0ZLIqe_qudHUR2kdlHg66CFU1TDP8o9tRgQRPCHg2iMeSgBerPpjHjRuerJHnhQoNvaMQQPJoJ981rDt7uRksmeF5RnvMVHXRksgTlixtoAtAeCogBqbFy2f2yA2gEYBlGmxusaH0jRoUf8b0R2GvJaPAPwEaZAch8HCBEgBPX7GcyikeuH6x4caVGY2MAt2r98lUokYMgRuJLrqxhspq62BvMZHHOWscavb1UtvulgH2ogDoVFx4wddKFRtccbGJawoNWg-hrJxsBlC6eBuAMgeFFIHDx_UafHVxl0bjGY2H1tUSNJaAs6hsgFgAzH3B10p5HbawcZ-HYxk0eQn6e3kqYTObQHJaNYgBCegyvhzCdQnqRs8c_b-9ZCaLGgRZCCwBMW-eFWguiudEwBFx2seXHTx9canagRGzjontUzYzHB71bVPngmRw8Hbrqx2ItImGx8CdTq8uoYcizr-mCEgLg-l9vRGy648cBaOJxsf7jp2h_L8hA8tTNAgEClSZ5H-4ySZfHpJzDKvyHau1p5THBxkDoA7Quhv7HwO9iefGwJjCYaKfs7AXyAni_ideA52wGAFBIEXFvEnHRlrM0npJu2smKe4P9tmKc65IGb0ugZyajHBaiKY8mmOr-pSAqALwFWzZwbKaMm7R54ZMmcxz4YNG3J9CYLGTJ6iZJkpi3YsA7ActbIGASR4yYaK2J9SadHyp_MeFGeRz-omLem_KBOancALnUyRE3murHAG9qfCnOp8ifCmepk9L5otxlIeSBqG_sefTXJ0CYqnupuaE9z1Ml_TnQdU_CYT19sITtWnHx3Uemn1xjBpZSfymACl65SpPGtzJe1aeAnzpjaa6nRxnkc8zZWqCd9TaEj20zzEu9BBuN-xtRvWmhx9ycqm9HMLMMhQoCiqorWsH6qmBYZhitawQZl6cpG3pmaYRz0R0hEqbwM-RqVQvhQicjycZsKexmLpxsdIQEh-KpoBwm-eDsnRIeBpamqZsyYhmtpkuOLHFZKEtY49MN1m-FSssSspLlkNwaImDRz6ZKm48tKcqmMM2Nv0x4kdjrlniEOFvDGipmWdZnNpj6YwyCq5DqIBWAN4AhL--LMFWhwoZxCoLuRrWfVn3p88fsAMMqzPZRL6tesmg3imUdtnLZrGamyXhjDO5KtU9wFQ6ISuVq6ymElPRdmMMt2dE7tCWVvn4WQRNtRyDiT5sXcHQfXN9TAgA8fl7tCU4cw7zhqPueSrhoTrQnjRi4b0qk-3OdeHU-_aIo6M-wXuo759fOfdnDO-wBsLF00UAK8q_OLmcA2Cc8AVRoSUgsMhS9SRNTnCpkvQbnPGyafR6a5sidE7h5yBtWgI52PRoJdQBoGUL7GWcC8AxJ-Xqnmwe2ucnmbCyzpnnOCZwC6tRQc4g574QVofXmd5zeYnn6O4eZ-zKhZLkNBhJ-IEUQDcnjpvnL5qSci7h5u2tj16CXUF1BaEv-fOIFUCQW7nmYSkC8qRhw7q_n358yc_mbC4OrnmAAI4aALQCOZ7mSYafzGnz5qnJgW2Z_xqEtsxxdMtR_hpLg9KBC2IA6xfyr8tfnCF3BY1nOWghfE72ADq3xcbwA0DYIyFhDiYrOMmhYU7lxvOavnzOhufuaJi_UEcqJBbg0S5F5lIvwSYIXhbOnq5x9UEW4F_POLH6Cc8HPBD54-cfnN8GCEIltRiIcYX0ZurvHmP5t7uEWVuxLl1BnATLlFAtFvNJsAEgYXEcmDFzMdn0LFuhatmKJxhbtrHK88E6tO5hoBoIFUNLl7KuXLUd4WUpk7rL0t56-ezHg65wAaBNjVaD8XOrVaDzTT5yAt4WJZ6npiXlF8xezHqpxJeSWhLDq3SXeU-EAfzlJwecYW2puOrYGBFsxdd6G5s_s4JRQVdPs6aF5_tHmne0xdgWClr_p_nF59qnOJ6CBoGIrFy6WDch4ALpb5GGlvJaaX8Flpb_S55-gnSW6CBoGcB-mqNVD0l2mpeWXPFuudS6WlzDPao5588E2XcRy3PZzhgH-C6XjFxpf6Xml5KHdaBK5wAkFeK1aBvAJBUJcXdUQJIt763FoeZeWyZ3paUXFlhhZaXv50Zcy4FUXUFi4QluzO5T5-QrOgAulqJfmW-lvBchXkobgaBEWofbE6ge4aIG5tAxvWA28FKGhbEGelwzoWWnlpZdxWT05zLbUvWcwsUmAx6hagXGVw5e3mPuiTroVwwLjOxzwwNQq5XQe_hbpXsV7xYbnLBuwYizhK3sv4g9pjfCpWHlyVfoXpVxhsXTKK7oGFRySTvsXK6cgPJYBX5rVZ5Xr5xhpPTRli0GcBShEQRKXyl2PT6AKx01dEaJVrFY1X5um2a-mWUmeZS41l_YstsmZ_ZcYavM8PpBRI-jRBw6rhr8tiWqifgCLmnhkAAQhS5-NZvD3hqueTWd9fJbFr7ATqEsASKtOkBhhx7_roa52kfVLXXFxCcnS81m0uXHY1nNf8aU10-VlnDaiAEgLOx0IaTabc8HObWMi-tezWIViib7WT0q90PbOMudpeB9untcqqR1jKobWh1lrL7W_09ets6ea5MoXAuwZNl7WG5hovnXB1-lc5a-1zDLcAPodwD8A45v8vXwvqgKFgnOIVrEAyd10-WMWF1w9eHXd1n7OcAQ8i8RNJVM-IGPA3GxICfW9Hfdcxn8K5taJqgRaiBmKByudouAz5weYg25lwFtfWpVpdYbn-a24q9yHJ2gFyNSC5uo28n1_mtA3wZz1YRyINk9doAAc1AC8BQ8fEEhKqNxH1o3mIIjZfWD1tDfI2MN2Uud4Oof0YUo_y4UDswVV2da42SNuNbfKINnHrj5YNq8twmRQQXSI2MVlDfY2yNqbObWuJ_9KCAka9nONThAZoEfnTcvZZVnk1huYkmB1sDfWr1Nk9N1ArfKjAwBcRr1NoSMgIns5yRNgguQ2tW1DdU3G09Tb_Sl9fBJSAOWKcZVKa-fwCrGX23zbE3G1o9dM2T1w1MR8CcOUG4yYIA9xtyYAZbXi26sH0HYAn1lyZpXyUrza8X0N93sXSeC6NVnzw6nOtsADSAeeM3m1iafqXlNizaer6tk9Lt5T4GAE97O06WH7LOM42F9Hrc1zLc21p_LddTCto5bG2G5ydppyOt_bA-bOa2bbjmn1ydqi3F1zjfd7MMrgyTxzc_nSTxlttjea2JNqbZ-zdQH3KHqj3S8tO2oUE1uFAq10Wcm33e0FZ82VNorfW3hc5HJeAVgCpcc2iVscEm6J1j5uW2cl_qvG3wNqbeqnY9S_rgBFWyHaLqKe4bbqXM10Hcs2G5itUWz2SFIDcauMqLgKAsdp9fEzzN0jde21N1HZPTuoWGnPzDLDJbQA7ASnYnq3Nt1dG3J05HZa3UdldYlBgRwyC_KVSjnebzle_HbDXfknLfWBOXPom6I_YkpIdAdrUSolp_BEkRl2epanENhM1qWbFqERoEZBHwm8EdWzvq6EaKrwchEclTZkrPpZ23y2tcLWyK4tf83_ZMtcfnfaG3bu3I82taN3ldrPsgr1q1iot3kgYtYYq9Gpiror54X3ejV_d9xpfbWKl3Y9pSp58s4r8K2SoEqhKqLPVsSxDJbHBJK8HNkqI916Dd28KtEfdLPS70t9LZiyEevLgy90sz2LATNbHbaRxysKCXKzYDcrZizyu8qk9oQD8q5KsfNd2o9iYdMH8KjYc-7th8wq9ZXIavuoKJBcveOQu9jGaJ2JtoXojmaJqOfMAY54DPm2e5xOcupk5gSZ4705hQHWBw-jen3czScXcMwJ2WSF-kZ2J9lvZGYR2KBlQIF2I-BK0bmXFQM41lGLIqRVyESQ84mFh-B9ajIXWBPk8sFwxJXH1iBTfIe_bfjjtZLyqgQIEdQlFQ443CBR1gU1jriZYS1gw8Jd_2JZIcRMLF5QekDW30BVg8t0Rpj8DOJTgrgF4GOpyAdA7AOHQAO2Px1vMAC9YRgK4D-B8geXPapa4dwAIAqDlUWK6eccVBhZrHBthAOzAHAESB1PCLgTZH99YFzZRiZ7TpIfYkYEIwqDsQ6kOawGQ9oA5DxEAUOlD4Q4wBkwMABVjaD2g_FR6Dxg-YPditg44OaAKg70aRAa4hbJa0aXzLZiDn4KMCwoetkSQXg6aETkE5BOU8Pa7ctnBYZofw8eLy2AnEaYUt7UhrJu_Kg-qCVWY5DTZNWTkMtZdWfVnzZsQtNiQPzWVA7HcMj8UKbVovKI5dY84sOKrZsQnKDyhg2HeLDY8j0aBAhiyWNh8B42JxOTZG2GsAzZTjH4mzZ8wPNkNZ1gEOOKPa0CtnDj1gZtlnjk4rtnyOxjjeNTVt47ONHZ8OXtls4B2Kgh9iR2Wo5wPbOnIHFR_961xK6D4E_ZFYBUMVgv2v2Q4mwThY3BJww0ZeGVPY4MvdnMSgjFythCZgFJNo56OZyIePSkv6F9o_Es0mASQU2XX2l1FQWBt5DbdsX0ZjwJYB2pQESeXWANpGE8-QYTnb0SRQtKwPaoYT6g4IAakJE484sTtvAmU_ONqEC4yuLaOSQETvE7C4JDqLlBJcTu8VEPwuSLiIOF3OLgS4kuFLjS42CDLiy4yT-E94lMTyrhIo6TjyFQRBTuUk2gJ7VNEy8NbUriIkqpKiJ4ktoDE8pOquRkBq5ogYU5WhRD1U4V0SSaIAlO8Y60zlIpTntUa55QVrnlO7NaQ8l4ooREVSNExCUU2gDURJASkN_aNwDsDjLo0PDylJR1cAJD4vBnExwTaDtOHkIbE2M_T2wADOORqKCVhQz9ixr4XyY2X3t9DRkFWNd_SRJGBVjGvjZxIjIbFoPAjBRQCjr_D09SjJPB_xmMk2GhAWN5gKUGWMBgVY3WMtjHY1f4ggbEg1w-gjo-Hj_9q4zjlbjO41LPHnKT1eNvAD42TiwTH4yxRdiX0_9ObjZ1UmCcSGQ0jAqyXYnDOZzwM4DF4TREw63iz1E1PjHBTE3OlVwIbDiO4QgIx6B1U549CNwjM6USQjzqBB8AsRX1WZ6YAaCDyo0RMMDj4YbPKnnhpzyM9nOxwQ6VPJAXGsDvOjgZIEfO0EZ88YTVhC_z6c23NIC_PHweeCrIlgVc7_P1zwWy75Jcdf0UjEopT0LcMnMCngDlAnjyVgaU3YiXOJRSQHlgVziM7gAozscGovOQXYhKd3z3C5AA83Ac7sjwoyE_jJiufA7SA43UEjadfEAi-UCiL9_yEA6aC0DiNIPd88M8BTxk90lEaNi4f8sjvyGGBOSIrU6K9PW88NgFIqp2v8Ojf-G4ve4Bs5CAJD_C6k9CLjt3f8MnHjy78cnNXgg887VcAMuInP1GMvRLsKLMv3_ZIDourLtS_EvbLwjXsv5cHJ1_P6L_86mAWLoNGGc7_UC_dJctPo3kicLwy88vArwuyLdfL06RA1yMGTQSly7OM_SMYIAnqxJnAFK8ug0rjy7wuuLny_Ywg0BJg9gkDwq_rRj0E1jORm-A04ACUJSiGiT_9jqUwkHrVM0SB0zTMxR4toTE5-BIru8FkkfELnkvDyjGc0ylqbMHQelAkUZV_s-7HuXLNtr7oi7NAkBsyZw-zIHCOumzMXC_1lriWgOu6cBnATWTroHjOv1zEc3vtpErnGVKPNPJGWvYLU82XNnlV71-utzT5N3Nvk-EypQDJUqx2dEOPZ2usDnRK1yJn7WNVMsYLUa73gxHVG-PAyvFCy8l0LGY2JhjZZa2a48bxM9LkhfJHyNt8ef-EhuPbQSSftTrMpVN88T6a7ovZrohy_0VlMRGLWBrgKQmVObR2xij2Hb625vOzADH-uKyDm4BggYaM1Y4JA0XQFuNxDNGFuuOSewrJ-k6W42v98JSxHotnAgChvhQGG_hvRwuDhs43I55S_teFFZKpvOk8JJeOyr-1CpDsFSa6ZvKAGa8SA5rr_SC9bNUEzaD9iAU51P1T-1D9uSKHt11NFrn7Fl0wKaIE6CwwmuUbVADRrViC_UbG_FcIgGqjqopcfPDRYy3csI8B8WEYErDQUuySgBWHBW9WJhXCIC9w4QXPAzvjoTgLtoTLb60juZJWG_tcekY268xKAA2nnP2AH272AVTkigDvB4fu7lIQ7i29RCrT3xFwBrQdkl6vupOlSXpZdHtw9uQg55V4VfXXxBJE0ADCCwB1gi-y78OyGxwJ4XETE--EzaWIGSWJDg6x1PYTukS3u_TzY0i9VbKICwBZ7kUGiTJT9dg3og7ke5M9OVOu6pQfhae7QBl6O-53v2r3xEjcrgnCFwAAr-tARDWsZI_zxeQmw1rJDUTXFMlxxFm9KrIgSMCwB177BEgfJxHCB-FYH802UDEHjXGQe8cVB5ylmcYYJlRqT4X0jBEgTc5iAdgNHFKhWH9DUHuP7myC_vh7tU71P7bz8EBTfEAyn_ghsD2E84PYCq8DtScNxw8cmrmCEjtKH9zGukzbbe18QpH03Ai5ncARHgeVA2C4RMqH7txof9HqT0MjeH3NA3oNRMUPqJNzqTysi4rzc76DO7JgLcPDImaHLZOH_R69O9L7BG0fz_CuyLO_UfnxijTLhq9yupvCDStxc0Qt20jC7i0iXu47ntRfvRb-ZF2JcAMoprbTyVGGovnOUG7ieTI6gKDQsnyoCxRUYIwATlJAEsmCepPOAKDRjrem6FIPzGm_kk6b2J5-wQ0Q4J4D_SPgKyjDTwQMFCrES4MnEuUH_zxCPH0ULYDSPE89qD4QjkLxxuQ5Gk0CbDAUPyOM7YUKmeg0HAATkwEYZ8WQXjuoPijIwG29CM7bjp_095g_oOF8lgkYOzExgmAAmDtg6YOWeC3PoIxk7n03AeeCD9YKBFNg-c52D9n3Ehtpw2A54RNuA21Clx0kpYCsfwXyhFGeE1cZ-ucsrkUPcNZno54WfyHpZ_KOC3Ex_MN1n8e4eMtn1wz-CxQol5PQ6nh_0sfBnmZRsfIwOx57IqXrK6cf0_ShCwucEGR_X8o3EOxwAw7MCRieHgg_1fudQQnCKfYA5Z0afUnFp-2c2nxDkue4nxZ-RC4n_F-xwzHrp4seKQ8wGSeB0el-AZyVoe_pOxTxkBDvPrOu7LOWXiUS1eUnOl57U1eIEQ1F9X0BkNeRT7U-DuTPfB9dcK7cow9g7b6R9Kvr4WR7dPeX_l8HVmr6-BUfhX9R8CRwHyhF9fr4VBGwAWtYJ6VeuQlV4xDTH8yKMQDIrV51fuSel8NRCg6kUKeun1x9cPSXzx-8fgnvx45eAngN6xJE3tOw1x2Lzi-Zfq7eyN4vjjXMCxIRL7N60jrXvN7yQN6NJ67vMnwMnKfcn4lnlgKyc18HO1LtTw09NL7Tx0vA0Nt6xoaAWtygG9EBt1efxXrK5peerkzzZcC346EJEZ3-E3jfyr7l_kfTJRR4Ff-ICN98dVHrjmjepHRV8-crH_N57Vv7wR_1rA7gR_tdPXmsJTfsX5V66fVXyMHVe-36l4Hej3lJ--tHXjqt9Qf3wD6twi3896ekwFYsXVFuruyXG51_Gt9WTDoQ44-PSIAWMAgnYy49Ax92Q9luPEZe4_LlOk5nvIBYJ_CBKUmHXDHaQGkDwHbxC3sIg3oCnjZLDvPwjNEkcGIXR3cEM8VnRqBHwcP1RPdDkBNl0nZDxOVvWbLrCPJ05BkDJhkOI0CDHUQc8HXNirinwJPIFBKgeQ5ogFSRUWLZaNws9Pi8A-vjgTsyrNDrgc2OuoACwq9ZKMNnFNxnr-L1fxPPXaOjC1Lfz1TRIAJDns-ecLESc_pPbszuu3PtDgNz3P5nHwxvPpsz8-eUAL5UtxA8uZIjDozCTC_9P9cyi_KzGL5c-4v5nFZ6uvDz5S_6cHz-HN0vkFEvCH-TryKtoI2CKpu7Pgz8i_HPkr9pwjr5nGI4CgXRQIwKF6r68_avtL8Pu_kxU8jB2qAr4i-x4HimKl_wUqWmMfTWnE4A7AVyCYREgdqnao0Y3xEAN0hBJUNh_8YsB6l5vrr_5wUY_TNWtszOlEQ9POM832uc7O6Qe_tPtnBblnv6L4xl3v7ElWsUBR799M3v-AEe_Gcc6_pwHkQH-0_NoaH8ejaHe1CtMOPlh2igN6d4DPNcD_CFlOSOQoNcBrzNqJlOwAMriEIXCLT8oxYf0H-0_2_AiYZeNFAHlZNvTjejh_F6TnCtMzzTqQXBlCYsEZwzzHM4ERaRMoiJUFwRnF8l-vojv0rDuEMx3tLqdADK4pSKAEZxU8LgFJP6cVZmK5sfgFmF-OdQn5V-pfqh3bvqoeX5F-4ONnHIVvo56V8hFPzpKdlyklASqSiJGpNFRacUM2PwhsS78M_1gXKOjDTP75USQLPgk_VC_9Gz90_wvq74pxovvr9c_mcMb5HNJv-Sx2isv0EMWjzo4P_d_uv2nBuv-vvs1npEvmP9S_fPqb7n5crf3_WV_45sNT_Ovor56_XATP6j-EgSr4uo8_ib4L_4_pr_g8bw3L7EOYI-8IsA0_0Tgz_nP2697MoAQb9nBhvtEFG_kv8b_Zw4_-T5rANpPv9YchueF1Nxypau3qS7fwbCIkiwO1Gr_NvmEEFAwoPb4O-RP1YnoNf9jZNtwzvzAAu_K_tIB5_RM7yRF2e1JXauTsEZ5VUR1wdTOyBbufi5oB0YeIAsfPA6iob74lfGCKqQP75wAbfBg2WCLG2UAE1_F4zoAR37_fZ1y-ICIBnpZAE-xG_7RfGCLIAtnCJEZpL__XBDnfHAHoACAGU_SjDQAxmywA1_Chwf-Af_PRCl6KYBf_NnKwRRIh__aNjiwQoLMfVj4buMMIkAsAFkAvECQAqgHZnVX7EA7AGCAvAH04VAHIKOw5fmJ3BYAroikA6QF6_bBCEA9sjwAxX5IAp3CffIERaAxAHkAsn5QA2YAwA035EfEfK8oYfhW_MFJOyXawDSZ3406CeB0uDaS04Y6Cl3cwDn_DiB0ud0ynAT0wLWK6x3SFE5mAHwFaqZ67eA_Vw0-PKLlIMz4hAyIF5nDUCMEZn64fJ2xwcJIEUAm-5xAu7BpA5n7g_Z66ffQKR3SdIHGAvIHDmbz4I_Izx44ZH4-IC1yn_cwDo_Zczq_In7b_IRz4_TH4lcZoEkcCIFevLIG1RL8I5AjIHdA_3AuAwL7zRGMJEaDUI1AyIGcwJszh_Xr6xfYf4JfeIBN_Gf7hA3oE4IJsyjmAQAP2SoHduPnBTAiXDX_UTiA3GBS1AsizIGLn6YARnBzWUxhxfHObeSM4FACXySQApxyJA5n78Aq4GvfMKCQAsXBDAqxDnWAszPAjIGlAkLg9mRYgP_W77G_O6RHXe4F_AoxA3AqSyBAmSwP6YH5hQTBSeQaYGUvdYGZ-Yv6jAyz7jA9SzOAzEHTMZ65zAhAGlfIf73XKAAN_IOgrAur7g2DEHhEZ65bAnYFWmfYFhYR4HlKM8yXmNID4_OEELeG4QhWIgjc_D7R-Ao7BxfLcgPA4kFRGXezfAjIGvAkUDFAx74fA6743-EH7GA34FLQTkEAgpKyFAuUElAwcxlAsEF3Ax_5Qg0rR3AvzJSgiXAIggIG92DKxsqV7ybWbEFGUZ0FD-FLw5fIqy1qC1yzA4r7kgyP7lfBICj_FIDj_YjIX8Kf6x_NYGMgmIjMg167a4NkHrmA4F5II4E8gjczFgfkGUIfqwlES4Gqgm4FHXQFB8_KMH_A2UGJAF4HyRN4EZAlUFmgksEZAzUG-QbUHFginhAgg0EJkfIHGgiEGBoOL6i_Vz6wg50HF-MUGpWXazLWEoiOglu7pgrEGFgqiJ0uDeg2g3azdA3TiW_QE7W_P0wyNJEGJABwFqfDCTioVwGE4QW4ZoLwGe_KBAzgxazBAmsAk4SMFACCBQxA3358nRP5BfQP42eVNA-g6v61_OL4YyVkyzXfzyrA4cw4oTYGxgzSTxgtID4KZMFrmXkFnmCsjQpVLLZg64H9gyX48_S0HgQhsEFmM8yM4N8Em_Vz5dgi0FIpZnxIII8Grg2Sx2pEcHw3bKTrABP6NBO8HJ_JRDxhGYGkg30EvglCE_wd8GJAGkHSBZv7fg_-C_gscxvXACHQ8H7DAQmEBXmMCG5oYKwPpKCGig3KTXyCUGP_BCHFyNEFIQkUEcXBiFoQzsFKQuCFYQisi4Qu0FLWTKyogjG4wKCZAGUN0HXhcEI9_aog0Q58GD_I66oQoHh3gIMEhgihb5_NiG-IDiHbAriGGndkHSmdMRXIECGpgzADSQ6xDvIArgSAnMEwQ24GM4fMGQ_ISGIQ3UFBQ-iEzAWSRHXDCGqQjsHqQkKGIgzSFDggKGEQ2SEUWLngGQ5_7fWDSGySdA42AlWxOyPmi15dcFDSJwE3g2b5uA3cFn_Y74Hgo4BPggf4UgrP5QAcqHQCQAGAZO8QOQhkEXg6UJXgwqJNQ1kTGAlMEs_MIyTmT66quLyH8Q0CFpgxK5S4WvLY-VcAl_X2jjA6z7jcKxKiQiYHl4bqAFgxr5a3dv4rUf-BLQ8n7Cgz4H-oKpBtUVaxPIAX4QPKxKJEBgHIQr4FOMcr7i_YuZqAmkgG_SgBKAqsHmAv5KPmdYDD8Zn5oIDUC7AxhyKAFH7ioLfho_RnBnQ5sy4_eGHOJCKE1gYfiPmJn4ZA6n5Sufe4g8H7g1WYqGLg2wHLg2JI_AcICVQjj7qfLcG8SOqEeA3BCNQ08GHg1KGUAUmH7AE8FACJsyJIL35jAn37DQ-f54ggP73gzaLB_EkHDmMkF0QqkFLApL79zCMGOQ7BDOQ1kFuQhMFf6PiEnAvyEcWF6H9BEKEwg-CGRQmzAa2YLgCAVmHIkC6Gqg4riGw42H_fcoIaIG0GWw_CGpZR0EGwiDhGwyJLhAYiFCfbwK3gsYESBQkHsQsyGtQ_0HD_ZiHSwzz6yw_qFUIGMGcQuMFKwwCEqwzyEdQbyF8gvWFouIiY7Q3MGufSUHqwp2Eb4S2E7Q82HOwy2E5nOry2w12G4ObSGRIbOEZAS2HuwnEHa8IyHl_P2Fiw2iEWQuv4j_dyBj_ZVChgukGcwxuF32KOH_gmOE8QoxCqwgSELQ3iH7eLMGmw6CHiQ2CH8AcKHYQ4nz9gSuEuwuJImwmKHa_fCAWw0uFFw3NAlw1eG4OFaxlIZeHVw3KEkQ_KEZoPeFkwrg4KfImGlQkmGlw4GyJJBICo4E0wu_amFKnWmFHfeuKMw5qHngqIHe_IaFyhfmFew_EFCw6ZRHkFqER_BYFUg7uF_w0iHguG6pUQuaGpwZuFtQ1uFSw2BFywov5H4NaE_KD0F3hYP6QI-YFlfIOHlWTBHhw-BHZfFr4jWNr5IIohF-g6BFufWyGdwyf4ywvqF4SM-EgXGsAb0TYEL3QeGfIEeHzQ3yGJXG6KawlbBHXJZLX4CSFGffOE5w0uF5w4-HbwyH740e6Hv_IX7K4dgGKI_eGYfJ_CDEIpJdCD66nQU8yNaVO7Z4WCD1Uf-xF4EvDlIFbA4ndryfuD4IW_SXYdJYmGEcbJJFJFT6H-RwFUwkaF9_LmGLeaIGDIWIHAIsiHewjaLgIsIh9_cWEtwgMEhwmr5fg-AANfbBHwqEBEB_CiGIgJBFRI1BGBwyWE5_ZYHhg9hFJIyhFJ_ahEsQz5B9_bJGMIir5kIgpGsQxJGF_N0HNfDv6tfbv5ckWz6h_Bz4BwqpGBg9uHBglhFSgchENyBpE1Qub53_Rb7L_EqRr_EYyFJTlgbffGzbfI_77fObzhYb6z7gy_6eCI4G3_DpH3_G77JQ23AaOY3a-IBgH8AKrhj2aPQcAgAFQAIAFsfEAECA8kHoA-ICnI2X5ESfAFBQl74KQs9LVJQfRi4WgGYSY5EgAdxFkwX_7AA9sg8AkFEqg95GDQHJLuJF5HiAgwEfIx5EO_b5EyAnRGWA4FI4YUqyviMtC0CYg6dJQICB6ZxDEIPvi3MZeh4KI8gNIHIiWI5GxFhITz2I0BxlKHIi_8W5gFBYsKReS04zfSlESOWLzd4T6j0oukS3MJlENparxiuW6EuEb6xkKdZEzfHzxUI3aEPgo8iceAFH7AfECrQGUCxAOnBz_KVG2BEpGII4P51yJAx2pDVFWBaVHao4yG6ontT4o-jiQAbICs9BAx4RPBSGo8zxaooL74I3Sy0Is1HfWC1ExAK1HEohtKBuO1ENpec5xaQxzN4EXicIrGAlQi0hPHEIw1Ba87YULj4uICESjeEiATeAugJMOZ7l2Ejzyohzy-qK4J3vQdTpop96onYT4gBZwI5ooh7kYKEQHGdi6-RGYImXeq44uTt4LBUIxtOMF4mXEl6p-QyKMvOzRYwQ45xCP6T0QEWTX7IWK37BgCmsI8iGNJxLoUNY4wKLGD7kCA5HkGtx_dIlBwHD6APILI6XUC1jowXI5OI_2KfaWcDPaOGJHkJI4bYVI7WDPSG1gAYKXI8gCRgEETNcIt7vkZ_AYyK9E3o5KB3owkQPo2I4vHBI6rgY9HasEIAeAIYYGsBY6GwddEoHLdG2cBY57BAY6lsIY6lHYA7DPSOJVHUNiQYyNj1HWaCNHS6CmGFo7OINo6cwTs5dHSUg9HUYhEhLphFsJ1hkHV1iwYgwxrxOtgTHGo57BaY6tsWY7A4eY61HANhLHftiDsadHAYylCHHDBL-EC44jo6j7mJfBLsJSgDEJKYB-JCRLc6AZLUJPBJ0JW4CMJZhKwYaTEW6ThL5xehJyYkTH8JGzJCJaRKiJFTFiYqtD6Y2RI2oXTGKJKzBQIHQgNARgiWoZuYvxbhIKxbWKfqOABsIGOJYARIBBQJ4BxSNRI_sI-BfxbuCGJHVRjAAhKSJCTGjJXOJoAauJ0RBTEMJKLHbQXID9AK4DWY2zHNzJYD-kVLiWAEch2TDIAsMcYCYmcE5cmK4CSaCgT6AfHpiISWCqIcJzKMa4jeYrRIoaByBHQZ7BxAERKehMYA6YhRLCJTYAX-MbTOIo8gpYuzENAZrF4idVh7xc2LCsDBIBJBxLCgJxK15QTEgYCCA4YKZKwYTRLi5bRK6JLTGlJAZL5JExJckdFHbJa26WJCqHuYRE4afLVSHyKREsgKKCYnDbhHycz68SW7GXYj8D_wZkK_YY-54nBBGbQzCT9JEbFHJYZIaiF6hnJa1wXJARCNqZnCdQ3PBXInqEinVZyMEaHCMEJihPYydILMciizMSiiaoGeJ5mRqCM4JDTDURggDgMXCq6e5LhkXn5FUYALIafaHI0M7AyIZGi-SHULPJDBwfQ95IFkRbT3YenFxpe2gaAg9w1RFfz6AHnG4BCiii4TpiVBT8iAaahhV0H5JxoAFLq4fz6ewl15anBBG-ww74HJX7FnJCLGUIIHGpAEHFxoMHEJACHHdQrJww4znQqIa5iYnU5gb2IoHw4xHFzMa5iPY-IgrMbeDTgO8CIAHHHU4ivAtmInHPXOzyk4idSfkCnELkTZwncGnHHkOnFJUBnFcURNZC4ibS04jjjs42VSc4p3Dc43qgrYfnHsRNHFR43igi45Ghi4kF5j-GsICIaXHjgwGFd8PjG2ySQBTYoJJESebEgyJbFqJFbE-YqAA6JVYKbY6yDbY4xK8xVpIRoruAUSNiRQceXGtYARHnY1HGbcUGB93ek524mGD3YpU4T4jyB30V7EzfTE6fYhwI8UH7GGJP7ETJdXE4ITXFTJQvFv_DRDR_cMEdMcHDK4BHGC4rbi24i7H24kyHYIJf7ckYnGLkR5J3KODgvA4AL34riiP4zphK_Z5EkcXqhNA0k6dMXyQyRJxB_-BFjh4wyiR4hRjC4kfzZ4z8ij-Iqg3AoAmcAEAnHkMAnZWXPGvKb5Jm_NZKnwjL5y4xfEyopXEceFXFr4tXGA4_7HA46ZKg43NB1mPJFxIyjBH4qxArYU_Hp48_EvMMig0Aa3Ho4suaR-EKGMEE3FsEs3HIGMZi5oW_Hg4L3G4kD_HTmZ_Hyg1_HiE-2iSE3ihf4__HiUP_EvIgAk-mVPFj2UAkc4gmgQE6EJrWe2iLaHPHwEkKGIErQkoEnQn1ed-h54prywKKXE4Ew6G4gp270nBBGmotMSCgkSHXYvE6s8FLCYnSlGJ3cLwio_x4SUIW6q4_7Gb47BDb47XG1aagn1_GpEywhgnLYE_GcE7VgX44fFHyX5jwg3gny6PgmPYU3F4nc3FwRPJA3AsQRfYQFhvMa_FIIGZRv4iXDcguzxNgoH6yE4cz044sA84wAlPwO3TaE-PG6EpnEZ4lkKf446jf4kLgAEnX5qE_onR448hwEtMgIE4ALJkZGioE6kisrFIBUcIqji4mwn54uwmUIXfGiPRwk4I97EuEmVHghN1EmnUIkkE8IlkEiZIUE7YkV7WIltwmIAdwkb4DIw_EHyfQDMEkfHI49gmrYFgnPSbgnFGXgm2IfIn0nH5gthYom8E7HLoARgjBwk6ilE8xCAk114VEtpEaIaolyE1EgKE1EgzEz8j5g1YlP49UGNEz8g1ElAmtE3_FwcVPELEiYm8UVQk_4wwmi4zR4zUdAkg-H7CS4rYkOEwKwKnKkjWA2-HvmbxJIg8JD94zIFowx_g0RL4kj4zaA3Yy_GT44GGP8DaQz4xkKSkkIkzwRJBb8Rm4HE7VFfYmGGRA1fEngUglykyInkErXGUEgUk4IdUn747P4HMXP7PEw0lJE14kpE1gko4jgln4n4k6knBCiE9lzLYFEmukqxAKEzkEJWfUF4ky0nUkGonekpBBek6UFJgwYnKEj0kh40YlUkrkShko0IaEp0nUhZAmRkoihgEoMmUIPQmJklnFZktAn-k3MmxkqwkFk9EmmE40lpkcwkpkgHCWEoMnJITkE1kuMl1k2wlFk-u4Vk9gAApOlyPmLfikQ_AnaowgkpkzUkcCbUl5k2sBREg0lNkvfEWuapFJhGP4MEs4FMEm0mJQNIn2k74m_MM4ElEnIn8E_JiCEu1LCEoclHoY_Czk90mcguok5k7IG4kmH6lkgMmHkuMmUIEMkUkjQkx6XckFkNMnXkqxCZkx8n5klsmokJQljEz8kS4SknDEscmFk38kbEyYnvkpJAnkvsEzw8wAXk1EhzEwCmVk7onAUnBBLElYnwUxslIUtklnAhskgUlsnYUpBBtkyIEdkx_hdkj7GHE8v7tIUIEeEiABeUCnh-E5lEBEqIKuWcKSKkyIHLfBHy05PklrRFIhj4-EmYRFOE0U-ZAsUv9yrEQ5KDktCkWAEckEU4qgQU2sADfXpF2Qp4kJE9klxkuckOkj4kykn4mGIVclgkuaqQktLwwky4BwkrU4IkiikvkwMkvkzFREksCmQU64j7kiynPIEogyUnCnpkn6zVgsaEwUy8nNEpymekqyniUsjwkk7ymokqsn2UoxBvkvykfklyl_JSKlbsZSnZk6ynNk2sneUvCmThMClSU_SFOkhsnzg6Zick7vHcku0G8k07FhEIUnzk0Ul4nDSlT42b4aUtETz4qwLdk51FDUSYHfY4glak84kCISSlUEn7BWQyhgfg82SRgEonIAg9xw45IlqUxcnCkjIlII6MFiw1XTHkkwlQU4ALlktMhkkt2jhkB5F3E-ADV3Cl7IoRSF3SYALfkmMkFkf8nk2EPEJkzpgLU1MmWEiPG9EyAnkkj8kMku6noUlKnMk0fJMsTL6cUxXEhfJqmnElqkb4i4kHuK4kdUw55xQoHB3gKElhQRIk2w7IkccUol2oQalW4kalsEjSkO4spyQ082S5Et7BGU1rDiqHfJjMGZRTYUkHTUoOLhkG4E6hOCnnUxCnHkFCkXUgwlpkValfIyvRFULqmJAYALtEh8nv4qmlpkMKlxU48h7UgCkHU6Mm8026nLUjAmMkrAn_JFkm1wlJFvUsikHRCEJDXKBCzIASnRQuilCohimFBJinYQtimIuKWm4qaE7eEvikK0ypBtIbtRfUgcmtUn7DtUn7CNqLqnhIGyHyU_pFOWRcglE8El6UmWnMEKGkDUxIBDU60nw0u0ljUp7FI0x2k6U2tgu0tnrQk9cl5EgQkFEoQm96TmBO03Smg0z2mHIDZjK0oiY7kvJCkWXEizA73GE05GjE0wEKOUmAnI0Rmk6hUPGdMJakc0q6n6Ensii4qYnU0oWnV0n7DXEnYmsk3qxcxcbHoJMvFpJcIDV4l2JgYZbEaJBvFN4vRJKJR-Bt4njCEQLzBYYPbE1gLvFPhMcCWwgaSFUkRHikruBeE8fEr06gAVU9qhVUl7HQqCql1UsJENUoP4nExW5hEn6ltUvUk74gGkmkqAAYIi0nH472nfE9Skb0x0k_YF0lukrykP43ylkeLRFXwomklkzEnJkxans0-ul10hungM8Cn2E56my4pwna0-qk6ok-kiUs-knJC-mXE_UlN0keiTktnrTkl4k0AN4lHyZ-npE_2kx0v4lQUt2mo0jcnAALcmpZNOlIktlwEknykdQeom_0k4KzU2ymzEstLzEkBmgk2cCoUoCn3UiBk4Ux6k4IbYmNeEikqk-BluEuWlUUxWmicFOkIWVWmso5in_wTWkcUg-kAqXWn0nbqL8Uw2mCU_n7NU02nn082mX06InSU7khyU-4l9Ix4lhgpSm4MsPTzkwhlLkkfGZEiGlkM52kJ0tGkwARggNAQCT3Aa5gG05YmX0CalMgz-mLU7-nTEgBnCBAuk3Un-mbwguHbw7EnWE4WmCMkRnoxHRHJIdYCz0sXTz0h-EJJAQBJJKgh8kz5DKk115L4xqkr4gxmDJM2ka4kxmjko0m3EmP6NqBhlGINEkS4bVTABSRHxEWukMeFhnhAekmgMoRnNk7BCiMl6l4E0ik9kj6kVMk2lVMoxk1MtBlX0nXG3Eu-kJE5GlkMyhnUM53K0MsnT0M90kA4HOlpkdpmfkTpnM4wWlfXXpmbUoZkPUyBmDM7AnQM3AmwM9RlpI0pHdeEWFq6Vnhr03ikiQ3wl60lWmFhQImVeQ-76M6Znr4lBnGM-ZmmMmInmMuIlTkw_F1ebBBrkqGnrMqOnbkkEmLE3glJ08olsqLZl0Mz3GhM6kitM1EiHMi4IOkmum0485ndMgZlXM4RlPU4D4wMvYnOE0pnS00OlhQY4llKfskzM0FlGIC2lGIXXF3Eob720nBlsMmGDeMyUgY03hwlEAOkRMtxnx0_SlJ0sVkjRO5gDoUizNMxhkwAV_GIUHULHMvon8M2JnkALeHaIxJmnM65lUs_ClpM0fIkQ0vFmOKFFFJHulXHQyD9069irYvADrY5vFckTWRj0q2QT09mTT07KkYow7HwEGZGivLjhL0075D4pxlHyUqnr0ohnxELek705XFqqfenjM-Blqk3enAssSlb42pkYMhpn30xgnDUp-mjU-cnYsm_FNM3ZmqsuzzWssmARk1Ei00pFH00mmnyAp5FVs60GRMgPxAM_FncMk1k3M41ldstknDM8WnJI2qlJsw-kIMz6mn0s4mzMjNngsupnYITBmmkkZDmklZl34vNnvEgtkOklxk2U4VlIs-k6FEkQk7MvFl7MphnhkCtkwo_anVshtm1si5lyAz5Hhkn8nFkqCmIE3ZBts4Bnk0sBmUsntkt06lmmsu5m7EyWmPM0v4uol5mdSd5k8U4ykhWb5laM-il_MxikAsp_5xodlkgsgHG5obllmMvJBYMqr6ws8MiqU_NkI0l-nrsqxAIsihkR0zcnIsmhmosu9nXEAykbMBElKs9MIqslpnhMtFn3skmmcMtmkvsiJm8MjtkpM1EjHsptlnsz5EXsz8i00m9mns19lcc7tnicvtn2POlm_sodmgIgDknUVllI3NNnVMjRDIcyFmocnpGWMhSk2M0OHg0h-l4Mhxmrs5ckkM2On_E0VmR0oEkSssjnNs6VnB0jxlysizmfM1OmVEm_G0c0tkHstVmfkDElRMgKGks48g8c29nUkGtkkcDamCchtnCcgWmicztmXMz9mSc2lnmsyVHsAS1mSAepKNJEjgaA21nCY-1l14gen1Yoekt40ekjYnbEd46elZM8FK05O37VJJIQhsxeEaUyNmuvcqmrQh7Ev0ufF70prkMshXEyolNnxssdnfUzlmTsv6noM6-kZkhICCs_Tn2Mn2mfEwtkuc2sDv0kJnwAAmmYAOzy4A3QFFUcAHCAjIGiAn_5JMgRkScj9lfs9Kn3M-llwM4dm9kuoGBYvrmIcuNBqc9MhLM2gljc3NmP0ldk4c6NlcE1ZglErdmuvHdlv0ktn7sstnhkFbktJNblCAiYAiA0wHUA_plic6b4xcsWnfsk9CvUv9nrQsv4y04JnCQ1OEfM0DlfM3LA_MoLIsoiLyF_VNm9cwxn9c3UlTsrNk_YNDmN_HNlWkgzmTcxGkkMgjmdETxkfEjZnY06zkbsjyCUczFkPpItlVEvdkLciQn7M1-w6AoHm9eEHl4AMHlMICHk7ct9kw83tkHcl0FHcmTkSM4dlHE1pGIM8wCiUlTmk8wbkLM9Tk305hHWMh7k08ibnYc32nTc34klEgEmOcrU7Akoon4coOkQk-zlfYeVnUct-n88uACLczznA8vAHA8owGPfLblPs6LnQ82Ln7c25mHcwGG2wIaCQFXkH4yOVhUfEADioaNaqIbFwggbwAZAAdhYAH0DkgMwYgXbHTs5EjogAZKA4AYvnKwQxA04EllXDdJb5AP8DdcbPnnpTADkgUsR5gZdLL-GmSp80sB1ocvlDqEHRXDcj44uE1DSeW6auEPyDhIKvRhENVDwYK4YAAPSrUbARwAquWewsjEYwJhj-IqiDgyS_Ok8cGVUQ0_NIQuzwX5t2AWCmMg30O_MpExfMMym_NxsBMhGxMsWn5Z_JL5h_LgwUoFpkSbQZkM_MpEEvh5ym_Kw88bh35EvnP5j_Jpke6OD0eiGn5gvmL5G_OawbCXISVaBv5M_MF8hUAX5kAsNgCayMx6mO4St_Il8e_P7Wm_NUxxmJESpmPkSwoCcYf_JwAiAuQFM-hAATrN8xM_LmgC_IP573ESig9I2x8AoX5xfMX5UAppk1oEwFpUHn5quTDRT6DT5uAAExcfMo-QmMT5qnl9AK_UnSTxx505oHU8cwF3wCgHkA8gCAAA`} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  createTooltip\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            // if (self.state.regionType == \"province\") {\n            //    console.log(\"fetch muni Names and codes\", JSON.stringify(jsonDataFeatures.map(d => {\n            //         function getMunicipalityCode(properties) {\n            //             return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n            //         }\n            //         var newState = {\n            //             provinceName: self.state.provinceName,\n            //             muniName: d.properties.smunicipal,\n            //             muniCode: getMunicipalityCode(d.properties),\n            //         }\n            //         return newState;\n            //     })));\n            // }\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName() + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}