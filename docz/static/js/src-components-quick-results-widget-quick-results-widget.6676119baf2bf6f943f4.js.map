{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.mdx","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.css","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.css","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","loading","react_loading__WEBPACK_IMPORTED_MODULE_7___default","type","color","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","concat","parties","availableCnt","party","b","legends","getLegendXY","selectAll","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","menu-widget","margin","category","floatFormat","colour","key","radius","pie","arc","toolTip","selection","tip","toolTipHTML","arcTween","_current","t","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","PieChart","_this$getWidthHeightB2","react_default","getProgressVotesCount","progressVotesData","parseProgressVotesCount","Completed","Not Completed","submenu","label","active","provincesData","metrosData","getMetrosData","CustomLink","onClick","React","e","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","_this2","activeLinkId","handleNavBarSelection","link","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","MAP_PREVIEW","content","icon","map","province","metro","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","bootstrapStyles","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","comp","quickResultsWidget_assertThisInitialized","_this$state","barchart","Map_map","RaceForSeatBarchart_barchart","TurnoutBarchart_barchart","piechart","SpoiltBarchart_barchart","QuickResultsWidget_quickResultsWidget","quickResultsWidgetEmbed_className","originClassName","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","quickResultsWidgetEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","QUICK_RESULTS_PREVIEW","DOMAIN","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","muni","onPreview","replace","QuickResultsWidget_quickResultsWidgetEmbed","MDXContent","QuickResultsWidget_quickResultsWidget_classCallCheck","QuickResultsWidget_quickResultsWidget_possibleConstructorReturn","QuickResultsWidget_quickResultsWidget_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","seats","getNationOrProvinceName","getSeatsData","seatsData","parseSeatsData","percent","getSpoiltData","spoiltData","parseSpoiltVotesData","Valid","Spoilt","percVoterTurnout","eventType","getTurnoutDataForAllEvents","turnoutData","parseTurnoutDataForAllEvents","getTurnoutData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it"],"mappings":"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","file":"static/js/src-components-quick-results-widget-quick-results-widget.cfea400b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu-widget\":\"navbar_menu-widget__VPoXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-title\":\"piechart_chart-title__3WNCY\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\n\nimport events from \"../../events\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"quickResultsWidget_tooltip__1X8PF\",\"submenu\":\"quickResultsWidget_submenu__Wzs5x\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\"};","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        to: `2-${i}`,\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ]\n        \n        return (\n            <div className={className(\"menu-widget\")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatBarChart from '../RaceForSeatBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || bootstrapStyles[originName] || originName;\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\"\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        this.handleRegionChange = this.handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      if (newState.regionType != \"municipality-vd\")\n        this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    };\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            comp\n        } = this.state;\n        return (\n            <div>\n                <div className={className(\"row\") + \" \" + className(\"submenu\")}>\n                    <div className={className(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results for \n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={className(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div>\n                <div className={className(\"row\")}>\n                    <div className={className(\"col-md-4\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatBarChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap {...this.state}/>\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport QuickResultsWidget from \"./quickResultsWidget\"\nimport QuickResultsWidgetEmbed from \"./quickResultsWidgetEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-results-widget-v1\"}}>{`Quick Results Widget V1`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<QuickResultsWidget />\\n<QuickResultsWidgetEmbed />'} __scope={{props: this ? this.props : props,QuickResultsWidget,QuickResultsWidgetEmbed}}>\n    <QuickResultsWidget/>\n    <QuickResultsWidgetEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3yxxz\",\"chart-title\":\"barchart_chart-title__3RHv6\",\"chart-body\":\"barchart_chart-body__3x1qF\",\"percentage-label\":\"barchart_percentage-label__zQdUV\",\"chart\":\"barchart_chart__1_lSr\",\"large\":\"barchart_large__cgVCh\",\"y-axis-label\":\"barchart_y-axis-label__3UnAe\",\"y-label\":\"barchart_y-label__1I4tN\",\"annotation-line\":\"barchart_annotation-line__bj9Mi\",\"tooltip\":\"barchart_tooltip__2BaaR\",\"grid\":\"barchart_grid__2TlS8\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__1j4ev\",\"chart-title\":\"barchart_chart-title__1Jyfd\",\"chart-body\":\"barchart_chart-body__1kYVj\",\"percentage-label\":\"barchart_percentage-label___T79M\",\"chart\":\"barchart_chart__39bxI\",\"large\":\"barchart_large__2FPoB\",\"y-axis-label\":\"barchart_y-axis-label__2jJOX\",\"y-label\":\"barchart_y-label__1JqpW\",\"annotation-line\":\"barchart_annotation-line__2ve98\",\"tooltip\":\"barchart_tooltip__2MpDn\",\"grid\":\"barchart_grid__2s8E-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}