{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/BarChartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchart.mdx","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","chartOptions","percent","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getRegionName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","dataLoaders","getSpoiltData","values","spoiltData","error","console","data","parseSpoiltVotesData","Valid","Spoilt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","SpoiltBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-spoilt-barchart-barchart.36faae3e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); }) + 1\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"spoilt-vs-valid-votes---bar-chart\"}}>{`Spoilt vs Valid votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJGcIVoAIaC0PgghJA8GDyBI_hVVQAV7SgmC4Jgi8iECHJEPYZDJFQ9DPg3GgcLwygCKIyjmMkIimJFc9WOyai7Q1dggylN0TQVc12gUh1gHYTQfHkVS5XaAABGAiBEAZUAwrpNIDVBdFRY5TgAL2cAhEmxdhuHYYB1iiARnlQK52gABnYZMZiwdp9xrGZOxYWdgoAFki9gADZIui9YwBAgAxH1oESYL-GcQ5EUdTB2AABSEfglnMn44DixEsprHKaGcCBnMudgAEYkpi-RwXs6hHIAQTmLz2EjHTKOgdBw3YeROS8sRppjGR2FRDyYG4YBD1c9zsXkbda2AOaoAW4IADJrvGRJ5koZoLqu8xuHe-UwFCeye1Qdp2AAfg2ebw0jFarhe8MhprKQZGrd8zFhRTMDAMIoCmMHVvWmGJpXGtE2UggcFyzIUmvAhTtrOtJJI9gt1XRMaeYmS2Lpym60kQnidJ8nTqkXH4bMb8QB4jCM2w3D8PR0SSLIiiSIArQKBA_QGDoxTCaWHT1ywrMDI4_gzSleTaMg9gjBCOx0GTQzOJAa2TfVh1ts8g2QBwT0mZFOXiOYj44DgR2zeAKSCH191kM9xjZet8jfZFIP6K21gUksSgqtnW3-AqVgYAtOAU4tfwLRmWcTa0qYYFzgSs_dz0Pa9auCEDkAaKdqZdEgOc3YbhvO4gQpW4rnz1jPISCO1aJXDMcOTUjyQG9mCBE8U3zYpguAYHH9GADURHgSeCFcGKLDPcVnmoAA5H0mVQWekLrhfPXCaAW5o4bWBg44p_FGV4DwSwApujeWTGFC2vUQqQJop_I4YkRS6hmL9Ow3k14WDgQQSwD0ertG3lMVgdgd7xC4OwPetA4CtQsIkMaWBbAABlXCBCgMFKq55RT2HPJfSwY0ADi54SG6ksOeZwFD2A_AABquBoXAO8VVmJFXGOiGAJ8WiEKgIyK4ORuBrXQDgOEiIaDKMSKoxkuVhRRAIFcT-ajgFrSsYydgABqeUABSWy8h36oC-j9SyPQoD-DgNfY8kZhQDzQIEmAK1UGTjHH0cwLt4AAG0QmBXCQAXXYAAHwyXsfoKSb40WhmYGBGxmLQK_l0P-cA8AND0AIKxDRtRTRCh48gfiA7sC9pXLAoF0B2B1pmKYa9VwOTRKEKUwpIwDkoHcSJDMtqhDhJMwccBPxzOKZvKAzRvITFsDRKmFgdlwBwKiLIU0on7NEaEIgsiRQQHgFcAArMoi5Vd9DangOQfoiDLJXH4AAJhCv1dg19fp9kvFsX6dU5kWC6BfVAmD5i_JAKgaIll4hQvxvsqZfx7IwHCUijFFyLBEG-hAfFdtCVEpJbRRwmACUgGefsu55AHz0sZRYaGFyIDNCWdMo5qArk3JiPAWZmKqaHOOUfWgOABXXOYnc5B_ZlkysFfK-Aez9mcqZTyqZdwwwwDhQiiJI8xW1glSc6VsLLJGqmrqo5VrqBGo1VTLVVNuXTTtbooQOLEThNFUSgkthJVZC9b8NAvqb62uVdi8NeL8lzNdbWd1vK9XUrJTff1RLzVSv_Gm8JUa-U4DzfG01iaLDJs9Wm2lxrzn7OzSGqtxYC2ptJdW51tYy2cB1cq5lD5M0XPrdK3tmilWFuHe2jlw0B2EhwEjEUY04BVUvtwqaEq50EAXUu7hOAPCqEjIc1Zpq11YHopu5dABVfoq6Z3rrPdwy9EAd17oPROwNRy_AYFgOfSyTFZzALffgSoX6DU_o_WkJ9GB92EkPdOoNH70CwBqlXO5IxzxN2vXBoDMAkN_BgKhpuEHHwvtXFq4ZmEBnai4PqNoNBMa1osOshcWy32volQtVwIwoNBrPI4Ggrg0BRk5EsQdETX0VK6FUmptA6nxAaVNTeBApMZCsZGTGWiTUBo2WAHA7HONadPGOXjR8BMCDBksfTFqIkJqWOgH-MBKkAKATB_Zh4rknnimh_QtDbCgSjK8gSOBzxiKqrqUUlgAD6W7hM3pPRqO9zmqaufJjgDzTdvOonSKZ_zzccCinPNwhoupL7hfsAACTGsu880XMOfpgN-6gv60gJdrEl9zXZPM0HS75rLTcjllbGmFyLeWd4NHPAAdWq--rDOGUMdYIM1wpmK-K6x1Fwc9MxbO0Do3MtjmROMSp4yBfjLpTNCYA5Z98Lqp21mWwMsb0AoDntQOZb6BBtumvQVNAVCRX2tZoPq8yuc5tdcy5GbLRygshcG1FgDt7F3LuaxYP7RMuiA5gMDnzoPwe5fy4V4r_XKuTcA7V-rqBGuibmcjgHvx0dpcxydsHvWcD9eh8N0bE2APwcQ10XD-H9CI98RKAQSmZNQEjOJ_-Iv6nagW9diwXO6sgYa2BmAjP-caf2cUl0Iw3KnO8tlnTY5-NQFYzOhTuutva4t1ZzFi2qZw63Q-97FzGObIw3AMTMSBDmG19VWUNJIxeKlJZcX8BKBQFzksLo6gIX9v2QXVO6dZzHJTpu2cTv9MVKOX8ZyuhjMnY-DYS6l9ixwASSFVJWslBGm-sH6gkY-gQDjxciT4fc4N_6Mc8kLwnyKDfAk3qqSBccoF8tdtdvawO-XWrmgzfk6J4zikY5rhc7OFT4u2cXH7X2ez11PPx2MiF_miX8o5fK_sGKE1YS6MLRx3QZGAAJMAM-SvUDhK38G2gnJlq6NnMUWXdkVMCuM2eGc2M-82GuVMWueG1uU0BumAxmJucyya6Cl2RK6ChuqIQgiQYMr6n23kvuocH-h2fGJmZmlyCQSw32UASwrS_i4StBJECCSCAu5qY41ukYVuOaaBk6gBtYJB-egmkBtYXQBAsSxwyYxyC4EKH-WeOAOe--JmPBS0cyq4U4GQ00c-oh4h0YpqVMsYHAdBAc4SfAIAd-VEIA7MAaBhvi9BN8e0RhASN8kY_cS-9gzgzgQ254uUDQYijids6CFoMQBAsA_A3-Yg50TB3yo0hezERqBkM0L-cK7-Im3-nIVwsMcY0K-yNh2RLe9mphChR2Jm_AnEeh6BbSThx4DhlR7-_AgRXg6AiQYRBkeR-yEgu4sgbRmRXR5RyhE-SOe2LhxRJ2ZIyyc-ruzGhyr66yUsOoU8tClAnYGh3kY8cxh8rgKaKyMxX8m2rgixyxAgiqCSV-E8CxSx04qSHiFyNUkQNIKWCQkYexBx04KyOAEwdAgetev0kYdiIqOk2Rsx1-8xR8U0fxZeFer6Fg-mum3CmQMweAwxpBoxo6dw5m6xU8o-nIHw0QlEYOAgQgRw6mDk4e_4GQhJ-JhJnIABq4sJ8JiJihKJdqNmmJwhUBX86CGxtqG8W8cxpCB8U8TxU8YxfKw-Xa00AAhKgW0fgaInhg4CREiYIQIFQaEJQRQTQbYcYTfIwcxMwZZNsdkdkRgbpi4SRBsVrG0fwKolwPwEigFB4JGCFIoH8g8k8iFNyAylaSALgnaXbA6ZGK6e6YoB6fwNkWPiRjPMNOuscPZmjAxLBCRDRMLKLLdhLLgjLOJJ0izNkIrEBHnqrOBO3EpFqFrI6OLHrLXEbKIEPKbEnK4bXL3J6K4SvA6F4CIFgbMG5DtHYG7O2c3GiLMLuKiICAHGRC-J2TMEWmgP7G_MPPEr2RHO7D7OgjmTomcHOXWYpODo2fXJ6ODq2YMquGeOCnXqgHNnAIymeLcT6gKUfDPLuU_JIEvOXFudpKuGiAPGkLBHkBEEQHNg-T3HuZIC_FAJuUUl_DGrinAFyasWODebGjBYKYemYEHr9FqVUarskmgPYLURmsIdod7uwP2ZOd2diEkrkjhXhceOklkltEdIkthWTtRTALRdkkxbhXYceAUsNI4R0tHMzLJDkNgD0n0uRq6LWmRqgFgWMhEKZnanPtCQslGApVCedjmmcm0RYNIeTKyv6S-JSgGtpU3O8nAJ8hANEUFHbACkCiCmilAOwKeZCl6eUVTA6vClgkiiiqClAIZUZVBRGseGylpewMWkFRSi5UZbWI2nShFeykSsOsFXwVFdIWeReVcAkqkuGZGclUWBWatugNRq9s7kSpMe7mpSebAGlb1mDCFe8ZsKgF8d4vXnsYpUZcUqlb9BeVNHsQkvwHsfwKkn1SAPEFABeYNUWrMGDugGkFjNkGkMNeUOZZZYNcoVFdCUxlIQQBwcAJ1ZZBeRGa5R2tiXEAQHieScKFjCSbALOgSRMhdQINSePnLnlfxAVetptqrnHgMXsOeSZR8l8r9OTmDm1cmv-EfAFGOPIfEIyO8ZQIsSMBkPYJSGDDgKoNgLqGANGMiqir2L5SACtB9BaL1OwLdCFeKmbjmvqoalgl5N5PwN5fZWEWyVmmbuwTmjNNlqZctb9FcODTBGeNDdYlHq_kakigFUyAyqOreeSvwGNvANJuYMjfMPwIdQGgZAuJvCzbBkcubhzbtf9WZYDT8jCO8QLVDX8UtGKYmj9dQKTkasDTWoCV_FwXrj5O5WLabRDYLX8e4tkWwdtRza7V_s9bldQCAZxk7eUZ-ZiEjb-ZEGAdjizhFlVGzuNkThdqHauNQOeLFvOvDtwiDdrQol-XHaiAnU3OARDsFqFincuhndwaHRcmoXQNOJocXcUiGGNA0JfFNK4TgF3T3WpcUvRkSjpfoA-PFS8obTzZZFPfsh7VgksOtSFRLQwSFWFUohva2sWPPW6lsJPSFXtTnb1uGe7p_jANcaVRyX0AhbirBdLYhRsTgJAOjFGC8GZFjB_UQDKpGh9GvRmmfmpYReYLoVFQYVYUSkmKmEpJKN0KYkcM4BKAmQqcxI5UJewM4DzewNwplrjeYJWKmCFTYY4SYedCxdjTlAIEQBaCkEIAsi0ZA-A34owmIOCuTI0I0lICwwuEw0ZYwGgDMOEGUetUZe5PMKYbQN0qUeTRUVxbtOQ_I5Q2YhaHnkIPjd_iI6I0SuSHA8MJdBkKYYEYyWCCALIxcsru4GkHtDYuduzVkJzVeBPegHzWbZDUTL7d_uY_svTEdTuHDLIyQyxTUUo_wFQzQ3Q20DMIw944mDw1AGw-htwwwrw7E3WBshChhWQ6Q84WEyo2o-Hi0Vo9oy7jDQo1zQDRZb9J2iU79eTntBKifW8pU5ZeToRlvuEWkxcqPbU2PVVV1UzlEDMJGN_VjD0700ZSA9NIwNMuhdsDAIkHtN_QZH8Us7QEQCdMAMs1ILM5ZGIGtRMxcstF05qmk1IBk1KHwxcj0VczkZtDk9UYo9qUEnk9Q7Q_Q9EwTSdGc_E2IKTlYLTck6w2cxcx3ME085hco28wUxo60X41Fas8AIvfMDUyU5Y3-g0zOnbaLVgm07upBget8_C6IwCcS7UxU0bVU5ZHDQjUjSjdiejVgJjdjYzXjczRKd5MTaTXdCc9YbsyyKswzfg-ipYayyilADs5ZbcyU6i70zM5ZewIKyABLeIBLZK79NK9o_K-hUq2muQBZUQu5OIHqwa1AC8IkOq3s7y7WNqz4rq6Svq3FGa-5BaKwOgOIKwBZJnCwFgbEAQJa9QJq9c9xJ1UGxzAE2S-M1FaHjTfMOwBy3bGKyKytLdMUxM0E_IyE886rq8xEx8zE2S8wykwk3feVOEkC6k4W_w6C1k_YRC3UeAPkyBOo0U9a6U9YntAA8eLK4c3UyrjY1jAHTtV2z1Pze40LYyMtAZGGyU7awK2U6YeIEg_0-wB7DgAG6gDO9o1G721TBLUhaCam_u8_UM7yreWM229o1M3O-YPM4s8ABLb_d24qwuw-96rGk-zAJs4-yit2xu1u708c1W6Iz27OyG_0wBza50WG6B2dGkzG9arTR9PwCa06-a8zWTcBza_c-Cw8zm42285Eww185B9c78_qA66a-a8CjfBWwk5e4wDW3h1m5C7m6o824U182m7u-yR28AJvbB70-i9Y7tYO2zYHQ4_x6SuSmOz7WU1O-wKR_w_y-YEq0u51aux7P-5e1TDuzxz0Lfe-_fVPNywZwIKWzACe6Skcqe2mhe1h4c9eyp-wHe3tGmkWtJzfCs6--5wJxEb5553-5ICp0pyBwc_p4J-tec6Gyczc7I5F3p0Sgh46kh_TSAKh4a4kK6-6wTdy7Fzh5m_W7kwR3m1EwW_p3E8W2IBR7RI65lxVDAHR6Fza4I8Izp2algpIyJTIw50Zcx0Vy8yV-xzQC21x-1xYLo4iPo9OKYfYFVJYGGb1wGoizFV--N321Y-U2J0GnrZJ6t6497RbfJ5o-tz6wwrADwMAMlx5RI6YUm7C747u3F2Swl_B8i8Amlxl861l26xh9dPl2wLW483h1C6V8R500tza786QgUOwJRr6ypJfFcoEAIE1wx611MOt-I7tPwFIzWdxxV_1yD2xzC625DxcpNzANN4Y_wAAJwADsAAHGlJAm6YtxV5rq-8OpF2i2Tv26J-pkO_rYlV7ebR48d3Cxz4lrYOd9kHtNd0au9EKz5S0Y97289zK4EwV9myxw2-E-82VyR944wB4OEBEOYNj6YabzcNQKUQ1mazsJi0GuHTzihu04S0Dwo8T2YQQAGLl04jIyAP4d7x4L7yXP0P5M0blydBHVINb-b2Gxr1q9r5hbr8V_r0R58xD3K_HyyJb_wLn37wT7z7hbENsE70cjnXnRugXe79BpL720TxQwX778zQH0H6UU4iH2HwOAKDBFHytCdLnUnAutVMunH2b4G4E9B1r4D036E0N5n-V-m782uQ12j1hxmzrwN_h2ZGxECMv4c4x3FJu8AMUIx9gzxKYU_oPZfPIF6EJQ_2xIrOIOczzUpxf4DWIFUqMBmQJSKGAwq5U5KqZkfQHeAfDY0n849GgA-CGgE096tTRLr0wpaz1qASKKATPWNrUA4BCAxzji0RR2wn873HAetxHboC32YaXFOEhIHk99km9cgQJz8oc99uhAqTjSmLA0CpeSaA-i41YHc92eFXMfG_y_51AuglPSMJIGjC8ABAvAMwBklkGoB5B0gzkE8CIBLAwyXzc5if0g5J9RGugqBjPz6I5VoYMZFGPGX4qJlBKbEL8EoBFhoQxYb1HCJ0hXIKwNy-ZFWGBHdjnhaEI2AAFrhZAiwRWABrnaiWhEaA8QgFcC8CXQNUePIuGaxSBWV9E0mHinZECw-CGg_gvRPoFcBpALQ8TEISBHzgMUrgLwIhOQFSFmB0hfg8LBEHDwxAZgI8UQLFEoD5BeaIQDwHAHDzhBL6vAUQP0PWBxCiEiQiGPoAyCqgBhAwmsD610byI0AZrF0LfigCnBtgEwvoesDihdgCgVwFKFgDWGTDsoIEK4L1D-SpRiQcAfOBkG5T7D1g5EHYERwwBXARgNgWgGsOmG2BZhpQ1AAsLzgeBlhOwDVF4AEDTgrgIUSKDcJrBAjpwFoTICwDyBXAIoew9YVMIm7CRakFocHFcB-AugbhzQ-QCmXsFpkBIEkf_qRFjjyw_YgEbQAWU8HFkLY_gCQrXAdi1liy50M0LQDTj1CLK98O2E2RAoxAwKh5HyPdDjY8j-ArQoUQ2SApPkWyLI4OIcOobRAhUiQcJIBSXJ8jQK4FF0NXxrzNUlaipExiqXzBcAJgSwTYBEIIC0EWKSwFTishNTXZk0EpW0XHltFnI_aNYBvo6NtGxERQRqF0ZZSOToIbUaXUUHA3YAIMSE-8TcrwXLQ8onRAYnAFQikT0JGE_opBImOoR0Ji2U0fgCwjYQcIuEvCfhIImcAmwYx4pSMPGPTFGIymaYg0omOMT_o0KIedAFoS9zmAdEeiTGvyQ9w5VyxXohMTWOsQINzEdYmIkOJMRmJogU0ZsfXj-JtixCRFS2k4naCuIm6KhPgriHQCFhvI9PKBOsHNEpBCAU0AFM0nWCGipC_TMaI8Wzgpwwi1OdvChUxTFIJEUiTGmAAUxTQ9x7aYpAAE1JEtgd8Z-O8gAofxkFLoCjEcDLCjiU0Yan8MZB1Q7YiQBcMsJGCITDYckEAFcRerrIU4fdEYoflmDzBIMt4weOF1XbRA0Q2NAcPAGUwwAF08wKUKGJ7DoSQAWAfUGgF_EcTzAx4McGEWyIpYbgpmfgLzhvDeBWJYUMKJ32mhbiJgDiV8YBLAAfixwK0dvnbH8KRhDxhABxP-LfFKSFM1JASY4WyDY0E8w3UCDWWEyKIxSq4YpHUPRgWVKMHAbyJ8mQYwBORDk4Znh2cy2Sv4PgbyNbGORxBYA0ESDAczDCbdRQNGR8AkgUlwAgJY4JYLJLwBD51gvko4MkACmSEzK8QGAN5hdAwRaqpqCKX-iinfQYpWky0ewF0mKTlJBAIfBqlXAJ4UscwVutjTIlzJBJVE3HpkGkrhNWJg5aSn4i2wAp9wIABxJpJgAWjJAfyHSQBPin6SxwM0zkA4n4kE1OpREtqbj267rTiplE4SToEqKISQe_ddwp4VTreFfC_hfgNkL4x5D4mYRcKftOxqDS4A_UqWobBEAOMLQtPUMrtIuTvERKwSQcZmLgApiFwT0oSS9JEpFx7IwwGQR9PS5cAEMktHyZimambSSJIADqXtKhn1EjpiMnwPNP4m4zupIAV6e9PUHkzepcAYaarmdLSTKp109af9LTYYzWpWMnGQDOen4z_ErE5IMTNZlUwupB0imWYgGk0y6Z2NfwnFISlTBVpUtP6WgXSnEUYIa-OcN5HZnETHw_ALmfshFnY1HCx05vmYRgjmSD8CMp6irLjiWARK6s-TCnBanaz2pJM7mXjMOl8ypaIfZiDDMNGPSwJRwB6rbO6QOyl8mMnWdjNdn6yeZ1M9wG9PFmIzXpUs_gBNOSnLSFZY0iaZVPTlrSnpHMiOXjyjnCyY5QwuGcKFYlEBkZoRAmo1MxS7YOMM474iHk5LCkiw0Eg9q4FFTIE4xLco-G1SDkiVAZ3SQ2bTD2KcA7APwKYCvmNyy8wiwDdsa-g1pgVug4zAed0iHlvYNBo-NZJBTkRQThQd4fNCgndHdzpo3o8RPNJkRyIu5paGEMvI7q7yRQiQfeUcQfpUB25GxNShWj3nh5hQHc0znFCfkvyO5i1KeINWGqjUhUCqcBfwHmrwBVqxdCbj_I_lTxQF95LCRAoSBQL4FGC2BTNRwWpIX6woc8JKERJwL7OojQBe5BfmHyb4CSOBTKmLCft0k-ufBYwswAfBf5fQNSiPmyqloXqFgWceYDPC5QHsL8kmJEGVHv4qFKonUpwDapTMZFNC2RceASQyLwkXeZ1tjT5AE0z8bFJVNkHszAKEkEAZxDRMgm_yjiOAWALOAmDYT-FuVQRU3JZAiKxFlip4ksCbzF1k058ygHFKvlPy2qsY6aNjyehty_5sFNLpQA8Ax5jYQsyZu2PCWvzUFOiX9qxR4UVjQlz0Sxf_OQ7gBnFfvciW5USXvyIlgpRYPIoyVTNSlySo-GpSXla0d2UzVxQkHEWygpFzhTsXIhqQ5RP2ni62gmgEW6izyo4DBMIE8nBy3sFSrxeMx8UJiL5UiAJe5CCXRJFxHYz9szPYBIp_C3oicTABHHRBgZ1YxsU8StnlEGlK8tolM3CZKi5E7-LpU_J6WUBP2qk9SdsqcS7LGxByt7J8rKanKBlzQo5kMtwDWhjsZpZiCeympCLporYxBasvEKpKS06tM5aUyOCVzUA-oSRL-NgnOk-okCexVyh5Teimiv7WIL-NBkSKiAjYu0eM3RWYqsAv4gfCwokKTUsA4KkUBaWGU_FYVOkKZr8usSnLlQVtfwr1EGWmpEgOmSIGCrpVYq0ZFyZqaC2xo4BcAgs7Eq9JeAh5sS6APoPg0jCgIPSOJR4oFMvkiA_ykYLACivjyOzFVyECVaqveI0yNV9eLVTqp-L6qTqo1J4pIXmm0J7Mb2RIORPeJl84AkYNKIGpiA7BvlTVM8qcuFF8rBxXyqcVMs_BW05kys01MUjjiKo446sy8RCmvFi46gT-b2ZbPkD_4dMgpXuZ3NrkXIs1s6GhG9nDWOqfiga7VZkDdWQJA1McqPksCEWxqmliSnAh6XqVdr3ZlUxCaGXKKSodolDB7BaGmSSh0OUtXqHnDDUCTUcNOXAmlNNR1qxhp2Nok7K2mCAIURcolAbN5kBxEJsa4kibLjht91JcccLNJMRXHgilFE92VgEQnQr-1IVKZmypfURIHEuAciBgGSlgwZpZ4o6kByirnqQAyUxCcBsqBgbOQRgWnpIAgRvrYNr9fGksA8VeL1MLSqAC_I8XyLMN9eFDoMDMg04v1BSkjTMuRGyNApiqg9N41g0Lr9WRrRWTgEZ5ikB04yhoU5IdVxynVjVbkCiImY6ZXVIeU8WJvWFYdp1sAbGuxqXVLAcAtPVZOJtEb2SBNbAfAMQDFxngPJDQyZXRsMnyb4k2NWAGAEskwrJCBuOKGkDESvKbpn69aZptqYKb8OEQT5rhsCn2bchMAbFRaHYB_IeNzMyKHPLk0ytZNBwwFUZRwDkb0ulG_YDRr1E_r3NUVJjZ1Q6asaY5ymzjUsF6i8a60_GxybpvVUtqGN8mttbqpk1VbDmnmpTc1BU3sBh1UWoytBvi3drUtManlb-sHVOlitnWgNLBvHWKyVoRKbdQGhzXWrOqBayMEWp37Y071XzctXsXZUglO5B6mOdhqvXTLCaa0QjcRv22YaKtmqg9TVo7WTqYN3WqWt-r63wspmOBJHrJFMz8rGQ_yobZhpjljbe1BSmFSsphSJKmZwW57cjyjDvbVcrYy1ciqtLlFM1MESZdmsR12zZtV4x4otpLWFzVtWqyteaUxI1qiUNskSkcmwA95Ttza87UdUk3tqQ87q7be7J7VcqWxgO-FURSHUrRgtDyDJcNrPUWawmc6_LUzpXUWg111OjdY-MJ21qUd3SUnbUlRrhzoZ0jeJW7LJlGyvZt6n2crrM03aP1PW9Cj-se2JL_1LyoDTuiQ0mjESKgv5Dzu-3uzS5lEcuYjMrldhq5dusmaEPzhdRJaVMk4RFpV3RzGd-ulnXCqB1rKWgg29gFztt3ZFid3SXNaC3m2Y7NduYbXWWtx1HwNtGxU7UDL7UPbRG8a45WUyjWQ7_lMe6nWdudUXapN9eendTtu1_a9RAO0PWzvMBg7XtRy-sXss-1R72A3OtorzsTRsYFa2BRuWlrnzNSJdX1dcfiNsGixwckgRlnmWpEeCDA4EEZEpFxxFYSs5WSrDmOPVwpVGKuE2BvuTpeERs42ffYERom84T9o0KYPqDGhVRz97OffUM3D7IY8Md-6SlMAACK56BoPYAADS4WPLM4HPS0JLA50tOmNn30ABHUIGXxhHwA1SzcD_bfrMYjQf9jlGutDmXT7710JcMuLWQ32Q5a64WcA3mLGwNJeEddFdGl0IMMg4QW4s8EQcHgeJTBcZVA8ITywFZt9BOXhIyjP0XSL9E2VcI_uf0iH2cjKf_YAZANgGIDUBl_enVXBkG8D3CGeDYOUCplqAXcRfRGA0BKxgIegTwcUgbIoJVw_AW_n6X4CEBbg9wR4BUA8DkAMRvSU8GyHeADAvQ_TA0laCng54_K_AM6V4R8JiIbDIAbwTUMW6LZODqMbg64S0N2D0IS8fQ2oGX3KwTDa-iCEnBSBwGHKbsOhrMDwB5GgiuQxbqyNaR3IaAYo5crKOjI6jn87BZBh3KWBjxmjGxBBuuBgi2BsBjZSQJkERAWgqGlw6IC3ERgNGzwPYjYvqFaNjgpjU8To06G6NdDUAsxggJirQDYK4ANRz0AMbzjDHPWZCRbjGUaMYJYk-wTlYZvOPhAOjwoAtQdT6NrKUtmBk42sWBIbEdj3EOYscYmPwUhAdDeAHAB7GOBXsnxqZCkFdZRiqAr2RbuMaTjQqQB1VbCCVWqVmsTwCBjIDgVrQYmBA8iXI1AGKCrhR6o1bquMyWpYDHFG4q7JikJMej3wMRnUQifgrIK_5KJkpWif-w4msTq4Lk1cHxO0ndOcySBWqjsCrz8FcAHdj8EwCJc0lIVBhB4Fd74MQqpSvoAPr4VArbcq4AU6mrvj1H4T_268kZ0RAdySqxSY9iZ28h9VTUO7IVseHCPeZ1QQoJgfsn4DynFTzlJFLQgaD6hnTVMFDtZz9IJJfIyrI03GjtNIB-ADpoUE6a9LpdAuktRAJGe9PJhkwJNYLXCTclHBuEEARIO4AgDsAEk2Z3M7RCyqxnVudpJM_qBTOirvwwZkdhWZABRnpklAKFHGdoiqiIzjZ5M8mD-S96MzWQI4L6qPjkQCz2oRA4jTArbBlhT0Us2NPLOdmvTVZns6rUUB1nQzHZxM42fVgxm5z8Zhs4uZTM2x0z7IjQpYGcjuAgg5gBJGeYvN0BZz_p9gZgH3PdnkwK5tc5QMCoJnIz25ls2Wb3MLnuzSUXvdBAtBVQ_ALDYUCMFcAFmwL8QBhJBdcD3m2zEAatM-aXNJQ3zN09czfH3M_nWzm9NCymYeS97MV6IGxXOASSlZKA2QJqOiBeBIX5zm5g88mAeSYWQzH5sM1-a3OOnfzu59szhYAtVmkoaZ9gBR3yAooCz-oQE2gEQv4Wd6T5wS8mGEtsX6zC5vC3-f4vhmmLyZpKL2eC0Ucj4wQhJAZdykWhMV-QfIAxfktcWDzullS9ha0vfmeLclzSzZZ0tHmrAeANUjfD8QFnrAlAYYMWZOChArLj5ty0JdfO1msLHFjc05ejO8WHz6aRy12aEtAX9LrgbYH4BOAFnFiiBuwJYH6BwJtxoVlC8WEItJQMLUV9izLQEtMX1LfFpK-FZYsiWbwywt4BkAotiTKIVySQPqGSCTwBACwlICVdQuKWHkNZpQO-ZqvJWmzO5xK7FZSssW9L7AMaCkHcBWNJLpJAgOoAgC9XogfiPxCNbKtjW_k9lmK7VbivNmXLjVwiw8g8vUYrwpJUc63SEBWRKM2wNa7ACOsKXtLVZu62dems2X6r81i64tYeRpXqov87YFBZdAwW7k0mOAKbwCjfWmr4NgG7GgWuzWEryFzG8mbdK97fV8wWABaEvjbArkMwfMwkl9VeAoLH1yIJQBRu3XWLVV1S3VecsaWbriltKCJesAMJXAzkAULuj8t-ByIAt1iBAEZtc2Jrq56K4Ddwvs2GruNqs2lGWuE3wLuUgs5eDNaoR_Akt368mBVvo2qBoNrG9daVsG2Ib1GSgHTedAUXr47ZIgLRcQP1Trro1_W2lEquTXZbGNk28DZxsm3kzaUYi_pacAChw8Rly-B5CwLCAiAetyswbeZte3qrPtma37YItc20owFhcK4AtA3hs7BZsbDBFYidg47i1tKGlCNufn5b8Vs2wHeVv08SLlAT6xlcRoSWEkVUEQM8DHAZBUIeQUuwebSj09K7nF6u1dY5tK2ko9PES-eARLUg5Q1GT690GMswQ_h3QUrKNX7venJ70tqaynaBsK2QbM1re_T2WuXgIADI6jM3CWIXdKbcJaJbACOK2YoAm9_UJPdOss2HL-9mu-PbruT37rGVry9qomA-hch0FhJJfBSBQX-gzcCW67eOu_W_7w9zG2nf_MIP6eEN3KEbjpvmQCzmDo-Ng5HAv3J7ntmW8neNup2D7_to-6_fp7B2cGJ5o4JYDeCjGl7N4PoN-XjnexdQeAXJCcnQCSASFGWIikw_IjNxWKcDn65WcnuJ2sqpaeKjaZxpaW7Y-oIRlED8Szhp4kVIyq6Y8AKnkMSppAMo6qi-nawiVluBlV3vkOuLKjq5HBY0e13kr-oKqKAhEvXiUeUwWhOEC8tmtNbaiaG6iloiSBka6jGS6XaccuOkHoNmx2o6saaPFbUT5xyFGWv6gGQ2wYYVBc1vUMFwDNiR9Y8Sfv2k7rN_gNE7sdrWHHeT0BPdcyvUBsr7d-GyWWFRgAwniTyK4U8_sNmSn6jspz_cceJOIbVUCAFgFgDJAgD0FpBseALN7woA2wXu6iGaegISHljqu52c6exPynHTxJ3Q99X-OCzuuCMCKGoDzOQoid0h0U5ACrP7HPTipyFEzvBbKMTrWiZnASTQRNkhwI5xXY_vnXHHqj0p3E8PvXOG76Z34O4FEuBBtglN0rBENziXQlIXANIEc6HufO5bKzn5107-dUOKnvUES-8igBRA7ACSHF3i_mdYvIn3z2x2i_WcrPnHJw3vTJDgt4AbFlN-7AQBA3bBiXBT05-05Rfku1nVzjZ6mY8tuRXkVgKpIjVoCSXkZC4JG8Ndyf8veorTzl18-seoveX8T3p6mYht0vMr_NugJTbzubJ_ALtjm27eKfUvFn3tqxx05VeXO1XmLuh9YD362BoAS9oA1Bf1AMvYnxLk50s5HvcuYnNr_53K9udw8jgAAKWcCiXhQ1tsB_qCAfqB1rxLj5206VdWueXAbjF_y7-Q82Rb0FuCIjWhAJI3Au6cR8a_gemuezO9i18s83MXPuntrzN8k68CyRfL4DzWgOGdvzO_kHLn1wtdrfov07Nb5x38g8vnoiAO1jAHq5XsZBzenbhVz26ifWu63gbqlz2Yhuk2pVAtgs-u6iAC3O35rsh9W-KeLv-3qD8t66WAt5A8ApvHYP0HwUFm2HVSa99sFvfwvZXK710qrVkdHN5H3pWU4Y_4DcIwgoEQeAgJ0d6O_gBjpFNwgW5aOA0ZjwM_O-SuAeehxB-t52fPBAHz0tLsmwIG8e6vNbhr2BhgFLsYfz0pLri8h-A-UvNz0H3S9PaIBfRGXkzi4Lq8CgyvS3kjkALR6zfkeGzlHugCB-Xc0fLAul5J1wE_h9hjLCzad4c7ffCfRPvHzs_x9Q9CeAPIn4dwTdoksACzpWKaZgCgAo92PDVk11x_U9zuq3vrmj0B4E_Ue1PSURniJYXsa37A1HBJEAfRAcOTgAgGYKXdo8OfFPVnlD4J4zdKeRPjPZa6GIwChCppV5yL-gGi9oBfPYX7txZ4WvKfgvA7uz4zw8vy1y6KKfoGA9y_m9ujsljjxR7C_meD3lngD9Z5U8hf5PjPS2xkFcDtQ5wLn9yAWeCewBzefwBICW-M9lvTP9n_d2c_S-2eQAob0rDeF73tfkgYS0NwFfcAuhEb7Dgswt4_TLfpXpdybzeAC81egv43qA6Vl72WBRXF50S2OCEAwXRCISUrwN849HfP31mOZAo7_dIpXXrgXwWqVCAk2p4OG70m6f0cem7YQB3wZfBMcWB4PhjoM6l9BsfevvaiX74ZfG_nhLAx34Le5M2DQ20AlNscwIBA0Xe0QOTsrw2dR-lY9vIAeH996R8is0Pm50H5fCzciWd43l48Ay5HAEvQg2q7VaXYZ9M-KfVPxHyClp-qfKfYPrN8tdHcnBaIuzqgDcGlcpS5P_APnycIF9QWEfP34X_9_q_K_xf8r3vaO-cjg6Czhv8Hbz71-VezngvzX39_G8q-Ib56CjgLagsgaxCOnmCAlCM-JWTP9vtX59-p9a-7fevuh-eAFuoA4DpJGXwkgaBh-I_UAVu7A5J-dmVf3r2H8let80_tfmXsX4z96jBvIXu6MynkEdCEf27ikZwJsDuDm9-v3vwbyr6TeKvkX9P9XwH9t98vk_4vrN73tCApO8AUFnZAXeYhbelfOfrt5W6q8LWM_gf9v_T87_LWe_f6KP1RdxA7BzfjPrt3741-Z-g_6_-68IHzMqOno61za8JH6C4YBAa_rt5b65fN__fQvtv3T91_r-IbDQQUK3SMuv_tZX1kf3z7-Qjeb_yvi373-yPjP5P-XbnQ4pO5UqECbudTt3aKi0Ds5DD-SfrP7r-qfhP5w-QATb4gBj_qP5_IwbvqDauxdjshR-yNG_7AiowKgCX-eAZv6t-2AaL6_-gLrC6UQDUDkAJIooLEB4ALAVQGIuybk36ABd_lgEi-OvqP49mtLkQC_su6DsiSA9CE0RwAlcoWBU2nYIkByBeIJf7LmSLnvYNmU_g_70B4vima96NSLZhpOg_vxjDAMAGy4_-egdf4puyfpgHb-oASIEO-RAM3CbAMAeeCog0JiKBqB__jYG3-W_tP44BfPixa96uoNq4euxdve4dWvXt_7IBYASxY0BwAUIHZ-QQcG6v-5EKLbneVNq0LbA0yGoEN-iHlxbaBdAcIF8-wlrS4YAbmFH5jmEYDX7IWPvuL7KWGgZa62BAgfYGBBDQctaXwCBm77gO3QSFaWBjPnZZNBh7pT52BAQboGDBltuJZrWMFpEAZAlAIkCX-FVgkGCBWfqe6j-SUHQ6juhxrfZdAiQBEAjAlAQMF_-aAVb5jBOgSUHi-DyJ0F4YcQKiAR2twYa4xB93oUFXBKXugHp-5wcUHJBVwR5YwAmKghibcUfuehogWwIQCX-_1sMHVeowa0HjBlwYz7g2vepPCoAqAH4B5AGhJz7e4koOHgQhPgXwEwh_gRcE_BjPtza96lnMb7t2aMBTZwBK3sjbHB3NisFtBEwXgGS-YFtQApAv8rMGzg4eHd61-nHnz6G2UIZP5fBSQesEChHlmNDkQCBmoj5Akzribmi6AJf5pQ1gfiFFBooa5ZaB4vkHa96JeNyFRAW7uyFSqSoacEABBIbQHqhnNigF4BwbuehqIE7ib52hLAEqH5BafoUEihawRqEd-jPlPYG-RAB66m8uZkNbH-CSHS6zgeQIn4vBmod6Hj-ZwbCFEhYoeL4n2vegt5h-lNgQHQBtQYxZgBJ9oyFwhxIX8j08Hlg64dIA8H3rhi8QFrTQQyQJRZqIDLqECI0l_oWG5h8YZ6FWh6Dr3qlYLDDLy7OkQPMzPBfIa8HeheIZoEtBhId8EJh3oRAFiEojsw6SW04dEDMOjYSaG-B_AWOEWhk_uL4OeJFjlDLCMAR976gXgBIERhA4VGGhaMYaaFqhHoZaFgB4Xt37uuw0l5bdQBZuwFFWdgFWGX-4Xs2HjhrYTeEeWl8EfDF2bdv-E-gIGryF1BdfpuEqhI4X4HmhV4RuGM-jXneEHW_NpTbuBwwA2HHBjXl-HrhcPpuFThwwKgDxumYGmELg5kHYqYRy4aqHuhO_qFrBupNkBhgO9EZ-hgRWYaP7M82EXBG4RjPrTyOelQPh7L2EYCWbHBPERxE0RtPMtYfeY5mTbnmuzkfB_oF_sJHvBsYWuGcR6fuL608f4egCI0WkUvaXwOkTpGX-GkaJEOBfPrTyW2RRlchqkHPpioIklkcsKGRw4c0EwRiQapGDhSUKmYGBs4IjSdeXQBaKyesQTn7uR54SuFmhLkTv7uREkRk5uAwIfs6Gea_hFHGR7QZfDuRHlv2bSY7AEAbW2fDgWaZRMzkfCKhAwSlGJREwe5EO-pvAy4wAgQM5DeR0flgDNm8UUpbFR8Ie5FbBRAGLaZW33ib5tRAoGTZqIDUTI7Pe1pr-61WdsCXgig-IEV4Q-dsID4QewPvwCXwY2FNFQ-Fjq6ENmY0YWCTRDgQtHJgPoSHaiE0hJJYZWswHHL5RpdttFT2FPutETRCtON7nRyTp2AQAgQE843g0DnABnRY2DtFKRpoVdHsAm0TgHnRHlqKC_kdANK7PhwMagBIBkYZ2YAxl0RqDXRqILdEfR7YcFpAGZ4ORZn-dyEcBuerQtJjvRO0Y5EjBP0X9Gi-50RAGtC8ABlFfSsNsZZN2UFpvB4xtDrDHjRv0TdFbRH0VuHBazEm1a7OY4H4gch_YeBGce20f55ChoNkTGsx_0ezHLWp3lBaw8BLtnZ7B0QZmHWWa0VLFMxG0RLEkx7Mf_aQA8zE86YqusQJ54x2XurHwxlklrHJgiEXc4vAXQl4AhEYDt5iUQoEJDEnh0MezEEx0IeLEIxbMZbF0OoYmRFVIFwJG7QASxAWa-CQQOiBzOI_sLGUR0EfNFwxLMd7GSxyYOJE6huUtp4JIO8LiYuxgsVxbbR4kabGJx5scIH5x_9iSgVAsvn35TS3UAIAWg4oC6DzMeMUZGixyVl7HFx2fvnEQ2aUaeZhATzuKBsAIcU3EexC1m3GIxKccG7bOUFhaC2yZkJkFwQ_QKiDn2KKE3EuhHwXnEJxxMSXEfRDPDqHbxDdosTBSolpRxocHXoWbIgwIJIAd2DHqIRNxPAY35xxIAKPFsxSUICi96O8HupwAXno0KZxH8V_HvRL8cFH4hT8ZLEvx0scsLQ2S9h3ZnUmwB-JE-kQP_FJOhcZvEdxY2C_H_2IRK0LBhQBg_YzOf8dHGoJIUFBFOR8cczHIJ6wQtEvx5kQgb-I-ZpC4JA-LmNjh4_kHHJ8OCCZ7ZfumqD-5HUtpgmZ2wJMEECYMOaEtEjUuju6aWQ4RrlClisHpNrIW5jgWYFBDZvwndA1uON6SJefiJZDmm8NeAUWmUUpJ3ICXkcEBRaiQyEtxXFkomCJWQKonOAefhJELq2IhRYFWToLSFe-ucYonWJgobwEPx5iSokOBxiXv7DAaTl0Bhxhrq9al2fiRT7eJQib4nuJa7unG4-eGGOCfxwoD54j-xicPGg2kSZYnRJvUBzGiW_gCHGoAxZmA4Ou1nJvCGJUMZuZqJIsZ4nEJIAJkm0AViTknSx1tr_Ichz1rlIFwD2MrFhWbiU0kRJXQMolRJOAVUlFhcABObTIB0ZRbCAVfiXapJ1iSbGmJiiQMkWJDSdklWxeSdtYi2AngXYLgOQbHZzJOSeknJW9ST7qi-VSXQ7XwLbmJLAOSsWEnzJscbUknJjSTxG96SDFfYRAPMQ3HxAdyb1AiRiyZ2ZPJ2SanHWx_odsnPOY4BVGbA-yUYnWJBcf8mVJyyT4nDJsKX-HzMEQMGH9xBAM5A_JzcTUkjBgKcim_J5kWogxAIQNVDDAXiBRa_6U8dSksRKsQCmwpRyWYmIpQyWcmwpdDmBZuYsAC25ZxhijikPJ-KSylZJhKbTz4B7gFfZxQOVkoEKmlQDimrxZzgSlspNlI3ZwGfgMYFueQgPfqzJMKTZT9JAiUilKphCTqGQO0QJsAwW_fG9FzJAKEQmCp-qaynCBkiQChNeMDlED6MHPm4BdCBnuw53JTqXqmDJwqYakQBLXu1a4OvUtsBUMRrhUn8Ajqcc5-pKyacnCBj-r3TpWGjt9CdWywmZAGJYThVhPecji97DRSjvwCCOitA4CzApydwkiJ4HufZzRERvYDCJaaHIkw-a8aT6GuGQErRlp43jeDnouUBe5KS8QCOCzeBHo5CLEGAP5FRpIAF2m5QFPsWltppaSrQOB54PYAQIIlqQGYA7ZAWZwkrgC15gAdcTF5jgJHkumAo06a2lEUytAmnZ-i6RAjLWrVvYj2AvUt0BlS4roW5zBRxGOCOUhrgelXpx6UI7tp86TgGXpRqcFoNAECTAGhuccnQC3JI_gBk2p0ITOmnpHaQumHp5kWk5t2m6X4CO2BweUmuxm5gBlMpLaT-lzp56esEAZFyYCGyQswQ6DXif8AVEBRJGd-klpZ6Sj6Hpwbs4DlSrgMoGwuucEcCqIwzjlEQAAgNDbCANGeOkAZ8qaaFwZv6URk_htaRAiMB0EBB5xyBdg9ijA5kF0CfpIUHfEKJ6HiemSZTGRAiM8veplEYgYDqVi2O0lHgm0Zh6Yzz0Zs6YxmIZECLTyGZbQBaCjORAPqFueMEEEDBWIwOpm08NmfBl_povpeld--lh4B-AgcQWYPg4QIkBQWn6Tx7wpRaTpmEZemV24kW4frY73uZvBkAjAcMXFlfRIURJnJZ9mRp7HmyDBlFTSOUZEBrWcWTBkLWhWXZn_pS6X_696Y0K6kPhlNm5BZZuHlNLQpImU1l4Z2mQRkNZQWU1l0RuRpe4ZO7dtkAsA3SaVacewWWJkFZSWcNnCBwWYwHruqADkGBABZteKxAs2SZ5rZ_mbpnFZBmcFqXwWALOEJIY0Pp78YmAHFnWZCWREbLZCGY1nyuIljUgXZI5r-IQpe_GA53pnYCsKfpqZkdlFZr2aIHBap3uHgw2xSTBBpOrCVBlLp6gXimwZz2YFmrZiOR5Y1I_jvZAxu9QnQDE-fWfK61ZoNvVkvZI2fK4Q2njtq6ERlNr_qMgdAOXSHBQOQNk4ZqOVJnXhMmcEFAZAkBADGB32a8CdeT0AKCfw5EEDkCpKOUNlk56OfK7BudLn4gVRUfjIHJA_CWpkI5MuSDkrZF6YjmMB54LOBUAXgJrZ650SgTnYZRadrka5UuVrnyup2ZgwAOTrtVFL2WtgMCRppuZzkPZyOXVls5emWUHBal4OVI4-m1q9jhi3XpRAZAn6Y0Ee5JOV7n2Zulq8l0ACBlKlNE9Dgszh5-WfiGk5aOVbnuRJFrlLNwssTtlmsUFg5RXR4ecTnJWGeezl1ZS6RVZ9m3RjADfxbDpDSP2ySeHks5iWZLmZ5xGUul3WxqQgYyRdCQ5QJIuUHzEnISkp-mQhkeeXnR5r2YiHBaHdg6BuQ7AOt7SUFGVMCL5y-ZamWZvUGjaPZFeXpn42Z2UFb8R3mI0T7Zg3pels8u-dPnk5DyPgHs-NAMsIFmdOaxD9BW-bfkW5nedJkX5jAUAaw8RbiZyTwCwk0SVRHPqO5SodKT0noe3eZpmrRg2QxmW5XeRVa8RUqHchGWmKigXSEB6UgUf5leSTn2AFVpL7dRRAKwBvABbkVRZgY0B5DcoTTgjkEFOBUxkVW91rujnmbdjeBdQCbrQXuR9BYhkVWa7sObuAvUQW7ARrLt95YFywVfkd5uBa3GP6OoZrQsgmKhGC-WVYavmOUZrOeaBA5EQFGXwj-rmnfu-aRWlveo0XDG2ZZORWkzR1aeIn_uj8XWnSJzdLIkIesBZuZXRJhZ_kc5l8PYA3OIlqKCAGpWIIiigzgDvDeCjSGX4OgJeAkAiAivloUeFJiZPnrx40S4VSFecdEWdBY0DIVAGpWLqANAuzr3yzgXgBYFRFNzmnkPxzhQFmJFa0dEUQ2QBqkWjYzgDeCsIK6GfHwgm-eOnuFNzm3mPxxhaUW3R0RXQ676XCIaAJIyNBHg4-EBXNlJFNzuLkjxnRcdn_R0RcG5VFooLqC6g7ABkW6g3CLQgVYwRSTCUg-Pt6nRxcxabEJF3RTc4_5pWAABHDQGZZjQswajBdgYefsUnFhxV0VbRHhbtHsA56F2mcIWHpnF-st3kXFnRrxYAnFF0xaDkkxrxZL76gzgLqA3gBoDvDfFUEvABxRDxTmGPZJRTMVglGmR5bng-oGj4VYobhwhZF8sStYwQAJZiVPF6JSXGvFlRQNjng54HUWigDRcE75enrFhmuJ0MVSXkloJZSUaZfsRwi6gzgH4X0lDRWBYPYFlIzmslrEa0WMxqJSCWa55Ca8XBuaPtiV1FXpqVi0IfCFMnzAmGaSX08i2UAmylCBdJlSljAc4ANA5KkqX6gN4NcXt2TRWk46lMBc2nQxBpa4UjxrxTbmml5Ku4WO-1pXCR3I_jvDkFFTPJyVylRpR4W5J-oKNiigErvcUFF1SffG1JaJVyUdxYZRJHd08bNwgDYDQNN5uePWdRbNFrua0WfhMpfEXPFsxSFDZehmeViig1xeVgNAEbgkjrYBQDO4PFCybEVrRzpWUXsl5ZRDYSk6ReeB1lG6UICr2RxMMC5BLZe0WJlIZW4Vhl9rs4AVYUBmNBWll8BqUd2qIHi45xkpTOXBlhpdOXll8xRmWCItCLqAsI6paOZ5mmtGTbQApJexHFlHxKWUYlLycFqlQDlFVB-I0QDHh8Zr2sM6klfyW2VOlJZRSXJlIUMClw8vOWtYYJz0bDm8ZRXj-VFFCZR2XHFGkTnlrW4YBRaF2BJPoBjpBZR4W4p8ZYTEIVLxcBX9OASTDZL269iKBjJA5j-UTlBFbMWbBIlgt7dA1GOozshOUc3ZrWTofsX0V25S6Vix-BdcF9mY0BaDOA-WEViel1pUAZ9AZmQCWbBcFfhUAVSZfKWbBqUakU8IA2BJWmpr-S0X8VrThwkuoXCVFQ8J4RkV5HFthS6aVpYibbxWFY2DYWge9hdD5aZm5iZX3lwgXNyWAM3tRxhKZ6VYAUBnXmWk-VTOSP5uVFPs5WAV6wTZWAoyBQLZpO7mbymYAGAN8kj-EVSS6PZoVYpXSZyVctb2Ahivj4dWnXi8CRxT9qXaZVIVQrSmVOAclUeWedgFAYxGIe_GXQC0NyjFVHhfK6lVkheN7JVENm4CXQ7gH4D8U1YUV4l-jkFVC6u0lN5bNVgKO0VpVU5QtbJVdDs4BQO9sRgCHRuLoiV9AiwUlUtVkxaDbTVO5bNUeFqWcFrMu3UBDF5VgxRcD5lbJU5UHVcldCG7VvFclYRVJWSG4ZWDObQBoA5qTBDP2m1Uk5l5XFvdWdl11Uk5dVtAH14QxrQpRCyRKEiDEQ1kReOlPVU1WVUuV2fk9V0OL0V5ndAPGQswF2woMaa4xP1R-6pVSNWFUZVB1RPGbchns-HRK07isYTV1AUTXtVDgRFUeREOZsB4YA5nABTmwgM0CDF6cVhVXVctB4XA5DNfAUPV_1ULXLWuoFxmdky1YWYMOKxRkBRAAqJdWsRzNbdWzVxNelUc5zNR5beVq1mqThZ97hBL-AFmfDVC1f1Q2YA1HVULVdVE5jYq2YcoM84wQuJk_YwAuEHbWt0PoOwATVjUSLXlVovhFU-5GUUt52OrATIG2A8gXDWu5gdUCW1JVtUzUeFsecFq6eAcDADUJOnnp5SuHVpzBsAPdq7UTVQwX-VOVmtTNU7VidXv6p1DlMoU0xldf1UF1FtZ2bx1FVYnVdxMAMKCzUhZm3WQ0BdYjWM1zdSFCbBIQVz4uBwgERQJIuoMPU_8woBKX0pQNZsFtVotYDWC1A9XJkvAKwHLWZm1UN17OxeVe-E_Vk9gvX-1wgYHU25QBoUlwAbdmfXKBy8fvXu5eFXdUl1e1WXXHOGicdgpAziVKkFAziRNXjWh9cjXhVHhQJVz5M4OVBuO07td5oAdgGA1eBP1dcF_1JNdrWANVVRKChAEaUXGRBYQGg0wVsDbpViqFgBwmKKoZh3KVC2ovqZN6Z4FJZE-JppmjFIx4FQ0P0VpoKaOlrOX3Wi-k6b2mowj-YOkhhhHiOnS-pdpOkrmRJo4Vy0j9WLUNmblR5UdeXlf5VpwhwX5VxscjTPWQFm5sFXfgwjcw37eVHg4E7eUjXN7NA63kt5rVAUGt6LeKIcY0uJrETt5CNmKI5VaNNng4FHeJ3md6w2lDVd42lY4Ld6l2j3uo22NIjVx61eGXsRmYe2Hn0B4eUfsWlEewma7mkeNjUw3KRsESj5o-ZIQ67Y-VQX0AE-bjSbkC1ERmj5xNcHJo11JQqask4BSaTnmppz0RmkMeKsIl4j-Safk0WAdjU9msNJcTIVnZcheYAKFN2f1UqFZ9uoUQpZ0ToUKA6wAQ2JKdDUIDENM8ASLoQmoqkbYA6RsYYWSasGbD0iVsDbBuwzIm3BmwUouqLNkuhgPCvk0KsFLkAI1WhD6AkYMfDEUmaMmgeAdNK1px4UzJBocod8o0ot04ehc1kQRgBAgGqEQKIo1Aj4H8jOY0MAyZkNIyoAqbw8xpnp7EIpDMjCExSBJioGl5EaD8ZqIOeD4KActEixs_6J6jvc7aMmjvcdzcrxM0uXKPSQARxBeB3uAUqgr9UYCrgojUCQC87LCzcBNRwKEJASodoLzd0D4t-Ah9x2wKrCS1zIZLai2Ut38EfBoKmjkNSumWCkabn2UAIy0dkLLeKZAMJGJy0ViBLXkpfcS6nPhCtFLdYyitrgOK0wK9LVAA1csQKazytzLVhKzoSrZCQqtmtCvJ0wOipq0usv3JgYXIOrWi2zUVLWK00t6CpK3GtMPLODw8n5FKAWtLcIQqstyrZqaYojoh634KnIKPTXUZJHdQHSMivq3jyMIIKDuQEpBKSRapqFMzUEWdM-Iu0xYA_RxtC1AzTHW7LQxiPy7kOKAMg6MIqhSmlnNS3KsciPW2Itg1JkjZIzbRsTDU3mh23owg1O2gItjbdyRPyg7c3DDUrLcO0t0Dbc3BTQo7TlhdCAAn2qXNHgJEhTM7wM226IGQOQDdiUYr3quA7Cv-BdiYAD2KHUc7Yi2LtKBo23HIDvPTIwt_KKqi3IIqFfRh64hEu02cUKrRrNtbVB1QOUBBMWDDUzbbO3lEUzDKY3wfNFADDUMika3mFBjpXghUViFwA9i0HcNQod6AD2KDUuAv2B7tB7WQjodN0vh3ntUYjh2r03Sp4iUARHW21Pyg1OqbHUJDTGTQq4LTADAmSxgvHUAGxEKRHwT7TQ3lIt7c3BLArLRqjwtPLc2jb4WLRqjctWLYS040KvAK2YorLT1SttA1HS2jUYbYq1pAvYh6KqtMnYhxxseSvy1x4ynd60GtvrRK2YKUAKWyytmnVa0id6wBcpqt4nRq3HxmXMzS1orLWZ2Gt6nQkCmtdXHK2jUCrfZ3imGqE506QjwIlYBd5rNlwCC2lOKYqdPrfbC0t_raNSBtKQMG2FWhEEF2WtEbaF2Od12GaZyIr9NJjhYpnTCDimk1MMzkK6mLWha4pbRaYVdFbcihVtGLTIqTtTbQ11Jd7XYJ3ht3baIhdd5neTLTIk7WB3FK87Yqg9dE3dO3imE1CV1Rg0FupjHtzbbB1yI8HaIlA-lhSwreQnqDIqShCps1hid87Te3TdtrTG08oS7RMRfwC4Cd2oGIHa11zIEHW0RpKWIoN3TtTcEa3kmVLFZVIdR1Ge1odd8rB0kd2HVhIICMik8o0dcHVhJ4NHaG83iEo9C90DdmAH22wKH3XS1fdK1KD1zI_3VGKgi8VOD1UdVwOMyI9u3XIj7dKpNkQId7QqT1Py5PfFQ20jnc5hHd17Tt3FdBEBkBldlXfN1ZYlLWtCeoKAhSZHIjLMywMKaSitAJsxNNiQ84PdtPqFdLtHhjhYX7bBLstVDL8Rfw-Zt5DNInAHWCokpOpgLfd0lNYoCeEwEKr5mDiA4hx4xSNPLQAsvDOIVhvQpihUM00MUjqATSEKqu9jANEgTdRvbYp4A7vY4gW9LNNy3Td6gIQppKdzfz369AYiYpD4D8kcDW9LDMELbIiiGpTa4ivb126Il7qHgh9DUrHpmgqwjD3liwSpWIJ9svHPhp9X7Zn1VIM0NkQk9yqAL0G9ZeBLbz0OPYR2taLfZR05QRPc91Qduvbohk9oiQgJU9JtDT3uQdPWfQJo_RAV01gBbQr1ftTHYyb_arHex2Cgyxlx1TwFHJ5KIYIpjx2XNClBriENhaHt2iJ37cMzH9CphQq1g0BCMC3EQ4CghrsdqO6JUw2uLf1HI5_UST9gA_QqYjtiSqPTv98VHsRXAy_VGJdGnHagDcd0LXKQ394xH2I6mILYpAsdPJLcQAmAcOx3FUkA_v1RIxSOW0O9NbUcDqtffbi3rA-nSlyGdaXPdwedq4DgOJdQ3Wp2pdDLTl3ht1rdp1Rtzzfa3OdsnUZ2hmlA470oturf-i9UFnfB3StH5rZ2MDWnYkhndbA_fIkDN3Ly1RdVHJxpx4OA951CDvnSa1udgXeEW5dzA5IPst4XY60KDJ8T9w5cVA3wOetAg6p0pdVnel2ZdfrHZ15dLA1INUmFYhKQ4DCbVJSepybRSTRWKA3YCHGFMdCZZgY8rYCZtiCIkA5tebcUrh6hbdP3rA9Xcj2NdOA_d0KW9iusBTMjDXBymoiPUEZOg3XphL49e7foAQw8QCc1FDtGL22ttbrMy54AHXcrSLimEufiVDSXW6wgmNAKtTxUEQIZZtDFiEj0ttLQ-gA9D5HR9g0YvQ80NDd1Q3iB1DswA0M5celUtCWk2Q733xxUwOuD5DOXIUNnNNAMcKQIvesc2nNyQpwRvdIkugA1D0w4gh9AjQ1QTHDIAK0OjDHQzthfSRGqMOvdiQwMNDDWPSMOvYrw_0MTDgw_cNYSveuMMYdpw1MO9d9Q5cNzDsA7I6LYjwDCCL9Teqx0bGqAMqIQDrcpgNmAcI26hxirVB-1EUsQ1ZCSAnPEcD_C-DGnDIjyom6I0QWI1f3Xd-XYSPEjmLQZ3YtyqEQMMj7JEcArtBAOn0TdY-jGoyKPI4i2ioNIxTxyIgo420zd2nV22s9T8uKNTteClKNWtXI9Go_E67cKNEjBeokrbtTCq30UxwWst06jwPVGLUjGo0ShAcIowvSJKAo_P2Yjpo7wQWjsg8GJ5KFA4p0Wj9uAl2qDyXX61WdNnfEAODugzp1ujk-Fz3EKpCiqMh4cCuqPaMCQ_-ii9xYCaPRj4Ekq5fYwHfwCkjzlP61_u9ikGOoqn_RO29d8mBqByjIait03S7bb12rUCY6IxFdT8kfJ5jdbb12SjBCmfgpDktP61Q9mYwJbZjdo0ZTpj1qJQAUjciGoqf2zKuooloOYzqYWjTnY6OpcaXMZ0moE4-V2CDXo5Z1StGg7Vzmt4gyF3adVY2PQhjAgCQp4kfapGMLjPY8twltlUKwrgYzbbuMIsX8KtwpjmAMNR9jP3cNQH8WErePtUtbYkAddhYyKDFjRw0-Nlj-YxN2Vjw0BOMcj9YyorYt5Y9N0KjzYxXitjRrR2MgdXY5-MBoL4_CgDjx2MqIJIq3KON3K442ePHUto5qiqtwAHCNGD7nZgaLjHo_q0-d9A1AC2DPmFl3-jDneyN7j2nUQoHjYY8ePxtp44mNHAzbXARsKN46RPVj6vTwKPjMAM-OnAiHcNTDoYHRBO0jRwFN0s9W0EWNftgEzJPATDY6BNYST4spN4DUE3WNqTEo_BPhtLY5W2pDq3XR10tWY-hNEomE-SM4TQ48OgETtY0RMda74FOPiTIhIkrOT2E5sZyICY4th6mCA0v08kg40_JojvHbr3XNOI6ySt6GpKJ1fwgU9FMdex8qlOBy9I8ZMEDOLTy3SdF3S53OjwrBows0S41YPejuPNMhbGMiNwPbj6qHMist3E4eOIkfE01hwqMYyJPXj8Y20Rmmn9tJOyTp1Ft2oT4ZtW3X0qk4RMTOQHUBPDdMwMqLITa3fZNoTbROlOuTT8sONKuHk-5DhIi8mgTTjxU5wNcDHFjwMvIdE8uN0D_bbVMimd4P52KDUfI4NNTpqC1NUMbU-GP14J4zuzdTV4_-BiTR1LQ3WWQ02mNyTGY2-MPdAM9-N1jpY_NOLTdLShNGVH42tOgz_YxlOJAeE9ZY7T0E_tOOd5E5RPIW0XZxrNTF01VOrjsM7dNGIXrBl0sTfrBIM6d501xNvTvE7RpfT_UxeOxjok31OQzRwMOjAzIAJhNGtik0jPczJk3_R9D10wtPLT7Y1LNjTbYxkrrTwU5tPuT47btNIqmqAdPpDAUyjOOoQUyiMhTUZHZDMdkU6-lIMoxrFN794xBriOiuI8lMEjxk5VNJdV02uOmzBAEMW9Aw0gaR0z2U0yOkDLI4WhsjeUwWO_Tp_dNReta0HV3szPU39NczkE5vCjGbvauAzjZA-QNlTZ0_HjNGfM_dw1QXbU4gwz7lCKwTT4XZF1VecXbWBxzC7bNM6TB-sS2FzcPURSj05c5eRzIiPTDMIzFlZt0_d-PZ33Ud4s7pOPTsA51rrAcI5X3Kja7YoAbtGuDSNbtw1I3Ndt-ozPPNGY3Y606meI-YAjzD7U6RPtKqHKivthpLqaGzCI2C08kLs3ACgDPRuAPlK6I5bNRI1s0lMFtapEgQ1gHVCTOOz1g87PIMbs95ZIIXs_EMCdnA4QOFTcvfgNBzTXfABVdoc7YwRzQk02i_TJ7Ri2NzCc-d3TQ6raVMKdE-hnOVzqEz5TZzgI7nOpj1c2yzCzLqHjM6K_LXMgILmCxhJwoBc-uKrzLNI3PxULc_gttz2WJ90tMGY13OPKhPb3O0dnGvMNaoP-Nz3Z93BupiR9zTJSwJiwvVjRLtLyvGycsRWusAv07PaZhLtWMDIsE9OUBAobds0Vt0R90aF_2PUQC1APFjyvRqiq9xSBr2tapvTr1iLNANzSC9PvSkAm92veb2W9X8KX2r2dvcvLtoTvWr1HArvZr3-9nvZX3kWzi672uLQfcVM59Gyv_T19UfUggx9_7e4ufwNvZ4vJ9jIKn1z9GfUIzV9X7Qkih9YpHo4ZWi8rAPF9EpB4uwA5fVkve9OS4iTE9vfbYs6g7CwaQx989I3N492RBos9zkpg0v6LtPYP1tEw_WgJ99__RP2loU_R6JzIcI0wtvDQ3awvo9zS53NTLRI7qP3A7fcstQTEPSzQ0jdfUf0GL8VDSNDLVlKP1UIAy6ahwjWqMPMZ9o87RrHwE81EhTzWowvOjGc8yEDPLuXRqgXLaBLP0jAxYwv2gt6FKx0nzZ8ysbTGqBhZTb9u87v18dB_VaN9LY_Sf3gL7_Zf3GTL_cshnID_cshP9tYGit7L_Sxf0yjCK9_11z5gH_37LlOFPBADx880Ygr6_VC2tyuKzMgDz9JuFMIQxs5vBMO3uBcaXzcUxiM1gt833J0Ldsy-wkj2s1hOcrPwMIxZTv8zlM7jMqz7NyDEndTTMjRU8gslTKc2gsVTL87QNvzxrb6NaDTLUwPsTDM2AtMzR4yzP8T305HOwL_03eOqTg05Qv8zYq0a0OTbM6pN7t_JAIASr-wHzN6Inq96vhAw7cXy1ggUwGsEAW04DajjHq_vBer1xgQA4zunewNJzH3HOMNTc-A7M6r1U8a33TTrGxO5T-yK9Ohj5q2lqszIs8JM2rMc1-NoqQM46sCzdLe-MTTuY36sxrYa76vRr0mGGtBryMyNM6zYaxjNhWUa2hD-rcawmvSDjSvjPOtUfMTPadNAwxM2DVM3YOhtW409P0zBa_uPvTHU1HR2rfQ1HNwLbq5wBSTta86t0tQs42uMjzax2txrba0Ostrca12tHUoa3GsmKPAoOvkAw61yvhAo6y4NTMj6x-vxrBs3CYRTiIzyRhrtxgID3GNVBgPXzxA4lOCrtsw_PezxqyKsKrwYgAtSdMG2qvHTibKnOKd7ozOuejTs8a15rcq4msyDR08yNyd84553arc62uP6rxG89NjrXLeRu-zcnZOtpz8Xfhv0Tag4xM5rfo8usBjYXXp0sbiq650bjxg7F24bwY1xuXTuq2l0LrNM0uvaDRq_mukYM_YkotTp7JutuL0C5eOgLe68W2By6GI6vzL_rRj0ZjbXe2sZAra46sXr1m3esfjabE91LD4VNlibDb67et_rzK0otv0PPWHP6baSjSyjAdLJvCo0Ui1sSzoTcH6JyLUegov7zgG2yvAbJs3yRRi5szCtYDX8DgPez-U6yOAL_KyJtOj2G5qu1o1AwRtybDA8pt0zrA0tDCbmGxRsnTt5BxvIt5LRYOzrPGz6Myt_G5VuNTbLUJtJrBW6lx2w7G1JuCK5g_gplbWa6NR8bBq8F0rr1WwYPFzk65JtmDLWyK2ybk2wkDMTCPNl3dbc284NaosbWNtNYtaEm23UPgyLBzE6baENmQ4Q5EM1yJKylNxDT8-zNltR21XOgdws5rPh6mQ403NzywyAA2kGw9j3lDvQ_sMg72kyj3DdhloDsg9TQzcNdD8QMCaGuq1CRiLDFyDkM-k3xmZW3SoO6UMHD5zcCPZwKW0cag9fQ5DsI7TEyAPI7Bk9CMAbpDUBsjKSRJZDv4F2CEL_agQEB7codyIVTxmkYJvRx4yaJvRo0BhsyylEwWuyzyLbVJvRTQQu01BaKYu3bCcgTKrQsViQu-Fv8Aw1OL2S7xdNLveQsu93ibyIAJrvVbRfclOb0YXRhuRglmMqusbqC8S0PNiSiVD7A-IGNAygsQJo4W7-W9NDW7KC3y1prBFIkrW7I7J7vF9PuyVNDbmg1q0B74ehzsvwkANkCmtLO1TT87IexWJh7WG1RPfckmw7sx7KDTEDx7PO65ZW7ye_GbOaIABaDSS1u-OjT98A4luM77BG8Ck40ioODTuCqOZjcEVszyjp79W3buELC4uIS6ore2AvOAqdLqAjY7heeB9bZG97tU0KC6munTI2_5Ph6g-7vPHIX3AAot7q-3IGaDmij3gK7YREyq77hu8buQkWjEXOSA7G_m1wrEyavvOA-oOeiXwgBg0BVQY0LQgb7N-8KhHId-w_tP7L-7QhH70suLu6Kg-AAca7B-6fs17rK9KAGmY4HZTUAuoOZyf2xe1kAJTM-yGi-7RLX3vR74hE7teOK1m7txAZYt-uB7VNMHt07Rs03quSWQEZoWULhCxT8dRwNpoWUnFNmx90FDKdIeEIRldLt8TB1nyW7wAmODsM2EHeAsHkLLweiHfqGfg57CKtlLZai2uIcsU6elPuvNmKFMxZa_TMtpOAA_IepYyMgPxJxaxcu7Lq6wmKVozAEhxmgMaGWquz86IAELoTqQLeQeHz6FBQ2R71CsWApoQ-zSpfbA-5vuf7nCpVB0UHh1vvr7R7L4cKoa-zvty7e-0HxAHSuxXj6o4gnyC8AOECkBUy_so4cArPiJADsSswODJQAIuJvBSgppmlPFsQhzXABSpwJUFEwIAuTDSIz8ibKU8-QsWxRDyG-5SKowANivFINOINazA9gFmDSrz2zzNX0vi5Yta9-Zp73xMZRzlihLfvS4uB9o9G0cx9U0JMdOMAkDH0GYhENFIFApfPoDigRRw4d8EIx273a9Ex6UerH0x8b2zHZvfMeCtl1H4u6Qxxx72cA_vREtWrwC1KAk03kIscS2GSmJ1SgvZl8ev4ZeKH2_HX8N0d-IjQt5ASkoeB8dhgFojr1dA_x0b3Wa_XbIyInBAL1DInUwGtDonfyHCdHiUwHRRonEKJid2xf5AicQoeJ95qonZLOieYn1JzieUnO6KaqRAxWj4pcZEJ6zoWA4J70c0ASx95A8nZh3ycS2QMMEgcnvJ-GsS2IqukR9QPOoX1JoRKuKdCnkp-khrQgLXCorHoAmscS2W1GNBCSj0T0JNai6gVr3NCaLVtinGQBCd9HKp4pz3NO7Jqe1H6x2gAnYvhfqBv73kA6fYQTp-Y0CArp__u0ye2ZvPhQZe2uxEHxC-wNDIDirwS170B03ox035PYDx0_5JXTZYDBDCBNwNyD6AMH6Z66AEE8pImfl0yZ-c2pncijpAIExuHzQZnMEF7Vq0TkEeAngMwriR4AidE3CHoMZ8zosgNygQAdKQSGL2wrMQzfCgHIADopxHhChEC0ssEPSwJHfiIiASCsgh4CyCIwE8CN6MalAAJtyU1ABw062HCDI0oW4Pz0m0zQ4IrYgkHMSZk3sOYRWCuZG4Ir6mRmrCoAQjEeSYo-wD8KvdOIgbOzoQlECDCEMwn4jyIfwisLtomwp75XAtPDgAPI4IquD-QgUKCKtaeKhBeO9RQvkDdQxwoiLtoPwhaCVSxwjgC6WjPA8j087aDlnAit-Pn1RC-ffEKPzVMIRfoAFoCMDwkpFxKDbANF8KDoA7aDUpXAAAMSHm7aHcIfW9DBgDsc0EhxdgADyMJfCX3F8xcZAxwmcLh4xCOxfkA8l-JfAiGQDCIPR8IuwC7CBSIecpG_dFSIZGSzUWTBwK1kKDhFOx5WRuwswOHaUAqjByY1kw8DpClYNwDMD5SuwDUYWX4RfkJoAjF3YafMdl40AYqVGribI0oeTVvmXxl8sKqMpCnnBoAx4KplTrdkMUhP6DQOFjno3hfvreXDht4YQoBpDZSgXWAIkDOQTwPSR5Gr5GYAb6lRrmdQDRl5ZemXb2LWgLC2wFiLykDl7cDOXM0LkD9AVwIlfJX3hUsDohtBggx05VwvcgKIjIGaISgrxN30gARmPoDTxWCKURIoREg7z4MhV0UbFXQfAZDLQjKHECh5jV2MA1IUlrFdBXmwEVK8KB80nC1oXVylcNAW1zZdTNc-vYIpGexkMbCgIxjli6XizYWTZGikPia1whRgiQlGR8IPB2X5V9UZ9GdRmdcM7zh00ZmzCxsKC0rjVM6Kd7Z8gmIYH8nfbvYHRFCDdEwXJjX2movJqkB5G2poKZHUo1C7OfzHs6NCACUVAKNzY4WPYsG94WA0CMk9wJgfisU0dydKXAgHeCIAw1BaD3c4WAOCrUiXKy1ICfQ7Iyi3FgFnMyCVbPnO-UVbDIoS3k-OhiK3iWIsuUmIHGkyymWHEcveMPPI_S4oKt6Ig4WVbJFywcPbJ2idoRNyvM1bEZ8vMVi3oqjfGdD21jc4AON6PT43_JvoVRUpNx_OlDX8waRnssaOFj4o_AE_jeiI7DgI5I04Nze83st0LdH04pqLegdkbN4xS33jHHfy3ciIbfZYLegGjmb4iVhx63kt8beHMOtybfeMEtIbda3gHPFwhU5t_KclAJGBrPxbEN3XtQ321O0aCkiN1As5ndi2rdTQ3og32WUeLXGJD3v0AcwgMI98jfpiqNy6P97mNzZeu3jILia43AaB7eE32RIlw-30QOTf4MIajTdNwdN2rebmGAuIuoCuplLQSXXN0VC83_N4LcGTotyLep3ZVlWxV3ZU9nNYcGd4cwK3JzNXe9sZd4cxF3-t4iCG3xd3aa9cQQ2iCJAoD0rf6AMD6rcSLkKJDxAPpu5rzl3L3HXcMdFyFbenX4Z_fIRdGo3Moz34exZ6nqxlGfcUmcBPEvUsYgjOf4ccB2zeIy-qy0f241DyyD64bD6gDTncDNjSXwY0JYB44r-6xKj74-_YANAQj_dsvTnD1Q8UPBvdw-znrN7T5-7og8mye44ei7du32ROvcEmm93KYJAZN37cU30lIHe4owd1B2h3wAOHef2kdwff6AR94g8_IFj2PeWQkd1fcx3_AMgbUL-NEPiP3id8_dPmr95rfv30t3gJePaTD_e9cf96XfaLFhbbyF34T6GYwPUTxMyQPuJvA-93BAOk9I4at9awoPLgzXfoPaDxrfnK2RDg_W35YmptaXFNv0ZwMz17XEBDRyO9c0iWRsWQ_XBRkVdQApRkDdvkgyFjefG4Nwluxn9ewQCQtrgIsar9YA53qjQqB1M-G9s9zhvSHC91UbY3y99yZ43qz3yYb3Q0eUQadjAzuxP38LM22P3yt94z53cT0U_aMZkwu2K3Bz4cxHPJzKssPPciLndGUyT9E9VpSpr1xAPet6beyMmEy89gPt8Bc9RU9dyU9Rn-yFbedah09Pf1ijt_7u1oqJss9L3mJqvf7I2j2U_jMkCp1szbzcFTdOTYq2Y9BUFj1Y9KucAtkQeDR1Lc_rU9z2Sw53it2c_q3Zo7IxXPopt4xUvvTDS-7sjz71xpt6T288TMAD72zfPut7Xdks_z4rf8v6tJg9QaWD7D2mokLwdPmnDtyQ8EzD001uAzYVgPcJiD43RTei-u_LsxHiu1G3O3i95o_rPmJps86P2zwGhTbmg2G14vFyJhORYoZoS-XAxLwmIR36Eg-sEv1aAwLWWZL30Rwq7L689NoxzxJSnPOTxg9ksLLwC-gLEpprfFgMD7y-1M1rJK-1Mgr4A8nMmHdh08vRo0cbxPhTym9RvJTOK_eMB_FWxpvGE-yGqixb-tSgvUr-C9UwCr7jP9bMLzESo3S2662LP5gBo-rPqL1TDovXt0SjybMQEG2KbO24asOv-yE68NAPAifeWPkizwKR33a_gzhY6FegDhY02-awlYxYPO96v_r6XNUwKysG8BonL9ox0vEbw4_nP2jJFylvVbIpO1vlCrBPXtNz349YcZ79_dZ3qbyXdCvDz3m_wKBb4ByQ-j7x1pqmYLxqbYPTd5Aet3Qz-3ejP-oLM9eHhmxk_03CrAKcJizj9QBT3lYph8fgJK9h_KvGe2jdYHCx-yZIvZr2vcbPBN1a8BoO7Ls_KbU79PR2PqH7zROPnDwG9RUFL6IwnvIb9KYV3z72O3Z3b77uwfvvbNm9kdkPNy_6cvL5ey2ktApW_pvMT588RcJzMK9YcIr1Wx3vhzHJ93PP78C91v0ryC-yvTb5P12t0-4h827om_PuNbi-3Qu9vKL-MyDv5RHR8iDPqGIMMfR9IfcsfjjyACn3fd1e8X3uHU68h3vnwu_pinr261GUXH-tQ8fp74m_8fIEy-9pMsX9oyifhzOJ_5v0n_--Bwkn889ZPnAO6zyfenzxwZvv7189pMPz94xafEzDp8TMCnxB83vhn6B_gfRKGU-D6Sryjcqvw21d3Vrmr-h_piOr-xTav8ZkOe964B-y2PdZH-iZ9vjn1R-e3zn4Mt-ddr4wOMfBa15_H3bH7I-WUnAutROvFnK697vHr9Y9evojE6--vrAqtwcfUXy3opf6O6G8Jfek0l9Yct39S_xfuX0_LCiJTJez1f2jKV-ZvkPBl8AfWX2hAEdQP2V__fhzBp-9M1X70zlvun-A-HMywrOA1vBT_p8NvRny1-Qf4y2Z9a0RD7C9dfrhyYNNbdn6a8zfWj3N9bPtH4t-U7o79TPbb9r55_MfG36F-4fO31FQzvc7-6_pi_Ah9LwsTr-u-bvhPzu90oXP_WKXfh7_sis6L38_1vf0P2Kuxv5aDwJQ_tTDG9Cf2nUk-y_PHBE8c8P3xj_A_-7aR2Zf4PxMwGQwa-j-Nf8LPW9Mv5RG18TL5YkPNEjFB8M8ZTCqIh-ZoNIx1TSP_X_WK4fny6aOOiuH2gQWjk9w78Knbb3M8qvc95PM9jiL9N8OfofxchOfFgEGMPLxExYBYvKjzi8hqCf0ZTZY9j-ffzvrPwIITj0X8pNUvRk30Op_KvwJ_XPOfyUzl_af6998fNYBX_njZrFh0Sfyf43-UK2X3X8TMMny3_d_2jLV-t_rzz--j_Nr0p9IPXfzxyXLQ_-b8T_Lg6P9z_tTNV-L_I__P_7If98v99_C_0P8r_e_9b8z_WP8f8kTg_xy2tvFn3C8L77vzH9TfnJmT_n_ifxT80fdt_shV_Nr0t_ibXW5O-7_a30z8BfQv7sfSlDKTPb4uvEL5h3I76kvYv6N_W_4xfYT5v_KKjCTD_6XPGv6svJ_7ksBAGL_SW6a_bAG1gZN5ffDAEifcf6b_b25T_Au6n_CH6IAiZiA_HL6UA_v69_IgG1MA_7MAtJh__Q_4lveX4oAkphw_agGiMbf6kAkNbVvEgGsApgEcA5r70A6kySApf7ETbUxTjIP6mjaF5X_An7f_b7hpzC0YavCADnwOsb7vVyyjfWI7K7Pv6nbZYQpAZQFYtG0TDfVyz1QUlDaAjNB-_IlCx_B_7x_MQG1gJP58ArIbSAqmAjvAoCLrCd4dkSMBaMMv7rfQAGbffz7n3Hb6gAgl4C_Ld7uQYX5uvUL66AsYpwCOAHcfLAGCAs96L_Nf6CA_egsoQr6eAiQHuA6m5oA6P69sBv48cDIHZAnRhfvFwHw_IF6FAgV7kA6954AqQH1A4p75AkF7AfdoFH_VoGnMGoG9AroEsAhr4TjOQHETTrQ0jFf5hTGsBO_du4u_eABu_OFrXdL357ADD6cPbD4SkQP6TfNZQEfTr5EfKP6kfdR6k_ZwGUfC17UfMp6_bI6jeaOqaJACziRgM76jDXEzhYWm7efNAShAppYBfZIE3fBLpJ3e76afMVaG3Wr4cvYr5tA2pgU7JHYIxKtiXA6oHpfIhAd_I369MKT79_PL7WsAEG9sXX5GUP74W_VH6Yggz4yvTH4QvUz624Dr7EPIj5UbTYHiEez4r3Wb4nA-b5U_C4E3TXeZ3TQn6rfKmBgAjiw7vV7APAp4HM_Pz5vA8IEnfXb4Evfb4QAsL71iCL6s6BO4zrb4GVQRW6YTGB68A2oEnMJH4pAFH6iA3piggqnbggtUH0g9yCG3AgHaMX-5AgxT4fPaf4m_NJi0A8J6MArEHAgvX4FAhr4n_dWY4_Zjbh_STo97CPaqAqPaj0TQG2AmabLAgb4jfKI6G7Mb7AHM9Yk_cj6P_KKhuA2kFaabUEKoO8BbbENqbyMV5RAj3yC_d0GxA_b49DTkHBAgv6vA54GBfM37TvZMHAiVMFmtYwbOvNkHCgkl6A2Nn4CgntaoANd4pgmIGJAOIHkCRIHVoK76cfF56yMZToSvH4GI_P4EnMB95UArUGSzJ-RJvKEHlAw0G9MDEFo_bEGzg8342ghcGtfcMh2_FwZCwe67JGap5PGcIALNZp7LNHIx5GX64dPLp7lGYOB9PMG77Nbp7rAaYE-IK4x_rbjrd3FWS4fLV7piX36JzUe6cPCe4Lyd8HOgyz6FbRR7lTfYHkgw4GUg8n7Ugyn5EoFz7WdbF4M_eFh5_PMFAArb7VMCX5HvYW4IA_gGa_Eph2bWNZebX4F1ghX4FfIJ4I_VUFzg20HdAu0H4g7H6Egy_6EfV0GkPWz7JTCkFrPY4G4mS15nAuFS2vVQGwQ7j7ZgikyIQsIEUmGsFVvOsHlg28gHfUX4xECL5tEKX7oQpv6XKeW5WbHCGSrAw7aMGH61MeUG1MNEEsg4QHEQ-cHkQsiEUQloH2gl1D9EIkH4_Ij7dfFmhegg1A6AywGNWfQFGvQfDzyA4Fhgo4FGUSMGQQvR40_HwHjve14Fg8h40AfP58Q3MFq3ISH4vESHRAoX7hIRm7M3ed5pob0FrcBiEBoaX5b_TCGr_LgGDgpX6AfBgE3rS9a4Qq0E4g60H6Q4yEOg6Nr2_KYFOHW8FjgUDaw3cDYJAC8jzA2tB4_dt6R_BZ4s0RwErPNyHP_cCGv_bpjU_MNpoQ9X6yMNL4xfE55YcBl7K_LCGKQztYgfJcGGQuV4BoW36Og-247AuiElzBiEdQ5F6gQ8ogeQ4m7e3Vz7hodz6__Pn4EvSsFQA6sEoQ2sAyQoaFksZAFsvMaGHMCaGFvKaG5Q-zb5Q0iFzQ_oHFQ2sBLQ6iHmfWiG27T7iE_Yn4qTUKg1rX0Fi_IGa6vOyEaKAMGAHI15ndbIibQij7uQl_7sQ84GiMTiGlgn_7-A_yGFgkSFCg8x4JA86F72Zd54Q1d7nfCx7i_SL6dg3x43Qjl5pQ-v4PQ3thPQ4cEq_aaF3rZ6GFQ7mGfQkz7nKUyE0Q1aGAwt0HYwrPZdvYujIw8MGownqHowlvTeAsd70_Fb5VfAl6zvXIGHfbn5LvfkGcAiKGNgoX6-vCSGG9amEhULk5xvXsHN_Q5gXvXrisw00FYcbCEzQgqGLggyFfQxaErgmHqz6bQwPXap6nEdGC7g1fT7g766Hg9p6rXTp6A3U8HnXc8E9wDCCeIA5qYGa8GVQlxTsEDEiZ6R8HIfZ8He_GIhvgpBY4fT8Fkg73DbA4kFrQvYG5wnt4gQ5iFEoXaEeA9EEVbY6E8QgAE5gln7AAmmFEoaL4pUWSFIAxmHrUb2EjPTv4ggp4ZgglSHRg6HYwgnN5y_fCH_AvIF1fKcFOw3mHOw76GoPH6EEgvB64_IlRCwqz7KPGz7z3EuGuQ7aEsQvEwQQvqEk3A6H2QI6H-Axn6BQhCEhQ94Hs3dgDBfImGQA8L7HfJuEXIa6HwAKUHyQ3phdwkeG9w6HYaggeHrUUEHDwnuHaw_BgEQ8tATwhUFcwx2Ezw-eEwIi_CLwi_7_Q1eH_g1V7GDEGHGTB8bpww2FQwob5-gvQFww_fa6KRGHgde_6dQneHSw1iGnAtohb3L_6iwvyH3QuuHBQhuFIQlx7Xw7SEEw8AF3wkUGSQx-HqCcmG_QFsEXfA95Pw5uEvPFKEy_c2ETMNSGw_F-7EA3SGSInSF1Ah2HaMT-FAI7-GI7X-FpMABHt_L-F6Q-aF6IhaFGUdiHtfQWEFw4WGZ7GLriw8ZiSwrqHlwtGFUIryHxg1iZKwqtjwQ7kEG0ZhHYCVhFCAkSGqw1lAGwoXqaw3n6jw1d6RQtMHNg_WHEw3BFJAy6FHvURFtwuSGG3KRG1MIcE2ww5gqIuEFqImn7wAXc5_wweGI7QBEZIoqFQIueEGIl2H8wt2HrAKp67WcEyQmMhCQPX2G3nAy4Hg_IxLkP67FGEOFlGTAwVGGy79PS8GwmenZt3KqHdnf4wSYIEwgDUYaNQp8FLAwe6rAn8HZwjxF4fVQ7fgrOEAwteEAQkGHWIshHdQihE0gzyGHwrP7Mg2B7nwtxFF_YRGoQiUGvw4aEdwhFj_DGExVsSYYTAc4azDUV5FI2eFGQyiFHMAWGII0xFrI9aGbw3xDbwsuHbIveG9Q9_7U_ejbOI2uHHIkIFMIgSEG9MKGOvU6GcIqsGkwmJHsAFuG5_eJFxfCRElMO4Z3I3pgPI2obgjGYaQjF5E8wkpGosX6FLwp0FmAtaGWQz0H3jcGFtgptDQwqJGwwg3bww8b5S6JfbAQwFH9vNF52Ihb77I6bbcQ0aEMIg3r8Q3kGCQ6-GsgsSFnQh-HQAoJG1gimG7vQRFhWDsEiIwaGXI26F9g2ph4o9ob3I0EaPI4lEXDCCRko4pHvIy1ELwqiHUolaE_I5BGdvHLj_IpiH8ogd6CoqMFVw7yEKwhMGiolKi8QiVGXwvkFmVRFE-Izn6RI-sQ8_XhGnfIsEbvJsEtg_xEecdVFool-HxvHVE4o6Ma3Ig1EEoo1FEoiboQjM1GzQkpGwIylHwIip7CwZqBpOcDCaAagDuCRpEgAKJCIzJFBAgYkBVAbwDKXX8DkgctKQ-W4Y92SwpIoEKA4AAdEhQSlD9UHJ5WFa4r5AP8DwjH0Cdo2MjkgBYJ5gcMKZwasjsccoAggNtEIyZRAocY7DhGJfSaAEdH2wevKt0BEDQKQxySUY9TmgcIwAAPTz83GhwANZkZQ_VEisSKCvRDyDU096MCMIsBXwecDMkxcFLgg8BfRmJySg96IfRlhjMIE5EHInzCRQkVkfR2Mg6e16P6g96I_R0iV1kx4NDhVhSvReJwgQyGNgxbl3CuWN2vReJ2AxrVRQxI1DCuVl3quGF0cuCGLAuIGM_ReGKsu2102AFoGiuAVyj4gGOwuOABgxYGJXR1oAQxaUDvRNZhr2KZHXRuAB0uKxlrR-l3rR20l9AWSU3MVB1oAyBnNARcDmAqtAUA8gHkAQAA`} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};"],"sourceRoot":""}