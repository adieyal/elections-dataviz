{"version":3,"sources":["webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.mdx","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_tooltip","Chart","container","width","height","className","options","predefColors","svg","tooltipDiv","createTooltip","mainSvg","errorText","this","draw","originChartData","colorsData","chartData","i","length","partyColorByName","partyColorsData","edge","totalSeats","rows","radius","poslist","J","R","angle","Totals","console","parseInt","Math","PI","x","y","j","onMouseMove","d","name","d3","pageX","onMouseOut","a","b","value","Counter","partySvg","getFillColorFromPartyName","seats","pythonConvertedCode","partyName","destroy","chart","horseshoe_partyColorsData","chartOptions","chartType","horseshoe_className","originName","styles","refreshIntervalID","HorseShoeChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","react_default","createElement","config","ref","dataLoaders","getSeatsData","partyColorsLoader","getPartyColors","values","seatsData","error","data","parseSeatsData","SeatHorseShoeChart_horseshoe","provincesData","getProvincesData","horseshoeEmbed_className","originClassName","bootstrapStyles","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","SeatHorseShoeChart_horseshoeEmbed","MDXContent","horseshoe_classCallCheck","horseshoe_possibleConstructorReturn","horseshoe_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","HorseShoeChartEmbed","embedcode"],"mappings":"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","file":"static/js/src-components-seat-horse-shoe-chart-horseshoe.55a1a3fe.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__3KEZl\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__2bLlY\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"horseshoechart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport HorseShoeChart from \"./horseshoe\"\nimport HorseShoeChartEmbed from \"./horseshoeEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---horseshoe-chart\"}}>{`Race for Seats - HorseShoe Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<HorseShoeChart width=\\\"600\\\" height=\\\"220\\\" />\\n<HorseShoeChartEmbed />'} __scope={{props: this ? this.props : props,HorseShoeChart,HorseShoeChartEmbed}}>\n    <HorseShoeChart width=\"600\" height=\"220\"/>\n    <HorseShoeChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};"],"sourceRoot":""}