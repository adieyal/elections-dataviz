{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","Chart","container","width","height","className","tooltipDiv","predefColors","svg","parseInt","document","d3","x","y","YaxisOffset","barSvg","barTextSvg","this","draw","chartData","partyColorsData","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","d","name","bars","formatPartyName","l","toUpperCase","pageX","Number","percOfVotes","barTexts","destroy","barchart_partyColorsData","barchart_className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","events","window","console","clearInterval","Math","_this$getWidthHeightB2","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","style","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","parseVotesData","__webpack_exports__","leftContainer","rightContainer","barchartEmbed","mapEmbed","barchart","BarchartWithNavMap","onResize","map","BarchartWithNavMap_barchartMap","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","type","placeholder","onChange","onEventDescriptionChange","item","key","onRegionTypeChange","disabled","onClick","onPreview","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.e9e6ca80.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className) {\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n    var svg = container.append(\"svg\")\n        .attr(\"width\", parseInt(width) + XaxisOffset)\n        .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"PERCENTAGE VOTES\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      y.domain([0, 100]);\n  \n          svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n          svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return d + \"%\"; })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + d.percOfVotes + \"%\")\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(d.percOfVotes));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(d.percOfVotes));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return d.percOfVotes + \"%\";\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(d.percOfVotes)) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"./d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\n\n// for the purposes of the proof of concept - production data should be live\nvar use_live_data = true;\n\nvar js = {\n    \"data\": {\n      \"allProvincialBallots\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"partyResults\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"validVotes\": 15311,\n                      \"percOfVotes\": 84.44,\n                      \"party\": {\n                        \"id\": \"52\",\n                        \"name\": \"DEMOCRATIC ALLIANCE/DEMOKRATIESE ALLIANSIE\",\n                        \"abbreviation\": \"DA\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 1508,\n                      \"percOfVotes\": 8.32,\n                      \"party\": {\n                        \"id\": \"7\",\n                        \"name\": \"AFRICAN NATIONAL CONGRESS\",\n                        \"abbreviation\": \"ANC\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 328,\n                      \"percOfVotes\": 1.81,\n                      \"party\": {\n                        \"id\": \"938\",\n                        \"name\": \"AGANG SOUTH AFRICA\",\n                        \"abbreviation\": \"AGANG SA\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 255,\n                      \"percOfVotes\": 1.41,\n                      \"party\": {\n                        \"id\": \"945\",\n                        \"name\": \"ECONOMIC FREEDOM FIGHTERS\",\n                        \"abbreviation\": \"EFF\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 198,\n                      \"percOfVotes\": 1.09,\n                      \"party\": {\n                        \"id\": \"4\",\n                        \"name\": \"VRYHEIDSFRONT PLUS\",\n                        \"abbreviation\": \"VF Plus\"\n                      }\n                    }\n                  }\n                ]\n              },\n              \"location\": {\n                \"id\": \"UHJvdmluY2VUeXBlOjk5\",\n                \"name\": \"Out of Country\"\n              }\n            }\n          }\n        ]\n      }\n    }\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n\n    getRegionName() {\n      if (this.state.regionType == \"national\") {\n        return \"South Africa\";\n      }\n      if (this.state.regionType == \"province\") {\n        return this.state.provinceName;\n      }\n      if (this.state.regionType == \"municipality\") {\n        return this.state.muniName;\n      }\n      if (this.state.regionType == \"municipality-vd\") {\n        return this.state.muniName + \"-\" + this.state.vdNumber;\n      }\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>RACE FOR VOTES ({this.getRegionName()}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              style={{width: this.state.width, height: this.state.height}}></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      if (use_live_data) {        \n        var votesDataLoader = getVotesDataM(props);\n        var dataLoaders = [votesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n          var votesData = values[0];\n          partyColorsData = partyColorsData || values[1];          \n          self.drawGraph(container, props, votesData, partyColorsData);\n        }).catch(error => console.error(error));\n      }\n      else {\n        self.drawGraph(container, props, js, null);\n      }\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftContainer\":\"barchartMap_leftContainer__BYHhn\",\"rightContainer\":\"barchartMap_rightContainer__1HX_C\",\"barchartEmbed\":\"barchartMap_barchartEmbed__3_psW\",\"mapEmbed\":\"barchartMap_mapEmbed__3so76\",\"barchart\":\"barchartMap_barchart__3AWTP\"};","import React, { Component } from \"react\";\nimport \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.vdNumber) {\n            this.state.vdNumber = props.vdNumber;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div>\n            <div className=\"leftContainer\">\n            <BarChart {...this.state} />\n            </div>\n            <div className=\"rightContainer\">\n            <Map {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents\n} from \"../../api\";\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"Western Cape\"\n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"City of Cape Town\"\n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---barchart-with-navigation-map\"}}>{`Race for Votes - BarChart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};"],"sourceRoot":""}