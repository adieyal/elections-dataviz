{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getTurnoutData","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","concat","legends","text","parseInt","getLegendXY","it","data","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","error","console","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.8e7fad31.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = \"race-for-votes-map.png\";\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}