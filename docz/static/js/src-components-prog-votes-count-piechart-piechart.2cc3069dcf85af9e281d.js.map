{"version":3,"sources":["webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.mdx","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","Chart","container","width","height","className","options","data","margin","category","floatFormat","d3","colorsData","colour","key","Math","radius","pie","d","arc","svg","path","errorText","toolTip","selection","tip","toolTipHTML","arcTween","i","this","_current","t","destroy","draw","value","colorsDataP","updatePath","data0","data1","m","length","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","chart","chartOptions","chartType","piechart_className","originName","styles","refreshIntervalID","PieChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getRegionName","react_default","a","createElement","config","ref","dataLoaders","getProgressVotesCount","values","progressVotesData","error","console","chartData","parseProgressVotesCount","parseInt","Completed","Not Completed","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","PieChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","province","name","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","ProgVotesCountPiechart_piechartEmbed","MDXContent","piechart_classCallCheck","piechart_possibleConstructorReturn","piechart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","piechart","embedcode"],"mappings":"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","file":"static/js/src-components-prog-votes-count-piechart-piechart.c109a15f.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport PieChart from \"./piechart\"\nimport PieChartEmbed from \"./piechartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"progress-on-votes-count---pie-chart\"}}>{`Progress on Votes Count - Pie Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the progress on votes count as pie chart.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<PieChart width=\\\"600\\\" height=\\\"220\\\" />\\n<PieChartEmbed />'} __scope={{props: this ? this.props : props,PieChart,PieChartEmbed}}>\n    <PieChart width=\"600\" height=\"220\"/>\n    <PieChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};"],"sourceRoot":""}