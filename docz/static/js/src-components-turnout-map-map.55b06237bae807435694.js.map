{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","ELVIZ_map-title","ELVIZ_loading-spinner","ELVIZ_tooltip","ELVIZ_stylesheet-tv","legend","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","stylesheetFor","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","console","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","filename","concat","getRegionName","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","_this$state","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","config","CSS_PREFIX","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getTurnoutData","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","getMunicipalityiecId","properties","PKLVDNUMBE","SPROVINCE","getMunicipalityCode","topojson","projection","path","legends","text","parseInt","getLegendXY","it","data","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","error","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","curProvinceData","item","react_default","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.81bf2025.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        console.log(\"componentDidUpdate\", this.state);\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")+\" \"+className(`${config.CSS_PREFIX}stylesheet-${stylesheetFor}`)}>\n                <div className={className(config.CSS_PREFIX + \"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(config.CSS_PREFIX + \"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                case \"municipality-vd\":\n                    return \"vd-data/\" + self.state.muniCode + \"-\" + self.state.iecId + \".geojson\"\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                function getMunicipalityiecId(properties) {\n                    return properties.PKLVDNUMBE;\n                }\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .style(\"height\", \"30px\")\n                    .style(\"color\", \"black\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        } else if (regionType === \"municipality-vd\") {\n                            newState.regionType = \"municipality\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}