{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/BarChartEmbed.js","webpack:///./src/components/TurnoutBarchart/barchart.mdx","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","chartOptions","percVoterTurnout","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","eventType","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Math","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getRegionName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","dataLoaders","getTurnoutDataForAllEvents","values","turnoutData","error","console","data","parseTurnoutDataForAllEvents","parseInt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onRegionTypeChange","province","key","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","TurnoutBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-barchart-barchart.ae9f70e1.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---bar-chart\"}}>{`Turnout - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};"],"sourceRoot":""}