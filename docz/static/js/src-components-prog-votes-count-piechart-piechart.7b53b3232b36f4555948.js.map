{"version":3,"sources":["webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.mdx","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css"],"names":["module","exports","chart-title","Chart","container","width","height","className","options","data","margin","category","floatFormat","d3","colorsData","colour","key","Math","radius","pie","d","arc","svg","path","errorText","toolTip","selection","tip","toolTipHTML","arcTween","i","this","_current","t","destroy","draw","value","colorsDataP","updatePath","data0","data1","m","length","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","chart","chartOptions","chartType","piechart_className","originName","styles","refreshIntervalID","PieChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","svgToPng","refs","vizcontainer","childNodes","react_default","a","createElement","getRegionName","ref","dataLoaders","getProgressVotesCount","Promise","values","progressVotesData","error","console","chartData","parseProgressVotesCount","parseInt","Completed","Not Completed","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","PieChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","province","name","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","ProgVotesCountPiechart_piechartEmbed","MDXContent","piechart_classCallCheck","piechart_possibleConstructorReturn","piechart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","piechart","embedcode"],"mappings":"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","file":"static/js/src-components-prog-votes-count-piechart-piechart.742edb26.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-title\":\"piechart_chart-title__3WNCY\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"progress-on-votes-piechart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport PieChart from \"./piechart\"\nimport PieChartEmbed from \"./piechartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"progress-on-votes-count---pie-chart\"}}>{`Progress on Votes Count - Pie Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the progress on votes count as pie chart.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<PieChart width=\\\"600\\\" height=\\\"220\\\" />\\n<PieChartEmbed />'} __scope={{props: this ? this.props : props,PieChart,PieChartEmbed}}>\n    <PieChart width=\"600\" height=\"220\"/>\n    <PieChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};"],"sourceRoot":""}