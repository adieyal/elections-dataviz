{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.mdx","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.css","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.css","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Math","event","svgToPng","refs","vizcontainer","childNodes","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","selectAll","remove","rect","rendercanvas","ctx","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","e","canvas","lnk","createEvent","fireEvent","loading","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","concat","parties","availableCnt","party","b","legends","getLegendXY","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","menu-widget","margin","category","floatFormat","colour","key","radius","pie","arc","toolTip","selection","tip","toolTipHTML","arcTween","_current","t","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","PieChart","react_default","getProgressVotesCount","progressVotesData","parseProgressVotesCount","Completed","Not Completed","submenu","label","active","provincesData","metrosData","getMetrosData","CustomLink","onClick","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","_this2","activeLinkId","handleNavBarSelection","link","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","MAP_PREVIEW","content","icon","map","province","metro","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","bootstrapStyles","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","comp","quickResultsWidget_assertThisInitialized","_this$state","barchart","Map_map","RaceForSeatBarchart_barchart","TurnoutBarchart_barchart","piechart","SpoiltBarchart_barchart","QuickResultsWidget_quickResultsWidget","quickResultsWidgetEmbed_className","originClassName","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","quickResultsWidgetEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","QUICK_RESULTS_PREVIEW","DOMAIN","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","muni","onPreview","replace","QuickResultsWidget_quickResultsWidgetEmbed","MDXContent","QuickResultsWidget_quickResultsWidget_classCallCheck","QuickResultsWidget_quickResultsWidget_possibleConstructorReturn","QuickResultsWidget_quickResultsWidget_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","seats","getNationOrProvinceName","getSeatsData","seatsData","parseSeatsData","percent","getSpoiltData","spoiltData","parseSpoiltVotesData","Valid","Spoilt","percVoterTurnout","eventType","getTurnoutDataForAllEvents","turnoutData","parseTurnoutDataForAllEvents","getTurnoutData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it"],"mappings":"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","file":"static/js/src-components-quick-results-widget-quick-results-widget.b541fe07.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-votes-barchart.png\");\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        var ctx = rendercanvas.getContext(\"2d\");\n        ctx.fillStyle = \"blue\";\n        ctx.fillRect(0, 0, rect.width, rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = \"race-for-votes-map.png\";\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu-widget\":\"navbar_menu-widget__VPoXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-title\":\"piechart_chart-title__3WNCY\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"progress-on-votes-piechart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"quickResultsWidget_tooltip__1X8PF\",\"submenu\":\"quickResultsWidget_submenu__Wzs5x\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\"};","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        to: `2-${i}`,\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ]\n        \n        return (\n            <div className={className(\"menu-widget\")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatBarChart from '../RaceForSeatBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || bootstrapStyles[originName] || originName;\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\"\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        this.handleRegionChange = this.handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      if (newState.regionType != \"municipality-vd\")\n        this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    };\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            comp\n        } = this.state;\n        return (\n            <div>\n                <div className={className(\"row\") + \" \" + className(\"submenu\")}>\n                    <div className={className(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results for \n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={className(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div>\n                <div className={className(\"row\")}>\n                    <div className={className(\"col-md-4\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatBarChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap {...this.state}/>\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map {...this.state}/>\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport QuickResultsWidget from \"./quickResultsWidget\"\nimport QuickResultsWidgetEmbed from \"./quickResultsWidgetEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-results-widget-v1\"}}>{`Quick Results Widget V1`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<QuickResultsWidget />\\n<QuickResultsWidgetEmbed />'} __scope={{props: this ? this.props : props,QuickResultsWidget,QuickResultsWidgetEmbed}}>\n    <QuickResultsWidget/>\n    <QuickResultsWidgetEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-seats-barchart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3yxxz\",\"chart-title\":\"barchart_chart-title__3RHv6\",\"chart-body\":\"barchart_chart-body__3x1qF\",\"percentage-label\":\"barchart_percentage-label__zQdUV\",\"chart\":\"barchart_chart__1_lSr\",\"large\":\"barchart_large__cgVCh\",\"y-axis-label\":\"barchart_y-axis-label__3UnAe\",\"y-label\":\"barchart_y-label__1I4tN\",\"annotation-line\":\"barchart_annotation-line__bj9Mi\",\"tooltip\":\"barchart_tooltip__2BaaR\",\"grid\":\"barchart_grid__2TlS8\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"spoilt-barchart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__1j4ev\",\"chart-title\":\"barchart_chart-title__1Jyfd\",\"chart-body\":\"barchart_chart-body__1kYVj\",\"percentage-label\":\"barchart_percentage-label___T79M\",\"chart\":\"barchart_chart__39bxI\",\"large\":\"barchart_large__2FPoB\",\"y-axis-label\":\"barchart_y-axis-label__2jJOX\",\"y-label\":\"barchart_y-label__1JqpW\",\"annotation-line\":\"barchart_annotation-line__2ve98\",\"tooltip\":\"barchart_tooltip__2MpDn\",\"grid\":\"barchart_grid__2s8E-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"turnout-barchart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = \"race-for-votes-map.png\";\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}