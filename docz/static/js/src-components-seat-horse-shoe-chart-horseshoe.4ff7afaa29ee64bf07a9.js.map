{"version":3,"sources":["webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.mdx","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","Chart","container","width","height","className","options","predefColors","svg","tooltipDiv","createTooltip","mainSvg","errorText","this","draw","originChartData","colorsData","chartData","i","length","partyColorByName","partyColorsData","edge","totalSeats","rows","radius","poslist","J","R","angle","Totals","console","parseInt","Math","PI","x","y","j","onMouseMove","d","name","d3","pageX","onMouseOut","a","b","value","Counter","partySvg","getFillColorFromPartyName","seats","pythonConvertedCode","partyName","destroy","horseshoe_partyColorsData","chartOptions","chartType","horseshoe_className","originName","styles","refreshIntervalID","HorseShoeChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","react_default","createElement","ref","dataLoaders","getSeatsData","partyColorsLoader","getPartyColors","values","seatsData","error","data","parseSeatsData","SeatHorseShoeChart_horseshoe","provincesData","getProvincesData","horseshoeEmbed_className","originClassName","bootstrapStyles","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","SeatHorseShoeChart_horseshoeEmbed","MDXContent","horseshoe_classCallCheck","horseshoe_possibleConstructorReturn","horseshoe_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","HorseShoeChartEmbed","embedcode"],"mappings":"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","file":"static/js/src-components-seat-horse-shoe-chart-horseshoe.ad4656c1.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"horseshoe_chart-label__1WUYd\",\"chart-title\":\"horseshoe_chart-title__2Fpr1\",\"chart-body\":\"horseshoe_chart-body__2F-sV\",\"percentage-label\":\"horseshoe_percentage-label__3MWZZ\",\"chart\":\"horseshoe_chart__3-Rh0\",\"large\":\"horseshoe_large__1tOn2\",\"y-axis-label\":\"horseshoe_y-axis-label__1lhEi\",\"y-label\":\"horseshoe_y-label__1Bz0g\",\"annotation-line\":\"horseshoe_annotation-line__3vYju\",\"tooltip\":\"horseshoe_tooltip__203CC\",\"grid\":\"horseshoe_grid__3u_Bi\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"horseshoechart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport HorseShoeChart from \"./horseshoe\"\nimport HorseShoeChartEmbed from \"./horseshoeEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---horseshore-chart\"}}>{`Race for Seats - HorseShore Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<HorseShoeChart width=\\\"600\\\" height=\\\"220\\\" />\\n<HorseShoeChartEmbed />'} __scope={{props: this ? this.props : props,HorseShoeChart,HorseShoeChartEmbed}}>\n    <HorseShoeChart width=\"600\" height=\"220\"/>\n    <HorseShoeChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};"],"sourceRoot":""}