{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVSeatCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchart.mdx","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","barchart_partyColorsData","chartOptions","topLabel","usedValue","yValue","d","seats","yValueFormat","dynamicYAxisFromValues","className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","d3groupbarchart","d3","react_default","a","createElement","ref","container","dataLoaders","getSeatsDataForComparison","desc","exec","partyColorsLoader","getPartyColors","values","seatsData","partyColorsData","error","console","data","chartData","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","edge","thing","index","t","abbreviation","e","options","i","l","length","selected","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","partyAbbr","curProvinceData","item","type","placeholder","onChange","onRegionTypeChange","multiple","onEventDescriptionChange","key","province","name","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVSeatCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","__webpack_require__","__webpack_exports__","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","width","height","predefColors","svg","tooltipDiv","createTooltip","x","y","errorText","groupChartData","colorsData","partyColorByName","minMaxY","groupSvgs","groupSvg","bandwidth","YaxisOffset","subX","barSvg","barTextSvg","barAxisTextSvg","bars","getFillColor","getTooltipText","pageX","Number","barAxisTexts","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","toUpperCase","destroy"],"mappings":"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","file":"static/js/src-components-tv-seat-comp-barchart-barchart.4edebf18.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-seats-comparison---bar-chart\"}}>{`TV Race for Seats Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return options.yValue(d); })))\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('fill', \"#DEDEDE\")\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}