{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/Map/map.mdx","webpack:///./src/components/Map/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","partyColorsData","regionColor","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getMainParties","partyColorsLoader","getPartyColors","values","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getMainPartyName","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","edge","topojson","projection","path","concat","parties","availableCnt","party","b","legends","parseInt","getLegendXY","data","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onRegionTypeChange","province","key","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","Map_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-map-map.7175d62d.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\nimport { resultKeyNameFromField } from \"apollo-utilities\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        // var ctx = rendercanvas.getContext(\"2d\");\n        // ctx.globalCompositeOperation = \"source-in\";\n        // ctx.fillStyle = \"#ffffff\";\n        // ctx.fillRect(0, 0, rect.width, rect.height);\n\n        var canvas = rendercanvas, filename = \"race-for-votes-map.png\";\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---map\"}}>{`Race for Votes - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the race for votes across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKZ9VmN0TX4T04AEchASdah9DgSRoJmSQohmfhVVQAV7Sg2ZzyIQIcmNOV4MkRDkM-DcaAwrCcNI8jsnwu0NXYIMpVguUFXNdouIdYB2E0Hx5H4-UAAEYCIEQBlQFCumEgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZxsgAWJz2AANiclz1jAECADEfWgRIbP4ZxDkRR1MHYAAFIR-CWBSfjgdzEWCmtQpoZwIB0y52AARm81z5HBDTqC0gBBOZjPYSMxPIGwoHQcN2HkTljLEFqYxkdhUUMmBuGAQ89IM7F5G3WtgHa6AuuCAAyVbxkSeZKGaJbOu67hDvlMBQg0ntUHadgAH4NmW8NIz6q49pW1BqprKQZGrd8zFhbjMDAMIoCmB7-sG97GpXGtE14ggcDCzIUmvAh5trOssPYLdV0TLCyIojGUbrSQYbhhGkfmqQIa-sxvxAOiUIzdDMNmViZgArQKBA_QGCI7iYaWMT1zQrMpKo9h-DNKVOMIyD2CMEI7HQZNpP4RWpZ5h05f8YchU0FlRf4CIdbgagLXIKAIH0NWZbgVgUksShktnZXadcVgYAtG2UgtfwLRmWcreI1ZUFt524mDwoQAIkSpl0SA531kAcE9JOUNQOOA-4oUkigVxAigZ2s8M3OFwzh1RqMhPPVwj44DgUuphgN2mOdlOU8b9D654rUABlKE7ApnYly0oD7zyI4I9WpjMqHRwIaC0GS1wRQtuBXNRs9F5FRJHBHgRV9XDehD-DT4G1aJXDMEX3Xg5PPVmCBO-nix3L3mB59QTeDLPghXDX2fxWeNQAAcj6GAf8zzODeAApSIDjx_3IGaWg9tKBAwgDMcBY59SnViGg-ILxt7Fj_pALAWFu7FygA0PQr8pR_zRBATEGR7B5AiEQc8TdRCvRbrfSQ4RoB10jtHUyk54ChCBgAaRgIkWBMB4aRDChbTqPVnazBQSPC0vDzYxHgFLMwrAl7CMAagHewpmr8AAMQAE5yBWKsVLPRRwuiGJvMKacxijgmXMUELxTIBHB30S_Aybi4Df1cFHNOp0pRKR6DnWu0jIzCnoWgaRfUn7CIIH0cw5d4AAG0ElWWkQAXXYAAH2KXsfo-TQEETero_xR80CImCefZqh9fgNNPufB6YSzb-DsOjbAoF0B2EFpmKeNVUaaTRKEKUwpIwDkoHcFJWNawMjhHMwccBPzLIsBMWwOBURZGaqk1GJzji2FzrAEBfwUjRCUlcAGUA4BgO2Sc9uNBtTwAQWg86Vx-AACZbIVXYCA86fZLxbHOulF5qNHFKUsFtUq_BUC3N7FAKFM9TnP3qSfaRvyQDosxScog2DcVi3xSAP-hKLDEsIo4TAeKCVUosBbcgD4GX4oxbWGpnLmXNHWQsuAYYYCGPhfMJZPKTm7MFQc2gQqRUIuavMu4cq4UIoIoSt6hKIB8qVYK-Zx9ETJNMtC2sUr9k_1lfq9p0jFUbJwFanFVSXmasxdqlquqcA0ogEa45VKzUyv_F6m1JkPVBqdRKl1py3X8uVV6ulMBxVMp2YSc1WRPXYPjbagV6baXFnVZiyNJzo0epYBUDwlzXb0JRR-Y1ErUb-otf-UtFyYBXKredLNyrm3ltbZWm55182nMLfWlNv0RT1TgMlIBABxAAqv0ZqZqx0EAnVOud_QcAeFUJGKVWyJVLqwMRVdM7F2jsPRqY907N3bt3YOyVKa_AYFgKlRuFsRhsNdCZM1j70DPq6H8GA772HXowDuwke7UbctRl1VwIxIy6B_mgDIZINmJsxWamDIxp2ZBmHgeDIFXBIYEChgVEGuXjNrAxIWOouD6jaDQEGvqR17Mw2BvZZ5HA0EIy6AQD0lgNqyO-Qlh5QhIxwB5D9NBu62FAlGN5BBBXngABrJV1KKSwAB9Nd_Gz1HsnTOsjpyRNiYk-w6TqJ0i8fk4K_U9VkpadFOeAAag0c8AB1HTeyf1_tfYByTBBDM9QoxYKjoy3PQCgLO1AClToEEY8ss1HGCNEYevshcEL6oJGjLTW2_BORCoUm7LpyzjMni6IVmA_nzOyas-wxTKm1Oae0wSPZy7L2BYsKVmgBXfiVbMzJyzkZrM4Fs_Z5KjmXPuc84K7zMAX0AaA_oQLUHKOoVGdqLgs6ZjoCyPF_dKbWOJbHJxxDPG-MtelY2oT5H1Koza_p9dEA9uEvsSNBczQv2EjvTCscGT2AujGKlSINJIwnTOkpSMXRjZQDdksLo6gIVoaZa9rofETLAFxOgCYVwLEAFZbJLE2PQwgVwAAcFjbLyG-5ilHdBpxhz0XYEyXXYYIIlLQcFSMnwM_8G-anpypwZB59Ksc9Ubj9A8OEGA2XMcTHSsIqUOBZd4A65iwXSF3CM7Syu8XEBJe0Gy0TlIhB5eo9hkbwggWTUWEeOwV7UofAmXV8L08x3OZYDi_89AeX-cnNtw708I8PDxEFvkWguo4TVtMbTeK7t9hSyTRjSQPQCC4EgAkfSY1o9mLALnvPCek3-9TzgdPUBxRSkjAT9gVezdK64BMOHEL8AwGJwFsJieGcpEh3ToXmv_BLCeVAMAQqwCCr-DpBD3GMg4DQDxgAEpYfU3d-bW6LSkH4XQNvXnyHVK4Uznl1sxXAOIsBwtY7wFcWvyvKWJ5GifmAc-W_G4IJfpvFuOGJ96r7n70OivO774KhECErOqKN3NlgKK4GkJIH7CkMqMHk8v5N5HlvsuSC8E-IoG-NkmVAUtdkOstsFjCOeuOg9kNuwkjicrTmjqZMrjjvjoTk_iTuwOTpTr7rThGBrn4kztpEeCeGzlkJzvoNzgAXzi8v_pwdrmLnQvrtLvwMrqbk3srqrhYGIVrk8jrlIVLobgwaIBSgrubtoXui8p3t3uwcLtNiPmPsVJPkRjPqgPPovsvrWonvQhvjAFvnQDvqgPcOMOiAfonsfvEDAGftjnoXXufjfoSgEbAI_q3q_oru_s6oYRKrbvbqns1Cof4K7gQCdgMtln8t7iAEoUninrgFiJQMHlAKHi8DABHhkFHh4jHn0IiBaGgAXqckXmnhFpnrANnnnvnr4oSh0SXhFuXnFlXjXgofXngI3vEQYe3jTvosLukT3hwYzksOnnQKAtHpkM0aFAIBaKwCIPABaNXDAW0RQfolAKgLsMzqcKJrwYgpVleIIfwBfIUUsDAPMaclcdsDgCcCMKgCPJ2M1BsciseL7j8fgF0B9kHFrkAefCAWAfwBAVATAXAZSIgT7gQajNGizh8I8f5uQYSt0LcTwd1nwRzuwtlnRnkH1h3IUd_rWP-GgC8DSU8v5tlmbLENsPLvvvxr4UsLiBgKMBEbfkyuMUsBKdXusfEE8jKY8mAkaLKX4WKbfg8nKdKf9qIlAEUajJCaWu5AQO1ByQmr7lJAuE8pwHypCZAF0ISU4UmjaRAHaVSfwNQFyTsFiRGquCthYLNvNm-iaWQQ6acq9gDvpIciZPJn8WOIRlAL7v6mOBGQbuGVdj6QQUllxilkSbWF0OkgIOYIrGlrABXmatCZYRPsljxrgUFrdrWGeL3P3LOM4DMLPlGDmcob9gWccMmMWRCmxoKuWTgECWPDWcOmLDPOri1B2UWF4VMBMPJCSSGVSoPhCkpG4nimYvYLjmVGVP5H8vwM6qwfokxpit2hWtctWs6qensgGr7nmX9tGIfomMND0rEqAhNG-XAHEvwLhBaJjmeHlnNKvqjLGBwF-dIp-TEt-aAtln-TEAQLAEBWIMAGeNAsArBQJrQJyPIB9HGNiUmmBcImAHwCAOPtYTxvwNEr0pBYtNBT-SALhMhXhbICBbWERRBR-XRTRbBfwCOQUB7K2XYWCIUVJNCaRfxf7CAATKqXWDDI2WPJtPMBNPwNlK0QoEWLvCpSAGYgAOz6X8BSTv4TRlS2SU75hTEmVmVSSYzPknIsUyWYoOUvJjkEGYbYazB4YUXIb9iobLmoyvaD4wlSrHlHDIqgpQBYTyI9ENEOqIgaZqJQ6u6UC6wBi-IvJg6RIshoXCpKTRW9rHjPZJqZUdqtIGoyLQAFXS5xVVUzkvZ1JtKOrHj2z5Xozo5sWnL8DSbqhCj8B4rmxEAJWUAWhJVpApXGxpWilin8D6gzCibxDuA3J9VkqChDUjXwDJWpWMqyUWD8DTphCgQRx4opAEBrWjUwDjXUDbU7X8BiIjCuAABaoioQFoIK8Qy1_A2wOkqAZ1G1Y1W1FKHVJy_AQCGo-Ibm8AOheKqAIwv1gq_1E111sl_A8MQQ7AyZPieKo-cNm1iNgNdlhK_A54_gtA3Z9gswmNZKWwONCNV1-NO1tYINYNGQ5g5N8wH1IAGkNNF1ANU1t-_AENFmZNFNHNIw5A3Nl1k1QN45TKD53ZNV0iLVlVWE2SCtoCBSjJFgMtJycABY7UkYQVqasqsK1AoqCa_lSacQlpSK1a71SAQNP2-Z5g4VSk8QUVlVmtJyVt3Q_ANVfVDtuZXZ5gZV7S-VcShtAa9q2KhqoCupmK3tK12C5AuCmiiQ_tBNauQdb2Q-RtgaGaxY7AAA1GSjgIbJLecYnv9IDC_gHZ2U7VqQkJ7drb6RcUcCdAkKKPsDANOhdQAFITX5XNSxz0I4Ahj1QNBAJF1kosw7Y_x8ggBT05WGJh2wVJGRHvZZEKUFAtltm8Y1mErmpjTZYGk5xp26H8DlqnA8mFGr6l2ZBeEvAQ772Yp_F9DVqRgAq2TP2nKH2wDZYLKSj4Ly5lRr0LFHARAoIxAzAbYcAmQUkwDIKoIzDwb0Wx1fGt35jNQU62ShW-DNSk5mW4NeA3CRDQSWRoBYM4O257HsCwBpAYAvIo6t5kNWTNT47oMTJVnT6rlSiZZQDZaezIHla9bFYSqBUhxwNcMCDiZzB04CO5Y312Xibi7ZYDjwAZBuwTrzBSiigory78AkJoAACa-oFDx4Y4yBWS2WweOwKQQgp06ApsKCwoUKOlfRueeWt90QaI2WC2ziWA-jIA9k9kVFxdkYIwhdFShALDaAfUxdVFoTLUeAhdxDLCMTH439JyHw0F2Q8jXsCGlsuh--oDoZ-iY1_d1AClGQzURZqVoO2pndUuPdlAFTqA-VRRr2UQC8S8WiTSP8VT7is878n8K8MamyuDs9rgAzXB2S5TE1AzGU3GIzHS_To8GQGtBFvKLUAAhAEgQrvH064HVXbv4j0_s8KHAAMy0mOJ_Oc3vKI0ypM9M_ankHhns0EgM0US3ajEDkQDSOJllk82s3vPlguagPU-DtQJGHolAIyJsmJKvq9nM9QCEs1DC3C9krZBs3Za9iPHEOdPbMM2c4qkvE8kS1vCEtC_EBi9gSRosp7e8843vKiyGmc0Eqi6Uic7Czkn8hrbtXWcjqc1vG4neMGqZFToi0KwZPVB4B4AIKK1sejhK3ZcWmy0y4c-wOtP2GqwcyEtkirOfPwAUvqyAPEFAMs_wsa_wNkGkJa8c6jIy7q-fCa5M0aya2axa269a-gLa0ayXsKMTfrTaySQNKeUyo68KAq8eNksGzgD8JgHG-rc1LG_G_-FQCPH0J7Q62czK3K1GzADGz6_-Km4m8eEUlGUW3G8WOJrK_-hANWlmz1Jk5BonpsyciVVEmeNFZUUy7IkQLc3Ensz6mxdGrs2c8kkDXLeYCbUYky421O9q8K0y_m6reO6AigZotlvPZyJiwUkUpyzO24k3W26jB29lZgks2u4VYsJwPaxg0O-GrJbTvKvMM1BHY2iqqbWqkDdGjO2bcZEdDbRFXlhbWKa9mrceDU1HQshkL0zgM4ONrqC5kAvYOeI26cg-5ByZHi9WoS5e1vKrdHVVdi7JeaQqVaS1H-wqodLFURyB2G7fp0_nUlCZGeFgoRMne5KnfGpGOgNB3CL03HeG1e0uThwS5QOSwZNknGsWCR6qWR5acALbr-UnSnUAxygzRYGe8HZgqp1x_giyg-DGrByvHe4ngu0qiZxtclGIt3E5tqEArOvqDeGh7XbWZpyc0cIZzkKx7pxx2pwZN57x_x1Z-M255h6J6cLhxJ_h1J953J2KdrYShZyJ8e3Zdp0M7F3c32-heCzexAGZ7WOByJ9c3PFl3Evl0J_ezqyYr5wQN224n2wO7BRF1V47X9hGwIGl5K0cKlSEmFOzn0PAJ7dGu3WXl3c060_lbYWoLqGANlqXQsuXYUewNs0dBaCA6ZI8GXalZwHYLSZRCYtQEkOwF6nXBnVs5GNs8i6gCEjgOUQjlKHANku-2mjJ5gDgW51O3ekDTdyy9rJLSXoN10JGH9-fEsGDz_Pdx4I9wpi9xvZHe9zADgd13ZX1-fAN9EEN1wZD64ED1j1Dhw2A75SlWuSyMzr2WNfqL3hEHvcMQQEVCVJGNkiMITgUhD33RNSElV8V4WBT8lYvBMKlvMrDxDiL2Tx-ET-0cnqXgYlEgWPiIe0y6vp7H2bw1lnUAACTcXvmFXiy5V004XFDNsv2TORjo8_yY_5nwAm8_36DtlA0yPzCga-3RB4CeMXfsDKM-P8Bfny6cV6-CAG9pWci29ZPeO8aqVoiUDbA-KN5OIuKMJMth-oze-R_gARby5sdZeNeyi5cp-1hp_gEFHrERLnS8dLAFege34LvFAzsWja8QDyDFDodNuO8R_H3y6Gkq6e09eLu9PNTZIJdUqvauxxktr2BZgmRD-e0W-uBW_Y_-sCCBt4YV-3ugwMf1VHB7OleSdSKwWVet-qvLwbWqDYBzdzJnN9Trebeb9JoBIrwvNwBvNX-t-oxj_QAT_dZzXP-RggOt8Kdugd_JlB_xzg9pJ-BAVdif0FRn8sAF_PZpyCKSF1C6AA1fL1BPa1gH-G1Y2CKAhZZVwWv8dgB4E5DACTkC7UAV_0gFYCYBEYOAfN2IFFILQIQPRJ_3AE0AoBcHWARfyObD8NU30dLmX07Zjhu4wqOnEpiMaRgq-pA9rt2WySSCAApLjk5BGAyodBPBsXVMpT0X4TyShHFggCSAlBssdgN5CxZpdE8uLUQRgC4Kq8eGK6DXjgG14B8ZCIAOhnTiArG9HeZvagQXwsA4B7ee9dvrI1AztAUgb4dvio3aBoh3AcAPYjaCWBr8q-3AAaAbHvpwAc4BuRJg2UsHoBxBkguJmSm5CKNE8rgqwYEOd6Ph9eksIoaqSL6-9oK_vVBoHxKEFFQ-4Qnxu0GVwuR2AAKHwV7w77tB38XQnoW0N4ztBnIkpXoUX3aCJAuhX9EYdllLzy5L-W8Svtf1DZfcs6XbCLLn0iDNdCqCAgAWH2aGCpZg5Qp8LQA9xhDPeUw8YQ5DmHXD-hMwpYHuUmEXC4sO_JIf30SC5t5W-_aNns0-52VV80aV7sbWD7_s1uDRL1JxzwQGR6OQNGwelnV78N4I5ISUO7DAElxqhDNP4p0jn4L8ockw_wallOFyMDYAyD3h51qE6B6h59EAGiOaKYi0U2InatSIKiWh8gJUQJmVD-RORKRmnakVEK8KxD5c2nXjikgnIecAqixfwSRlF7UB7A_gt_q6j5R8cxqx4NEIkFLrUdAOIAZKCgkSApBDe1fDzoiCoSKoDRTI4LuqLHACAtRVAFxGgCyBhdPeiecXvgMVHmiQ0QgeUeCzNGk02uqpd0edE9Gk0sCjAkyDyOVGy0s6KQ6IekOcFaCfREvUMdU3iY31I4koqUVrRhDkcxIjwGaqIhiD6ikgRotKm50JT-jqmIaS0eQmtEXUNRdoj4MIAECeRnRu7QMWKWDHrl_BWaX0fBn8Gdjb83YhUf4PDHsALQJkXHNGKpQLs4xXhBMdliTGk8PRvY9MYUOVBZjsxSXJNOgNdGF8O-KsM-ksHgjJhcc8kfkTiKsbkiPc3sDSMMAECBM_mXYJCiyNkql1ciPnAaBAigTB8KuIXaAQPgR5XYw-3zFUS1FBH_gqOr7SEYnX876c4RK3aQbWGISkJyEugjIE8grxVcwJ0vGwF2GCBLwJQRoExPiyWhOxrMKvW2GrzsEojE48mMhIkBEqTCze-I4Hjb1vrEjJhpIl3vSLd6Xjb81IkvtqwmDcSVGdQ3pIEwYmuAmJj4t8UmmpFcBRRggqFpVxNFJpa-0k2SQ32ABN8W-0tMST7wz4JBAmQo7KERJoACTE893cFr-UGAXU3Yck0vpCzy6rD1JjzXsrYMjDFAzE9fRvs316EH1DxtMaPrH3_JTF5cyYQKS_WvHGSoAFoABsnUQmSkcApOIcXuPfFQs7JtJCrMpJckJClkH-TTiCOAlppoJJJXUdCIC5n0-o33NzhAyQYwM760Qx-lC25CiAip2Y1-pkHL6f12pvATqVKN_rODEp6nZ4SUx2oNSoGTUwgCQFB5Jlfxhif8ZZ0AnZ1h8AafIVRTxSL0L23TLeBV1WH9T9xP9WKbADAA6F4hRZaMu5DSBKZNp9IgJjfQ6kVjC-sUw2EsKunAYbpMAIxhOO6FpSp6vtR6VskGmf5JhWUxivZPjy6ExRak5CUZk8lIi4sPkvybpICkvTfBwU1EEIDClyFdCIDDGV71iml4EpOUMaeVCHGow3OJUnOpHXKkAcoRenWETVLSQZIpet-KaWgialmTWp4LfqaDIFHoA36vUsyvzMJnDT_6ZM5KdXhBkGTHeEMj0tfWcn4CCp7kqlDTPWkftzyvaS8udEK4xinaM4ncUyk5nQM2AzUh-uXzFnHSsmQsnqRDj6kDSnZNs1PrFNGnSyv6qoAWdNRtnPtVUr7EyJBM_aoAzaM4sMoBgxofF2EM439uCJ1ENEXaqKeES7NrCplIyas2SuVLxR-16a2Yk5BB1Kh8cVpcHBDqKCQ4T1UOhM42RzIqRpABATCVEJECDLoQcAjmadA0F1BAINM9gOfPVBnTnglgac7CjONRgR0kyjaSMEPNNJudABFHbvC-wqm0dGqiIZOXnP-wRzG0RyQmT9gXl4oqpCE48VuLXkk9yqpKIOQXL5oecw0x4K4EXMHChd9k-8-IJfM05I8rgbHJmdx2LDBdi5pnF-Yl0Jl0IGE9c5hE3KpLDY25HcruT3L7nToB568kYBjQmkecx5DPCeVPMplcpcxinYoip3gnMzDyKcrTipJ05zxP5BnLYEZ1_k28M5qpCzvfOgE4AbOdnBzk5xc4jybsa88OYgs3ntUiFZAuOfMD3nkKDIBxYSdvMwFEcz5pUy1FItAT_ydq180qEHKUUKLZKb8tabnRzQQB40ai1Ut53fl-ccEB8oLnfJg7QDOQeiplNXMTxAK65DclhM3KYitzzw7czud3N7n9zB5G8wTEbLlkqs-U2zIOdrLbT9olI-szziRLfbUSeJFQ8AMKCfyoBdQMPCFFZJqHBTHpgpP6aZXuFUjgph80ytFMxniSQAeM54aLLc7UiEiuhZMLkoFHBS_edIv8ghiECPI0lTKUKE7zJEgAsAs0qAIgBkDtLBJsS6xuEAiAh9KlDS2kSeJABGiLQNja-kUq959LssRoogZKEWWVKFZ5sT0jDJIVFVsxfsr9gHM0V0zBFnxQmdwsjkwho5q4S5foinlbz-FO8_2copkVQTzlJ455ZIuXlVUrg58uRXAgkXUoSUoCf5e8u0XSIrFt-L1A0CR7ahwVtMj9kj2hXOFKF6ARFZrLTTedUVBaQmYTNjkLyGZZKHOREsTxTzg5_7BObbWZEcKcxFpboISteXEq8FxighUhOBUIKMalK6jiSro4DE85haQBbXMYSgLWE4CurC4rcXQLPFcC7xTwt8WEzUFGNSeT4uHkzycJKvDeg2VHjb0hKZ2SYbFJPoyTAmPwF0F6T4HplXoNUZdMcBgAAwix7ALCARBph0xQsjMFiLhFxjZA2YQEApmBAgiBw-YQiEZK6CvhwQg-5oTuF4BEDYzZg3ReAM7BjUKYoh2EUtAQEBC1xJAyauNazD-aoAa4_CCeNbBmiJrK4LMb1XxzOBFrBEw9eONfETjcI61ncazFwkkBtw6sOiaWIHF9Qh0T4hzS-G2pTj3wu1k8ZcnYtFWNzxVlsThJXG4QaIa16kcDkRw1Z1cgc5VQ5qIwy5OD4kFSNAPYEaHm1fUC7HNamoTXPc8k-6w9fuzKRZIL1e6oxNepKRlJL1j6niuCUvg1QvyTqtiHjAGR05hka2V0L6lXCTJ0QMyXjLqhnKrIowUGhMimgDRPLE86WJGGyjJRCARASNM8uch7ShLq09yZUksEeDtQtg2waoKvizl8rflWGjDoCsRQgBBapNVmiLVzlMolF7KPmoWhbrur3ktGejHFnILcagNvG9AFtlnrS5BNBBagLlzNr2BH0aQIbDOSuW8LTIlG_8D_EshjgcA6LGAMq0JSJk0Fu2DBXehbrUAAygGRTdXwnUgKp1TihTCNjswOZnMrmDzBdlzr4FOUq4agOeCIIroSCR6l5NZocVgLBCw2ZTKpnUxaYZ05hDaSZruWTkVi05avq9jHoT0h61AOOKPQNDj0gEuDUgShv0APglgSaVfCEr7TVoFF5UhRRfNXyqLryn2W8o2lwa9ABA669pP9xqqHNhiQMKMNUTlCfC-tpbCqSfOtSx1d295LOk-SZRgVHKpyJMKmB_UzB2Ala9Gl8hmBTAe6PGKPJWFTCr4OKh6qCu-ucGxCLQdjNoHhFEqzaqUjAJkWIAEJZgGg2oQmLdqBqMA0Ac1KYPVIRSkU3hCTG2U4MO269jtwoIgE4xoCtKgKR82SgyJgDDBOoGQUiu1B6Zg7TsIlNzgqPk3jRgAIbNzWoRVXY7niNANDepqXhnhtN1LXTThTc62VE8zlOyvtqO2A6YKgfE7WdtCAXacKV26bbdty5WAFUUgF7fuMYC2DqKQOpnQxRO0tKUEkOisTpomjlSbFhKDHYtSx1mppN5yuTSrpAyPhd0wFfhYwAWQdo5dQHV2syLECJzkUUAKQIbqUhc7VSBu9bVEmN30j-VYgGqtbsd3UA7dYpB3Ubop2kUn5qdcQIHvwQe7zo3upyrRCRkR6dwn0NivDNrDzzmVa3MlBbrtp9QtWbnBnWLp17M7gdAgUHWzo516615N28hGIDa0nxgUoCAXeXsJnC6kZouvPeLt4rxKC9KOiHaJSh15y5dwAAuYrrFLK7ZwWOnHQZvx0FyrgJOzTbDB029QpIMe-3TbpZDO7xAzgRvUnBwBh7bdnKhPdDpXWostWnWu7rhH5TlUN-nK5LlnV91RJY-iQCaDVSG1SRe9D-sErppQov7QEuFSQEvtQAL6GaGU4-VrXr1R6SyyMLPbuFYoZ1Fdu-yjucoA5wS2VQelbutCz2vkDtueiXSDtO32Ni9f-67bdvY6IH8E1e48LXrzh4HCUDe0A03too7r-AkukCJ3pwrd7Dl_u4AEooH234h9aQCaKPoQ3jzds7B0FTfJhCl1SdWm2fcwYoOEUf9XLRkKRVX3r6k4W-r3Tvov2UY-glexEAfo2gtatDbhc-NosFQn6vU5-75QbL-zX6WQt-iaF6khWf65DWOuwxwZQrOHhDumlQ7_vUNa0llGqYA7YOkOx78KUBjAaBTQOM6MDreyXZsF2Wc6gar2pkTQa4p0G29oOkjTsAtBMjkKWe97eEBYOTTvtvvGI2Ru8B_a15AOyIyzqwPpHtgLRVAB9pl38Le9ZW3WUpE4NK6jEmO3g6DDH0TzJoOGi8u2juSiGNNZOmo9kDn35HZKNOzTqtFQAeBsoyoOYwsZmDKgNsZaHonhshSe8yDC4BfXTp93hGc9KR1nTgeyM7H9c4ypSuNAvpjK6aewR9dyQmhq6P4dbQDNroHLMGKjKRjwAQBD6AyF6iTH438d9j9ALILMuaOZpGBSBLjqhjOgcdvzZ7m9lR_PYXrOOXbXtsJ8wAZGUq3GSGaVKY0mgVE7LtgzxlNN5t82XoPjuuwk0ym-OHrrGfxkDumLJRT1gTqAUExATtEgc5oPmwOBOhSgzoYTdxrw_CYgMR6kTtBhk_QawNF7zjslMveQZW3xpdjUAPA5KeSPSmQA8kCiECHlOadhd7kX_cAGKDC61tUwOiKRW16pagE8gL0OxHQD2mKIbMcQFIGPz9B1tgRusO6e-RenR5wwEYFhF453ExMZ4e7QQDvBGd-A2vArUTvQDVR3iMBx5gMZ1lDHqAVwbXi0bTOvRcVMY3eWSm14K6aNUoifQWb710aEzuZqlOxrLMcHizpHT8G6fNNiA6gXQGHZGEkDRheAj4swMUl4C9n-zAgTkE8CIAzKgK4B8yaKYVPim9tM5w_AidOSuVrVLoXzXaodVAxFtlasJNTCUC0wkIqcOOJIFgG-rtA_qgwOBHtwZb6ESGxmiABtMc1CAtwe4I8DLTkALQ2QeGmyHeADAvQoBpSHACtDnxx8hC7lLaqrqOq61X4Xc26uE0KYmY2EauNWr9WcwA1bw5crSX2K2CrgZqi5cuc9SzALQCFHor6nZH_ltCVwLwJ1DvRvDvY5sdfE9CVGfr1Iw5XVbOEEq71lyQoMPMMdzjQ4pcd6M6S_lWBQByAkYfHPIL-n44nIgWQ2E9HiCiXxLkl2yNJeqQ1RFukDNBMakGlcXeZVwXiygn4tOznpM8Gi3gnos9BGLz04y9BlsBojoonAQEkhnmV4ttgXs52dmy7AFArgvkLAG5asurh2RVwHkX5GJAAWnk_QMAH5dXALK2dGAK4CMBsC0A3LM8Y1fZbQDmwXQzlq-nei8CtiMgVwZS75aMvRXE--xTICwDyBXBHIRV_yzPCFBoBSa75urNhbQhRWip8gV1fuesxHnaBJ5jmHoADWTIeIriqBR4tgXnhtiwfU2JjqlhDWYFkW8bM5vczR4kdIoUE75hGCzW6oUERzYtcmxuZo8f5NRgti2tzl2AAARVnQNB7AYiDTI5mcCzpu4lgZwE5v2vR4AAjqEG5LrUGQQMAC8dbfSEKhr4WxrFFunTR5l0vsKSgRGBsNZItD15KOeFFBuZHtcCprCegaKQ2YNAgACmOChvjwbVq58Cxud9SQL3FMCrxauHmtNYJsLmm_KNlet03Vwl1667dfuuPXnrjNqbKuBBsLWZ0l8KC8oDpj3weragPq8BAGvnnA13EFIO9fzgJw7GnlOW4RcgKEKx1dFC2DQHDXURE4B5-hIQp-irnUKSZdnIcw54M9Tb_XYUOuCXjVptbJdSQDsXdh7EPYptwhbauNsEAnMRxQ5vqHNve3aAhzMKNbadC23zo5tyTivHts0QnbFoF24cUDvu2jbZ4SwBkn2AhJzbqdgsunYx7Cg-G_mOANHd1tO1oZhtntRAnqtAwQkRdhCJXZ0Jl3uIntoHHY3gBwAA78ARwLFhrvQEhAXsBO58n40G2VzgcDLmGb_Pea6sRVBdlyRPCfWMgiQVqKuDnt2j35ct4oKuFPJmsC71fcoOaaUjLIuNq4dezWD3GgXVzo9m5jV3uZoZp75sWe4yDtGL2Z4y9-y7LagDH3UYm9hIBa2r7Bs4Ad_VNqQNf2r5c4crV9FeTsrptDgJqZugfatWowP7bfZcw3YdAX2CA-hzdWhmXW_LV17AfVpyjv421jwHNbqkKF6qsbMUrxWtuA8hRIAyU3cBoPqHrMIH-EVwbJGZBd2_LpE_tEAKQ6W6uMlFPDhh_qGTDJgyof07DOzmqbToIAiQdwBADwcyO5HhEApAI-Y6Y0uqjD0R2VEMqKAOHBcoRzzHIf7hGK7hoR1o-TB_IJHjxI4CIJ_jB48H2oL6yMAtLbAR4O0VR4DVMe5pMA5jkR5Y90f6O6NhjnqpQDUeERuH9tXhxY6VhMDJHWQI4JYB0juAgg5gbJEk5Sd0BPHJjpHn49EfJhAnvtYJ1E74fGPWVkTxAJo_8feQ_pN4VwBaGSh-AwBwoe6ng8acLVcr91bJ6yvjR5PkwSBb8EE64egIQnZDsJ148EclOLHuOP6WQ1ER0A5w2SOfJQA_MDgvrBAbp9450XFg-nuOQp5w9PkjOSnRj8Zzk7MdTORH3kcR0wKwT5BkUeD6nrXCdGbPcnFz_pzo8GdFPhnxD456E_CfeojnlT6J5c6sc3PwggRB5-C9gAWhoI-QfIC8_Ud5PvIB5T5wc9G0_OgXpT05-U8BdVP-nsTqwHgFESgIc4eD6wJQGGDKOTgoQBFz440fAv8X-zgx787Gf_OKneL7yDU5ueuBtgfgE4Hg97hfW7AlgfoKtaxy0vtnvjt55y6ZfFPMXJztl7i4Zc7lanGbQIJZDwfOJ2oomTCMkDPgCAMrKQCV707ec7lZX3z-l1i8VcYu8XuOUF-wHqg3JkUTsbJHRlgAEB1A-g6CIhQWrGudnprlF0oCGeHObXvDhVxM_OeYutHuOAl26_kgoJug2SD5BgCEDKQNs2wG5LAD9dSuo3IjmN-a5DeWvw3ZziJ0q-EdniuXKUZxtsHuoug2nFsUmnAElyWRs3lr6NwM6DdfPC3oz_hxG9Lehvy3uOGZ0wJEHzBoXQCbYKJlbICuYAXge6hm8iCUBW3eTodwW_RdFu_nfbgFwO60f-RrnhL3OK4B0gCgt0ZLvwMHmPfkQIAy7t53u7XdNUN3rLrd-y4Zf7k_po7ppxC-ySXhzYiEfwDe9zfJh9y97mOgO-Lc4ud3IjxArM-EALvnQizkBDGqIDZR0QLwAD3i8xKovmX8rzdyW-3dtuoPw7p1U4AFCqJE3QCQyNjOEBEB0Pr7vZ1h7lddVwPWzl9-W_8j-RanC4epzeC494O3MS8ciJ2Fo9sf_IIHqqj27Kcsey3u73SjB8zc8uXH9z7JPqIIDPAxwmE9EHAGE8yexPrH5j5M9zfeRdK-788LhmpByg6MmbxN2Qx7TsA58ZrbT_qCM8fPO3aLh9xJ-xdSfIPRn-15eHrZ9JY1fcWACwEUdCAe0e8HbFAEc8-fdPZb_T5G6qdGfY3PLol0LImA-hICrgPB0AhSD3V-gCma9_85NeGfdKBThjxa48_WuCPRnytwNx_gLuFIeDurzy6NGNfovulDt3o67frvKvz76T0590pEf4npNKwG8GiCWlskN4PoHXJiEahJAuoPABUgOSOniaQtcwKneDwKZkeRX_1yV_o_yBVHnKJQMskIec1AXZKWavNRzizg3iL8qh2A7-BXk6HM1ZKMw9ZWsO8Hwbnr1E8u9RBrvS1Pr6G_1DJRal-7zLOq6mDdxwgRL82Hg8vChAa3tyQiJIHJqtLnnO3nNy99B-xegfc1P74tVu8Qf6XwP2pfa_1AMhtgZl1p9-4L0Lgl3GP4nyD9siBuuvbn0D8T7x8LUbvVXnhyT9sixveX1Afl8p4bddwtEYAWj3z7K-ufsPM1Tn_98J9efGftSyt8lAgBYBYAyQMRFl7X2Qdsk3tqANsEQjMJJfTPzr19_c8_f5fBPnnz96Z9EeRBiPvBxGXYLjLTftS_b6z9l8gBfvXPgH3h5fd8-OPTAjbFx3UYuu6nQ-Q4O79siifyv3bq31d5t-A_lftkWT3E9-DuAnVgQbYAo6WfE43YiiUUFwDSAx_dKOPjn0n-58p_efIP3cn9I-RQAogdgJNwuGb_u_dyFf3n9b-r8B-lXJPnkX9LIgLU8AsAQiHx5eDB5riHflnxb_Z_d-q__von7X7EcEv9I7cKwM_xce0AHnXATAFAGbdGuGfK_sqNL69-MeffPfpf0r5P-Vvh_vLo93QDz88eh8JNDv-b-6-W-gXvvhX7b-_91-iPawB1NbASqjwc7qVwH1BR_Anw79PfOf3E9E_fH179l_O3zEdg_dgG1AjgXumcBiPHGSy9XXNL3UB3AVwA784_GXwv8f_ZPz78gfEHz-R93awEPcHAPABcdoQbJDcAt0bby3divLH1oCu_BAL99FfAz24CyfLwHYhSXbJCAQLSNZzQ9j_FAL-RZ_T_3n8-A3_xr9ZAgl1nQiAT1wwBn_JeAh9qAd3z-Qz_OAMD8r_AQIS8ffGgMrcJ3SICPc8_KwKiBj3fQI_82feAO_8TAv_24CiPKb2f5JcHYH6Ai2TV1eYfA7YD8DS_GQP_9LHfb0O8h0UUlO9gHZ7xAB9qKXCko7vU1modHvWhzxRp0SwDe8tnD73YcFAlwL2oDqBZ3cCQAc8DERZ0If0ncBAGHyf84fEmh4hKgWj3KDZ0XgKBdEgw6lKCsg5FxM8iAdujqD9fC4Cf8rII_04DdvPaksAegtoKKCkgiOCoD6XboLkDZnLgD0Q-wV10kRYOPQLCCJg5F3kDnAl9w6CSglQPaDJggwPfd1GELyWcW8ff3VdRgvDy4CEg04MMCCgg4OKDkg5AJODvIUnH3dLPCF3sBiDbJDER0QGbxOABAGYFo9ug74OmCEgt4LmCPgnYNJx7XXRgwB2RFvDSdkQ9AFRC0ACEMmDEQ6EMOD3gm_yidIQgl0Y1ewfoDwCyQ5FApCcQr4OeD9gpVwJC4QokM-DScSt2p5MgAqDnB_ggyDwdUfd12oA_gBIA4D7g8YMeCvgpwO98mQ0oN7o58G8D-keQ5IB2h2AXugpd3AF0CbdpvPB1VDH0DUMP9aPWUJvB8Q2ENKDnrOfD-lLALfxScnVW0RHBlPPMgSRiA7YJAAzQwyiiCTkY7wIcTUIh0ppbqe6iepYWV6nPhmRFINAc62J7zxQxEB6iAQcgs7mWp8ghkNDdwAgMJeo3qEMPhCygywHNCmBBBk2Aa3Fkkcc-gKfxtDo-ZoKzDoQ5MOeogwn-HTCWQ26mjDaA_dycxiXY8FH87QpxyFkhZWjyjCgERsIrD_QqsLTDSgnsNoD7XdQJOBx_VgKoAbgQ_zwBuwhsJ5F-wx6kHDgw4cIXC1AogB0hRMQIDwd1ArcPYh5w3sNP8lwlMOrC7aeYJ4cRwoFCYEnOUIGPd7qKf3SQ8Hez1bECgQ8NoDJQi_0rDAwocOOD6wo8KI9zwY91QB3rBN0nCGgYCNAioART0K8xgzHxAArw2AJeClXb8NTDVwv8IQiFwtALnw9cWwF6BANBoOU9uIZwE2A7gcZRFCenMUKvDSA8_wq8onVCLPDawwQMwjew2gL-lQgcnyYC3ePP348RQfUOdCRwngPj9vvIFwYjfwi8PoiGwpYKYEOI4fUnDlnXEB2B3wuQJPCVwmsLXDWI2N2EAFHWah2giAh520j-gADAEBlI-kO98xI9CIkjRIqSMrc4VcoR6JskOyLpws3ASJsjVIn8MsiMwwSKI9yfBxjvC8_NX3U8C9JeBeAdIfiLgj6XbyPci0I9SIwjBItAP1AH_QT12RJw8mkFAMgf4lQBlImiKMCUIgcI8jYoqyP_C5A9Px4hYgPAEygcgbJGL92oSqOUjy_YSK_8_Q5cIKjzwryIbDLHIfyIAwSLdF2RJAMhHQBEgOAD-ZCwbJAGihokaLnDXI3sICdGoxQNEj8omKLai6wliIMCCXShB2xKfPj1cBCMYYBgBtgd8NEdooxiI0iDAyt3UCFMTYGPc4fVECoA-gDZ2mizo46PEj2omaKI9dQB_ygDBPTVwyAUgIUJciIoy8I6ikIxMMijFok6LiiOotALhVg8C92tCxoygDgBtgBZEOico5CKTDwYl6JWiRwq5yH8MAe4knCnHCMAoitnB4JxiXPWiIT8FolqKWimIswJxj7XIBE-snw8QOZiaXR6ORdnozyOxiGwzl1mc7nG5DadIgDIEoBEgd8Jlc5owoIQjMY7mOYicYoj3UCE7PP0kdEgCIABJxYkGPMiZYwqNei_kO1z-kJAsWhJoHIw2KtpEKEmNedrI3sLtcuYnWJ5jrYglzfhOwf7wGDZ0NEC2BCAd8PzdJYl9wsi7YuWIbDccStzPg7CPwAwtCwgsklAUEL2M_C6I6mNPCsYgON7C93P6TcJtwxN0XhREVsiCjNQlt0ei73H2LyiaYiGKKjVot9xvDGnagCNER4IWNnAUEJ0MBjJI5OL2CtY4uMTj6YhsP8gCXGVlcBPrWFnyA8HJzDtEicdAHfCu422OWik4v5H8giPUGjriogbLyrjrAseM1ivw7WMniO45OLQDZ0WFi0Ddw3eJYAx4tGNBjLw9eLpj-3SKIbDjPP6XUCoAyXDkdDXfSO_cogWcDyBYI0UPgiRw4zwnjz4_DyBjew3SntdVQ4CLz9Eou8ItjEXJuL-RAEn-NOjSvC0M2B2AG8GvMZnCKHI46nZICWdYWUf1CAXHd8NK9YEyGIATK3OfDAFzkZ30iBY-AGI_jL44hMITS4r-J8j0kTbzG8HnZhKx5g8fBNXi445qITjZYzeL-Rvg2Z1CgR4a6MBD7qfUC8Aeo9-MojP4hsKhDC4jGLbj-Ei-P_jBE-1w4ioA14BKg8HGqL8BWxOwAwT3wvEMUSwY5RP9iBE0nAJcgEH-EE8lPGxJ9Ap_BuJoS1EqxPoTdYtkPYj9QHOBzgxE88Gf5RgCBLpdXE2OKpjeEtSI3jVEqBNJwmE4YFQBCAzMFAS2_EQCmjG4q2METuEsJOljzEyJL_joktAIndKgMQMKSn0ZxNkTaEwROPjW4vhIsSok9JIsQfgyoAGDoICMBUdHohpPcT7Yv5AsR7XcAKcdJ3ZJ2d8f4YfRMj2kluLXick3-N9iGwixGsT0AFx3mTyPRZMWT3w2ZM6Sp4ixHZDPKUTFEQ7QrCCJdiUEeFWTQkkSPCTWoqZJQjow7yDEc_pShFy9E3ewC6BW8LYLST_w65IpjcopRJqTck6ZKARrk3pNac3AScKixpwW4MPD_k9ZM3jrkgl2G9qmMRBj5lvMAIRSf4UeOmjoUyFLqS3k_pxvjJcUf1ncYAHSBcc8HBoCwAlucFP6cMUvJKtjrkhWM3CBQXl2epdwulKIBJ3WFnJTIgg-xiDvQs7wxcyUUGhFBwaSGhyCwwmh33t4goBDcxYw7BDyDPk-l35TCwRjVKCJU5MGvibnBJVoAHI6CEp8jTZb1o9lU7-NMSeHeVMFTUQJVLcwVUsn37hAgCP3y8tPZ0P1TxknhJABjU9gEVSMI_VIJdRQZhDoBD_XRO9T5jabz1TzUghMNSonF1LdTS4_VMrcxEM8DH87GNgAtgjgQEMRjSaINJVSTkpqOdSwaV1KFT3U4NJ8jEYxNXhThk6z0oBcvSkDTTBvaEPDTc0yNPNShEpgV0ZEKFYFYCxwHOGrigkyVzlT60j5PRi5U7NIjSMw5VMRCLQ3Wm4xFnRvyIlEgf6M7SHg4dMdSskmtNNS805MCsTZnVwEgBY-F12ghN0hZzTS3E0NKBcl0i6SHT604OJeBjYYhjEDpMdqFAhwolxLDSz06tIHTa009NXSiPXRgUhLoi4GI9oAPuDwcHqIIE08Ho15OdT60zJNOSs0gVJzTl0utOTAekg2MCJLgoeMSB708pKNTzUnpOfToMwdJWjlU2ZPXTiUCoGd92oFx2KgMgC0HFAXQWPjTS1kw9KZocM19LwzMMyt1hTEnMIBddxQBNKOT7UljOwyFUpjOYj8MtAMd97qC0EsAggF-IeTFvGTHrZkUWjKqSL_Y9LNT4M0qPwzZPXuBPwnVERUwT9qVACYkKgSQH1E-gvMloyGosgKdTlMvNJMEmw_wTgBQQpbUGCqEezOFBwQ3jJsz-Mk1JPTmMkwXtdLAEeBrcM4kQBI1R8aPkiAg03zM8yYM7zKEy3MEwWS9m04kDwCxEWAAEAjfBzIiz-fKLNwzYskwS2TPrXpAUccIhIBb83MFBAshohXVPczbIDt3dDIMLlMPwfQjmlRpugDGmFS0g-tgyCyUMKGcApUwiBlS-0nhxaz0aRtFKCesvcn3c7HJ5GvBFneFNzwLYLEKyjnQ8bILiLMrJOGy2sjCJWzekgBjNVFnEVydBc4u4PQyonbbOhCNs0bK2znAPci0jhgSny6AAMkmlTdaPFbLMiL_C7KyAxs67Og8mBEBGC88_D5G38XMsEJezvsjNPmiUaLoFazLs0uPGyG0n9XyAR4fTKfigA6VKeQls0DLhze0k-NOyockbM-yrssqBHSmBe2GRiR4NZVb9AiG2AixZ0sULhyF0yDI-zaAL7KJyCXS0JccR4Md0TdlnAVBRTQc1nPOy8czbNhzrszxO5cPXc9wWc-PBcGRiaPZbNFzwcqWKZy4-DMLhzZ4hak1cUkytGFD-cmJMFy0aYXNVzrshpL-k19BTBEA7QtfWoz4gfnI6T6MkAGVyWchDJD8IAO-KlzJvMcDxTNgOXMxzjchnMzTHcwnIIzfs2PgiAn4rjIIAdIW3LeynUwPJFyyoTZPXTYWGIBCAUoYYDBxFnc6zEys8spNJi6c43MVyX3OPKNyE8oj0ad7iWADECh47IFpz4I8bLxx9c6HIJz48ixASj3Ac3PcgBXTsFQz76VFN9yE8xTNjyhcmHKNyAUH4MoB3rPwC2jAQjDTnIhPeXLHzG8_HOZyrsgFGsTy0hcjacl4IaNBy18pfMNyVonrIBR2QscHyAogOHUtz_AFBDQy88uvOcBj8_fJHzD8-_NsgfIjdLeBE3eGHcBtgPYhAyH0oFyPzX8x_ObyMw2zEnpuXG71OhFnG8BHh5IRbMl8-5N0M5STvblLiC8UVbyY0HAFjVDCOsiMLJRzwewD6zbAeMNlSeHDApZosC9mgwibwWdDChanUIFzx4gEcEVD6grSF7hhSDHP_z-AGgrChoQ8guFoqC0uIILTKfdzSjMAGNVC8do3PEoy0QscGaD7AEQr4KSaCgrZoVclaOELmfVV0ZAHAe-m6BGmHf1YDhY1-CmAMC-QtMp_ciHLKDlCgQrULmIjQvWjAssRN7pohOgBnSzCrLPtz-C5jUEKMwjQq2TKfJTw8o_AZDzVjOCk7KBc_CpQrW9KC2wrMCNC2eN_RHEoLIdBMsGUGyB3CiDMzSvCmItKCNCtAMgQMAGSTsBi_RyXYAnMM1kkQwA50hrdhAPvK4KyghQtj8oizAtULcixotKi6nR72iEJ_BIFGAFILoHcLzMymMgzsi1oowiNC0nD-l4UjEDwC58eai8IMs50ImLmilQuwLfCxoosQpitoAtBtfIgAXjAQoiWyA2gEYHcKLEFYpsK2inkR-CPAPwGf5E3B8HCBEgLpyWKFCoSLWyRi6wu8LYizFIaKeRMnxAj5qAIJuAMgEYDBozClSM8LPinIvGLXimFMQR2ACRDz94UogBuRwSmPKyTRitYvULXiyt3qhz89IRsAhksZQyAicH3PqLhCv5ELylXTEp8LsSnkQKTZbV5mp9kobIBYBa8-lwpLB8jEqhKxioQteK1M5GOuJyiRN0yxYgdkrIL-S84q-LLiwRINisAVhOyR6off0IwPuF4p5FScKUuhK-S0_33dKEeUoccjGT3J1M8Ax5M7Ar6MwrEdNS3kvWLT_PzOhxa3PAMsAl4SnyqzQM4Qtmj3irIp5KsSuwoULRHW5OuJa3OIAMietH4AtL0Sj4uiLrSukuxSR3BH0fRPXPB3OtGQDwlCKLSqktDcaS74qpSiaP0qI9dBfIC2jDS14D5CdoAUD0ROEtUrPErSn0riK_StAOH8c4PFMnDxo9gFRoBiqsq5LIylotrKfi90tKjzwWcCoAvAOHyHLyienzdK_SoYtIKonLMsuLV003JS8QAwlMTcf3AYD_zwi3MtP8NSyEqjLeynMt-LcYpgXh8tAycJpIswMKHdcSNUZMnKKobHO985ymEoqh7XK3M-su8waPYAVYsws5jdynstpLfSiqGS93XMdLz9RS-6nzhjU78ojKvSvcv_K6yiqFYyQomAEcypvTTQi9XM78ozKOS70rgq-yhQpjcDYxksGTis_OGyRLyyAgORc8Mwu9jPSywsfLtSoOL-l9RB0H0gVQily8IhYliqmAdQrwmoqsKsgpwrsyl92EKh3A2KpcBg6TC8BVS28tXdfy1YtwqDykSoSi2wmgBrjskZMvIh2YmSq7KYKv8qErqS_CtKixEAeDYDmkM-AytBo2dztCLo8-GorpywbNnLBKtos5dGki1AURrPc-C0RqEzcoaKXKmsoUrhK-wE5cxw5lNYA3gFgPPKpgeqEMhtUCXxeLgq_yv0rMyoKuuTZnLdGSclPZBIyrc8y2NzLOXaCroqnKmEs5dLA-x2_zGU8QLKrriZ6nkKSqxKqVTbMA2ItIWQFpOVKkEmSU4qTC82GSdAgCYD1TbMJAqO8GsplCazxU5mguKKHTqlSCHvTrLFS8UFDiIKBsnHKPTxq6UvdT7AWP33dRQa6wXwkbZwCcxzwbuCe0iIh0FBpeivqvtSNq1bOGLM041PkqkquVKurGY-qEaqxEOfF1AGgZ3wHACgLwAOjLq2PwsKpYu6omrI0q6ujSXq1zGcAXOUUHBtskfanhA7U0DJQ5Y_firDTVqrUqHSrqoj08VLAF6r5D4gY-HrY9UrGs8z7qpVKuq0AsRHqgy5XUDs9dQXUGnRu4PuWOqv88Kxvzcq51IprSakGsxrY_IyrnwAAI4aAYXeqCFiAYAiRvL6i5Gv8h7K5aoYyFyHmrwyNq1VPYBZ0GgqARLASoP19YgWnnrZos4mrT97ypTPRroyoTOVqxw_UGcBdQG8ANAnMLWp3h4AMFP-qYE-3OBq1q0GrT8CXc8H1AswvuV7pzwIBE-rW_B1yXgDakNNoqgak2v3KX3ZGo68pi6mvPBzwaGthrUfakMOIwi2_Meq0_VGpWqBUsmvWq0_D9IDrdQZwEsAkbZOracOoc2DIjRgDOo5rY6zIssK3ajGqVq0_NAKzDvalzgYc58buAmslnGDjTLnanSqbqo6gKqVdY60qOcAGgIxnqgO65zlFr7QleEp8w62Wu99m602rMDY6yYqYEp6mepQ4nOBeuwwLYRH1dKpa5Wp3KI6mOtHqHqo1I2r4c_UFcxRQXf3WZ_qhRMvrx66-vJrbIYnIRLx6VbmnRqahoHlDAQlvAUh4AA2pMT360N3Xro68ervqCXN6uprRa3uQaBsA7JC2wCgN31fqCqyOrzrFas2u_rK3bZjerzwVBtC9yiVLICSUY1-pzr5azYHwbN6u-sADnAPuWet6oG8D7k-6_UVRBm_dmsgSj0phu5r3a3mtJxKagBrLru4XUERte6xx3kdXHL6yi9X64etwaFa4RtbqTcnepQQUoHOGiAEcKovYgDXSRANq7cqBv7S8GtRoIbnc9AIgAM3aICRzoC50s199a_6qwzXaz-oLrg8n9RuRwwRZ14jwwLBqRqNqujNMajU9xo9rE8pgUrjEfOtyWcemMdNTSXG2hqgzVGlurNrvIFVyYFVQ7oDoxWlKuLAD5PG5EPjLq9JqNrLMsJsxr0m-1wAaLQZwFcVO5PeoXqxEPoHmLiaypqEbUmxhvSaYUl6vqgAG0UEaa3eLSrPqumwauiCUCxrJ5TfQhjUhp86nApmq8CgWkILJq4GlyCSChyqBdGNWZozD7AZKEsAFQ4g2VDVCqwFrr8a19nth1Y50J2bsg-3M2aGGn4rcwNq-v3Fzj3Sn32Lq8zAEKLFG0DIebAUUpqyTbmixrMCfmwfyYFFRUFN-i-Ql4E09IvWj2BbAal9wBaOm-5seaCXHj0sgjIxNMHiFwLsAitYWlFuhDEWjeuRbAUStzcBOodwD8B2qzBMY1HQBoJZLCILwmJc8WkloJaZmu5oPLgWoj2cA8vH1wwAHneIGPBc4sWOdDOW1ltgqb6qJx-bpI11NCifUiFuyRFRKHGZaISkJsla2WwFuJazgkP0yAt0izAoZlPHaINdlWnBoRb1WpFo5aNqyktNyNUsfy8Bj8fEFYCbWn1MRj2oZVqSbCW2BtDcpWzwKhykocouFDqW4UEaQEm75stbG6qWI9ax6r1staRMlXVuDdE4UpFAJqZVuUbTW8VtKCfmm5JJzNgQDASckY9x2aAFWpDJeT6izNr-bIMyNolaNmjas6imBXUEck41PlrhqbHOzwyAX4vIGZaPSm6ssLK2jNpraCXI5sddREW4s1cugHbGBy3M0Nv58TWpV17aMIzNtJaOcsfx2w5QSbyXg7RSLxgBJAbloXBl2n0HYBO291rNaiWi1pqz93bXzsIufKqIGjbASaOZarnMVr0q-2mrPtdH8WuBgACs58OuCFwW4KJg2ATCU3b72-Ftnbj2z1vpcfm1KrVT32_OAwSDI6Dqpb72mdq9bQOqNvA6NqvmLicLqTTUUcsO0IKnaJY1Vo2aUOqtsWaas96NCAscKhtkFdQCjsuiWxOuv4bSO9JsfatmlaIg6Oil4BbS2M7RrHA70iFqMSRW9DtXqL_OdtLiIO7eoRL9MuACU8xEKTvkzBOmrIvru2iNuI7n2jJvYAyEAoCOyu8rTr4bgkyVo2qzXG5tU752wzvtdUodpAdcD_WDjacZwOwHB9YOZlptjjO9NtM7X81FolAGC7iBpaPcsIF_znGqdpoq6szhQPb1gehRwcQkVS3UhbVNB2p5o-TBwdJOmW0Nwd8HT-3WaiaIqtLieC-gsYKa4lgu_cGg9gonDaPHgt0cN7dLumbXO0uKub9m3kMOaKaY5oBJTm7oHOaGO_TqBcrmsrpngZy9oJNCMIw0Nq6lQ5oB1D1Qx2q1DskEbuEojsg0LlCuutLrlqYQ2YNNDnAbMM38uIutzi6hAWzrHBHQ2j1dDvwcroW7pQ8YoqCqgvoFqDJwjAsaCMAZoIqC5uhaAq6_Yn5OpKsw1OKAD8wwmKLCs_TbonLyS8sIO7uuiruLyVosAvXTICiP1gK-gzmGxDnQsAvu6LAHroy6quodMarfs5qvMBWq3j1g6TqrquKhi4C6qRqBqhQHWB3QhdkbFEYyLsvhOrZCAXVRbbAHFszzbmBlhNYBWCVgE4VWHSpwkFyWEtyAFkqQhBCQgWIEHSaNA8B4DL-mXIF2HBnWBZ5Y9Um1XAbNRUFRZRbnkQagR8D-QyMN6DPsR7EhUXYnkdu03VJmOlk2RlyWnF-sFMdYmdJUQc8CLY70I5RDleVD1HKk70JlWOVhtE3STkOVTlFtIre_wOZxnWA1h_gvWU1gSBI_EeAUw_WP-3G0fSbBUZU-UemV1FSVC2m96LwX3uOB_ekAFdYQAK1mD7zWaOnrYoAUPtjUI-otme5TBaPoZU55ePsZl8FJAxzJk-63p4M0-n-BdZDWLPvdYEgQgxhEC-s1iL6s-vwRL6o-meBl6k8VlS778EMRUIVTkevtT7JmFvsD62-14gSAA7AoHWM6EKUEL7w-vvsj6y-oftXBR2afrSASBZZE0gE3PwQEAhAdPh35JmPbhhBBQAyG2ZtmC1QEV66VAG1I4tAVkiVU2f7gP6C2JFH9dh-Yri3hxQM3q4Iv-9Pr2ZgBosUtZn1f7GLA9WA2AWRIBoGCNY70KHCgGSWIAZEQ_rE1j_sUB1cDQG_rZYhAH9kDUDwFy-QXpSQT1KtgTY4QcgDm59ev6Tx4S2WgfoGfbL_AIICBhTCIGoB_ZB2VpcKvA9RX-_th6ZTOdBgXZOB4w1mAyBiHFTYlNfRAXBmoVNhNZU2PAYlQF2IBzBVcxE1j2Yg-kVPSCxU9nklZzYdAH17J9KABNYYWLgH16jWarSFxWBwOzMHtBuwbABrBrPuq0zmShFChHB13i3gjWZ1B9I90LXu4gMubQRgB9em23tkUWTpEN6SeRZES79ECQY-IS-_NDt6qVWIcHJzlfNBd77egOWpVgOT3ruwS-mpnT7M-7PrNYN-y1n77bWfNFnlshqlSXlyqVeSZIihv3ub6A-t4jKHv7PPviAKh4vuqHpemPsr64DSqR0ymhiwD_tWh1wDn6Oh9vsipP5Xoa37khgYYr78xeehD1RFVgAKJVwP-2KG2hjPtb7OhqAGX7ZwVftFcIzHvs36CkKoeG5peijEAGDIdPFJoNMHYYrZbWfC2QZg2Mw2lEwqOAeaRXh3_s5p_-23qlZEgJAa4GTIMAb2GIBrAcuGYByEamGEBmYDBHVBn_HQHWWTAZAGcBkvr9ZHhqMCy9PhJgeLBtBs5l0HcC2h3LZvRbND2YfhQLFN7HVJ3BhHS-4fljkzenMlewFBhkbN7lBoEeWR1Bk1Ff0WrTAHgHtTdhCD7d7D03JGX5FgZcGfbbwfpFnB1wcMHD8PZk8HKAOUZ0Gs-uB136EteulPIBR2AaFH0--TDFHPkCUYMHRSaUdMHpSZZBVG04NUYbo0UbUZ8N80FLi3hcRgQGeGS-7rVJohsX3oGgPUeTA-QfTT3S8IZuc_nm4U2WOlW4TIDbk1YNoWNltHQoaMYdH3wIIdQcde0IebsocNux9tO7BjBiGoNeIbbpLelPrSAUhhIeGH0hnlXmAshuPuGG8h03TGGjQEsYb6lyWfvaHdBkPouHKh7frk5ahusaJUE-_lXIIf-3YYRH9h-fsOGtDfPoWGrh3sZqHBhuoZ1EEDMfsQkRxlsaLZJh6Yc7G5hmvtnHrhpkYXGVhkfq2dVxxIAn6NOFCQ3G0gMce3GF-nPuOGUgU4Z1r9x-cduGawffuvGE0X1BP7YAM_ov7VGXu2zG7cH2yLBYsJvqy9bAW_vW1EgB_qf666P7Ff7G6d8fWAwyX4Z_gQSL8e5GpXbFjC6s6VLoe7OUfUf4B1wd1w4hlm2gf0A5LESz57_RSeXQnxxzYfCwJgMEbgA2aa3gKJ2eA0YMM9hzYbzGdCHAlFIIgGsP4nBRnicYn0AfiZsHj-_jTEnhRpibxBWJ9iaG5OJn0hXwiJzQaZopgUifU8S-G0aFwqJ8qDMo_pE_F56DJhjHhGLB9AGYm8AJSdmAOJmwe4n5JyScHss-yxQSwRAEPFkmnJ9Pr4nXJpUdOQ7omgDknfJlydiwjWP6Usn-ABSZYnGR5SbHa_Bp0dC7kHZSGTwYujMdJYnYvaS_hoh8HnSHxUW3BxJAlSZj6hWZbsiQn4yMwEKmiuS4ii5xOPfiORlWaqYsB2RpYdSmMGePqrGneqqeTxvhkaA1ANMCQZBJ9lPZkGnGRgqd6nMUUaYkGsR31iz6MBgyDGnMR71jmmrhnATiwxRCgdrRmp2cSzp3gZgYVHQJpgUJGaBw6cDsCIHacgx3wS6cDp66aacZGLpyaaAN2poqdgNBx3UTT1mRCaapQXhiCbvGpx7oe77zqnsbambp8Ya9G9iFfmkGoWYNm-nzBB5QLp_h6gdwswZ-9jo1FBokb4o6pgweUGjnbFlRm-p6EZAG32AaYkH6JzAGJGMRqAaNY90AmZqnt-ErnRGDIVidmntENvqxZsJnxGz6NR7PriD8Zp6apQxOOFBi5spxIEI4LXcti-FpER6apQ9xHaf7G3p5lRo4qNRoc97UZ36fbGJxmYcX7dxxA1fHQZgWcKG3hyGclA8MMUVhntpw2eJ5U2ZNkrZU2GWfhmjgJHgxmKZrGfxYcZ33h5GXppNHuHQRxkZJmRQJaagHyZgEaJnqZtybCQ6ZlqZBGxWMOewGVptmeNYOZv_pwnKZxCV5m8Zh2cdJsZ02hFmP4M5mk51HSWYi4s5vAh6mPQwYaU5k8UfuqlCFdWZaG_pjsfvGzWR8efH1-7sb6Gbh72dOQ_7JfihnzZotjhmfZhGZY4YQO2bzRy5x2c4B0VF2YBGhZummz7vOVQajnIlOOfBH-pwObJmlBnweZnGRmmcjmrZ0pgZn9pRVi-EWZhOctZd2TmaD6eZ3GZ-d-Z2_HnmQ5POduZskeLgWm_hFGcPmkHeWcnnbpv7Cfm8OUWZlnuUQm217ue0Ib35KWAsb8pUkUdhKmEJ8qbf7UJ2qfdnc5hqaVZyxo4D_ssFuXld7O0DIYXlaxxWfwXlZ93st0mx8GdtZbxpuez7DYC1jvB9DTubgBqcXuZNn9aAecP71JNCdHmU2CecPxsHQt1nmTWJ-aD6-Zxkl9mxWbeZAB6FkkfvHb50at4ETkQBZfmC5guWLnUuA-2uwFZpPVIWhx6jQKHXkBuc1nShk1lkXoBO8E77a5xYf6HOUNhYDZTZ6GfBYLZu_h4WlyPhcwAJF_RGdmIRzGZcEc5tKmz69TLPq8Xj5gyCkW_F8xfTm05s-gzn75xkhUW9-QubpcNFk-Y_UjvbRcrnlOU8esXlkDWZKGDhsxYWQGFxIFbmZMM4eYXWFiGYcWOF_ZRcWTUNxdtm0gZGdCXp51lB85uJkRYCWg-peZCWGlmOdPnpFqJdiWYlsRczmTURJay4359FVSXwlx9g9DtFvCfrpJl4BaYsUHaUAynX4NfXG9oFvKcLG4F4qfPhSphdgqncF_Jb2HTFnWe2XsieS2JdzoEGdsXo5hxErHHezIZQXnl4mf-HJBj4b9GTekefcXx5zxdXBAqU22agpemeCXHchhsY96cyJ5HG9hF8hfiBUoCKeLppFmdjtph-GXoLFnAyfp1pQV3xddmg-QxAxX3-mQXMBTyOFfN7lkfUekWFF6avDDJRm0Y8G7RsSdGXNRpKYAN1gW3AkGSB3AU2nFAIXtSRqpk9RNZKV6AeOnRVt2z6WawW3AANxBxkd4GxSyvCN642UTAtZAhsBeCHNlp5GuW2J0O0iHbuXKZ_gjetDHgWjlxBedpkFmsFanqFrcdoXZh65fJoRLO5f_NKl95bwWchpcleWiFu4YrHPlsebeGT9T4c-FfURpaRn7Z4Ff0QxVsFed6BxpWY-maVShbex4VglYBHPp5FfmnUVvxfRXmRTFayX56HOWWRo11NZNYc1lEZC6LVi2jFXRSGlb8W6V40fvHxR75HNGmVreFVHWVnediX4HJtm9GowTgdBhOB-1GZXQod1jJGDB-Aw9RqR2tmuxe13jH7XPhAMfYQgxvezqgwxugW7wzeobT6gU9DbmuwuV5PB5X1ppxcjBf4QVf3X_57sg8BJV8bwimJV1SilW5OWVeux5VkAai71lo0G1WEGNO3CBdl41fynhew5Z_hjlrOlOX3VlRazsfgPI0wX3VnBfdXOp71deViF3Rc9WWVM73yGcyc5fHHLlnPunGehjuZsWu5nueqXl-Rxc4WAtARf-Wml4tn4XBWbfnRmS1t2ae84lrmdaXaB9uwEAIN_YARX5RpCHY3ON8IBQHCTcDe_WqBOjWLmhcPjZE3qcAAx0Wq-hofaQk1zDf-nZhqxa459Zx5aMXjZmpbNm6lwee4XKN8NZo2R-bxfUduN0RfvHglpRcJmJNo4g42RN7jbY3bN_jYEnNxCZYCX7YZzeSWu08Td42nNqTa0XlhvMWyX1hs-jyXjFgpcnHZhspexkXx_DbnG2poja02SN2pfyl6lijZ-HeFwFdwtaNtpYfAzN7pfvHelqzfpn-wGzdJpnNhzbK2MgZzcE23NtBefnPN9-ZDQqtuzeztwgaTcWWawBdmE22tggDfXh7LVYgXMp5zatsBAfO0nsYF0jAA2dmBBbKnLV5CetX5BhLciV4Nu1G6mPxuNb0XU9RNcMWqFxNTtWtZncfU3CNpRAr7IVt3pxXdtgNf23G5w7ebmuh5eRnG4tg8aPHyOc7fgMa5g-SbGlN-1Z1nVNvDeBm3Vk-0XHNtlDZGGa-8fs2Hvt8LYuXClnWei21-84cB2CNlhffH-WStd7mT9MjfIIw167ZaXI17BfYRuNhtez6m1kMfLWnl0rd83yt-zYY2eN8gEk3et2rZ1G_sPUc0H5MC0Za2atjlfyx3R30ZvHPhSMePBFuXuBcd65SkFSwuBebkXX9AM2m3WYxgmRSn0poba2W67fXt_XCBfZfdWf-3BdW3s0dbcu4q-7bfQ3lyUcYO3sN8oee23x4HbO3Qd-oZVmFNq7bN3bti3Ye2DUJ7eR34t21kH76VN7bt3lxz7fZV1xveFLHxoF3bh2c-_7aBmw-h5ZyQd-33ZwVsVkLYvGArL8ZoW7tw4YR2zh47cPG0dueW2Yf-o_pnhfx_8AyAAJ1SjrsIJm_vkgYJuCYZJ8BkDatXnp91fhHMJkPdbHr56VaWW_sAiYR7qVzSZAB_WpSQonzJoS1MnaJwQiimZFzyaOG8EEwZ9tHJqfeEn4gcIZJoaZtSYtpiJkABbJKAaABPTOUSieCmeeifYsmGJ0VbV2F9twZ8m9h5faOHcxtfbcnu1w7zTGNl7nqXoYEWCg2kHSDLkCADqbVAth0AQgziQlFcgmjQlFNdYv4qKJgRA4d12_heQlFZqHAPsoTdigOChcMVJXawMA_cMID-bn4ATWeXYnE4DiVAQOTIJA9QJPcEAHwOfditbm3TudwxqH1gEEQ_YjdxFa-mJe2MW339gfEHqgZQWIDeIGDjbYglmD-sYd2T4JsYXZI6AuQEPLuM5XemVx6xfIIT1TzpiBIAbICAPP95FXcMNexg75RZD-NfkOD5C8cUO9p5Q__21D9wwNpNDi-PukLQRJkjpvOAQ5f2P1t_YWkPAXLkHYGFXpgHwrsabcsOypesehWKFq7crXqFQVFLly5FDlc4bdv3aEP_D96fk2xD4I9oPQjx-U_k4x2IYflhoz-Q3Y0CVA7yxwxHI4oOqD0wSzEsVnCFGHOUcLoE5H-ZwH1BZ0QOvsAGgZKHqhu4dI5SPaj-o-usmjlo8KOlxaA8KICj5A9yPKD_I5KP3xpw7QcQUJSF1BWtOjT8PsKXw70Ott1g_EOODuKGh8HXXg7iAC8F1AkOP2KQ7WWBt9Me574GRBigYUGI7VNXVREMxPAx7RciYg7wA9SO0LjoHWyxTZPLB3YsWYw_roiyLyS14UTN4-EAkGdwQ17K5hvZ-PEZUA2sYnAGqS6VeJQZSellkakUaUlgFI3ePCiMWWsssmN2SllD5T2XGPNV44_wEhmHTJ45Qjm-yzoUjoEBgHjORhSyOa-to88PH-ek8QNejvI4GOsWIVHbM-QXgAwgUgMcwxP-t5XeJPUJWYDIQ84DCWoQBNIsdoZyEcMy4I8SO46Rg4AR461MYdTI3IQn-u3q4JgAPTUiVesA11mAIBRqdwWIAeYhoZJBGNc4A6wWU7zh5T4cgWcJgTcQUdkBHMhnZnua92agmReU7fmrhs8GcQHGAoAPVNbAgFGIHmWshCgTES05MgcGa08YBbThcHtO40p0-tPXTpPqjPXsdQCtOsz-M7NPxIIukLpjmSggIBxHBkcMQPT4rcp2zcKxzLP_zbJHUBKz_U8ckc4JbRMhtmbvClAyoMMFbwbT6s4dPzpGAbYozcLs8Et2AAaD7OomKYE5YhziFC7PUmE0HjO-zw2EHOM6Yc8W4ltcc4hQ_kTdBEAWEOOmjQDTls8K5Dzo0_YFPTkyBPOZgCAV9OboeJGbPTzyAU9ONBTkCCtGSccnHIDz-86vOzzopAGh1e9SW9PCdOHmvcJCXXGkJJZQBg9ln6HRcvPrzz04Ggv6O_kAv7j4C6uHd6BfCXwvTuU6AuKz2wnsIl8RVcRBlVhyHukN9CulO28xAihdRNewk9f3iToLTFU7NKFRuV9ATeB9AsHeQaJ2IRwDAcBGLiVX0BmLsSEwBEMfpRYuaANi7lB2BmsDxIDSaIGNJ-LmgECHqe-mEYg4LT1V_UfVJC1PMULKW1yMxkGeH2AMrUqBwsouvwQdNqT31FSsKLFyzvR3ITyy8h2ACxBwBccJyDvQLIKyAKtq8IydcuArECA9hyMoK2qsBLJy3fwgrHAGRcYk3SjvRQS1sXmUzQbYAot4r2i0qmZ4GK8cYRgHDESuJQWozSu70KB3LB2AMxHyccrDZVitHGfK6uAc8XHDABqr6cRKs8rAq7KgQrFBC4BCr8gHaucrUqxGp-4Sq2MEfL16GUuRbOtQZ6dLpnp7UHXLOBHhgzsNWURJr4ahntLJDlHVs7PG4BmBpMa4iUQE4FRF6LMjNAFqNHzC7UEQxIShGp5-i7eFNnugIu22u1EOIBI06jY8DOuh7V7DswGgDTBAJPqhogOvnzX8wl44AMfKcusARIB0gngHDDwA5bLtTMAhrBa6mBuLsYEahVESgGmuGMX1AysErhBRWvbgda-2BWoXIH6ArgF67evtqpYFpI0bYOwEBkyjIBXg98AUl8AJQacG8IOHHIhoBxMhFC2kyUU4R2Vq0EG6VtmRJRF6gb8W682BsLHi5Ov43O0XJoSNB6Gl7-BD21XACb964Fu77SyQGvoLfcxFtY7F2zFWRryWzGuZbOW2dhFbXDGVsf4COCOvob7u2bUOUd9bQddV0bYiH36H_WN6DllqEdvqxi7c-nVj-umhucAF-yftTkF-1Xt37cZpAEM8dnCdXegdIX_Mpte_jOYNMfzA0xl1s0eoANMBoAop7gFY-WbTkUqzvBEAE1gtBPpjTAHAaZ_LRL7kJFQYzoE9dNcfFPeMtc949mGA3kxaFIzFNHm1q6n3F2jf7BGd9xPQdmq270jiBoaqGA2AdPeRXWrkdxd8-WREHHw0C3E93qYPOQxwhf0OCggSVvsQzn24fsF7U8gDvUgNe2DuqUM1kdXblyO7qhT9dpA0xcUaM2ABXb_vXlxs76KDzuy1tyZLvbWMu52cK7oGirvJ2YPneo67s5gbuidpMztVgx7Y3_0A6Ye4Zoe7iB37u67ojiHuu76B4AU7Kce61HTkKe6Qdnp0BaOO6L0qhNsdlzpEducdzi_0BE71u_MALzhe78El1lu5DHY1nZkDHqHvWV5Gg6Wh_iQKHlg7Q3GxpI9Xv77eez9vMUbe7fs0HtLrsoD7sO6Pvq0OAGWFFp-O5IeQxoFxjMqH4B7aNb7hq5zu87gu6Lun7tij_tK7t-9ko4HiKmRX9xWu4Zp67tznAfNOSB5AedqDu8HvzH-B804gpzUUAfxh9hBcfawMnesePODu-enQHke7Yox7_wYlQhH9B6wVjxwqfnv7lt24-3Lt5-noelH8njEudQBh6UguTnOCIuQaHbZmVcNr6dYXFHldbIekn2R_Og0n9EWywgEWeqgUWjwJkQ5kORo-qf69uxfyek7wp_ieCn0p4yeOHj3pmU4qfPvgmL18wG9vfbhjgEfd7iVFIFRH6IHDuXVk-5qpz7sFUvvr7isy75Y7mR5Sf0zS-7aeWnys3KRpwNR_4B1qYldzWi9sUh0eP7vR9VIDH03SMeGaEx52ozHm2QseIHsdb7ubHgOjsfHnhx4ZonHu0Xcf5Mdx86x1nj_r8fvHgOk4NR7tASCfCUEJ4ANfH9zgnJBr1skdt0ROO2FADiH221vQIXS5lg37A29Bvjb1WyWuZYDW30ALbq81Nvou8-x16zwdXdzt65fVYduF7q45du2HkQ4zvvjv7CGeN7vh9RhRnoO69CJUS3eBm7-M57spAHbR4AegaTx_3sQjDOjXm7ABPVFeGacV5tlLRhfdVfiWdx6efLHl5-Bf5OMF-loAntiifmm7zu-IdZXz_BgcoXj0MnuAhme9j6WXqJ_YfE-2Xq9ulb2GGGflkPl5CeGOD1kBmKh6O8JQn5-Z5vlFnih5vvLxxcxFfS71fBVfTnyV895pX158te5Xs5lYnTXpV52o43zTjVfE7DV63hTX05G1fnn-Zq8e3n9u8NeLXx-YCXTX4t9lnIXw_FgcjvW16H7Ml23cdf_zaJ_B2iDNcb-WnZ0zfIeon52c5ZXbsg5QOF6fo8-PcJlne7IuX3h63uN7wO59eXkM1ij2A3urerQtMIjhDfLgMN6ieI3r5SZRg3-NDxRteJHgTMXKdSUzemUG2eQlG7hPSTe9Xvw1TeqZwgcVeY3_cWzfTHzV9VIXpOt9korHmV9BffZOfesHVXs6e0QK3_x894jXjOhNeE9PU095_3wWarjuHKt-sUrX70mbfOUNB5k2Qdjt9XX2H5Pah2rt7h-6xPXzlG9e9705BbnFIE4fKXYt4GcDfMUYN4aB0VeR6vuKH7zh2eN386A0xeI9AA0wo9_BG7liwDj9Hf1HC94lRjma96pQv3pNHvepXoF9g-xSeD5_Z0VFT-HE03_2ffeX7sB-LBAHh5-zFkPlN485c3yD5Bf5OdHdvxAnxt-tfIMFt6umCTyl_AXiTml59sQkfUFYf7lwh8J3iHoF-ahXbrZ9IeWH7ZmC-QxmsjqkIVvlFdv2Hj264es6Od8fsRnxd53v-XwlDv4hXmPeY_iSdhATugXjj_C_zoKT6ZQTnhT4_exSeT7dFtP4mYbuKvzTiq-dqSwfn2837MXM_zuNr81eCVb3H4UTP1UkA_k3zTh8f4XhB5upoP2SjU_9xJSU_evnmz80-MPuz6w_oXgLaH78P7z87fnX4cYtoyPj1-5eUv-eyXeXkTL7d2GkD3ey_V8eTHy-En6yE2fmn0h8rNV8YN4vuQAbXiWeLXEr6pQyvplFk-b3gz4Huav9Abq-9Px57--U5Zr7A-2viD46-SzLr_4VpvteT6-xSAb6ff9Xm2Q7vwXoGkm-GaeH6zfZv0z7m-kHzD-fflvjJfL6Yj9b8I-2XnJa-2kjpjjpdAvih-HeX1Rn-wOhjig7-lRjuTiYe3Xte4o_CUKj_GeTUVd_mHuxnL8xRLv4p7uRbv_z-u-HvuymDf9DHd_E_w35Z_Pp5fgJdE_6UWs0k_cVwlDvYfvuT4LoE9eV8Lfrt_-3MfQfzr4LexIH2QR-8fnV9LegPqUWG_o54wYh-SzKH5nkDX_cUreJvmt5gNEP5V_t_ihVD-D_639D_D-Fv4n8xQYXscjW_Yvqn-I-Whbb8S_3X9e_neXkAX4y-hfpfro-nxhj_bmmPi77y_JfjZ5e_sdO75DG5fkP_q2U79j73fO37j_0Z1f2v4E-hPnTM1_d38v4k-6XD771-1ZA38JRGvo9_9-A6JefG-gxAH7feA6Qf9vxh_yf63gAXs16ZAU5F36p26BmUda-hvsF-s_EHvf93EifvFWCeVvhz5Pt1gc9eFOcHsrmynRmAh4dJqp9kcr-O0Qd87eivpSHzRqp0djf_qAa7B2movm3EmmkTw2-VP3i-aGD_-qf15-e33PW_t1S-gj2gBJyCFW38z9ej2wB253xlW381ce-gCu-BT0K-T_2Uel41RmZXzpmmbxXm2bxXmz8Cn-XA0QBO1BIBGAMN-mAGoBHnHB-6rwABHvyQg9gws-xRDM-sP1YB2Yhx-5ALk-DjwEBhKGR-8AMs-wgJC6EgJdQAgOkBdAL1Io_3QBO1H4BcgJOQFjxkBYgMj-XAM0BqM1kBR_14BJyEQc8s1_-k0xgurLzkOy90MW4AJ5-PD2S-GgIsAWfy0Bwj30BNHw76IvyL-igO--JfwK-0v3eQQL2r-jgJY-Gv0V-z31e-Kv3e-uK0IB9_zoBtALn-RvzsBVKBN-jANVIMQOVelvwCB0Oh_etv3SBuP3NezgId-DKyd-EgNP-eQKfYoHxYB2QK7Envw8B5bxKBB_x9-1QPx-AgKx-FQKpQgfxaBQ_yEBKgPkBs4DQ-tQOj-K810BUfxaBgwJteDQNrAhgIFmABmqmpgKdeif1GGlgIFmdPwgAACDFYPf3w8bJwneaB2wIH_wFmJexYsXeAT-C8iWAawOYuXqBWBaDHiBO33T-tgLGBvL1gBYzz6BUQKTQtHxiA9Hxi2hf2y-WYmIBXgOu-uAJl-BT38BdM2Debf2E-i0xPeDf1XW57yaGK8xSBsQIYB8QJH-9WyeB2Pw0-twLqBjwMJQiQIRB5X2B-GIKTQZAK6BCQL_u2INkoagMJBIAl1eJIIJ-eIKGBRQKUQXwPJB8L3UBaIKHQVIJGBrIJZB7AAmBBaGMBkgOTwmD3GGVLxcO1_3zm0Agp-XhF8-RTwC-L_1XW3_1QAoXzlBz9H_-mBxi-ZgKXuXTyCObpwgBNgM3umf3uB6X0xQd_CiWK8EYWRHEjAx7340dojjuPwJwBPgOSesvyTWiW0TUr9ySgCeifmMBhx-pILD-0fzFIt-1X2pqU94wyxgMzAK3-0OiqB372t-L0k9BDX29Bt-FEBUH1G--PyGBPoNGBJPzLmq33be4oMXuyx1ieKf2sB5HygBEqAcBpyCNBxSxEG8AEsWOmTF-3xCCB2734mVoLWevwLtBpf2tUavxr-m72CBCz27-YQMLcCZjvYF3yKGLoKAEmPwCWgDzaBQf1yBmnHsavQNR-slD9B9-wDBc4LLBi_3eemQP5onz0nBJbwKBg333-pQLd-5QLDB7AM3-nAN3B6ILPBKYOKBMfxP-YT3J-hwPVBIWyTWSwPOBWHD2ALPwviGwI5-Ax22BohG1BBYIz-h-GLBhoNXwxoIrBpSzz-bc09wcHw1-III7-iv3rBiQGtBWAJbBfwN8BDoLbB1b1b-S8EE-oIIQhnYNDe3YP3eqvz0UwIKwh7fwh2YILE-ZZjWB8aD7-n31oU2j0HB5z1dBAdHdB1MlRBlnyXBMwFuYhn2JBKckR-zwMpBaP29-iYPPBmgIvBBgMSI3axdQO5iFsatyReJdnCAmLy5g4EDHUuLwVs-L3ikJtzVsxL3NuLcD1sFL3WAl_yEEBABG2-DyZefbylB13wZ-UTzlBCoLwBP_25-bMj36qoNmB5gI1B6ejzBnLzT-fP34e-oJCefe0PwyAPd2qANjU1YNeQNoJaeKEPtBAIN1-mKC--P03q-5KjSBlQOp21WxE2I4KRBHoJ6-E4JX-IkOTBYkL0BhUNQe14IT2DryzBXbwSOK8gS--YN2-_4P5-fkKO-Of11mXfXXedlAl-3gPL-coP8BiII7B27xCBnH0Ih4QMjecUIH-iUPxBcQLruXO3ShnvGaBslHHBqpH4hNYJ6BsYI5Bp4PEhl4NWhV4NJ-GYNvBaoJzBD4Np-Jm0Igz4KXIJwPXYbPz6OWwOK2VwJ8h9UIO-aX38hhE0TwLwJX6BfyR2nwOL-SEI6hCj3-B2z2YcFgBIhrYjIhPbwQh0iBTuadw4-ZwOFQ0iD7BtCln-Q_2ShqpFmhSgPYhNQPueU0KZ2E_yTBBUM2haYJ5BUkPP-NYCMh57BMhIm1G2423QgWYNAOLkOABbkNABnkNne3kMLBd0JXsD0MahgUK7GwrwHBuILhBMAEVeCbwZoj719-QYgxhkG29kRUJxhqYIlhCDhKhFF0tIQAMp-bkJdejkMZhkALqhvkPuhcAMF-HMNz6KAOj2oUMe-Gv36hb317BsUMXMo0J5hSUOYhnvEU--4iFhWMOHEosPjwEf3WhNBw2hEkO2hLbEzBd4P2h8wLkG_b3p-MoNDGTP1fBQ71Z-5B0uhnP3ZkN0OZhVKEAhJYJAcrgL3Gov1pMyi1rBvyiV-EINDGB71Th8gNr-J721-vfzNhI0LveY0KthfMJn-AsM049sI4hIsNShrWzFhwsOxhrsLheeMPTBXsN2hrkPvBOmSMO1fBjh6sJZhr9geBVKAmeuf1eB-f3eB70INhM0I1-bH3aWyvyieTf3Qhqn2ghpEJwhnfwXhnbyhBw0P7-pcMthvMP_uwGjc4NcLRhh4IZ2fm0xheUMlhuMOlhHsMtU2Hy1oiL30E2UF32QMCUhAalUh-t3UhPNxVsFL3VsukPLUltwowxMNIUO-z32lLDv-oayIeqEIKe1kNf-9kPlBzkLoeCCKVBzDyQR5ULi-O2y1BNUOuBuoKLBDUO1hId31hCmDChd2AihpDyihLYNohUb25h8ACHBCehfhe-3d-voJn2_oPFh-mlYRZQNDBGEKjwWULAeK0KlhzcNvh7sJER4wNlhMwNph6oOVhlR1_BtUJuBg8MO-hCP3uJ3w0gZ32nhyGnIRcj2bBfgP-htDCNhXYNCBg0NNhO8JOQ-vzLh9AOHBnvEYRQMGYRHMlYRC4PYR6GE4R-4O4R7YI7QgD2jBXoM3B1IJ8R-UJvhoiJKA4iPj-e0LB21fRBhjoMiUPi1DhW8NM2I7zfB6wIuh7Jyne0cNkRuCJ5eGsNZhWsKZQo8OahKdADeucKZImiJ-Q2iLQh0KgV-fUIMRA0M7eOcIyhm7wLhl923hq-EK48MMxQ8_x6h7iLc480K8RuUKnBof28Ra0Nvw1iK9sB4NVI84MDs5NEXBk0mcRVgxGRQiJbhbsMERW0PvhHcPlhNMMVh3cPIh54xI-M5H7h8iLjhBCOyRicLv248IghrUNko7UKbBnUIQR3UJ4RfHznhbKCzhMAnRUPHxnhmEKBh68PBBBEJiRRcJMR5sL3hdCKYhFcP3EyMNko4_1rhYpCGRtiJYRNYTYRAdD9BXCJPBviNEh8yJ3Ej0NheIXRdQT8J7sZaXRegdice78OxegcDUhDakNuYN00hhLzNu7rzJeacH1sVtywezhzc-NzCAmrdnCG_GiphFkLlBcCNlBCCLshv0NIekXzQR0XwI-oY0wRJu1PIuyLwRCiLZhSiJEBnMLQBGiK-hlyJ-hMCL-hvyNrA8UOJI5iIRh8IM94fk3CmuqOsmikzim9kxUm832vhCyNbhd8IWWZP1WRwqOzBoSNEOVUOwRXkLVheyJgBmsOHhCcJ1hOTzORCnyKRUvyuRfKKr-uiKe-lSJNh67moRpiOfuAKIzobSJpwYU2VuT7ENRsUxAG8Uw4gLsOERFqJG-VqKc-O0NtRGCLmBmyMfBR0K7SXKODhsSOZ-YcPfBiSM2BUcMJhAuFSRt0JOQ8cKehyiNyRam1F-n0JoA2AMihJSJihmdzThtfzwhXf0MR1SKIhqcItBWvwaROvzVRFgDMR-8N--1sKTRUkwNRNkzsm62lNRGaP8RiyICRXIKCR3sJCR9u0D2qdF7h4qMbRscPdRmSM9RCAKahWe0Y-8qL9RiqNtBgaJVR93xDRs8Pr-XyNXWS8MPe2czeR2EI7-nyNHRkIJnRJqHnRMaMq-iMPMECaMcRoZGTRtk2NRG6ISmW6J3RqGMtRMsM9hGKJpgOUEp8zS1SoyFh1u4EFSQo1TxQQIGJAVQG8AFGV_A5IBVyNYGimmEjmqZKFsgOAGYxtkEZQKsGU-8QVFqZ-RoxhBB9AvGMwA5IFFieYDfiTsCHgTjHKAIIEoxTknP-jFG4wHNGPMmgHYxGfWQqPeFURbMyuAIGkjUVQjxQAAD09yKlIcAB84b8CrAyvHpjccDgAnLsZi7lNPsjYHTQ9Mb2RmMSi4TMbZjJaKbB3XhzRdMY5iWMddRVKK7B3YJ7BvYP9YpKHpiuzt5AjMdZiZ4L7xNcEdQyUPpjnLjgAyvC5jC4FkZ4gvFinMb5jtMcPBWLLFj-ALpjtzsxiksTZjT1DhgOaEViosbMoNIZ5iKoEZijMZljSUQS9csSAB8sUZjmMZFiqZKaw5ru5iQzp5jtzuFjjwhQ5XiF1jUbhaADrtViEsZ35BsZ1iEbqbALrvdcxbmfRQseFdEsZljxMdaBqsf5BDMR85xjq6opMbgBhrvhjtLoRiQABw5aAL6ACckC54GOtRzQN7A5gIZQFAPIB5AEAA`} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};"],"sourceRoot":""}