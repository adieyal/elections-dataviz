{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","tooltipDiv","predefColors","svg","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","name","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","BarchartWithNavMap","onResize","react_default","barchart","map","BarchartWithNavMap_barchartMap","provincesData","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","e","event1","CustomEvent","BARCHART_PREVIEW","event2","MAP_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onClick","onPreview","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode","map-title","region","loading-spinner","map-navbar","map-container","regionColor","Map","disableNavigation","drawGraph","selectionData","REGION_CHANGE","loading","react_loading__WEBPACK_IMPORTED_MODULE_8___default","color","style","display","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","process","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","getJsonDataFeatures","partyAbbrByName","getMainPartyName","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityVdNumber","topojson","projection","path","parties","availableCnt","party","b","legends","getLegendXY","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","j","rect1","rect2","bottom","smunicipal","w","fo","muniImuniCodeD"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.479dc2a6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    // var svg = container.append(\"svg\")\n    //     .attr(\"width\", parseInt(width) + XaxisOffset)\n    //     .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.vdNumber) {\n            this.state.vdNumber = props.vdNumber;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div>\n            <div className=\"leftContainer\">\n            <BarChart {...this.state} />\n            </div>\n            <div className=\"rightContainer\">\n            <Map {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event1 = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event1);\n\n        var event2 = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event2);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart-with-navigation-map\"}}>{`Race for Votes - Bar Chart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"region\":\"map_region__1GVD7\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"map-navbar\":\"map_map-navbar__1sP3i\",\"map-container\":\"map_map-container__1nrEx\",\"map\":\"map_map__1IdTC\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className=\"map-container\">\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className=\"loading-spinner\" ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" style={{display: 'hidden'}} className=\"map\"></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv;\n        if (document.getElementsByClassName(\"tooltip\")[0]) {\n          tooltipDiv = d3.select(\".tooltip\");\n        } else {\n          tooltipDiv = d3.select(\"body\").append(\"div\")\t\n            .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n            .style(\"opacity\", 0);\n        }\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityVdNumber(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var vdNumber = getMunicipalityVdNumber(d.properties);\n                    partyName = locationToMainParty[vdNumber];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var getJsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            getJsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(getJsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            getJsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            // if (self.state.regionType == \"province\") {\n            //    console.log(\"fetch muni Names and codes\", JSON.stringify(getJsonDataFeatures.map(d => {\n            //         function getMunicipalityCode(properties) {\n            //             return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n            //         }\n            //         var newState = {\n            //             provinceName: self.state.provinceName,\n            //             muniName: d.properties.smunicipal,\n            //             muniCode: getMunicipalityCode(d.properties),\n            //         }\n            //         return newState;\n            //     })));\n            // }\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(getJsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < getJsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < getJsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(getJsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName())\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityVdNumber(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            vdNumber: getMunicipalityVdNumber(d.properties),\n                        }\n                        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            vdNumber: self.state.vdNumber,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}