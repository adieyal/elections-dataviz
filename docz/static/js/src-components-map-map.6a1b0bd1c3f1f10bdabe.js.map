{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/Map/map.mdx","webpack:///./src/components/Map/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","partyColorsData","regionColor","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","filename","concat","getRegionName","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getMainParties","partyColorsLoader","getPartyColors","values","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getMainPartyName","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","edge","topojson","projection","path","parties","availableCnt","party","b","legends","parseInt","getLegendXY","data","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onRegionTypeChange","province","key","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","Map_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"wGACAA,EAAAC,QAAA,CAAkBC,YAAA,uBAAAC,kBAAA,6BAAAC,QAAA,kiDC0BlB,IAEAC,EAFIC,EAAJ,UAIA,SAAAC,EAAAC,GACE,OAAOC,QAAPD,EAGkBE,cAApB,IAEMC,cAEF,SAAAA,EAAAC,GAAmB,IAAAC,MAAA,mGAAAC,CAAAC,KAAAJ,KACfI,MAAAF,MAAAG,EAAAL,GAAAM,KAAAF,KAAAH,oDACAM,MAAa,CACTC,mBADS,EAETC,iBAFS,yBAGTC,WAHS,WAITC,aAJS,GAKTC,SALS,GAMTC,SANS,GAOTC,MAPJ,IAUIb,EAAJS,aACIR,EAAAK,MAAAG,WAAwBT,EAAxBS,YAEAT,EAAJU,eACIT,EAAAK,MAAAI,aAA0BV,EAA1BU,cAEAV,EAAJW,WACIV,EAAAK,MAAAK,SAAsBX,EAAtBW,UAEAX,EAAJY,WACIX,EAAAK,MAAAM,SAAsBZ,EAAtBY,UAEAZ,EAAJO,oBACIN,EAAAK,MAAAC,kBAA+BP,EAA/BO,mBAEJN,EAAAa,eAAsBb,EAAAa,eAAAC,KAAAC,IAAtBf,KACAA,EAAAgB,YAAmBhB,EAAAgB,YAAAF,KAAAC,IAAnBf,KACAA,EAAAiB,mBAA0BjB,EAAAiB,mBAAAH,KAAAC,IAA1Bf,KA7BeA,yPAFLkB,mDAkCTC,EAAWpB,GACZG,KAAAkB,UAAAD,EAAApB,+CAIAG,KAAAmB,KAAUnB,KAAVoB,eAA+BpB,KAA/BG,OACAkB,0BAA0BC,IAA1BD,WAA6CrB,KAA7CqB,aACAA,0BAA0BC,IAA1BD,YAA8CrB,KAA9CqB,mEAIFrB,KAAAoB,eAAAG,UAAA,OAAAC,SACAH,6BAA6BC,IAA7BD,WAAgDrB,KAAhDqB,aACAA,6BAA6BC,IAA7BD,YAAiDrB,KAAjDqB,iEAIErB,KAAAmB,KAAUnB,KAAVoB,eAA+BpB,KAA/BG,gDAIA,IAAIsB,EAAJzB,KACA,OAAO,IAAA0B,QAAY,SAAAC,EAAAC,GACf,IAAIC,EAAO,IAAPA,EAAJ,IACIC,EAAeT,uBAAnB,UACAS,uBAAmCD,GACnCC,wBAAoCD,GAOpCE,IAAKD,EAAeL,oBAAfO,UAAiD,CAClDC,kBADkD,EAElDC,WAAYL,EACZM,YAAaN,IAEjBF,EAAQG,2CAARH,0CAIIS,GACR,IAAIP,EAAO,IAAPA,EAAJ,IACIC,EAAeT,uBAAnB,UACAS,uBAAmCD,GACnCC,wBAAoCD,GAEpCE,IAAKD,EAAe9B,KAAAqC,KAAAC,aAAfN,UAAiD,CAClDC,kBADkD,EAElDC,WAAYL,EACZM,YAAaN,IAQjB,IACAU,EADIC,EAAJV,EAA2BW,EAAQ,sBAAAC,OAAyBC,YAAc3C,KAAvCG,OAAnC,SACIyC,EAAMvB,uBAAV,KAEAuB,aACAA,OAAWJ,YAAXI,oBAEIvB,SAAJwB,cACIN,EAAIlB,qBAAJkB,gBACAA,kEAGAK,oBACOA,EAAJE,WACHF,kEAIWR,GACf,IAAIW,EAAWX,EAAfY,OACAhD,KAAAiD,SAAAF,0CAIA,OAAOG,IAAUlD,KAAAqC,KAAjBC,0DAIA,OAAOY,IAAUlD,KAAAqC,KAAjBc,0CASInD,KANEG,MAAAC,kBAON,OACIgD,EAAAC,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACI4D,EAAAC,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,cAAyCmD,YAAc3C,KAD3DG,QAGIiD,EAAAC,EAAAC,cAAA,OAAKC,IAAL,eAAwB/D,UAAWA,EAHvC,SAII4D,EAAAC,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,mBAA8C+D,IAA9C,WACIH,EAAAC,EAAAC,cAAAE,EAAAH,EAAA,CAAcI,KAAd,OAA4BC,MAA5B,OAA2CC,OAA3C,IAAwDC,MANpE,0CAYM3C,EAAWpB,GACjB,IAAI4B,EAAJzB,KACI6D,EAAJ,0BA6BA,IAAIC,EAAuBC,uBA3B3B,WAeI,OAAOtC,QAAPnB,YACI,eACI,OAAAuD,EACJ,eACI,MAjBwB,CACxBG,QADwB,qBAExBC,WAFwB,oBAGxBC,QAHwB,oBAIxBC,gBAJwB,qBAKxBC,aALwB,oBAMxBC,aANwB,oBAOxBC,eAPwB,oBAQxBC,gBARwB,oBASxBC,eATJ,qBAiB+B/C,QAA3BlB,cACJ,mBACI,OAAOkB,iBAAP,YACJ,QACI,OARR,MAYqDgD,GAEzDhD,6FAMA,IAAIiD,EAAaC,YAAjBnF,GAGIoF,EAAJ,IAIA3D,4BACA,IAAI4D,EAAM5D,+GAEW,YAAkC2D,EANvD,KAIU3D,uBAAV,GAOI6D,EAAc,CAFE5B,IAApBY,GAC4BiB,YAA5BlF,IAGA,IAAAP,EAAsB,CACpB,IAAI0F,EAAoBC,cACxBH,UAGFpD,oBAA8B,SAAAwD,GAC1B,IAAIC,EAAcD,EAAlB,GACIE,EAAsBC,YAAmBH,EAAD,GAA5CrF,GACAP,EAAkBA,GAAmB4F,EAArC5F,GAEA,IAuCAgG,EAvCIC,EAAJ,GACIC,EAAJ,GAQA,SAAAC,EAAAC,GACE,OAAAA,GAEOH,EAAiBG,aAAjBH,KADLhG,EAIJ,SAAAoG,EAAAC,EAAAC,GACI,IAAAH,EACIpF,EAAamB,QAAjBnB,WACA,gBAAIA,EAA2B,CAC3B,IAAIC,EAAeqF,aAAnBE,UACAJ,EAAYN,EAAZM,QACG,gBAAIpF,EAA2B,CAClC,IAAIG,EAAWsF,YAAoBH,EAAnCI,YACAN,EAAYN,EAAZM,OACG,KAIChF,EAA6BkF,EAAjCI,WAFIC,WAGJP,EAAYN,EAAZM,GAEJ,OAAAA,EASJ,GAtCIpG,GAAmBA,EAAe,KAAfA,kBACrBA,EAAe,KAAfA,yBAAuD,SAAA4G,GACrDX,EAAiBW,OAAjBX,MAAmCW,OAAnCX,OACAC,EAAgBU,OAAhBV,MAAkCU,OAAlCV,gBAmCJ,IAAI1B,uBAAkD,CAClD,IAAKqB,UAAoB1D,QAAzBhB,UACI,OAEJ0E,EAAcgB,MAA8BhB,UAAoB1D,QAAhE0D,WAGJG,EAAmBH,EAAnBG,SAEA,IAAIc,EAAalD,cAAyB,CA1E9C,IA0EqBA,GAAjBiC,GACIkB,EAAOnD,iBAAXkD,GAGAvB,uBAAkBrF,EAAlBqF,wDAImBrF,EAJnBqF,yBA9QZ,WA8QYA,YApBA,SAAAe,EAAAC,GAGI,OADiBJ,EADDE,EAAgBC,MAmBpCf,UAOgB,SAAAe,EAAAC,GACR,gBAAAnD,OAAAmD,KARRhB,YAYA,IAAIyB,EAAJ,GACIC,EAAJ,GACAjB,UAAyB,SAAAM,EAAAC,GACrB,IAAIW,EAAQb,EAAgBC,IAC5B,GAAIU,cACAA,UACAC,WAEAA,EAAaD,UAAbC,QAIRD,OAAa,SAAAjD,EAAAoD,GACT,OAAOF,EAAaD,UAAbC,IAAmCA,EAAaD,UAAvDjD,MAMJ,IAAIqD,EAAU7B,uBAAkBrF,EAAlBqF,yDAIS,SAAAe,EAAAC,GAAA,MAAU,aAPjC,SAAAA,GACI,MAAO,CAAEA,EAAD,EAAD,IAAYjB,KAAnB,GAA4B+B,SAASd,EAATc,IAMgBC,CAAff,GAAV,OACvBa,8BAEmBlH,EAFnBkH,kFAOkB,SAAAF,EAAAX,GACV,OAAOJ,EAAPe,KAERE,gDAGU,SAAAF,GAAK,OAAIhB,EAAJgB,KAEf,iBAAI/E,oBACAoD,EAAAtD,UAAA,gBAAAsF,KAAAvB,GAAAwB,QAAAC,OAAA,QAAAC,KAAA,uBAAAA,KAAA,oBAAAA,KAAA,YAKuB,SAAApB,GACf,IAAAqB,EAAAC,EACA,kBAAItB,iBACAqB,EAASE,IAAUvB,WAAnBqB,cACAC,EAAmBd,EAAnBc,IACAA,OACO,aAAAA,EAAP,MAEAD,EAASE,IAAUvB,uBAAnBqB,KACAC,EAAmBd,EAAnBc,IACAA,MACO,aAAAA,EAAP,OAhBZF,KAAA,cAAAI,MAAA,wBAAAC,KAqBU,SAAAzB,GAAC,OAAI0B,YAAiB1B,EAADI,WAAevE,EAAnCtB,SAGf,iBAAIsB,oBACA8F,cAIJ1C,2GAMgB,SAAAe,EAAAC,GACR,oBAAAnD,OAAAmD,KAPRhB,0CAUqB,SAAAe,EAAAC,GACb3C,4EAXR2B,eAeqB,SAAAe,EAAAC,GACb,iBAAIpE,qBACJiD,gDAIAA,OAAgB4C,YAAiB1B,EAADI,WAAevE,EAA/B6F,aAAqD3B,EAAgBC,IAArFlB,aACoBxB,IAADsE,MADnB9C,kBAEmBxB,UAAD,GAFlBwB,SArBRG,cAyBoB,SAAAe,EAAAC,GACZ3C,yEAIA,iBAAIzB,oBAEJiD,kDAhCRG,WAoCiB,SAAAe,EAAAC,GACT,IAAIpE,QAAJrB,kBAAA,CAGAsE,gDAIA,IAoBIsB,EApBA1F,EAAamB,QAAjBnB,WAEA,gBAAIA,EACAyC,EAAW,CACPzC,WADO,WAEPC,aAAcqF,aAFlB7C,WAIA0E,YAAmBnG,IAADoG,cAAlBD,GACAhG,mBACG,gBAAInB,EACPyC,EAAW,CACPzC,WADO,eAEPC,aAAckB,QAFPlB,aAGPC,SAAUoF,aAHH+B,WAIPlH,SAAUsF,YAAoBH,EAJlC7C,aAMA0E,YAAmBnG,IAADoG,cAAlBD,GAEAhG,kBACG,KAICsB,EAAW,CACXzC,WADW,kBAEXC,aAAckB,QAFHlB,aAGXC,SAAUiB,QAHCjB,SAIXC,SAAUgB,QAJChB,SAKXC,OARJsF,EAQgCJ,EALhCI,WAFWA,EAAPC,aASJwB,YAAmBnG,IAADoG,cAAlBD,OAGPhG,QAALrB,oBACayE,mCACM+C,KADN/C,8DAAT,gBAMAgD,wFAIiB,WACT,IAAIvH,EAAamB,QAAjBnB,WAGIyC,EAAW,CACXzC,WAAYmB,QADDnB,WAEXC,aAAckB,QAFHlB,aAGXC,SAAUiB,QAHCjB,SAIXsH,eAAgBrG,QAJLhB,SAKXC,MAAOe,QALXf,OAQA,aAAIJ,EACAyC,wBACG,iBAAIzC,IACPyC,yBAGJ0E,YAAmBnG,IAADoG,cAAlBD,GACAhG,gBAGZA,qFAMZsG,EAAA,orECjeA,IAAIC,EAAgBrI,cACpB,SAAAH,EAAAyI,GACI,OAAOC,QAAoCxI,IAApCwI,IAAPD,EAGEE,kBAEF,SAAAA,EAAAtI,GAAmB,IAAAC,EAAA,mGAAAC,CAAAC,KAAAmI,IACfrI,EAAAsI,EAAApI,KAAAC,EAAAkI,GAAAjI,KAAAF,KAAAH,KACAM,MAAa,CACTkI,UADS,OAETjI,mBAFS,EAGTE,WAHS,WAITC,aAJS,eAKTC,SALJ,IAFeV,yPAFAkB,4JAmBAuB,GACf,IAAIQ,EAAW,CAACzC,WAAYiC,SAA5B+F,OACAtI,KAAAiD,SAAAF,qCAGMR,GACNkF,YAAmBnG,IAADiH,YAAqBvI,KAAvCyH,6CAGUlF,GACVkF,YAAmBnG,IAADkH,WAAoBxI,KAAtCyH,wCAGM,IAAAgB,EAAAzI,KACF0I,EAAS3E,IAAb2E,OADMC,EAQF3I,KAREG,MAGFkI,EAHEM,EAAAN,UAIFjI,EAJEuI,EAAAvI,kBAKFE,EALEqI,EAAArI,WAMFC,EANEoI,EAAApI,aAOFC,EAPEmI,EAAAnI,SASFoI,EAAkBZ,SAAqB,SAAAa,GAAI,OAAIA,QAAJtI,IAA/C,GACA,OACEuI,EAAAzF,EAAAC,cAAA,WACEwF,EAAAzF,EAAAC,cAAA,UADF,iCAEEwF,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACIsJ,EAAAzF,EAAAC,cAAA,aADJ,eAEIwF,EAAAzF,EAAAC,cAAA,SACIG,KADJ,OAEIjE,UAAWA,EAFf,gBAGIuJ,YAHJ,kBAIIC,SAAU,SAAAzG,GAAC,OAAIkG,EAAAxF,SAAc,CAACoF,UAAW9F,SAA9B+F,YAGnBQ,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACMsJ,EAAAzF,EAAAC,cAAA,aADN,gBAEMwF,EAAAzF,EAAAC,cAAA,UAAQ9D,UAAWA,EAAnB,gBACG8I,MADHhI,EAEG0I,SAAUhJ,KAAAiJ,mBAAArI,KAFbZ,OAGM8I,EAAAzF,EAAAC,cAAA,UAAQgF,MAAR,YAHN,YAIMQ,EAAAzF,EAAAC,cAAA,UAAQgF,MAAR,YAJN,YAKMQ,EAAAzF,EAAAC,cAAA,UAAQgF,MAAR,gBAlBd,kBAsBQ,YAAChI,GACCwI,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACIsJ,EAAAzF,EAAAC,cAAA,aADJ,iBAEIwF,EAAAzF,EAAAC,cAAA,UAAQ9D,UAAWA,EAAnB,gBACI8I,MADJ/H,EAEIyI,SAAU,SAAAzG,GAAC,OAAIkG,EAAAxF,SAAc,CAAC1C,aAAcgC,SAAjC+F,UACXQ,EAAAzF,EAAAC,cAAA,UAAQgF,MAAR,IAHJ,cAKQN,GAAiBA,MAAkB,SAAAkB,GAC/B,OAAOJ,EAAAzF,EAAAC,cAAA,UAAQ6F,IAAKD,EAAbE,KAA4Bd,MAAOY,EAAnCE,MAAmDF,EAA1DE,UAOlB,gBAAC9I,GACCwI,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACIsJ,EAAAzF,EAAAC,cAAA,aADJ,qBAEIwF,EAAAzF,EAAAC,cAAA,UAAQ9D,UAAWA,EAAnB,gBACI8I,MADJ9H,EAEIwI,SAAU,SAAAzG,GAAC,OAAIkG,EAAAxF,SAAc,CAACzC,SAAU+B,SAA7B+F,UACXQ,EAAAzF,EAAAC,cAAA,UAAQgF,MAAR,IAHJ,cAKQM,GAAmBA,YAA0B,SAAAS,GACzC,OAAOP,EAAAzF,EAAAC,cAAA,UAAQ6F,IAAKE,EAAb7I,SAA4B8H,MAAOe,EAAnC7I,UAAmD6I,EAA1D7I,cAOtBsI,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eAEEsJ,EAAAzF,EAAAC,cAAA,SAAO9D,UAAWA,EAAlB,qBACIsJ,EAAAzF,EAAAC,cAAA,SACIG,KADJ,WAEIjE,UAAWA,EAFf,oBAGI8I,MAHJlI,EAII4I,SAAU,SAAAzG,GAAC,OAAIkG,EAAAxF,SAAc,CAAC7C,kBAAmBmC,SAAtC+G,aA7DzB,+BAkEIR,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACEsJ,EAAAzF,EAAAC,cAAA,UAAQG,KAAR,SAAsB8F,QAASvJ,KAAAwJ,UAAA5I,KAA/BZ,MAA0DR,UAAWA,aAAyBA,EAA9F,gBAnEN,YAqEIsJ,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACEsJ,EAAAzF,EAAAC,cAAA,UAAQG,KAAR,SACI8F,QAASvJ,KAAAyJ,cAAA7I,KADbZ,MAEIR,UAAWA,aAAyBA,EAFxC,gBAtEN,kBA0EEsJ,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,eACIsJ,EAAAzF,EAAAC,cAAA,aADJ,cAEIwF,EAAAzF,EAAAC,cAAA,OAAK9D,UAAWA,EAAhB,cACIsJ,EAAAzF,EAAAC,cAAA,YAAO,gBAAAZ,OAAAgG,EAAA,wHAAAhG,OAAA2F,EAAA,yDAAA3F,OAAAtC,EAAA,gDAAAsC,OAAApC,EAAA,mDAAAoC,OAAAnC,EAAA,+CAAAmC,OAAAlC,EAAA,6CAAAkJ,QAAA,iBA9EnB,6CA6FRC,EAAA,4vDChJqBC,kBACnB,SAAAA,EAAA/J,GAAmB,IAAAC,EAAA,mGAAA+J,CAAA7J,KAAA4J,IACjB9J,EAAAgK,EAAA9J,KAAA+J,EAAAH,GAAA1J,KAAAF,KAAAH,KACAmK,OAAA,KAFiBlK,yPADmBmK,IAAMjJ,kDAKnC,IAAAkJ,EAC0BlK,KAD1BH,MACCsK,EADDD,EAAAC,WACgBtK,EADhBuK,EAAAF,EAAA,gBAGP,OAAOpB,EAAAzF,EAAAC,cAAA+G,EAAA,QACEjB,KADF,UAGEe,WAHFA,GAIXrB,EAAAzF,EAAAC,cAAA+G,EAAA,QAAQjB,KAAR,KAAkBe,WAAlBA,EAA0CtK,MAAO,CAACyK,GAAlD,yBAJW,wBAKXxB,EAAAzF,EAAAC,cAAA+G,EAAA,QAAQjB,KAAR,IAAiBe,WAAjBA,GALW,mKAMXrB,EAAAzF,EAAAC,cAAAiH,EAAA,GAAYC,cAAZ,g+tCAA4/tCC,WAA5/tC,EAA2guCC,OAA3guC,wBAA4iuCC,QAAS,CAAC9K,MAAOG,KAAOA,KAAPH,MAARA,EAAkCD,IAAlCgL,EAAA,EAAsCzC,SAA3luCwB,IACIb,EAAAzF,EAAAC,cAAAsH,EAAA,EADJ,MAEI9B,EAAAzF,EAAAC,cAAAqG,EARA,sKCjBJ1K,EAAAC,QAAA,CAAkB2L,UAAA","file":"static/js/src-components-map-map.bb27adbb.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\nimport { resultKeyNameFromField } from \"apollo-utilities\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        // var ctx = rendercanvas.getContext(\"2d\");\n        // ctx.globalCompositeOperation = \"source-in\";\n        // ctx.fillStyle = \"#ffffff\";\n        // ctx.fillRect(0, 0, rect.width, rect.height);\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---map\"}}>{`Race for Votes - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the race for votes across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};"],"sourceRoot":""}