{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVSeatSwingBarchart/BarChartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.mdx","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","barchart_partyColorsData","chartOptions","topLabel","usedValue","yValue","d","seats","yValueFormat","dynamicYAxisFromValues","className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","d3deltabarchart","d3","react_default","a","createElement","ref","container","dataLoaders","getSeatsDataForComparison","years","desc","exec","partyColorsLoader","getPartyColors","values","seatsData","partyColorsData","error","console","data","chartData","parseSeatsComparisonDataMultipleParties","TVSeatSwingBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","edge","thing","index","t","abbreviation","e","options","i","l","length","selected","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","partyAbbr","curProvinceData","item","type","placeholder","onChange","onRegionTypeChange","multiple","onEventDescriptionChange","key","province","name","muni","onPartyAbbrsChange","party","formatPartyName","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVSeatSwingBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","Chart","width","height","predefColors","svg","tooltipDiv","createTooltip","x","y","errorText","groupChartData","colorsData","partyColorByName","newGroupChartData","_objectSpread","delta","minMaxY","axisThick","groupSvgs","groupSvg","YaxisOffset","deltaData","barSvg","barTextSvg","bars","getFillColor","getTooltipText","pageX","Math","Number","barTexts","barTextYDelta","partyName","getFillColorFromPartyName","noXaxisByParty","destroy"],"mappings":"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","file":"static/js/src-components-tv-seat-swing-barchart-barchart.ec77ea4c.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats-swing---bar-chart\"}}>{`Race for Seats Swing - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3Hovq\",\"multievent-container\":\"barchartEmbed_multievent-container__2y7nI\"};","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => item.data[0].delta)) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => item.data[0].delta)) - 1\n      }\n      y.domain(minMaxY);\n\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"black\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}