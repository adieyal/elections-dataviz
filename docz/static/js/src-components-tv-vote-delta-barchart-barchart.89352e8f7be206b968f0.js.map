{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVVoteDeltaBarchart/d3deltabarchart.js","webpack:///./src/components/TVVoteDeltaBarchart/barchart.js","webpack:///./src/components/TVVoteDeltaBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteDeltaBarchart/barchart.mdx","webpack:///./src/components/TVVoteDeltaBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","errorText","this","draw","groupChartData","colorsData","partyColorByName","partyColorsData","edge","newGroupChartData","item","chartData","data","_objectSpread","delta","partyAbbr","minMaxY","dynamicYAxisFromValues","console","axisThick","groupSvgs","groupSvg","d","concat","YaxisOffset","i","length","deltaData","barSvg","barTextSvg","bars","name","getFillColor","getTooltipText","pageX","Math","Number","barTexts","barTextYDelta","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","l","toUpperCase","destroy","chart","barchart_partyColorsData","getProvincesData","barchart_className","originName","styles","refreshIntervalID","chartOptions","topLabel","usedValue","yValue","percOfVotes","yValueFormat","value","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","react_default","a","createElement","ref","dataLoaders","getVotesDataForComparison","years","desc","exec","partyColorsLoader","getPartyColors","values","votesData","error","parseVotesComparisonDataMultipleParties","TVVoteDeltaBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","type","placeholder","onChange","onRegionTypeChange","multiple","onEventDescriptionChange","key","province","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","JSON","replace","TVVoteDeltaBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container"],"mappings":"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","file":"static/js/src-components-tv-vote-delta-barchart-barchart.07f2a7e4.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => item.data[0].delta))\n        minMaxY[0] = d3.min(newGroupChartData.map(item => item.data[0].delta))\n      }\n      console.log(\"minMaxY\", minMaxY);\n      y.domain(minMaxY);\n\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"black\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              console.log(\"return y\", Math.min(y(Number(d.delta)), y(0)), y(Number(d.delta)), y(0), d.delta, d);\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              console.log(\"return height\", Math.abs(y(Number(d.delta)) - y(0)), y(Number(d.delta)), y(0));\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteDeltaBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: `\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-votes-delta---bar-chart\"}}>{`TV Race for Votes Delta - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJEsAA1PCRBgbUFwIVxoLQ-CCEkDwYPIKj-FVVABXtKCYLgmCLyIQIckQ9hkMkVD0M-DcaBw_DCNoEioDIij6M4yQKI4kVz247JGLtDV2CDKU3RNBVzXaTSHWAdhNB8eQ9LldoAAEYCIEQBlQDCuiMgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZxigAWJL2AANiSlL1jAECADEfWgRIYv4ZxDkRR1MHYAAFIR-CWByfjgdLEWKmtSpoZwIB8y52AARmy1L5HBDzqC8gBBOZgvYSNTPo6B0HDdh5E5YKxBWmMZHYVFApgbhgEPPyAuxeRt1rYB1qgTbggAMhe8ZEnmShmke57zG4AH5TAUIPJ7VB2nYAB-DYNvDSNdquX7w2mmspBkat3zMWEtMwMAwhklbdu4fbo1RxaVxrRMdIIHAysyFJrwIO7azrJSqPYLdV0TNnONUniOeZutJGp2n6cZu6pHJjGzG_EAhIwjNsNwgiiOk2S6KomiNc4gCtAoED9AYFitOppZTPXLCs0svj-DNKUNOYyD2CMEI7HQZMrP4kB3Yd42HROoKbZAHBPR5kUtconWzjgX2neAZSCGt91kM9CTVdI8jtfD93MBk1xaMjkVY9Y47WBSSxKGa2dPf4CpWBgC04DLi1_AtGZZwd4yphgeuxJr4PPRDr1e4IGOQCYv2pl0SA5yDoeh-niBCnHrvQvWM9JPgbVolcMrhXXGDbGoVKLDPZrOMSRwoGFOAT9HAhWt-NBETgbeyLMJOTRTyQh9mCBi60mFNKME4AwE3nAA-_Q4DUDfq4fUoQZIQHJDAc-IoIDwDvmecUzxqAADkfRMlQJ_JCA8f6enCNAMeTEzCsBgv2IQfwPJbx3stM-DDn7MLIvDahqBaFHHQDvcUMp4B4EsAKboIVkzxRdmNWKcieHA1Bk5HoUB_BwHwceSMwol5oA0TAXaQCLBdAIH0cwAd4AAG1tFRT0QAXXYAAHwcXsfoNiCFMRRjQuh8kRRMT4f2C-V8b6wL8XQrowi4B4AaHoAQtCoANG1MtWKPD_E-IILqGYYM7AhUMcOGYAAZfOC4rj8FwfNSwDRdRlPyeweazhnDnn1DefJABNK4AAmORABOJYnSJq9NimNLp7V1h5GyHheIjISkgAAKTsDwtqZwDhdQAFVcGWHPNqEZNZEgTKgFM44e1jg4DhOQXUYBwF312ZMmAe8BBRAIFcOJjIjmRmed0fasVobtAANTtBim-dgPyVrvJwBEMqEAaiPnaZyXawL2gzL6hYdAiRUCVXIC0-aWBbB00iHsxk9xxjokIZ4jyqi4B2DDt3LAoF0B2AtpmKYQDVyeTRKEKUwpIwDkoHcAxXNjqhDhFywccBPz8omLYHAqIsjLVySzCw6URSJHmh4DwAhCUWP4PNXB9h2pe21PNPV_BzxlTKkakACT-C2LvvKmEI8SJwHIP0TJTkNX8ttY8L2-CwZ9kvFsLJ40ulBu2baj1kgvaP0YeQCAvrYBSldYG4NIAbWhosJ6_gE1akDnYJ02K2V2DeqcrG_1TkQ2ptrOmkAmbFpHFzfmyNz8Y1QHYH6-N1Ay3lq9u09pWba3dILdEItzbW1gw7eWyt3be05v7Q2jyTaW1xtHcm918r-B9PzYW3sw7F2luXZTcd4a12DPrewudxa20Bj3Z2tNh6QB9K6QW8plTqktvyeeewFSqljtTROwZD7mqil1HhBoOqGjzRqeeN9H7n3ftrNaldXQcGoEsJ9Ua_A0U-qgLBhVp7ER6Omdh9gRAQYQHw17QjxHmKOEwARq9ob0HkAfLR_lKNbUQGaMKnlcATkXxVWq0Va990swldx6VtAeNKr4-q5a3K7gSYClJuATFbWsflexlasnuOIacih-YfKhO1hE1Ksi4ntPUF0xI-hXGwwwCQxZ5T8rVMs3U5xuT3Ko0wD0fp1NRmxP_ncxwvRMmRUnNw559xLH-Uuc0zgSjpGCHedDb5kz_44tBZCjFtLEWDNOdrNFkLcXqP6MEz5wkxmsixZI0V4L1nCvFgcyzXLFh8vWYYw-RLtrksVbazkDLIWesNdrKSzrZXsYinmnAZquCADiy0jNjYIBNqb02cAeFUJGETYqDPzawKxJbM2Vn9Dm6N3bGp9vTcOxAVb63NuDYsEZvwGBYDYKchxWclmHuVGe7Z17j20jXYwBtwkW2RuSse-gWArUe7oJGOeEex2wdfZQV0P4MBYcjwB4-W7q5VMsswoy7UXB9RtBoPDQT_L_GgKgM0EKIm7sEklZtVwIwgeSrPI4Ggrg0BRk5EsLrtAQfyvCV0SJ0TaCxPiAk5aoCCBi4yHEyMZPiYldDVTsAOAmcs7V6eMcHOyLc4EPDJY2u_PvhU0sARZEhEi9EeIwXLNDyhEZjgDKcP9D5NsKBKMPdsI4HPAADWarqUUlgAD6y2-cnb25Nmb9vayO-d67keHvUTpENz7sSOBRTnmm8-0P9gAAS2rpvnkj4jp7MAXvUDe2kOPyLThO5PEn93nu0-Rgz6PHAhf5oh_D9n4D54ADqZfuPg8hyjmHbuaBx-G7WESlsdRcBWTMS3MAydysM2VzXrPuPs5Alzl0hvecM9Eyls3Q2Zos3n4ywf0AoArNQA5EGBB19RY42kjr8q0ka_gGiSgiRuEV00llpUAEEoB6cmtvIjwTwugHJ64p8CAU8vd08R5uMA8g9e8I8T8cAFtzs68oDG8aAbM4CYAECkC28O9uNs9c8ql88i8ZtS9sCx9K8ftq8_t9F6cE8YD7JfhSDk9W9D929UCu8i9MD-8Ggh8R98AkcodUd0d9B8DyAKQBA5cJcoBIxhcRFVC4kEkZ9L9axcCY8Lt-hX8DNKcFwacT96djFTF2AXQxhH4iAaRIxFEL0ND4BKAoB64lguh1B_VP8WYm5y5K5ZwpUy4ltZxLtIxtdwluM_gfJdB9dD8PgbAnpcFiw4ALFYprVQolAjQQY3C-gIAAihcPCvC18iipVyQXgnxFA3wLExpbF8CLAdoIC9D3IWZDDlshCFCVdAiy4K4q4UgpVXB65nBwjJtZwd8bMwA4jhpEiD8MgUiNp0jygsicjihMhEQLRSoBALRWAiI4ALQRJD5oFUALQC40lIwAASYALBVg1APRaY03HaE5WcYodo1cZgqvVAGvNfDvEo_xew_yGVEKDvH_fXcA8VMrGXEE2gSMYEs_HHfQiwZg2QyfEeHo6fPo2sIEtHOEyzcEzASE-nFzD_IAqiH_VEIQAAxQ9mEKewhwKiaYvfTnA3I3OwsApYUAhIJYJQtRPRPkqiDJLJfA3zMcAkhE_EpE_dWfU-XXffdkkomwgQcwd2KVBcf1aY2InAeIhYg3c_Fo_lVcKcDIQmHEoxMcWw0mTtWMDgfkilPRc6B09RAhaMEAS4hiEATkW6FdFmYAYwOsI6F0p0h6clV0zRReYY-wepPvE1Bof3IFL2NJC0GIAgWAfgH0sQB6YUl1OaFIziCzSyVae4pDJ4_nfRHaK4NGOMZ2SQSA21O0_iAzVNcJPgEAPUxUw_fgZs69OfcM0MkMt0_gFMrwFFTMyyP0-VCQXcWQKcmsucls9gQ07aFE44TIFnfUw_MkEVQEuhNXBHJTCnOhA42gV-HefJSgTsM0kKDeQ42BO5SBI-VAVzUVenfxS3VwS8686TEKCxU8zhL8q86cWxenNJEU11MFHlQpQIZtEKYoW4mLMzZDVDKC5fOEewSkeGSyOpBpJpVpK4YoY0swuhRICUX8qzOTDvB1J1JBLJWLWYSMcocgI5SQSMIZBxTpbkXgdAYAdpeQJ4HAmocgJi-AcgTkdYzkACSgNAd0vkb00kjjJCh4izYKEKdDQdLdTMi0ufXM-iiIApIpOC9gYoTdNFZtCbUBbiJIK4ZwXEauW4sikBeQYoCAmEKAUBHSiwcCvM1AbjAymChcZaBCu4scH4p4zTH02y-yucRy8iuAFyiA4itjDjAAQkVQCiCXVVgRKIsH8Qysvk8Jvm_OnFYTHFQUyqKvVUAKXM_JKoyG4xmDyDwC5UCSqrgHqoEHwLlNrEcJpBdwSCYovOAoaqkomDoBcIKLBjeRuVFVMhXX8QAvPLImWneUyOyPpwVTauvmypYQy22uCRYScXYDWoaNAs7RXW1012m0yBmBaq3IyB3K4yWCWtgTJAOt2rIm6qkriAIHonbwECECOGV08k8P_AyCBoBqBthUGx6uutuvuq7MesotvmOB3neqVSyuWtcFypOu8SolgRkxATAUOKfLONgXgUQWQQqvQTgCGrIiet5R4VTRc1SvJKXO8vpLsLRyZM4kjAeoEG5K5M5N5JUQFIISFM4ggrmmaI2B1m3zSTeoCUxvapytho_hmgW2OBgDxgQTYlgioiYllnlmvyVjTikgzjkk1ipT5myF1iAkSMNnAknm0i1DNkdEVitn7jtlEBXkdhLijP7nnk9CjIAQdC8BEGpNmH8lOjsCDgjtHjRFmF3FREBApRohfCjpmFizQA-ApTDqmHMTjuTmDgjjSVtvQDzqoVXkoKDsHk9EoILpxLPBHScgQNvlXDYSfiYWxpTTPg-o7qITrrIUkD_k7n9sAVXDRCXjSFgjyAiCIAQI_mHqHgoQ8vHq8SOACx7sJtvPKrC2xpqrMFcLBjFsdLdOsTQHsAHISxxJVPMATqzpjuxCsVcSvpvuPHsWOqLtfp0V-I_pgC_ucUvv_vFuPA8RmhdPYBtrUhyGwFpXpXx1dA3zxz8rZQ5UN0iq8oFSFUis2uwL81lSnIsE1MZiYy9iEBEEI06PtTEudSySuE1Q5tDUrTMvPQDSGSTRTT7MrVnWjXYYTU4eGToz7JvS9mrWzTrQHUwwXRLXbREdEcrQkb7TzRalw3nVbvke4evTXR7RrWnVigfTYe3TkcvW0c7QnT0ckZnXUYEa0eIdXTvWPWkaHVkYvWoZYdvXXTUe7v4ZMfcYUZ4a8b_UfU_RfUg3fTCY8bDS7RCYAyAxA3sDAwgygyicCdDXg2YctLs1Q2mW3sRGiasw8zI34EH1_wyHMEwvmEKay2PFo3MflTqxo3I3SbYy2HIf4EKYKsU0Ya1R1XNQNXNRNTNRAEyYcc1IvXbsYcyb7PiCgBpvgGmZXVyx6tNpoEJ3QGJ2f1MNTXMOp0PPwZbp3WoHbvhgcbBU2BfJPqcnppxuwd2boQmbBnbuWk_M1W9h3itXebmfbqtQYpmHb3QDSCOWyDSHeeYvod3SaIccCIsI1IIElOACebbtQNaIcdeN-v-ohuFCOVBtgBwMBs5Wxa6tlv7pVp2rppXNTQuYmuueoFudxoeaODmYWeyTRrInBc-dGe-YSFZa-f4FBfgD-aiABcFZBaBZgHeZ-EwCtSpevRZc4lpuWgVbQXgBwEgBkijFZ1nCWFUGwGNwsKJkFlEbywjB8ABhCm10gAwGiTUEVwICNYOiydEZpnzjVWh00v-kBglVCLdYn09ZhdDVhUDYsDlc7RNwlJS1WhVZiHgFaPLXRZ-uiCxcJeBv2jxfBtTahuFGDdlLXLWcX3QGX1Xx2Yvw6NrBOdocdUhbYPcDSHb1xv8R5QDTBLBRgjPBwGbddXwcWtmuWgsVApXV2JBToQgCSSWGMq7fzNgFnAmGVE4DrHYHAM4B-R-UZc4A4ynb8osQgFsQ1MXWyHXbytmpOWaq0V8syN3d1JuVlqNKXIbLxv2XgFWpPbgCgFiDX1il6VlvFIRajY31TWorobotdSeT7eWZXJ6uoAquVVVXVT-IbewabYveWn_DIkijHE7YvZ7ZPL7b_MHaXOHZmqODHZCi_aXeWi3e4xnZSDnYXcYCXfnYgFXfXZcyo53b3ap39UPfudxJPaasiXPayQ4-vafdvdXPvYWrw8fYJSlXfcREjHI-yh_ZhMjayFWgce6bg8JTWt7NDR2mRPLYsGoB-IswQ-KwA746OERNBNCmQosyuDQ_bcw_eXkHwd_clJs4F3VqM72FQHRLR0Q8s_u1cVnvsHnsiAQKxM727zEPPAH2HwIbPx89XBOdO3GyMKC5XWnsxAyHC9REi8xMoL90D2DzDywIrPaNtRNLoFKtLdtX8RDHmhA2WijJwCa5Axw6OGC_lVIf0AfAaZof0Boprb8sG9rHs9QyWB0edfyfC2PHG4sFqZgEW6Iyq2LFW561W60_41W-RcrewlW5jdpuWcPPK1oGZtDVST6D4eIj2qKY4WxvVegHF0jBeHsiOXe6IBwDRWPDUoe6YS83WPwfvqddtPRgcaTFTG0klG6DuXmUOI9sVWfOgboQThbVgfYGcFosyXYGmzT09aFirEh-DIAedIAfdN2KIAtBSCEEFQnONevUYFUVgrED9UZkaESSkBZ4XEZ9tLQCaqmBDflQCnmHbNoBpR7OF6vzJ7DLAbX34Cp-OJAiECw29MnOddTXJFh-GCegyHbJTIFs6c19DVrfe3OgkX2g8__b65oHIac4w5plc59Ol4rT5_lQXPd8bNJ_l_J_l8p-FGp9p7aBmAZ9d-Z6MrEB-KsFQyFh56gC9_LUYC490iHOPD9_Ps0UV8D-V5oFV4nL05NflXeXOkm_mAfdEbN7SHOiMxM5UtQz-Mxx3yzNd8bK3Zk7Og0sw3EAwyHSkC3cT5NcYHb5L_4Dm_EDm_798sH9EeH98o7_bLi2jXSnfYCnECX6QXiBeESCn7Bhn77Ln9PtH5AA35X-3_2PQHEFPIKGOE936ClF36cn3498Eieef898DabLT7Ojl8z4V_ABz7B96e6vZ_izAj6s8Xm3PSPuHxT4tg9aSCWAGfQjI_9v-Afe5Lnz_xq9OQPyKXiAB-SoD-AxGRBB3gwGLEBABfVvseyfYW8q2OPLJBXz7JV8f-tfVAAgRG4gcmBTfTbL6RN6doeuRfXrsc1YHCERWb3WgHKGVz8CBBoaUHpGEP7KJtgMARIOdC-6WQS-wAVQdmVUGP9qAYgMNtIMaz6CBBDA1NFIFgHv9Zyz_KQamncI5N5g7AVKupRAC98tK3pdgG9EL7SCv-svAgQAPQFADQ-IAygWAPj5iBbuA6Y8FANZ7BDawyfJ5kgMHIU9s-6AxIvn3V6eCDBDXG5OdDm56ITB0gpgRbyOTW91OwAXIQQkc5ttHeonRkDtEsigDZ-I_bIZ0xABiBnA8QkODgB0GoAGhfZawZkJwy-NAK7g96HNye6iC5uRyfoQMJZig95BLIRQcoLKFhYfuBCNQdkOWFDDVhx4W6JsI8zbCYA8gbob0KL4GdeBojfIQf1f6LoThO4CHib0uG8cbBZfCRE4NP5b81-bgt6JQO8G-9f-yAtAUHzp6BCW-5w0waEPgTMRl-Hw5IHoiiG88YhiYWAQkIIQZ8ARyQ6nqkM8IUCwR16dQct0eEmtChSLYoapz_alDlulQ9Dh22d71DERHvJodQJaFtCOhIcY4fSP9IcjQ0vQAQLd0JoeCeRfIneJVmYjcZRBcWKYVyM7RzD2-iw86HFhFHxYdhC_YAAqIJHZk1RJGPIeyNxEmszhMw_TvSLMFv8fhlgwNo8OmHypbBOmWPoDEIEkZoRq_RIBf20rfDdRQZNgCiPT7_CniGImnsCLD7uiQhkfSEbEE35OjGoMAeEQnyNEC9wgGQg0R9DF78AJevtBMQaO_5ojfRfgzESr2xHpCpR_YVRIiF17Th2y9gZqJYGN6Jji-GwppocMLHEjLeBDNTvCVVHrdmmDvGkTcjqHpiZhnMd0R_weGBtLRLMa0eZltFvCHR4Y8_qwEv5fCXoPwn3n_yzHDkcx_okPoGJrHgDeekkG_oTmpKxApguCJ3IEAEDRjbhHvOMULyDFJZUM4veBlL1vG2pMxPotcUryxFYCNeNYlmNrxLGeEyx_ALpAAHYAAHPlDkQABWSCdWJ_FUDGQKg9pugEJGV9fi7BIocrhKFtiesVI5zk7x7E-k-xAwgcQMKHF6jP-y45AauKz7riAhW4rwaEJg4RD4AF4mAfEKIExBkEXolAUkPXGfjMyOAkAF7HwG8SOJm_VVkcSN4FjnxKonbuqhQmppiRLAmDopkb5rZAc3A9gJeM5EySWYx3Z9h4P0lijGKBVSUbpJkFWlVSdYWUUoJyEXxvmcHD1kulsTrDqBZQ-yfwD9ZOSoWuwgqlKwIRWojhkgAfoWP1GJiFJQscwZ_zNEm9fhK4t8TRKV50Sgh5wxgB4HCARBzAovTvh6QynyM_O19WINsBr5lZoOE-NHFwOByWRXxvgjwAQEvRwovYTU4FLVPqltx-gEURINpVugBcRgUgdKTcF0HRT7hQ_SiYkP95-jkpoIgQWlLylZT7x_AAaZlKfEDDq88nYqcABYHnh0ui2IwpVNsCETKBNU3iXVIalJlcBSZVqecQHACgYIXUtwbdG2klwJsLUGbP1LmkWCRps_MaaiISn_8kpAYlKQYJ3EJ8K6kY1ibiLilUS_p7peyDxCBD0TgZ3UdwNmWKDJ86Bx0NCO2VuIddcEAlOGdkC9CwNdY4gMwXQMvHoz6GYgSJKMFFCw87k4CdcFShtKJiuCRBI5vZH0B3gHw7pW4rb1lzITMyq3PoYWKA7VsOBflK4LcQABSzgKpMZhnDPAwAABMWXQNdQ-lhZRfF4dMluIvDporTGYeULqZexEKYWPIYUwEGUiTZ7Y5iObINkDD6xOsm2RACKz6zNZJrHCdbJ6xuzCxckwlPwEQq8ZtO-s-ka0TJlUy6gXQP8WvjYq8BeA5AswA4jjmoAk58czkE8CIBLAWhPpMwelB6Hh8YpQ_QuUn2Lm2pIOGtF0DtO1q60CYMDHiF-CUByw0ICsUSKPEUjsRNYnpKOBSgdoGwwIwcSDMBgABaoeFMmmUQG5IBoloEYDACXiEArgXgJ6A5lTEtx32KQaKD0H0AZAIG7kP3PkmHmh5Tk-gVwGkAtDx8VcU8xuNdFGgvAt-5AHeWYD3kHyIgnhTiWvFEBpRKA-QMGFcHzjQJ9kF3XgKIGAXrAV5W_deYjC3kCBVQICkBTWBYDdRVE1UTgKgHfYugLi18HYDAqAXrB0oXYAoFcFyhYBsFsCkqCBCuBjR2keUYkEcVAT9AwAJC9YLRB2BACMAVwEYDYEAUfzkUtgbXsgrQBoKG4HgTBdsAcxeABA04K4LFCSiMKaw4i6cBaEyAsA8gVwRKMQpwVwKFUMlGJBaEoJXAfgLoRhR_PkDG1m5BbcSCrAtp5wraCkHOBnC7kih7a2gR2v3Jdoux_AxwD2EHB9h-0XaD0M0LQArivykExCL2MHUkBr1q67kLWnS0qbMkBaSwXEOgAmBLBNgc8ggHyQAZLAqOiWVmjkp0pUdZUbndYKpiSWFgQowE-ROsDSUpBCAy0KRMknWAC192_qeaINVrhlxMyxBXgkfX3T-J_crgbFHAHOSzExwy0SpYNn8QtJBltgEZTLmWiULGlfSuhAOGyA60sa_bRaU-3NRkUEgowc1F0HnEEdVwlOMuK1yRoCAXccwWru6SCKZkV0LuG4IbjH4i55cMACbPMClB0yew5qLAPqDQAtJ_l5gY8GOHuVLlHlaId0nIRvDeBzU8UeKD2WBSRgyleAH5AMqGVzKxwjUi6UipqWEAfk0yjFWAFGUOt9BHwcMtkFuXNwXFvtPnMSllonK6EL8qmoTg4AhQnUEoQJcICpr80AGguRlUcHNaeKpUcQWANBEBxyswwdbSvCTkfAWJ0Vsy4lTLkSVcAJg0LGsAKpaCvNkwIq-IDAA9wugYIZzAzFKveyihZVkYCxHioyXsBCViqklU0QcyariWlgeBtLjLhXL5ggOfgMvElXRBIVKYzIH5Sp7mok6flVRPCX4A_JkVqqvAJIBhSCT9weAyMNavjXYD7l3pflJ6puUpjHxmak1f6ueUgAwFHkYYOQOTRewnCXYDMgpXWBT0t8G5ZaLEsjABCE4StKgBSxyrk4DMQRbNd6uLV5qyVha90iWvojChzUVaiHEyHzXUth1_ALAHqhRVpqHlc6kAPdIGRkrUxQnSCgFSMpbY38K0VKq2oJo7xcaLq-BmCngbulgCn5TgHYB-BTBRiXOFnjWtlr303KC4Tyj13PU0pL1NKd0pmSSokUt6H1O8OllyKXcshIG8lodRWrsrVaO8fBtFgHr8jRhKGneJy3fjctPJvLRVkK2w0gBBWY8Jok8OVqVVO1GG_gJ-X5YgAjJNGojX812LnhJQLVMVpIM06gbEgeiCxIKx-7FgDh9iMEhKz42YAPgRVPoPg0MHLM1yFgWJffAhQJAsquKIgDBwioXxBSnAXGqDwKpZUwNBCCxAVT0RVFV-clTMusSAb0I1lYALGjuxmSrLcYWNHADRzVVAb-Ucms8ApqgBZUmKurddqDw8134lNsoVTW6UroFVokpUA4b5tc0GZ3NY4IJVTVdX_rFgmm7BmxwvZ8aFVcAO8DBz82WS1SBw86UJOmRJkqOOAa5E-zuQPImKP-POLLUsifrugUguTVT2iAhbNEv3Czg41B6dbjNNRfgPJQkrZEoKl5GebBCwpSUo5xYmOXHI8BxyRgTwJYM2qgCchTIoPKAGhWuXjbQEZOMKamgYGg9WtD8dTaFvkz3hUAkWzrdiuK3NS9gGWirYyCq3RAatucL6vg2mjcLHMMmvGtZzRw3UQ-ba-7ses4iwJ_mYgj7uxqXKpIT1cGzgOII1yIaEM-W3jp0K-7jdPyjDfoZ0MVoYbGiq3V7a4CuBlaHta-HHRy0aK7QLQd2-iiTv5ow7XAklKcvIFsTSacs-6gzLgGtAH4W1wIwHWRDB1fdPu8OuSTDW-3-InCqAfUIMpaT9sLQsicjvLoI4pUVoZWlFL91iCYohlym_FPAFxoS6pdWAFpGdW1UMUsAUpEYP9sFR87XAAu8QULvsgI6OWw2gnbm1TT67pd6xE3RLvN2W6Zg1u23RDv2hfdHdDO53RnFd1faDMGbJzZQBSDul3dhuvVAnpaT4FEgGuSINzuT3s6oNIQIZdYCKnLR2k9OXtbMC9WPh2ggit8CuqeVPgXSKUeUFgCxS2ADVMAKveCuHXtBqSlARQRaBRX16ZlcAfPTsCHU17O9f-RQfXq2WShtgYK2daPqwBjR69WWzFQ62r2Qr2giQRfUsAAKxROQLcPPTYB2DLr298-9pPXpRUj719iQM_dvsU576B9Q-7YMfuPJHAAh4xFIGy17WwC2l6hOoAXA3GCoPiIen3bzvp34E39ZcbjNgBqKbqg138m5mSvQB9BPWkYBpWSvMSU878FoHlJKG356oxoDcfKGStgI9K48L-1IMCPf2sJKDkBnAjEmNWzrrl_a31WvqLUuk9UvWfaMUH_0BD2AtxMLUHLVQuVL9RasNXABDUVqmKjrYoGIYjVr5biZugQ5Jjg4az2Au-j4pBtrAQHhipenNSABYMn6A1OgcMuagCGdbSBBuWfaGghWiG4DEhpYDIbgNyGbiwAXALRAwAor4YRgMaJIGTB5Fbidq4ZUqrGVU7IJsUHaB8RXVMHHwuayXjOvLQ2GR18DFuKWvHUVrCBXAKdVYepZbrODxyEXd9u0N9qYj-h7I_KkSMjkTD6Rj0jBAsPdla1vnU-DQZ0PRH3SBhufUYfYPVGC4K8qSfgTc04tiOC7Mjkx0Xb2Ffd_u5zXgFGMsckOKywQ8DW5oW7QDIOjDVezklddtaecXeksYmP06ROn5TQyzH8TaH3Vwxb_YNT_21GAhOAQOcoaEMaHvtx7I4AXCoO3lmjLSqUO6VWy1G-jmxguEloRZnL3jIfd_Z8ZfzIQejyRv408Z-3sAC4bLV4x6ouO_7bjMMxaTBAnJAHPyolbY6eqOO1gETQlGA1OTBRwGXgCB0k0gcyDTU0DpJ1ddar1S77STGBxXlgZwPRpPhSwAgxaCIOkmSD9cGqqmhXREmoFDB69MUfdJdB7Y8RztBUeMNqI9UUh3FidMxNuDgUPZAuKHkRXHIrt5zVdQuorVuHKgnh9OXyedbymUVeqY0x4djVeGfDyYIwbWHlMas1eSwHzcUSOQBbFNVVHzZpqdMWBO2L5QgYMB4L1w9UzalLZ6bCiaKi-6pWAc31d7ymOTeBitbFBwCgTxOnWblZxNZVkn3A8B-ltyFjMGCNcyB6armmLM4L3RxmU6O6RTNcn2AOALpGKhLMusczSCPM4QBIAtr4tHZmYICb9PFEAzCR1kyAFgBgBaVK0dUuCXShpB_c12pKPcrbMCDazsAEdTyiVMzmMcc5mADLqp3tJMzRWpc7Ws-16iqzpCs8wkfpYhmxk-wCM1NRuboA-UK569PGaeaJncRyZnqKme5NZmRe_ZvM2IYpNFmNFlAsszSZuaVmwLNZscw2fXVqHWzibfUzXv4AIXIzR7Cbsjp33_m9tCRhk7PNqVTnd9wp_dFOSRPnGnmP-yMHUFuK1S1TPpbEzvFxNkQcqKFow66a3O-avTY4Tzd5qjMR65TwF6aiOYgsoG6TFp1dehcfMshlTlo6PdfDj22xsLeqKXRMBzovkACJ4tSIbkrou7j8OFgy5GG0tniXt4eoy7voty1aGaxwf85aRMRWS1LeADS5GC0uniowel8y7ft324XRLBF9JQ-aUSyXnzpG7ynNDBox6lLggZHYyYrVOWXcHgOmm5Z0tmW6tlOloHfqMsmWPL1lnGhZdF0m9Qe8Vv-a5eMvuXdLuV2FOwCp2GXJNQ2FclOX8QAn4GiJmCICbBMomaLaJ-i7mDiOMWpKOJgnWrXIttWWrxJl_KJeEuUmLT1J8S3IlEtjnXT2Bn842Z5Pmm-y3SwU2QeYbNWaUUB-g1JV0P9rUxZRjo2waqOZKJpNR3q77UEv4XULIAQ00tpkvmA5LgbUHjafQCmnfDdVlon5Yeujqy1E6zI6-vYtFrL5-QEaOakoUnn_rRh6S0FZfIhXLRLmTy3nC0mIXheoPHC9VfYCQTfrWFhy-YBxvAp8byFna6NZpQdWqLlx7q6qZutYmBrzFoa6evOZbqMLoVycMjuJ066ntL-NG29vJsbWproFma-WZuYSWNrUlwKxemnOYXnj8JymwQBaRqxXASSAm81g4wC21bnyeW4SaVsq2M4y0C0GTYeHuUv1wvXa8rdVsLLTb5Ewq9hbKspXtbVV4FFbcNt5wCbeFu9o1nrWM5f8NJJtS9fq61he1AptfFV22imL0IlBSQHqw0B6xgIegfuaym0g54883eBgstGUtIZji7BB2Kndi7ldxCQ-bOzoCojtTocaOAu3NCmD6h5ozUOMglzLsitK7chGu2g3YAABFFZA0HsAABpUPNnmcArJ8klgZwE3YkKD4y7AAR1CBFTFF8APWkcVWXt2QAZgVO-gTK7h4ZsZdhbG3A7h-1N7pXXvCPeajnhRQg-BJCXnK672nB-9hkHCCSVngD7y8HhFrVxj4wmUq4aghnfoIl4U0Rdye5IVXD13G7AGeLlPZTQ92-7g94e6PfHvAPh8q4Le5gRmwfwG5ygE2tQBnhx2zWTi_WMnYMDgRUkODpeEQzIsgBcZ_AaZIQFuD3BHgFQDwOQF0V0pTwbId4AMC9BCCjin5eImOn4AxkJ7EDsqAmRodexB5DQEecb1JQf2daX9osBdqXiYOm56EP-Hg7UAEOk7oEYhxBBLgpAZ7zaIOLT1mB4BDHqZE-cbz8VKF0ENAUJQJFDrr3olVc0Kgi05W91747Q6INjUfJOhTi1Aex6XS2INxdijcdx8by1quPwEFNJYHeTPIPl94fjqBMfHvhS60ArLQJ56GCc7FhQ-xQ4hE5cdnhLApifYErSKclPwgCTgQD_vbqZPJARN-8048idnhnAQoF7rAjqfdQZKMkApyXFcePxae8AOAIzJJyJwg6kgblCkDydnkqAz-Y3ljCrlxaLwQg05ollB42OTwc9jIAAQ3xbOBAyCgx1ACIr7pLOPzVAtgwhYSzIsebfdMc7-sVyFnJcJZzByxqlt1n77TZ4yH2cad90ezg54Y7uf3R-URk7BkRqkHSsYA_QzrQ4y8l_AA2zrDtYcCZ2s6VMhnFmIC7OGyPFnL1--Ld0PqJZ8qB9HY0w1tRSCNKx4cR_wA9zqghQHjTyY5LhdLppk-SBoPqDpcn8SMY8THS8qGF6IaHVL42LS-XQcvbZAUpAFS9ZfJhkwY0XGzdU5VmlpsEARIO4DHYWJFXyr5iCzuFf1j-XIAFl_qCldjR-ASgMKCACNnTrEAArml5QBGQiulRFriVwa-TA9oqdcrrIEcHyRjh84atixNqHnszyPK2wa-N9C1dJqdX4rvV5K-dfGvFApr817q-pdCghXYbrUWK8teRunXHsV1wErNKWAfI7gIIOYAsR5uC3dAUN_aKozFgE3Ub5MDG7jdmy03VrpNza-1epuKXEb_V1K_zRU7oIFoZqH4BZ7CgRgPr_t_EHzhDvXA5bu10VmrdOvsodbnl8U0bd6vBXLblN6K_bfpvO3yYSCbjal3ogaO7ACxAXkoDZBuo6IF4FO_Ddbuo3ME78PW95fLvE3PKNdxW_tezvkw2UGV1TvgT5A0UR7_UEM7QCTvbX17x15-6Nf3vF3gWJ96u9A9tuHXGbz9y6_YDwIyIiAixGh71UWgpd-QfIFe47GIfO32UdpAu7NcNvN3Tbl9_B43dEfJX2ULN1YDwAIICEqiI99YEoDDANXJwUIAR8rcysO39H2t1B_I-PvKPK761zR_feCeDX2Ubt6h9cDbA_AJwI95eXnt2BLA9_eCMkr48uyq3Mnz9_O5E_xuO3cH1t7R4_eQTv30Da-G8AyBzgLEMK-iE7kkD6hkg28AQGgpSC6eZ3Bnqz2R5M9buzP676Tze4NeQSUP80FIO4DrYAewaBAdQBAFc_RBVEqiHz_p7C87vSPxnij0R-C9vu-Xfnxj8TivBg0j3JEDAEIGciE5tg0X2AOl4E-ZfIJwnk19B8B6wfJP5n0L-B8gnyfmoRVbYMO5dBHvmo6CcXHAHSmRQGvdH8L0Z9a-iel34n598m4K9PvJX0E3G56_mCwALQuCbYE7hmCqvPXXgYd7V8iCUBpvlnu9_N8C9UeVvdrwr5l_yjWfrA3rnyAKDWzse_AtEd79xF3ZSffPT3yDzd9y8Jv8vD3tbwa_ygoetvA7vVUe8vDvtUI_gS7wZ-h8BfQfpnzryF8e_gf8o8n4nN3pSAvvq4FifBBHSIDnv57BAVH097m-xu2veGDr826k-4-kP-UXdz-6cAChPCGH3BIFC72RBafeP67wz4W8welv4P5bh-_yj5RcbN4BcK4AtAK-2PFiQfDBG4idhhf7P_KBj7E95fsfq3pb5K_yjAS93sesd4N7oAjuRAzwMcA1XRBwBtfnb033r8W8G-WfXXtn_q-yjATrP54O6tSDlDE46v3QTDzBGEXdAC8czZ36y99_A-xft3iT575x-Q_ffKHy8DGjsDE5R4V5WACwCPf_bI_6qARFAFj_6h0_bviXx7-o9e-0_wE4r4p-Y9IGJgPoE-T69wQpBh3_QUeP966-A_HXvvlr4n8x9BfDfEP43xX-AnyeyoXrs7w5CPez-yI8_kcOX99_0-H37vsH-P-l8yfffnPvHjm6ODFPaIo8MPzeD6Cz1xDGoSQLqDwCuJpU6ASQMxtTxWST_3jwBgD4y-D_gJ13lnTlm0YyXZwTTcvYfUCaoogVRFnBXAdl1hcY0Jl1ADmodlziwuXI9039q_XVzACncMdygDWfZd31BmoKRGs82lM8SmB8kcIGY932BH32RBvQdGYhJATClV5gPbX3wDCAqv3a9xPTAIgC62aALr8OAggNigUPfUAZBtgcBWHcEfe5AXALvL_0a9-AFgIEC2Apnw4DwA7AOi9cAvgKkRivJT2oAVPCxFG8xlcUFjYwAZgP4Dh_NAPYDEPTgJUCeA1P3UDVGKnVG8sAWAGSB-7NW3aE_uCxEIgoAbYFQh56YwKkQN_Rn3m4LA5QMgDVA3gIsD-Ag_09caAo9xBIIwEUGoA_A2KFF8zAxQOCCsA0IOsCjfCIKkQ5fKnUJwV-eADoAHPaCGpxDgJIN18cvfXwwCQg7gLUCcg2KDN9XXX4HcBUPQIG2BVXAvDnl64J6G0guANICSDgJBQKCCagjILqDwgjAIICxoaz2kgogOwF9cFwOYL8Dpg4YLZ9LAzIPqDJg6Vwz8uAvABnZVXW_AIB3DbYGWDsvEH2qCI3dYPGCbAnILGhGPfyB9wrASJBnlaAAD0yMFwSb289pA24NMDAgtYNqCcAiYMuCpg-T1Ugm_VwBGhmII9xV88YVEGWCAg8X3MDRgrgMBCbgrYLGgD_awDhlbAaADD9-7Yd31A9g7gOWCUgv4LwCAQsILRDgQ6VzyD2AbUCOBZZVD2FBu9H131AW_dQBi9lgyoPOCt_S4IpCsgifxyD2kF72-81bOCBnloQCxDcA1sT_379v_EABYDhQ1YPJCxg1EOyCtgydB_cvANSFV9cET9QHBqfPwO7RlQpQNVDKQ9UOpD2kRjxWQiARLwwBVXCiBIDEg74I1DfgxELSDkQqwM2DLQ-Tz28M9d7yPc_QqIHe8jQhEKT8rgtUMFCNQg_wv9IkdKR2B-gCVmhDmqeMO2BEwgYJdDLQv_xYxAAqcnJcLXL2GmwwgUCGXhxuel3dZGXXdGmRpsKsXtlK1Tl3EcLEVIJGCI3IsPCBig70PTdzwfuxWRcbc8H28BACgLoBVXF_zFBKgbX27CVkE0MQ82wksM7D-AGsJI9_fIgGBh9go9zwgLgYcKigvguUJkCQARcKVCqg3kPTdZwjsKBCTwywBI9BArgFoQ-wTDyUEMgTKW18Dws4JH8Lgk8OLCzwqkIvCSPRj09dQEAv2PdZ5XODPEdwkLwH99wy8KtDpw3V1PDD7b8IXDLw0CWs8Q_eH3sBt-I937t0QK_xOABAGYGfCkIhP2bC2fOCNLCLQn8NAkUPOmQwAp5WeSLdqI9AFoi0AAiOyhKImCNbDPw-CPIjEI1iMY8ymArjRR-gH134jMpQ-BA9dwmcKQi3QpP1Ij5wyCNYiCfDIFcABoOcHQiAoI9wYDYATKT-AEgWUPAj5QxcNAkww0fwXDOIsiKjCI3aWQLwbwXGzUjkgb6HYBpZTj3cAXQCb0v8j3JyMexXIz4O18rIm8HYiPw9sK4iLI9N3HsC8XG0sBnggt1Q8xwIQBG9jEbRHEj9IvcLCjjXf_3Nx-UIAOhckAL2HxDXAIeQQRQgXbx3g3TPMNo0GXOAKrDcooeVwQkAhsJyimwskPE88ogqP2Rio9DzkjzwSwHCiqdGACxDBvNAFVc_XAQHcMYov_AnDuogKP4AWowqPaj4gOSP7sao4UOs88IFj2PA9gkcF9dQgJAyQNtfRaNwRloqaJAAZotqO9R5o88OmiloyhVxsbQk4ChCpQqgBuBPgvAD2iro18OIjl3E6KKizo0qJCjLog6LuCboogB8h3LI9xtCQYtSFeiAY6SJMjjo4d1ajvokqIWiro-TxWR4Ed72Hd3DExCPdo_CRQKAoY4UOMj3w6aPhjZon6ORiAYg_3PB3vVABnswae6IaAaYumKgAZ5TV0zD03faOFDSQ90JbCOY0mNOikYi6OOiro2kK6C1sR1DyBHQfwCmBdArSGcBNgO4Eyk9It9wgjOYsaG5C3w48JJj8osmMFiEI4WIOjhQ3G1CAhAvAGHcJUI93V8RQHyPZj_o7tCIimoxDy-i5o36N38OYpaM1DcgfUHex7ok91xAdgAmONCjw9AIjdnY8mKFjOYq0PN8ZKVDyFA8Yf90w9hACAH6BUcAQEDiYY4mLhidYgWI6iI4j2Pk8GgQUFq4MPQuLL16vW2INju0ImK1is4hGJdiKY7tAP8hAkGCQMAw3QLG8MgCKBeAfIG2IkjdXSOO5ik_MOL1juIyuPaRaQ_UCU8fQU_xsB7ozCiLiJFUYFQBA4jWI-jmo_mMRjc4_WMjimgvoPohOoHIAsRRQWIDwAD4wOKGDg4pENDiN4-uLziDo51z7CiAX7jWwJUSQEKQUUOACcJCwCxHfjEgT-LxACY6N0viPQ6-OzjN486O3iloqV1xtbWRT2EjXALnGGAYAE4IrjOYqVyOjh4reNHi0E1GKIBR4TYDbjzwVEFmcRQQBOriQ4vmLATb4yBPviD_XUCniiQzX2hD7PHSPLi-40OKgTB42GMwSIE7BKgTaQwuNogfvaKJ_iv5bYB5RAE1eMdj-4m-PDiaE9pC_c-wjAEIIholuKCACYr9wwTZEkeL-jK4kj1xtcEOe2xiyfIxN49UEpaJI8tEqhLkS-Eg6Lk893P92i8RvSIAyB_8DRPISr4yhLribE3RM5jsoA_xtDr-Qvy6BEgCIBGBl48xLsSuEzOJ4TXYhD37iloiLwMS0cOIFRA-fFJOli2E5KKdjEk96OkTQE7xJ0S3Yu2Oa9cbGACl0IcaVXuiVkNEC2BCAAmOa8rEwpKwTfExJPk9t4VAFQA_AMZCOAto1UklBPCBpI8SQErxN1iWk4pMrjnvMpL9c1IEb3xhDve33VRe47JISSDo57yaSxk3hNaS1klDxWR-3agGJ9r4ZxNnBPCJKJVj5QzmPR9gE3mO1jmkrZImTLkxjxVRXAOe32R8gdcP2c0ldAAJj8oDOJrjYkhuI58DEg5Iz1AwkFKiAfk6JP-TtE8ZPiSOEtZNpCVkfZHtCwY5FJYAfkqRJ5i2fAFLvj2kP3yBiiQ9KWVcvPGLwR8ogWcDyA-_FZPhS8Uh2KxTPomFPuS4U92IOjgJFDyciaY1V0njQgEaAJi2UjZJzimUizxpSG_CKM2BoGch13cKoDym6BoIZIGPd9kPYNCAZ5PlL-SKE25M2S4k4VJZS8U-TwLwWeWwB9c6oIgEUEsk85L3DOY6fwFTwErVO69K43_z3cTEU_zeBWQp1OiAXUvlKhT1U2uM1SG45CL3dSoa-Dbi8o_UC8Bn4qlPNSckg6OQjrU6hNsTDzFDxNiiQ14BGgj3Y-J8Q6UVHkSACYtiOuTsUxlNtTsUpaNAlGPXBDIhNfBOLLTp4zkMiTDzNVM8SNUwVMLTPo4tPk8TY1LwhCRwmmRVTa0oyNjSfEh5OLSm4iYGoAOQzMC5TFgkQBeje0r1IbSfUptL9TaQvby-wO_EQKewzk6dwuTi0zFKHiC0huK6QUIyoGHCAPI9LZj2EnVIPT-0opOZS7YrpBQ88ov132983WILIh3sNONrS70q9NhTtU29NLSvrbIBnlAw_9P_SCYrpHrSRkxtJtT90gn1McncBBE2ipdO6jgzr4UDOGSbk-dKgy74hj2s9okLvzD97ALoHSVnQ89P-jsMr9KFS7U_aIY970sQLcBqk-INAioY6jPIzm05qJqiGPRjzddxcdgH7tu9R_0wi-MsiG-TIkjjJYyKYhj1Rj0pPYJgBAgHyEAyLEBoCwAX3JjM_cxMrDJ3cgY37yU9CosGOBiBQfb32QVM7MIADMosqOyjpkdIhFB8QESJgCKogNhyjSkQfDqjRRRsLXjEPSzMLAbMoWNwRB8ZMHxSufYxE1IT0kQLzlH_bXx8y_MulKT8PM6zN_w5IiLLZS93TsAgBAgUnxvAe_J3wriEsvJPpTxPGLPYAvM_WISzGPUUHno6AT4LTSys1AGWTI03V2Kyjo_LMKzR4hLPk9-7M8Bo4U49BF6TeM1_3CzfMq1LzTl3RrLizvM_rKbiv5Z9l4zX0sPxD9h3UBD6y_M2dIgyQAYbNRB4s3zP9Sqdb5Vs9YgscFURDk5WM3S9wiLJjTBsvLI1BYstbNGzkwSiIii4AYdxv4Fg1RBCTWEw7LA8VsjbJyzosi7IKyRsorI2zG_SAEUFSfKXSBzighbJLSGsn7KazdEk7PaSXgaBC8B0yH1w9x6IUCBqyjs9zI2y0Mtn1WzaVZrI2yD_OmQch8Ei4CZDoAK8iPch5IIEd8afLLMJyocqzN-yrs_7OTA70gxL1VAIvCH2cMc97IizP0s7Pczocv7IJy2cxv2IwKgWIPogZ5YaAyALQcUBdBFBBbLAzGczzJFzYc3zK6R5PLjNzcwgUn3FA2ACnOVyccobOFyWc0XK6RaQ6IOHcLQV1XsgREuCCgQYgGtJIyPstnJ3TYYvHPWy2c3eP5yzfS8lFVUPacTP51ItV2RBgQSQH68Vw4xGVyL4nkO9Svc0bOyhBkXGw3CYkOAFwiZgdcKgUM84UHwj6c5PKizPcs3PxyNc5PJQ9LAa-Ct9nEv6k2BZiP_CF8C8-QMFy6skvPWzk8xv3TIv5UlIsR-7WAAEBvAzPL6yO81XMuzS8iZJ8zk8mDLns1EMdi6CEgeYMHxPCCKALMwspvLm90oxzFzDmGfMMpcQAOmCCAseFLFsyKwyqPkZpkMqGcBnM2wFcz8k9NwPzugAkjkjL89WOs9PXM_2vAHPXjOJV0EJiIiTXcl_PWSW8iNwfyj8rIGfznAdWPvScDAxQc9NPJ0DcipvCuMAKvs2GNAKn8oWMALivTjxZCugKnOliqvbXywKjo9AuPzMCyAvx8Oc_PyGi0cMcFzy8IogooKTc8T1ILwC8grGhNshT3yBr4VAA1cfXLEM5dQEf_OpT78yAtOz48udNYLaACAo4KK87vSKpifcrwlBsQV7MYLZCkgq6BH8sgv1iX8ktLuyA3HlCCzj3YQEVitfZArELwM9DKkLp1HQrEKYMhL2-9igy2IXBxEogDUK-04AvvzNCsAukL2C0CQP98EVXxhVW_VQvMKOCpbKsLvCjAtsKhkaz3aFc_CIF2zFc-IDULL0zwv4BrCmQvZz8giAEJSnCxzzHBpMzYDcKwigXIkLlszIvYKwMgxMUEIgHvINyCAHyFSLLCtn0qKYirXKSyAFMdjVt9kxRAc8u7G3IGKN097JfytcjQsPzoi0eNGKD_ft0bxYAVX25y1lVIoiLWiqIu0KpiyAstykssSBwNVPTsESA1UccNKKPczOLaKNivpHN8Z7PwBEDMIyhjQYzCgAucA-kcYq0K2C2ws6RS0rv2iBxU3QLulMsx4o-KXinwpsLziuwLGj8gKIF15NotwH_lecwj11dL8zpGYLEPM4t0TES5IKSzgYQIEX8g1bYF2I6cgEuSCgSyYt0T67XBG2LovEGBKDr4eyD_zmA7VDSicw0zJ3zgAzdwkdpYipgcBZgEEpZLYA-zOmR30a_JQDGo3LMQ9RwzkqqYQS3RJvAVkMqHl9QgYlXiARwOyIR9pY9gEvIMAYjJEL-AGUpGZyi9DPFKrJSUs6j7AWRGs954zAAjpgkhBOJV5cuiLHAJw00sGQjow0sqZuSk0tkQUPG8CfYHAINW6BzVdsNiCXE9VDGVRwx0s9KXSjkqNL3SoWPfRZERjwaArfNuOlkCzOgFCLXcuMtigWi5d1dKuS6pljKnSmDLXSfXG6lcA_ASnzCThC2rIjdMy5Et1dcy40oLLZEAIsqTZk2WIdA2lYRGEyMyp0pWKcyqMrdL8y_WMzLaQ5wBbjXAP-L6D64I4D2QnAzCOTjBvYQG7LtSkABHLIy1_0HKpSiZMzLd46CDhcCzS2LvxRgByC6BwyxoPXLxcTco9LYoUCVxteMjEB9cC8LAL8oh8iuMzLQJC8olKYy4cqdKH0KnXvKLQFwKIAogTCJggggHjxGAzy4Rn1K2fBsu_LR4uMqNitQvwEiQw_B8HCBEgYd3DLDwmCv7KNyvMq3Kb01ctNLPY72LnsQKxzwykMgEYAuzsK1Aszi4KocoQqSKzjICUeM2eQEyiAaL2wrsy8T0YrCKn9OIrKFeT3mhISiNRsAX0qisHDZ5Eop7LhKz8ujKmK3RMQql0gx2aoxA3QOyAWAN7PhKaykipOKa4_io9K8UmouoBxE7EosQ2lD9mwq48zWO9SjKpssPMDErABdSj3eaFzgucTAGwqPy9ItXKBygio9LpXGBNQAXK2iFtVCiuGR9cCMzsFOAUEuSulcFKq8qbKH4qnUijPCIb34KYIEQLXz4q-isMr_Kxsp_K7ghMtQAaAjyFZDX5OgCkD4q3irFKCq-CuUrTSz9029QgKeNQBEvI9y7tGQOgAK5wk8MtUzfKhyqKqNMqnTFx8gG4paRCiyUMcBIAIgFoRaIfqr7K-K-qqUrtypqtpCwQ1RGkz7o3-PYAD808rfL1qxKoCrkq3ePPBZwKgC8AEfC6soAvAfqtsq3M-spWqBKu1LjKbs3GzcAlPHELkyw_RHwGACSlcreqfK3CuWr8KwquYqJof3zRTBouL2fw9qrSPogMgcMs0TBq56o9L9EqnXaFaYyUN2q5XbNMOqJoPKvsq0apsoY9Oiugoey3K99mHdm0GLORraqp6rBqGqtaomhtcw-BgAs8yiow4S_PPORq6ymspJqiq0pKp1O_Oe2fT585tAsQyofbOlRiVcMsaTUapmtWqiKuMt69cbfrwdB_IRyM48_KZxM1qpgTyL8p5a_mq7DBaiGo28Ra7j2PSf4lLOLB5aparqqlal6tgrTSyCQniNomgCOSLELqu4gzEuSrdrjq8GsaqMQ3eP7sb-aUJYRt4NBRRQZMzaJtCTMYYt0quw12oeq7841DNrGquT0PSTMdBAw81LQdE1JHSrOsDrmalWvsA5PXZL0y5qt4ElCtmLMHmhAodjCMDDqiupLrlawSvfQ5PYrzWx83BOJvBhoF3MBry6hjzbrnanMuHrfQsiGOCdMsnynr3AAzL9qh6uTxNr06p2viz67ZJI8oWQKXQjA2POVL1qpgTP3zdAgNVSyz67RkpMyDMLKJADSkC7K_KmK3krsz4A0pF1Q6wt92FLHqiNxiz76seryz7AWKCmStsvuwLwNkUUGcA8ISDESR2y48V58p08LP_qgCkGqFyrMn-viyEGlDzKQN6_uwLxdQBoFiCbpWcC8A4qlcp1QAGomrnTv6xSt_r3MhBtaz5ofUAkJnAG8AvtZsMPPhB_ikhtobR81Bu8yEGg_3oJLAeho0j4gRhBjR4GgBodrW8lBqoa0GgBtpD-7HvF1BdQdgBwbdQabHyRtUKBrphKQEaMv9xG2X24aZG3hoAbQ6gvAAAjhoBw95oZxLxguwJGqyyEG1OtFKpG8aiMais_-v8z2AFZBlL1kXsI8CjxRKOZyAa6svTdSGv30Makq9xsaDdk_UDlkbwA0Dwg_Gq-HgBGMhxuiaImk6qibRUqnUaRuo7VGllzwXBDwaFg2pBghxGhvwyag6ifI8a6G7PHPBmG0UFYaGAwSIOIqyzHLqyamyptLrBKsJqJzCm3UGcBQGhptYb-3O_CQReqtpr5yPGyRq_q76txuayPG2kO6jGkZhpZcC8N9BxjDCysvKaDKhPLmbImhZsaDd45wAaBMUZZqaRrG3QPYaRA8pqcbvs6RoObYcjxtvLMa05u1R7ANGMuabqdBBoCcqzhsaDgauyoob9mzJsObOChhovs3g-xtdzSG8QqBblsyhsebqmm8vvTmuBwWmwe8BoBsje8mStPcOGkJpfqUWrpvbq7U2FsY9sGnvGsai8BoCWQLEZfAKAnwtJshzfKxFtBanmm8vk9UqbBvPAaW4JNur-8mmQkSmWlepWyQWqpqIrYWzEOcBtUce3mgbwbVHPBnE1EDmC4S_jxoabymZtCaxW7ptJb_68CTvKMWjZHyRdQc-w2bfXFV0_V9vaAHEbwJYluoaOmwxjiLPCFqFURogPwnnKdLJwPEa0ipBpcbNgeZvZbsiukIgBavFLwOToQrKrnKRI71vIaEW7VpJbcc_-uqKf3dv3DAHPK2PDBGWmFqTaGa2Zoea2W5Fo6L7A4YDKqw_XGNHhzY6Fv-axillvjb7Wr-vLqrPXGycjugYnFV5w23vLq92_dFIcb_EovMzjWW8Vp6bG2lDwxaLQBpGmwqkTFDKRMIvoGfL4G_xNjb0Mwdp1bE2_xM4z6G-aAxbRQS5pcDXgBdoVrmdJkqvqzMm-pAARInhrLDyo0_P5KvYQfFfqr25ANvznGiNwvaA2iZIrFLAWyIwiHIyUqsAl44RvsEK4PqorjP2o6LfakWoivvbBkbOve8RAiisWLMADABSKK46DpWDfKiDoLaoO_-uuiqdewDWURo-zw0iXgR31L9tfNDqXa2fTDqHa7UtDsY8FfSKE6yzSDwIXAuwehXI6cO3NvTdqO1duXc0O-TzcAnodwD8As05wq8hHANUuahhwvyhY8OO49HA7ymd9uw7BkA_zspOISAMPipdKAGPBEC_Gtdy0OzVtKZFOyDsEroOz2MODIQ0CI0iLgfFvabX2_-qDjfW19uM6sO0zoc7GPekMU8eq2gDQA5kmCDL9UO9zoU616oWLM6BO2gF0jqsr-XogX0hcBnYvAR1GnT9OhzpFaeOhNr46HOmMM0KmoWcqUFLY4UBfhxcOTvaRDO89pc6aOqjoc6rc6VSs6j426sfCziYrt2a50tLvrbuO_-qCrUqzYDRx3XOACDdhAZoAsRMKfPy1KCW89o67-2muNa65I6DpSr2AXUGnKo6DAGCT5XI4ALxO49wDyA5OoBKc7uO8rt47xPWbsY8_2qLwQQUK6EMOV_AV8uS6syrjqM6Qu_WNm6BOgNxnYBEOUEc8YIfZ1L8YASQDso4u2rh9B2AbbtS79u9LsO7_6xRP_KXI7AMPj342wC_ikulcug6Ua3bvu7Ly1zto6IelD3W6KUGABnycY4CI-D7PYWDYAGqb7rk7LEjDtB62u0pgh7sC3HubR96xOIZ6s0inru6yuh7tHjke7XJgBhQYFjVdeejDgp6Qeznt0TkeuhO2j8E4QCskLEXUEl7BW1Ugp7Su6btC6Ie3cpeAVgNVyP8XWscHRyiOuVIp67m2GJV7HuiHpeaeM3grgAE4_u0t60UCnsBbP6vbtF6Jk6DqbaqdQpAKBEChzw97ZwL3rk7_PKnud7lOpJPsCZwBqGIDHw-KLQA7ACPtITAu5IMo6-O6npm7_64WugYJQBUq0gRI5hLCB8SoJv96WvTfN9sawTfO00iXRHSIRNabF0RtUnWKK_lYEUtnF06-7Gk2UTnNOr8qg-wSt1L5SxUqOSVSixFHD1S7QNG67O9N11KY3VcEd60ey9tHjP279vUjf27kv_bwkwDu6BgOyZqTrBHSsQn62-l9sCi5woWL8j5--yOaBPIlyJSb3IixDP7Oki_qQLXcvyJ37ORPftMigo8yImSwou7LNjoowDz_x4oscESjtfVKO_BJ-9vtkjYynsL7CBwocPujB-hiInCewx_qBdn-jDLjTlK7qLKT-o-ylUSRo1oJ_6hACaILxEBiwCn798tYreLR4skopK9c6ktPcVwg2GYiK4skqIG14ZAaGrmsjepFrP1beqPS96icoPqF0AepPrEesbtwRz6hQHWBS-5HWPA_8bGg8Ro7CJRiAPKDR2wAtHGlSNgnYdxTdgvFEuh8UJ4J2EDo54EOjIc37GaDk1RVcgCk60IfQEjBXAJYA8BclDjA8B_uEiw3xQeJZRaJzbJrRq4ibFaFcAaIbw3msoKCFChRIwGFAcwUYLFyeccXRVFARonZm3RoUaT_H8QRcZeyW1k41EHPAJWSZTCR6-ewT6xrMF4UGwXMF4X-4u-IdG0pLOSAHVQLwJMJCg3mKjS5ZbEHligBSg6-FHg_mIjWB4ccTwY3YVoEobtEeYiobc10hmoeBY6hyjQ-YsNJoZw15mWxhaG5mSOg6GJWdaiV0hsHoeKHch14XrCoRGcU-ESiKoYyGJWcYY5YGhqYeaHQxR0VaHFh0ZhwJlhrodlIeh0yEeA33R0VnF5xYYeqHMhsYfZYGdU4Z4Dph2jQSA9xWcAPFp6KUCuH2hm4c6GNqNFzyw0qA4dGH9ESzmj1iWd0lMlb1WwBhBBQAKFSpUqQDX5QetMAhS5llazmLAdjBEa-HJWdDH09VhhWwKpxQBkBkg2WCF1gR3mekaXsmRq1EcRnEFkYmGDKBkb1orUQbBSGmRomiVQBRpkfeYGNUZmFGOR0eGWgRRzvGgQRQSakRsbBuwYMRQed4AhcTkDIDOQLkRHip0bdHUdORzkcBDRZfORUbZYrRuTg_ZFORmm4xQCFTTw03yNclB4bR0QWbUIXRtkeZjKCFylYaRkHmR0oXCoXco2Ri-Bo0-S5yVW44kLgHARHOKAHeZYx9AHAQrUbbj1GzRw4gTG2RjMYNGzyNMY40lUCLUoBsxsfgjHRmFF3qsH5SuSiGa-mIZJozyMmhgR4hmyywZckZIblHUaIjQcwOxuwUsxlKPsYcwNhvsdKHgA7vjcEN8IjVeYJh6jQI05mCEeI1bhtICPIawBrRlTeh8cRQo8hpwXH4Jx1cCnHjh34cmH_h5ob4Ym0BcaWHlx8IfWGOMfoanEdhkPPulP8IjUPHMNE8ZmGLh8MQvGoR5YevHGtUKA5h5Kd4SdEXRJx06Jlh6cZOHjxyMaBHHIEEbv4jxb8b3ZuxkpX0J8qC-A1ZxcUPAPGYQZYbB02NfaA3wgSMkfu5BWAMYE9aRuE3ZHGR-UYZISJqCeonl7LkeOpeRqCf5G5RoUZq4aJtlkYnJRgVmWHGNF7ijA1bZXGNHiwcMaVRIxp-qhZ_uGLBF1sho4EVGFRzsfuHnMW8blG9yI4CCoQoRUfInp1SifstbCcF1DHWJo8Y7waNS518oCx5hlNG8xxZjDGx-XMdTHRmcbnC0LtEsYcmzXcsaL6y2YvtmFgx_lE619FeibMmR4CyeA4rJlyf5RbJ-MbUNtGNydKgrgHriCmUaM7SkwGmKMacgrgOSYWNtGFZhKVBcDse4mxRgKEwmMgbCbwmyp9PFqH9oGLFVlRubjHjtzkQFn-wrtBwRCg5dSbR9wQy3pQVt7CUPCtH-2VYd2IhjUjjUNRjBjjqnaBBqac1igujjHZZjIiboQn1aAHzhEBEKDxgZUwbCI5_EdQHVszIRdhtGpjedj2nFpg9XcJuJixHUA92TrVkmQseqYllL2EjR65_EFaZfUPsYlHwZ-pm0YE4WqK0aunHVEUzNBRFa5z8m4Rw9Tem1prrQMxvpzsdPZBOZKdDGpp4bginhOXdgaYYprMbimV0BKY8njJ42Ryn7jQWinJMp6gGymQsOSQaZvxRzHLlVx9YB600cAac7HqxmJWiHiaEZ0FB_HVAApp4BamhdHbmB0bWdkdQmYUxtOMHTkkzJY4zoR7CR-CHAckToU0xilfdBlmKZhYxKnYONVFlGfByzkpn-UDHWVpYh0miSdnyBvs_JuSNHFlnRUWEcxcq-2sdlt6xgZxFxhnI2e2YzZxIZVx_ECkayH1gXsZtE8h1KcKH1gYcb9mthsodcFP8L2e-H6h6CbnGEgJCaXHLEGEdXGbxvoc2HRx3cYjmRhykcgmjx2cYBGWWOYfjnoR1YbXHPKYOYnFtx7YbDFHxoYf3RI5s6B-G3xmCagBPxlfiLm7hpOY8H_xp4aAng8mEVAnVweuZzmm52OagBgRlIFBH7-AgHbnlx1SYk5NbQ9XrnVtVBn_lM2SGh5dBnClBOpEeWZyzAMRuwHshMkRIFxH8R_dEJGEgcIbQnpZkKabUs5iVj0nOJ8tlB4SXIFxhnQxwRydAtI9SHSYj5GgERh4gCwb1HrB0yaTH0AQ4LwAJR0eCqYHLb-ZyIQF_gDnFHAOZ1GZeccVBEB4gJBb_m7CEKdAXMF32hmYv8UZ2CnMAVkYQWwFvEEgWIEWYBgWjlHHDNhAp9-dFapgdcC_n5xeKaAWsF-XVxtzBywcRBSceBY7JyFiYEoXoFvoFgXuSHBbIW8F2Vm0YIgdDzwXiFu7ignEF0Z2smXxIhewWSFiYZUXkF-xCp0BFucXAWRF6hbEXaFm5wsB__UlE9RWZuseJo0nfzgvhTZhIbbGzAT1DUnD1T8l2gubHwZ5IoSZyHDQpZo4EwVPWCuHsWmJHJCVm3Fqzlwmrx1xYCXol_oYDnNhpiCiWFbZUYIAmZ4qY2ng7AqkyXl7fTFSX5UXJf-n-J5ca5H9qJVDyW-JwjQEmbh9JdVG3CWwfhMCl-JelFkdbUf41MZs8lxsxJ0TS6X4AFJdaWaZuJfLRtNC-CqXR4QZcj1Cl8ua3HXhJwRcFzKWucKXwJ5ceHm_h5ubPH4gGeYGWRlwDkqnhQZjX-pm1QVhaXRGYiaaghNVqfqw9lvERWVcvEAnEn-AYJecl_JdtwI4Vlq7nmNxRzselwNQCZbpp_RssZ-XuJ2VimW-ydCaVRwNXidHgpR2paaHsiB-YI0CqGjWyiPloZdTQXlnTEoAwl-yXNdBNMjS41ssT5fud_FxzBTnNx1SgtYvYDOcEwSVmJefZXxjZdHnW57ZYWHIR5Cd_Hbl21CI11WQ5ZY0Gl6alOW6VjFa-XSRy5YZWRNGAHBW7lo4HrFHlzAHeYsV-RgBGEZGUe5Xy0SFYChKFv5ZFAAVhEieWvJkFaYmUFnhHpXAlwlehWL4ShbhWyl7lkRXqRiiYknPhAEbRWZVztGVXkMHFYPwYOCxHrECVwzWJXRV0lcKXS5prUrRgJ1Mw1XVlxlcbnmV_OdgmYgeCcPFwR9lcXGUJslf2XlxvlYEAjllqhOWJWM5YhXr5iVd40IXd1c1XR2JCQVWqR8c1OB7MgEZ6xH581eiWYVz_X-WrRg1cVXgV7Vc7GwVmaBbW6Rk7T-4Kl3tcunSl_DQRXXVmkedX7pV1bFd0V0Rk9XQln1fskesANeHXpV6NfqsNVlGEKX1tetbBgV19Jwvgpl0lFtmtIOTXrHcVpVCcXWx3chVxWaTxcMmrJXxZ7G6EZde9WT1pVCKV31rSa5WawX2Yrn-xkLEDmawWZapWBhxZfOiSiHCejm8595gMpWWHLTCxLx3ZYMxeVpjQFWC12vF44LlwkmE1y1xq3uX9fGtaVXD1qFjeX9Juqy1WiVkdc0Xa1pDe8nZ11FYXW6rT9ZvWAoAzVy8N1qFeywVMc_DDWNxu8Z3HUNvcYw2IJplZjmARpjYkk7wVladE0NlcZ5WDl3New3g7YVakF8N1DkI2bl5hnF1CPMjeeWKNlVfeY1VgydrFoNAKHA0gV4tR5QYOGjRRWCNN1anION1daVQ_Vwj143rN_jeGXk57uYjW-5xTbAneuSTbjXpNxDfs2XRu8HHnJ5o8SU36cTDf5XjljTcLW8NktYI3rlzABo2q1xjF6wGN8jd-pKN_gCbX1V_Te-WfN-jds3ZNl1ZY3nNtjdc2TNr1c43EgHdiQlvNuja3W2dVCZrAD1orfMwv1hxaVQWZ6vvtniaLx1Hg71ppZcXwNtKmfXvF2wjfWfZx5jC34NxoeaGJt4bt6AI1V1AS3ltxSbTn8huTDA2FbQaauW1WUQQImcSbTfO2pVhSeOh3HdW1XAINycQWXPWGDZ0pQEbxyM2xxodFaguR4FFs3kKc6MomhNgMnkpdx_lC-3aJgrZztyhsrbBmX18wEs5odweltQUp2zac3856SZVX4pi-GLHFFurZ8nVMMKXWBPUG0fqXm1WwfsGVcKJa1H3mVHa5GjRhnfCcEdwCe2hz8d0bhm32O0fI4YsJ0dZYtsSIcvW2ZkMom2IEY2fJoWx6bYfXckJ9dPUkdkWj8WFbODZnH1tmYc22AFljyyQ9twDZyGRxo7a0xklq-YO2slhleMlRWGqeu2MtnTay2uti1dR2nt_dBe3txt7fHGSiR3bonu137a3R_t0ZiTIgdh4hB3YaR4eeHBhkLdhZvtr3drXgdtXlB3vBoyah33HbRgx3DVrHalGwpgjUsnox6Kfx33JwnZ7W5162akoqpi6b1ojkZGfWZUZyCiamwAMvZkgDhXaEcFqrMaHPxnuTVkNwlJ5XEVGztYsYckb25yTunrMAo3LY8SEYABWhphzBGn_EMaeSR6OVKYemMtY6YXYzpkkZCBaEVacj8m1eIFARtpwY12n9pvaYY4jpuaemMDp1feV1692FeunCtQGEr2dQavbmgOOH0eZYN996bmxPpldFhnuJ-Gb-mVJ66dlp3WRTyA1EdjcdSpIZyPxKJv95e1_2fnVNBSn799gQvYOOBplR2pFDGbz3Ep3jgQPVZomfG5SZjeRFmNZ4mfvYExPCxJ3-UT1FT2tFqCfMms9x_cvQCFlmE9R-lwlC_ZKD8NFxmkpjg9rAcD4fdymeDiwAIPyZ_g7wOeD1THJ3udjUEFWbmancSw6d9pZZ3vHJnZCAlDjlYcxPUMKQZnx9q0ZG27Z0-nrHxdpse5md4Smk4lIcfmbdmZtxXaIPFMcWbVnIdC1ZVmuMWVAVmRUJWZZhnDtzAcPCVqTC1nE9gzF1mDMfWcMP3HYw6m3zZkYEtnaZ0leF2EIUXdARinVUlKdpdwWcfW5thXYW3X1okf22l2JrYrgkjn4HjEIlv9fN3SjxJYHGQ5ocfUmDdqDfe2sBHSlV2oJhDZmGtl-Yb2UOVhOeU3Qt7Naw2UttUc03iN8Vcy3_wIjfK2t6B5ej3Cthtao3H5ztHyo9RzeAEBCj_YB-3TkJY5WPwgIUaIk8j_ra9XNjggG439fANcWOiIZY4qcCANohKUKVkTZpWxN2DdW21ds4Y_GgtnZe6OY17jD6P811Ldw2tNm3du2xj-Y7oR5VqY-M29jmjXM2ctrelOPxcA47WOYTjIAOPtjxrb2OCji48821Wk47QgNji46uP_N9cfB2q514c-F-UJo9zn1dwEbHm4JieYQnU1jo_TWANlTd6Pkt744GO0tv4-GPbd0Y702gTkjmrXQTutfBOCNUrYs2LV9Y7OO4TgU_FPYTi4-RPmGT9YOO2tvLaxPyAHE-SPwgPE59ssj8wAVPcTh5xrGRd2xZDKDjqpxqdUCAWfdm5djI6-pFdpbb13_12JftOubA3aSXBxoOZqOQ50ceg2GjyccePmjik_nG013Xa7n1xl3dDnw958b9PyT548pO2jt47_HQzj0-A3RxyNb2GcSMk5HmE1ludeOgzn8cdOQzsuaTO5llM6C23h2uY-P1liLZmHYt2k-nnczzlfzP55vTlB5eVz0Z-PoZpw-LAuTu7edV4cAU7oOAR7PahZ7t6U8ROLj-E-xOJT2U5lHPBUHks4UpjvHYXJzmU_VOrzEnZL2hJ6qbGH9oMtYIQRtUYDy4JtHAFr3XyHAhHgLMJvY6nW9_U5sWxtsXbacZIOIa4QrD2XdyP658o8O3XTqo_dPU52o69hvT8s9rAh5qTZaPKTt47nmhNsM_Tn7jnEmAvwt0C4LnfGc8frOujiC5uPDt-8ermYRQC9k0756vnguAzhIAU3wLzue2hHhwCZeHdh50TnFYJXC8-Hahgi5jO5mGs5TW6z-k6U2ILn88jBUqJeY3wURrNlrgHzqYH3msRo-ZPmGjfyZ8WcjumdH2Mt8kbwva1iF0fn6Z5HRfniBhheNl-APZC4BYMX-ceRVgKAEAWrB_hckW7N9D20uUx_JxcmGN0hbMv4gRmWljZWOhZ0oUp2qCEvdLjhf0ueFzy67WlFo8a6cXuZybgXTLuRfsvSaRy5QXYRyxYvX4jmvtLInIJ4lNwL5HF0CBiw9jHQRNmBD0jBluT_BcxluY87NZmpnsip1tKZvc6nsGZbmWh8rxBX60hJEq-9IzqHzncXsrhDwKu1AIq5AB3mS85b29dBDyqvWrmq4hNOrszVIutTxXeW5L52bZWg_MGzD_Ow5pZfE3JL2wlqh9gfEHmgZQWIB4DJrheeiIUsWa89OBh2ldcHkdGa_NdtrjcZmu7xok6oucL7U_hMM-mIEgBsgUMUSu9rnK_OuXMS64wvrrx8dAnP8LUYev0r566yuZrnK6K0LQHUxmuBsHrbiPpQHFxac3gcKjdJZMR8NppjcM_HSPprva9uP5rj7cs4y-wwokkcAZwHiZgMHVHPAEzws6xuKsHG4jOdKAm7hBY2UTGAmRhSilRu1WT-KC2-tIa9xszNRom5v3SLq-B49OMHceBUzrqQMwGb9m-4xnAfUDWQ-7BoGahwMVm5Ruib2W_lukmJW_yQBb4q69gJKfm8GvBbka_OoYbmK7hu4rscDMpdQXkVy9drrIAcHqb0zG-vcbn04T2rJFa_IDakDa7iAHYLU9B5Tr3Lz0PDT2Ww5UsgBLU4leVeXgJcmVfs2vp5eVrgp42uIRzjJRHRMg1M7N4JRBEuLtmRpgOZRmGy1L4CnmZVOJOO7_4htZ6bdu1SHVQTNaLTaVjuAGYQ0puvBs-eR13zRdHdIxyJ8clMqNNgGXMs1VdS6M-ceu6juwLV8zXN_-eCyZNBcCIbNv8iC24IAFN7fiKxXMaW6FmfB1W6ZuxNJqGOoV7om85uHxvsA8EN72milRgJnW7qu9b9Yhsxo5SMD5BeAHCBSAs5de29Ihd2e5a1IURDMCp4kdPK1Jo7oJaMp2ebCFeYG8Z3DzvsIO8FLv0RM12m0z5IylPnTth4jZZgADw7hNeCTz1mB7ALMBKPcjiAEu4iOWfYmml2AB6vBfcZfYWm12em8QeOOZaHj5AHsSBE4zwGFRbiCgQqX0BxQL42nv9CfB_2mx2BjloeSHzPDIegUCh8qH99uhD2mRjA6YY5cH8_ZEehjrmylAZXHSaofd2KE4UeCAHtGUekMTImum1HtB9UQs8kKFSp3CRR7DB0lQ6f9R2kWacnNuRnY_8nTHicymB9oaUw0ezHoi1sf3rf1DGhVsEQAXoLHqUCseDKDx4dtTHoJ-cfLHnx8GkiAcTjY5pygx71t9HjB5oBqHkKESe_dZJ93ZoYLRDieknw493YkyVvYoU6rSAkgJYnjIAMfMHvJ_sR9oGFF45-HzmXoer2GXHmgnlFLPbD6zFawQtmTHLApW0nyp-ofdbKQXqf87kTjQBD8EBv1AakEKGGfsIUZ5v6BACZ-1uedhTnI5HTIrU6Ffb8le7nvtCg8r7nHfQ-UQcuMLgi5F6IrhHgNNDvFQQfQP-7tRXQBkh5p8uBeii4O8DTVMhiSZ9Uc4R4K57lALR-vGgIiCBBXSha8555Hghd-QfMVlYTeFVsbFcOAcUuIHiCrpe5IhyNhUAQXhxJ9gQRWCnDFCuRwJYGIEBxJAXpBQXkRFQbDwVMoFICuAukHAEgkZFVcAigooKRTUNxoaRXUU65kCEbhZcihTUVBsQRQtBrVChRwASPfwuAlBsGiokULiYGYXlgZ1eWV3awMV_QBe9W6ileJQbYF71hQdAEGxEXcsHYAAAYildkwQbGYVavOngwBleHaiuAdXsAEgkrXq18Nf1XjIAoVqFTwi4BdX8gDde7XiRTlylFCABUV2AIhWrHKsYgRHg6jM0g3x-XgxjyhUqSeHcBLj1cDJeCFcaBpfWX0lEDfOJF0ZDfuuL4kIt55P17kRI36N5oBSXjKATeMQ2l6IR5B9Rza5AIZxT7ldHPxSzRYG1h69og4WYFgbjiD5xoArHOOBUabgApDQBdgQJ1be9lM-X7e-X3t67e-nRoEl0eCfZ0wpEasi5behQYd7iBEai0DQBjwE8vukZofxAbsGgUPBWRRQPBqcE6HO4AeBuHUxjgB70HACwBEgHyCeAEaQxw3pZoTuw2csHpYwbe9lJt5fwN8NBW2B9FHmgLxe3g1W2BVoXIH6ArgXd_3fD3pYDGQb7O5C6qMgWmiuA2UFbl8AJQacEJRTXPXH0Bbc1DB7JpkUvXk5PWe99MdH3oSUsgdoFNBXfNgf97GBokQD03e53zYHFMzhR50np90SD4PeGgKj47fjFCt8O9JAbJ1CdUd1Qdrf1B_R0Md-4ExzupzHMiGXhV4MMlscxnOeAwglHeT_2fg70-had3HKp2MPt1GWkxv9Pvyn2vkzuo_d276ZHVfeaYP5zgP5UP5yuBDnQFx0lO0OZk13DL7XddQWZTtFyWECUPCQOwYUPAaAtye4BdvCme14EA7wRAHeYLQb08Ply1Jon6EwXQNiUuTeUcTsJ6j_7fOFY94XgKo0vkhnhw8v-PAYPXeCKWhdcRAg-F4UJObkK-yv4wXNF0WZFxyx-UJz453rj7ufZ2NxsrSuvAgso3eclPnABs_LOez9SAAXZkpc-EgNz-23PWOmjm5Q8fDADlgAMrXNc3ZFxGnBIv6L-y-UFxL-WHLRFL5NY0v708y-BBbL_OFcv13g7xObW1CHP20XEVK-Apcr5x3Gja9Cq-wsGr_u-6v4cWdYGBEp-a-ccQTf1O2P2K9lttP7xwb78lJaa0nppiWUo4MtRfbBgihtKjh-nIOVnfVntzdgy1uvn3YWvlSSz94-Bvr5x2cV0Yb8c-V0foVc_OVLbY8-5oVqkqXfP_z6ymFvpH4Cc9UcL_W_-AGL_qO4v2VktEkv84T2-i-N78wwjv6QRO-DBM7_dFavzIQq_bv13mq_KBSX4MFd5tEESBCvobhoBVf-VGu-nvj74GEIpFCUeF8hB9gfYWv0lcaxyLtxfS16KTH4znSTqH_n4wSO37Bhr76bXdJjGc1DaP4H3rkd_lEB35RnxZXymd_YeV36fQqkcDHd_AMMm6SYw_iS69-_ftWRZBffqvf9-nfqbSD_Qv6o3yYm0T36WurJKz_x_tnWz9tRif0b6XIyfib4p-tdnbep_Zv-b5ABbiJb9y8Vvnz5Hg_Phg_Tc-Zb3-Z-K1Vn-qgNvoPbj3l5k3l5-BBfn_2_XeQ7_IFcRUX-kFxfgYQV_pBaX4MEIpOX4l_3vzISV_9nDX_y_9ALf6K_k_0tFvEIpMa9OFKv-r6-_Kx21BN_Wv8xabOZYRuXlh1HIT9yclqUT-RfnaJ2EOcpPh96gALHdT-sdePupyOON-7w3McBPnXeCJOTmbJOF8jg_Li5dfZ25Y_PG6V3FRD9fQb78oYv5HOMb6hoQM70nKQTD_a9AQuHn4FfYXha_M_4msNtaXfc3Y1fYsAa_Vg6UCUyS7_ef4GCRf6ZCPX6n_T74msT1YUAxgHloQ36NffbSgzeVAtfMKSQXdH5W_eAFHXJAF5_VAEGYdAFX_HriIXKNDIXek5efUNCerOb4VCBb4N_fXwhyJciD_TtB4AztAEAwNgXfNL4kA9gGiMcgFpfAwFF8IwHuiWgF2Ai-AUA9HZr_AYTMApf4lfNgH22DgFNbLgEuA574NfZhhG_AQHouP75tfRM4q6DH7wA8W63XAzZqtGH70UeVbHUMrTVXaog83eq7l3TQx9fT5wF_Ib4E_Bz4l_UlwroOZjEXNNYqA21BqA27jqAupiaAjLTLfI1DynJrb54YsBOyesQ6A1NDrsawHwHLs6EA5BjEA4r7mAvsiWA4XidA0Ri2AgYT0AovgxCbgECCNwHSCI_6PsOMb5OOwFOTJYHuA84QoSUgFLrHwFpfBGR8_PwF9kHgopAPlwDAngF8Aw0RNfAzBCAwTa9PSIFzXO1zEnai7zif664_FAEE_Qv61gWQGYA21DMXak5xbOk5tDOmgonT1iBfJCTt_Rb4Zab2T1Aj1aNAq2LoAUPCL3AKBNAmjA1AhIGEeNoFBsXjgjA9HbUA4wFEA84RmArwFbAvY4UAptYnA7z7WrX5ZWAnb7j_HEEOApVAMA_YEn_ZYFoQTMb5jGX7rAiwCbAztDffC_6-TQQGhAmS6w3Oe7A_UAH3kUw5GfATAQ_W55J_eP7_QanSQUJn6oABH6HqRUErkVH7O7UQGQUTH4AXRa6lEHwZSAt4E9cT4Gl_EmZxzUoHjMFv70_MmaM_Tv6V9CPZBsbb7LjXb60ggQRDA3ERYg0YEugmYTJjVMa3iewEGiegH0iHS4ySaYEL_R74xCeYGsA3ESeAovicAwr7BggwShg_gFkg84Hcg3kEhA7rYPDf8aW_LUHiAmC743F4HZA75xGgvIEjfDAEmg5hgKAxtBsrZQEWg_QCt_ff7Wguv5IsW0E-yZ1hqA2v71_WoGN_Wi4Og8ZjUgk3hjAovhuggwQegvshDggYQ-g1YGGyFYFsggMGOA3f7NYS_ghgxkFMA8MGH_SgRRgnX6xg7YGu8BMHSCJMGpgi4QBAtMGScJchX_cg43AsQF3A6IG6gi1YgneUH5kRIHAMDLQpAkzS63Y25OqSW6FgogjSA1NDGg1NBSCYoE5nWsHOsDvANg2UFggxUFtgg4GNAyoGdg8EH0UOoHpGdsGNAorAtAtEG9gsuSkaMcHyoCFwUAkcHSCXCGGAr0HjAhcGTAlcEUuGSSzAtYEGiKcFzgmcEsguyYxwd0Rbg6QQxg7wHEgwr67AxMGrg69CHA44Hbgvsi8AwIHpg2sAXgyDhXg3ME3g0s4BQP66UPfUF4_P8GhoACGhoICGJrAoB_Ati4AgsoGhocCFWg6KA2guP6jcGCH8QxoENAUEEogmvZISFb4OMNQGwg-EGyQxIBIgy4BWQp8GYQ-0HYQx0HwAZ0GYANL5xgvcFISDiEWAikHFTQr7EQ8tATgzISz_RMSHg4SExCf0EsAkr6cg9YFcg04GiQs8GpoCSHWzOtQ1gaxajbLT5jgTja00CUHyHeJb-IRUHxAhUG2gjQ7xLVmiqgsnZDLdUFiMHa5wAu4E6gsqF6g2wgGgnIGNQlSGlgkn55Q0Va5IelZVgs9DtHHSF9Q_QGWgtv5GQmUEmQ2CT0rPQEdfctB4AwdYMbEaHBrUNCEQ9aEfHTaGZCIcG7Qr5bvsSy4MQo6G2oRKHnQopYLgqaEzCfcFXQ5wFUQlqEzCZgEPQvkFvQiQ5bQ5MHPQ-KFDQncFcQ26EeyZcE_Q0YFr_I6GfQ48F_Q08EgwsGafLCGGX_QGHX_Z6EiAiIHXgg66ibIYSAXfdY_g6z6GgxGEWAVSGfLfaGpoYCEH3CaGR0FmQtrfSGzQ5sHQQstAtrCoFhYKoGuQ5sFaA93zogpaG07L6GUA_GGhofCHEwkKHGrUUYCwk1hrQ7mFdAvyG8wsgHkQk1hSwmwFgw8WHysdcEwwpkEqwk1j0QoVhQw6KGzgzWFqw_wFawwkECCOWGouA2FmQgGGmwvsg8QlaEmsSX5XQgSEKw1WHWw9KF6wrU70reGGR6FWGAuUNbn4KJYowiUEmfYs4DDW8GdQ-8EkYbBDgaZIEDXVIHukXm4NXRoi1QwhZ-UCKyKWf2EvCbJSvghDwdQMOG2YLzAJw21BZA38F4wi2EfAgaEFAp2HOfcuHyoH4FJrGk6sXBcaRgPThUwmaGNgwyG0w1sH0w7mH2QmCBwghEHOQ9CFuQ4z6tArGGKwsWE2Ar0F2w3cHFwvsikgl2FHgq6E7QxWFMnHyHGw_AHjwxeHloGKFvQx6GEIWeEmsV6Hrw76GVwwkEfQlKG7wj2FHwueGKw92GHwt2Fywr2GirMKS-wvqHnrGsC3nQqEL3dzZM3UqHW7SH7GQ6H6pPWH41QtH4qg20Eo_fLTKg1OHwAjqEKQ7qFKQouH_g0uHlgwCFTkGra00FDZDCSMBqAvBb7OUPB0_GmEd_P-G-UfWSYWKca-Q5u4CCT1bxg4GEHgviGHwk1ihXKk6NjRy7nCGrYq_V3gawliFi_HWGcImf43Q28T7guf60I0Rg0QyGFCQ_WG_Q6GFHghGGZgs37ZgzUH5ka375ggkY4w_P7Fgon6IIq_7qXZhioI-ADybJyG6Q8oFwQpmHYI5yF4IluFQQ9uEoQ2CF7HcPBMwhCFsw6vzEI0jT9gtZZkIigGUIo6RVuVf5PQzIT2wnxGGw9szmXcK5rZFhFRbekGy_GWGiMeX5CIlz7KwuYHsIrfinQ3WEz_bhHBQyRHpIqRHnw6RECbboZyI1GHSQ9GE_XbC53g6JZxYcOEEIKqHuQ2jzn3WOH63UU53XHqFqI5hiqQ5BHOsHREF3Fi5gjCEwm8LuESKRyFkw7fi2IoYRNA5_A4IsxGQQuaEP7FuG2QnpEwg7uH9IrC5OiIZEeYZmFgghxHmBUyHWI4EEOQ3uEuQp2SRwtVrogztB62YwEQTA77dA13geI90Qzw-JG4iVhE0Ai-AMg_xFS_OJG0Q25FiIjJF0IzJHZI_TgxHW_6oAfj5JeBpzhAV_46OcT5aQT_7GOb_6__Cd6AIKz6AA4wbzOV-EFQ5RDlOVc5g_C9hJDR5i2gypHGfRUEQI1KgNQ78FE2CBFtQwpHp_HH6KQ14G9QpcgtI-VDqQ2YZIXGsGTQsCHNwiZFtwwhFgwI5F9gsCEDgm2GkQiwEInc46rnYXgBQ3EQCI-WHPIiRGiI8RHOw75HiQljCSQvJGQIu4ESA4lGwI6lFNIhBHbOfIFIItSGmg7M5kw-uF1gmgAQQ0bgWIzlFOQTZHloRmHDI-xHdg7QFYQ-VAkIvlGegpqBpfUc7Cooo5XmLZGn0biFeI3iFSorYGzgQSGOw6VGfIrJGRojME5IrMHhAlVHko-4E3XEpEK2MpE5wipEAI1EHVIw24fguOH1IguG4wmlGdoOlGFA51jVwzSG1neuF2PaUEZLAyEWo-aESya1GYrOZF9I3ZF6IQL7BfMEGpoo4FrCW676A11H8oyWG4iMVEDCG5EfIwVHLnMc4io1KEpgk2ERo6NG_InKEaqZFEHPFkBoo71GmnBICnMGAEag_JEKIqBH1HXtENIuBGFo_qE6ossGaI3jjYAgEHeQuABkIqwF4ggwQEgsNHjo1U5TnKdEBIr5Gzo-VElARVG5IuNFko0z4YwjzCHo_NGqIwn60ojRGk_A1Fxnc0GoQmxH2opCE9gzyHOonCH9o1eHuo4YEPo6QRPoj9HXoT1FInGdFRoojHH_edFSaWNFU3eNGAYopHBbF_ZrcOIEZoyCjPgx8GDwqOHvgi-6fg2EygY5SHao_Zy6oi9FaI2ZhEXECE6QqtEswW1ErIhDGQUZCFZyc4RYI5oHWyIeHIYryGnIp0HC8KKGiwrDGPo_oFvI10FCogjFjoz9HfovkFZQiDh_oijEAYwOGYXB4HyQnrhcY-BHloYtH0omFwaQ5NZdI41GyY8yGWQ1mEQgmyFQg_6HbI-ZG7I_uHeYzNF6eTADco9oGc2CKGeHAVEaY3oHuiHDHPosgF6Y2U7To3DFfowzGkYvzZfokxT3_ZuTqOAK4N7at6EOMFHv_CT5GOEujSfMxw__OT6wokyDwo8ZxAA8thvw1FESkIS4Yo0Ug_w6tEGQ3FFQGIBE7o7i5Eo_OHgI4BGUYyzH_nA9HJoo9Gao8DE8Y_5x6oktHjfcmGjwAxGx_U1G1oyZEGQiLHOom9F3o4XiFYggC-ggQQMIhy4hI47HoLMeaJIo7H-Yv1F7g6hEj_GJHEYozGgHDLFPY7KHkY7oA5gvdGqopRHqo3P7HorVGno3jHnoqDGVg3liFzWDF9kamHmIzbEMHRtGqAxoGSY_MjIQqcguo1TGDgi5HnCA7HXY-hEXY07E-o69AnYq7HTgziGE8DX4Soh7FBoudHPY4zFGY436_oj7GdfW4EJo4OFzGOVaGbBjFVIsLHdAJIEZwrNHRwnNEZAzjEqI7jFA4-bH8Y0jSkwxZGVozDH1gjbEco-tFEIi2S1gcTEcIVZEDwxqhIYmTEUItCHyYhb6KYhxh62aLG8HWLFEgsnGeImVjeIneG-Ig5KhogzHXobHEk4ovgnY4JEE4vshE4k6E44mVHhouVGZYhVH3sJVH_o5nFUYyi6_XGi5TYxXaNI2bEOYyDHMMMv6MI8tF1wyHFF8aHHsoghGK4rlHK4iwBqAiyF5bNZE-YvLYzInXE2InZFOQvZEa4xUSuyJ1HKYof5oY8cGm431HKIcnFBQ9kEGCR3EMQ87FBIphFnY6QQe4xYEd473Gyo6nEkY_kEB4gQGqYQFETOIQBTOJahK_UFFO0PRwQoyT5Qo0j41YyxxOOf_5KfBFFqfJFEtY1dH70WPROzEZzbMbdEWrSqGc4vFH9Y5q6Eo0BGV3UlHB48bEUomBH_YmbHvAlmCOYgTHloK9EUwk1E1o_BEtgy1Fd_VHG7Y5L4N4zVboAaRbnCQxYULTsaiLQ5RpQv3Ej4pAkmUBnGyIoPFowkPF03AsFUoosHR4ov6x41pFLYmDGgQqHFso81Gw46ZGFMDsEaAkLFSYpDHAElxHLwjHGDogQQ6LTt5QEoRYQLWAkmLeAmEYl7FPY-nEyItYbKoizGQbajGpmTSZ0Y7nG9YyvFdnXnGhYozTZo9jENXUi7KInAmFwk9H4Es9GDQwglf4oTFGo5PHTQuXH_4umF1hbPFGIu1E0ErsGIYx1FWIs2HAg9CEKYjyGo41DHo4gdHkIovhsEt3HgEoxbcEzJCmLBAk04oIHng1AnCE9AkFIzAni3GzFqEjVG4Et_Elw7QllwxbF6EhPGuYqebuY0gnGEmHEK4qZGyg-HGGImxG54pjAV4yEF2E6EEl4wLFl44LHWExjHOE5hho4pgnuEtL5eE4XjQE4RZ-EmhaBE17HdE2nFZY0358g3LHKAHqAiBf7CaAagBIvUrEgAXJC75BzLAQcoAggbwBy5X8DIIMtAILBqhVRfgDpmLYmrE72DFfWYnWNCEpcSZYmICTADkgf_B5gSlLVwH2jK8eYmlgMEB0YQgQH4PfLx2EmQPE3Yll6BEAncHKIoMaKzmgPfIAAPXViGZhwAkHhTQVGmE80yH-JkEmbMIJIEccsFGIDcCCILcBXsh9khJ3j2ygIJNBJq4EWkmdCTogQmmQwnjBJ-hm_-AJImgIJNhJCjB9U0KNqxsxP-JVj1kQFJKJJQ72vg7byU-AJKseGJLuCcJOZJlABHepVTHetwFJJ1L0xJ3JKXeLJOo-DcHXeM73ukaJMFeOAEJJ2JN-JUoCtAkQFJJ-UGBJkHhhuxtAWJuACreZxAmJC-NNc4gm14vhXTcod1oAi9nNALcDmAxrgUA8gHkAQAA`} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2Zh39\",\"multievent-container\":\"barchartEmbed_multievent-container__8PNxR\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2k9we\"};"],"sourceRoot":""}