{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","filename","concat","getRegionName","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getTurnoutData","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","legends","text","parseInt","getLegendXY","it","data","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","error","console","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.55480e92.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKZ9VmN0TX4T04AEchASdah9DgSRLD6H5wmgmZJCiGZ-FVVABXtKDZnPIhAhyY05XgyREOQz4NxoDCsIEHCCDwgjKOo7JiLtDV2CDKVYLlBVzXaISHWAdhNB8eRxPlAABGAiBEAZUBQrppIDVBdFRY5TgAL2cAhEmxdhuHYYB1iiARnlQK52gABnYZMZiwdp9xrGZOxYWcXIAFi89gADYvJ89YwBAgAxH1oESFz-GcQ5EUdTB2AABSEfglg0n44H8xFoprWKaGcCATMudgAEZgt8-RwQM6gjIAQTmaz2EjOTyBsKB0HDdh5E5ayxB6mMZHYVFLJgbhgEPMyLOxeRt1rYB-ugIbggAMl28ZEnmShmi2wbhu4S75TAUIDJ7VB2nYAB-DZtvDSMxquM6dtQZqaykGRq3fMxYWEzAwDCKApg-8bJv-zqVxrRNRIIHA4syFJrwIdbazrPD2C3VdEzwqiaIJnG60kFG0YxrH1qkBGgbMb8QCYlCM3QzDsP2HjCIArQKBA_QGDI4SUaWOT1zQrMlLo9h-DNKVBNIyD2CMEI7HQZNlP4LXldFh11f8YchU0Fk5f4CJTbgagLXIKAIH0fXVbgVgUksShstnHXWdcVgYAtV2UgtfwLRmWdnfI1ZUDdn24hjwoQBImSpl0SA5wtkAcE9bOUNQdPI-EoUkigVxAigH3i8ssuF0Lh1ZqszPPT5s44DrqYYH9tifdz3PO_Q9uRK1AAZShOwKH3FctKAx8CxOSINqY7KR0cCA4rjtWiVxfNxs9ct-NBETgTeCFcMxZfdeCc89WYIEH5eLH8gQ4Bgdf9hP7f1jPcVnmoAA5H0MAd6r2cG8H-WkAHHmAeQM0tAPaUChhAGYwCzz6lurEJB8QXiJEcJgYBkAsB4WHjXKADQ9DPy2AQYBaIICYgyPYPIEQiDni7qIX6Pdr6SHCNANuScWqsFcEcLov9UCOBnkcGy_AADEABOcgci5HKwEUImAIibzCmnGI4U3VpFBD0UyPh-kbp3S0j0UucA4CQJgJGYUtC0BWLGg_ScY5sIzRWvAAA2rYpyViAC67AAA-AS9j9B8YAkif0zDKP7EIP4Bl4Af26nvWJh8Elbw-snAy5i7D42wKBdAdgpaZiXi1XGhk0ShClMKSMA5KB3EcUTWsDI4Q1MHHAT8jSLATFsDgVEWRupONxkM44tgy6wAAX8FI0QtJXAhlAF-wDhm437jQbU8AYFIPulcfgAAmVyDV2AAPun2S8lCtL5U6UM4RWlLBHVqvwVA0zexQAuSvJZMSD7xKsdskArz3m4yIOg758tfkgEWf8wFpFcH3NBeC95jtyAPh-fwS5kS3m1ggM0VpdS4BhlUTcu5DT0XDO6bivptA8UiNufMbqtS7iUoJfMEi7y_rwqxXS3FtS4mIgcbZS5uNSW9NPhSrlqSrG0raTgUVXzwmosuZinqHKcCQogLywZ_zBXkv_Cq8VNklU6tlcSka8r2WSpVdCol_zayauFdq9B0KJU4uVfa4szKlmsqWQq7F9KWAVA8OMv2tCnkfj5UagVhIhVZBwL6sZMAJlBvuo6n1oz_VxsDVM-6brhkepJRG0GIp2pwGyn_AA4gAVX6N1QV-aCCFuLeW_oOAPCqEjKSjpRrq1YHInW0tVa81do1D2ktTaW1tqzUMwVfgMCwFyp3R2IwWGuhspOyoM6uh_BgAu1hI6MCtsJO23GaLcZDVcCMSMuhT5oAyGSNplqlmCpPSMEtmQZh4HPSBVwV6BA3pxQe2sR7awsWljqLg-o2g0Bhuq8NPTH17p6WeRwNBP0ugEB9JYNqsjvneYeUIWMcABUXTQYethQJRhWQQXF54AAa2VdSiksAAfXreh_t3ai2lr_cMnDeGCOsOI6idIqHyO4v1O1bKTHRTngAGoNHPAAdRYz0qd6A11zs3YRggnHjX6TKahYpcnoBQDLagDSt0CCQcuYKhDH6v0fV6QuSh7UEjRlZm7fgnI8UaX9hky53GTxdC8zADT_HSNCdYZRmjdHGPMYJD0mtQ6tPHtOLh_z6lfhBb4yRwTkZhM4FE-J7KkmZPycU7i5TqmN1bv0FpgDFggPFO1FwMtMx0BZAsx2iNsGrNjkQ5elDaHYtkttVh_9LVVzxfYw2iA7X3nRJflAZoy7CTjtxl0AgriXRjH3kQGkkZjFSi0pGLoNsoD-yWF0dQlC71WuiV0MSNlgC4nQBMK4MiACsrklibFoYQK4AAOGRrl5AraWbdug0544CLsDZPzNAPiwKC1efQT5If-DfCD4ZU4Mio7JWOdqNx-geHCNY_gT2Jj5WcVKHAZO8CJaWVjpC7gof2drQTiARPaAue-ykQgFO7uo254QLT_LayPHYNEqUPgbIM5x6eHrQssDmd2egdzGOhli8l6eGeHh4hS3yLQXUcJg06NZulAO-xlZWosBrgguBIAJHMnNE3UiwCu7d5bq3Nu7eGfFFKSMn32AB_59TrgExzuUPwDAH7mnMlW-jm7I74PsdM_8EsebYA8VgFxX8EyF7kMZBwGgFDAAJSw-ph4SxF8M2hPwuiNevPkNqVwKlAKr0MuAcRYAGee3gK4weadwqtx3-IMBi9R55wQPvEfBdsLj6NNXq34AIO8zLlPuKIgfzLaKYeLmBSuDSJIcOKRlQ65fuFYK7nenkheE-RQb4PF1V8SN7NNXSm1gm_WnLrDrtDLB_d2yNOr2H2X24-v27AAOQOauYOEYjOMcxsMOyWeGMCEotApyWMKOa-6Olyq-cBuOrONCHOJOIANOfOEeNOdOFgOBzOL8-BhOxOXOoBogYKlOAujB7alykOKQieMBOOpWme2e1UeeX6heqAJeZeFeoaceNewoMA9edAjeqA9w4w6IreYaTSneMA3eL2LBIePeg-wyw-sAY-0eU-VOM-qK7BRqEua-3UVBqeRo0AdAgC3UxQ62nE-wFohEkYAAJMAN_Piv_IAnBkNphqNFKrOMUFAYIuwFAKgLsAgUeCeMgVkGgcjvwGfCAJyEsDALHksrEdsNGqMKgDPJ2N1Pbk4ceGrvkfgF0ItvHv4DgBvlvFvjvvwHvgfkfifpSOfqrm_tXlirDqjMkagd_pIVbt0AkSlnDsMRlmkSAGBnkLMWxL0WoRYP-GgC8AsS_Bpi5vbLENsBTi3uhioUsLiBgKMPoXHv8gHjcUsLcUaPEAsg8fMkAs8Qsm3lcbWHMk8QHqgKEIuAvrWNUb6v5AQP1DsTABQSNDCC8ZwFitUZAF0Bpj_u8giRAEiawi5tQHsTsCsSyquLVtMNOjALOpVhCaMVBrWNEptuZP0jZORtGmOJ-lAGrpqmOLSZzjScNgSX0avL1vnqhiibWGtq4lrPZrAH7oKrUQIbnjZihs_tpquGeKPOPLOM4DMEXlGEKZQS4pxMcMmOKZQsEfwTgCUXPAqTmrWKuAzj1NqUWIoVMBMOpBMWMVavNmctQFouWCClIvYG9nVHVOFDsiikasDpctEpSVximgGpMsGqin2j0lqmriKXqdGKsXWNNPbP4JYoAgtFmRYlYi5oRHbHKWCJkWtB8bWLGBwPmTmceHmdkoWfwMWTEAQLAO5mtH4WOOAoEceMaVqpyPIADHGLyXHtWc4mAHwCADnkIShvwGYtmVYg2YuUEc2bMB2RILuLIKOVbuObWUuZtI2auSAGaQUIHBqaIWWYOROVOaeRHCABTJ8cjCPLPBPBZPMAtPwMVGgPwEpFQOIp-SAFIgAOygW_m-CMELR1SuRA75ih54BQUwVKSEzpm4zDnbnpnoWPm1gWm8mPrPqzBvqznXofL1Kum_7RHp4JlwBRFHCPLHJQB4RxSOEm7SqIgMYzwWjHZy6UBmwBiGKXL7aJr-EiLMUBp9l2m4xCWmLJKfKIhiVpp9lsWKWQnkVx7RLKVWIewKX4wPaVnDL8DEbqhCj8A_IOxEAcWUBcXwA8V8V_JPm4z8D6gzC4bxDuBTKmUgqCiWXWW4ppC8U2z8WXFx78AlphCgSJw_IpAEA-XcX-V2Vgr6VDL8AADSIwrgAAWv8aEBaEcvEJ5fwNsCZKgLFTZfFYFfZQ5RYPwH_BqPiHJvAEwT8qgCMKVX5TAAFdQJVVVfwOjEEOwByQYj8lnm1bZRVYlahUsvwOeP4LQHqfYLMENSClsKNeVV1RNVVVaSALVSKJsPNYtQVSAAZKtR1QlcFVbvwA1QJvtfMIdSMOQCdZ1UFUlZaXHimeYJpYAtpY4XhB4p9ceL4oCRYK9UsnAAWP1JGOnpGhStctQNSqpZGf8nEC_CCvRVpPlUgElYvm4eYGjc8kxY4UDUMsjd0PwMpaZVjcKbqeYLJdyjAApYWVDVqlKikjKseFCe8iTV5eguQJgg7BZBTZNZjtTTNAuBnszeasWOwAANQgqNF1JPUe6fHgyQyT6U06k43sB_EJBE0g3A07kWDRI3QJCij7AwAlodUABSgVCl3UactCOAIY7UDQf8MtIKvELWW8fIIAbtIlWkDNQRlh7yUNypr5apF5_WCp7yQqc0LmIJpciQFO_A_qpwBxmRbejRmQihLwh2UdSy0afQwakYeyrkedwyMdsAWJJU2CFOdUQdoO0REQCCMQMwjWHANkMx8CiCMw56R57NuRwy0SYwNkgOrktFvg3Uf2MF49XgNwkQ0EjkaA3UgOyoYusURwsAaQGA4Z0RoShAC9Tk3UH2A9xNpZAghpUoTmUALmQcl-AW6WPmVhlFscHdZ9-Gcw4ON9bm6d6Z-GBOLmA48AGQ_sha8wUoooTySdIAhCaAAAmvqEvceGOJfg3EQTrjsCkEILdOgCWeIhckBW7u7j_XHn_WiC5pVuolgFA-5O5PObLZGCMNLXvdxIIk5GNLLfOXQz1HgNLbPUwgfWgJyGXUMh8NktkF_cHBek7MwS3vXYPdEf5dbdQCqdON1GKXxXtv8VAKbcThbZQEo6gApVCdEjje_FvCoxkEkmOG_OEB_N6u0uPa1qfBY8_N1B4oo4FS4-htzLY-Y7PBkIDQbTlLKDSPhs5k464C4-0o0ZsKgJoyYtQJGAIlAIyO0nJG3tEh49QIkjZMk6kx4q5IE-mdEjPHEPdB7DY1MHqoIi_JU3Y3k54o_j-vUsqAZTplbtJSyKghkGkOgF6QZhMHJjYJznCIiDQJJQ3UcN4mgKKCWjeAMurSJFcJ9osyWlcDsm9m9udVajeMsy9UldEjtjUOgKKN1DYqEjM3MzgKc-rDUtjtVm7Rs29mrD1NBa5GHPc-M5yJIG80TbjIcxAMcyWmc9M6gLMzeDgMC7c6Mw87LU8y85GG8x80hNVt878wc9EUc9kPMzZOc3YmC1c_M9C585po85swi0izC18z89PUle9ewMUI5B4D4cAFiyc0oL4WyyWhy6y4C9i6NJEW3nrUMp0zTWOGJVAF6ejJEJU62j46S4jf0T1KY-EOwBNOFG9sI-8vS9IsmDIsBQGdqMRI8N045NkP03iEMy8NYm85-I8ArCkMy59oGVs3VMmH9tyIYp8V6iq1MGIDZOFKXXSyLdIsFG9gDjssmMa08GOPqD0-awgsKAM3gFa5zoDna97Uy5GI1OFH9ooO9p6383Ccq_K2qzZJs1q_TiG0BW9smDeK5Bs9G6a70xa4M8M9YlPRmw68y41DInm26x60rVbj66W_6-wB9pW8LZraGzeNqPYA2027G_G304mwIMm6m9YsBaXavZm469m4oAGcBQe-foW5WSO-4aq2O2G5O1ctWyBfYOeG9sFMBYu9xMu62ym-25GIG124IHu41G6-FAezInXUO1aue1xGW-wMFEG0Lc4tO0BTIsmOeDIrm6-3G2ayu-Iuu1-xOzu92_7ge0-4oDsoGae5NRB_sFB8mJq8Gwh1Iu1OFOeNqH9lG0nCa0u5hx-xu9m9u_a3-8y6BQe8BY1DsjssFOR961ir69R7Bw5Tq0BX6XFMmO1HFOh--6uzh9a5GMmHx7u8y3VOJ8B6J8mKB161cQp1ItqMmHFOFPYGxzu7DaIqu7rUE1JbdAdl09Y_K5GIsJwBM_I0cL60W4bbvQEagPDd1EzbagynDXciF8W4nlSnctZFdA8sGhjQF_8hpazTys4TDizXUhkDEDZc4IVrqDJn_A-wlwKqWzZKU8GhU_K39blypUUw5UpAuCjV6k55F5dJIiAOTZkWpU-Ycy6llDZKgjzXzdgtCr54V3CCVw44szJ_V6cI15QJUx4pLZgO10-Z17CcAGLs2dN_5PzYnb8nB-5wk2K9xKd1ghZAig-N6sV47O0iN5tfS3Sq9zZdlClcPFJtqH_GWvqDeOeDV6Nld1SdEU9zkJN7G_d-d7D_N99yKG9xzVbqtzEet-U5t817D3t58cK9qyLcF0K23qK6vBK1K7KD2XE35xAFl_843XV6vLKwzxj4Fw4QkF6VYwQNT6u9K0QLK765z7e5rfbpKy5-T8U9EXxR_HFCgX0PAETV6sbdo2bXowYwpSIWoLqGAC5vLdbOtWNAAIRXQWh122SPBWxPWcB2CLG0TaLUBJDsAqptxwdeqm9ZOoAfw4CUAeCXZShwAeLRdRo7cwBP6LPvUJc-85MmxPU4BgBK9dCRhx9bxLDp-nz--B-UIh9h8UoR9P6uftNWry9byK_RDK_Q6jj6OBV-_J9V_HYn2zbRG1JB-Jow4Gn-UYdlPVIeaQAEBVQ1SRgeIjBfa-KZ9W319bxi8aXRD4hd88XZQL92bt8elxPr-ecfgt9LJr2GbOIiJwWFhOdelt5BwX21rOZ1C-H7nHlOcdnFA3u4zRrpLl-nyV9uHwDP-1g4D6BalJV368wXdGTQX7uZAB0QMhvwFrIU47-fZBWOF3cw_8LApDVDF-TRCUBtgBicPGog0T0JV2yA9gKgJcyS8KcZ4AXuIiF509CBxAtoirmYKitfOSwRnh9ws4i1GW4XC0L4QgDyBBWcHUaBAP_q6wKcoJWnETQyYs8L2BAL0jXw8SKt70eSH5GBi6AEh3AEUN7AAFJuqceX1lcHCjhQhWigeQSSkUEgpA2Gg9gBaHUFaCNqT5XQRFFciGDjBE6UwfwE2YWCrB5g7QZj3lZXBNmTgpKrQEVw_IPsHg8dpoO8FWp7BH2AIXByCGT4QUYbMIaEMiEapfB0HN7LEIcrxCfkMHMIUkNSHvJ7BMHLIXYNcEgAaO-Q1yDYO2YTp0hNHUoZ8RyEgpdOYQyoYUPvT1DHB6ZJQM4IFTlDh48AOwBMDUGtCOhJKdIXVEyE9DCe_yCnh52EpjhBhW9dAFRlgaRgWBfQqmprQ8QbCNBmrIwHVC3ZfY3a0FN2k_BfhkJzMEASQJqxeYwdZh-JWXhvVUTg4a-F_d0pfWv44Bb-fdIgpvXByP8aBETOVlIJkE0D_-gpCAR_V3TtAUgb4QQWQ3aBoh3AcAdejaCWBMD_OsMS2FnTgClxOcXDZUq8IwBrCNh7DEFJ6xvYAiMAHvBykAM_oIClYxDJ8rQJ0DZJYBfwlzDSPoFCNERqGdoDTh8jsA9kNAyAQKJnzCjRR_Ip8N5DuJij_67QRIMKLk6sjxRJAwzBTg2GktuAE0LYVO1cTkDDMNPGVj5xeCNF5WYvQ9NSJJEFIGRsI-IQiLg7ED2gcojyKqM-IujlRSwMjoAPiHajYY5o-ITezbxeoC-_4Xril3N4DcVUvNM7jXWG76iZobsS_lfUN7khJQAcUuOXHAFQ8UBII9_q4E_7V8IR5COzLMGAGPhLYeSXMZtRQHqjoBHI5gmTVLiIgLQ2Y2uCyM2psiKolofIDVCgaGcvItYusWyJRGKF0RFORgegEcTyw8xFFI4GMzmo_oO-WkewJCIh5Kt5u_lY8GiESCNEUu_XEFNlAQSJAUgJvVgXWJ6CQjaUp4jsdfXQA8VdxAgfcVQA0RoAsgy3ece8i373R1x5CR1KuMSZLiMgVop8r-LXGQiH8_iC0DZEM6bj_kCnccfiLaxcMIJnpG8Rw3TpJw5xV4w9DCRRpyR-OaCRBCeKSDnj-KizTmjeL1R3iSE24jqs-NfHCABAgUT8QU2L5USlk6E0RDRI-RAS4mIEgQGBM-I8T_xc1aCZYPLYISSeCHZCQSKILnChAAk8SZYywmFtcJeE_WvOIEHzi2R6AC7ksHgg0d1II47sagxczxCQ4BkYYAICgY7Yuw7ZLsVVUaJ5JfOsMM8KAg8B09Cyj41HktzTxi1oakJG9oSTZQ9RwxsXCLlGLS4gBYxM3AWomKSoEIiEJCK4RkBfh-4xeYUvfpIBsBdhgggiCUEaG0RlMto3sYTOfxTGfCr-19eCORmISJArygAgsTPw_4p9v-GdSER9GhGViAGYA5ySQwbEgB6BZIBfgqKgHsjsyUDBqa4Cal2TBpVuNkVwCnELDDsHPS8VbnpbFBZp80rgcAB4F8COuE0tAeAE1HNiQAyEp-NIxoGJNmygwDqv7AWlLBpxzApnksjFI1TIwxQKRE532mHTCB0dYaaiCEBYCLQJBZgsmEBn50LJ_ASXhaDqSSgExdxHAB6wS66T6Rd0uKQ9MCyrSbuWIzYbwFnx1im63dNupnVRE51Em3IUQMTK0kF1Mg90YujBRplEyuJKA2GSAERm81EpPouRlVVJkt1yZhAEgGn3ZJgJwuvkhbj9zgCBSFswUikfOR-S-1vOUggmYrJAA2DWZ343_pzNgBgAmCmIsUgyX8hpAqMGs4cenVpnsyiBnMq2FqONnbpTZMAWBpYJFEes3aZNKhpkVVB0yriGM1kVjNMwvwLcDAtaYkw2lJjj0BpL6T9L-ncDeB0M8usDIwFgyIZfMm2RXSILwzuZyM-qCJOSrziwxQU5mpGJpRHiTupEOMQ9wu5jQY-bnTHsIDJlsAKZ2dJmazL9lXiGZRdEuh3Mzmczc5vMwPB0k7lW4A5norGTiTTovTw59PN6ZtPA5YpIpMaVNPGgzRaR3pVqeuTpJW5NyhZLc5CVTLiZ9ydZ-YwukzN7lszR55k9xFXSRlDzt2bM-cYszBzJdy5oteWaXPC7w0EJ1JTdINQQk9dv5h42KXjUeQvIkpp8rWv_NtQLMoFi-N-TCiG61CHK_1WqH5MHAyycAZXUUBVxdoPsbZxPOwaEjSACAGEqISIOSXQjXNzwJaBoLqD_gMZ7AxedqKWnPBLAuSmGGSU0hLnslbUkYThbQALn4Suu3QIBYgtS4Dchum8_5IIpdJRytpwC-YD8ninxih5Ns3GGgquCRS0FKCp8gamPBXAMFRXNHjZTgCqL4geiz4hHyuBTcq5CUnBMWBR6YLTF7SKxf8iIVNCSF9CRhJQsxK5ZJMdChhUwpYVsKOFMCrhTbKZp8K2sci4Rf-gIndAiJkgbmvYrUUXcbZlPOxRgnSXI9_J6PBeVVS-4uKluOAP7gDyB4g8we3C7SVpNC50UIltAOBXUtvaIKVFiPbBBaFYCjTNJLSx-K12BQ6KBlgCdxXHgMW1RIp4y0ZVbhsUfzxaMXCPtMvA5bAkUq8NBGkprnI9jFi3dHksqGSeKriNCOhGQt8XMJ_F4WGhUEsYXMLWFJadhdApGCDV4ltS_bjey97LzoyaaWMvdBkVG0RwNkC_hWMZHgAZCNeXULn2ZFJyiBw072acTdm2tFmbIwyfVA9EuThp6clFaivpHDTzCkMrFWqKEFTSLE9k2YCWRoBCB5kZkq4rFHtFVjoGIsqAIgBkBUrsVMIulRzgiD8UoVbImARdPPEWh0GadblQypcznj2AgqllYHLiaNj9ieM7fjNjqWvzGULpSKWXJyI2y_5jy21NkVYTjoNV0RORc0r6U6k2lcy4KVFPhpGT4FtYLRWauZq6KNFtYcZdopLkLKgUIyx1RYBVQNAI-2oF1Z_LdVQpiwey-FCsvQD-r5lUaWHiGsh4tKbZ4i5VZIpBTSLClDlORRasPGo0MuECmpdCVEWJc1VSayuTkprnuZU1T5dNYWqkWtcwOdYy0jbKOWkLyFTCKhWxEuX0LrloSu5eEq1WRKoF0SofvwriUIT58MvOPCHSWFh0Ug6pTUlCOdGcz46c0qBj8BdB4l3UuFX6C1BrTHAYAEMf4hRBmAkQWYbMerJzEqa8w-INEfmEBCkZgQIIUccWLZEdAcwZYk8LUIPC8AiAQZswR3I3EvggBP1FGFEfhF9QEBAQFiSQIBu_UzBlUaAD4MSsMSLw3Ec0OwE3A9qkxsg8G3hAvFVj20M4_63uJ6Dw2DxhMHCSQH3HCzKwU45FM8Kcm34aZZZSpMcPvDprHwt458MjbnFvhUaVYUcdVI2p8UUKzlTsdhE3E4TcJKVAlOAkcGUpsbT4fPFjakjk2uBH6lPOAdYlBb2A_hP-ellBuA2_rPEmmv4f4iCTIbsQXiC5qImM2BJgkRmlcpUXPgtRay7AEmPxByB5I3hz61iCUhXirhyk6IKpKhg5R2lmkUYYLayQjRaojVVqBzFjFWUKwXw4wkZH6hjIJoZkbxV4o8H6hbBtg1QNvORjWQd5-gMwLZCCj2QHIjk6NCuHRvuhJa1VPyZBW3ltWXVGqGQcwAtVuq2CrUzqkFElocz0bwsVwDxL4jlQrxCSp61ZKBnAzmY7Sc2MWtRTVy0aJS90BjT1N_pOk4m042fuWvqUwkN-DGtRlvA8S6x2NIAXxMdpADxAoADG_gL4mVSzAcs6ANILDGyBpALt5QDZCVvORnbCBA6war1H60rbwso6noR5jKlvoMgQgCRBNEMgIJ_wkO6pAjuEmv5S-RYF9SBnQDNYnG1iH_ISWoAaZCtn2v8VOjSA5Y7SXqf8KfDNaowGm8tUeCMHoSUg7MqgbAPrxcxgLMuqXSwXVHYD7RAhkWmLlWoG4c6IFWXNkoOrazAACt6yYraVsp2sMxwOABpjgOVUNaa1zBZrSACupzV2tB1BQFCQO6ES284u_7VLtYSE7Zd6W-XdTqV3xBGQI0A3TyVR3UA6e8NewCTusQI0d6DS3tU0oez1aYQjRBXTTrt0wAwyHWRMjEs5KNLIS46PHagFJLzoydrAgTScqE2tqKMeWMTBJmkyyYFMg2BWXHt5L46B0BaSbMnsRqp7m1fi5HLlmoy0Z6MTGUtHwQHJF70U1pJPEcAVVc8naLtO2tQHTiO0DQztP-OPWcGxb9AD4JYBdXTIrzUt686gLUOl1FbNkWkWoWqtqEOr0yUy_Lctq0g3bQy1FYKePV6ACBFN8SePrJob7QA5q2o9SIGNoBEAcAjyY8FzrQWcgOJyZEWmmStTVlsKwyJMKmBc0wQMNOQZwETvYAW0UMxuSsKmDbx7k_hy5AsseXREWhMGbQIiOWX_3_JGA94sQKkSzANBtQlMPA0lUYBoAXKUwFbncinLxDOG849TUgbrLZzhQRAMlRgNF1KRFmGYxEMMEGgZApy_UQRJaGIoLTFmnpD3QtAmITQTd_CqXUjhoCrLrdZ4W3SkzD2DlFmKFMcluWwMAHMyiBw8vZpYMCA2D6B0IJgcHK6GcDeBjTCQZIRWH3kjAGqQuWQP1lDDrh4w2wYvQUqOyvSzag0ykPm6Zdq-6gAcv-QSH3K80YAIKnx1BGV9X2iI7OH_DNpd0baCslAoUUxa99sR6hV4WtZyhdRO2opd_sYB1JE0WAxIAtHyNKQAjB0x_Z2WqNSAyjWkMQFCpZRtHY1VVKQDVIcNVkdD8B_Q0YaYNNkQVJhtA1gwsPpHNquB-w3TysApcpApBqHk4cB0uHmDwxlA6wfYM-HyyfhqqrUbVVhH3kiRtIAtBiNgslFMAd3ZEZ3SPg0jvRuPOk2tVrE4jROrSHTtGCM6X4zOiMFgDZ3pcGKZa83tzt50HRPVdYZoyyACMAmqt4gEXU0YSOoAHjY8m2aUcRPi5Q9U5IbmIGUoIn7oyJ3_ZCfMDQm4pHSxKWIAsXnc8TLRymt0cB3ImsKlZBRUl0TXAmYTzyMtftD2NPkEDQx9w8wZIFbGzDkxgk9YfsPn6MoViRY_YdRPOHGD_JkY6ge8MIJfD4J2o2gqOOfETjUR6QwXpoKm7bVyhxXQ01GhKRRTY5IkxibUNTlxAzgVY9nBwDUnqA5pq3JkauJX6t4oJj5Kxr95eFlKsMN0_JxFponyjMASo8AGUrP7AENRzExGda5RnjwnZSMy_rD1OmkT4J60eCc1M4HGI9JxZoycmpHHmTQu1JSWvO6cndo-ZwYx4Y2PwDRjphiYxuVRN4H1lZZ7BIckATSny4LpgA3KYMPqbBTYx5U5we5NaTaj4y7M3Hm1NSHYYshyXT1qNMh61DpptVuCZDOmISTtp-09nDTM9n_kgZq3KfolOyFPTXJo86119PoJcUXhFVAGYzNVtNa65lkBUYWgqpnUpEKxDGetOst0E751VNGbEA_nSIf5z87ufvPA0Oj2aVE7meW17mCzRPBuWhWrPrGFTmxoc5sFxJYGkqZB-8WsYPIDm4ZWx7LTsHbEkImz848g6gEoOjmBZNB6ARhdy3eB6DLS-UwRfrN2wGLFoCg-EFVNQLajc-r5WltCM2zpzUu2c5Fqj3WJFonytecGiuCLmPgDF7ICuZtlaG6xu0VAB4GKjKgNLWlw9Y1hS3dBZLtWuDl2YXAMn-jk1XkzWdQt1nUDwp8iw5UYAcqWQ75eaMnXCCcr5ynpB2DsDOMRpqAiezdLceCLXlWLXI5OgQC5WeyfaXDNix4Cithx-gDkWuSNDEBBWRgUgFy-masuWXPi1llC2xfsuNmsLpl7K4dA_IeW56_FGi1Oas37F_LPSEvWxnrQhW0jtVw8_2YisAaorZarCSCjdrxXErA4PfC-LLVrRzwpeqYIWhyilosrnl505WXgu7lkL-F7q8VYwOOWeTNhtzZlBgBmWoAopgq2taMMuZ1INEIEFtemPFR3AgF4oE4YgNMQpyvhXvX_HkBeg3NH1q9ZoHEDdGidcF-I9jCiXDARg56h7YMTlwXgFDBAO8M934C-EJ9ih9AM1EyJGDwTAl4y-lt8IY300waJQOCYD3w3gAhxpLaguGWGKQUvhDU6Tf0XuqKbRNiczTatTz4_rsusQHUC6A8HrEkgaMLwDslmAAkvAAW0LeElPAiARk0FBoYouMR_IOVpy3ld3IK3HDStoZBur-jbqVa-64AzMFAOZJmYSgVmEhDzjpxJALOjQALGAh6A71EuAfbQmi0gpXrh1QgLcHuCPA_U5AC0NkD8psh3gAwL0NkcUJWgt4OeEMmig1u7rVa9pdOF-ANsnq9MZ6-Vhepg2twb1QsO9fEPIqLEBAgcQHVcBXXqrN1qAe7TMAtCtlYA5FXseDMYJXAvAg0cdFZKwQpBnI148hBEhaimkp155WdeRSFD650tZcE7MTnHT6yEhnecgJGFCFuyPsXkLTFbC-jxBx7k9qwdPawDto0U8tZukgj5R-ze7R8q4APYQRD2r5T8_oYrhDgOwm7X0DccfetkrxF1yUTgMUSvQCrSm2wX2SfZtUBQCgVwUKFgHfvWy_ZvYq4EOJ8DEg4AOd_oGAH_urhBVZhjAFcBGDtt37d92wBmIftoAHYLoF-6nXHReBWJGQZZl5Ggcrw8H04LiuPDyBXBPIf9m-6uCFBoA5qntwbVrTQjQPiZ8gY9UbeEym3fj167QLeoMDgRykIkWhR2pCW3LzwJuP6UIaSPKxhHNyxvYVlz3yYTcQhkUElbUwjA5HbUKCNnqUfFY5MJuYsoA0qzaOHS7AAAIploGg9gFKgxkkzOAy0w8SwM4Bz0GOTcAAR1CD7FfK-68ByY_nQhlhH9eqLE3uBYDca0Yce8iRGCeRZG9jj7KOeFFByYiDdy6LL2gidTXA45hjIE9jPBRP54W6qazur3VQxyKgSsRzcrCWrgFH0WIrHnvBT5Y3HDT1cFY5sd2OHHTjlx805KyrgQnij0tOfBjvKA2Yt8Hh2oD4eCwrbgj-9cJBSAeOK4mcTBoRQWel398IZJDYeUdg0AL4cELOMbdoQhkQYxTrskPxQLKap-Zz6IMprijCh1wgiPGz3EkCZA2x69HO9c5DLbrTnUmEQGklPj6hLnPz2gDc7udOgHn90S59BDQAr9XFuz-iPs5ecBw3nrAX57wmOd8azwdTDPmz3lYK9hQV9BjXC7lqSBfWnzk555PodQwP4RLhiMVEoA36yXGL5jUIEwZDCgX8ARwGZhpf7PakwcFF8C6oBmYjnLoYp1krHA1b994WBVfSz2IngvHGQRIL1FXDyuXxtihZ8UFXCUkrtB2xGh9st1dV0UlpS0hq5rC6Sw7or2eavBhcWQZB0rkWrK7hwqvFX6qJ12q6gAmvcYWrhINa7e6sDXt8AeQT8EwDOCUzbeMuB4HXQQA4y6Zf8ocBFzCsQaRr1cB64d2Ob9I26sVwQGPPKaFVOXOSn89cBuNGk8g9LseEOpGUhQJlLrVNUu0eAI3c6OMkgBBTDwGg-oDocWt4RDa7Ig3cm0NUMqiwq3-4Ukx-cAQU0QALb_UMmFM5uzn0KBSxiWggCJB3AEAdgB4gXdLvSII2xKsO4gDQox3E7qd3VF_Jo2e3-bqxPu4HeUB8G4y_d626nc7IZ3COI4IMNPg65V32obxwzvmTbAZ4J0Ld0O4j63vJ3yYYMt-G7doKL3xlK99u5veY1x3d7qd4-7ndHBLAJkdwEEHMAeJUP6HugP--LV7u4PB7qd8e_A-9vIPlb6DwB7pt9v4PwH4KG7JvCuALQ2UPwNmOFDpVV3LHtyng_Sp4ed3BHxAIZQQ8X4wPZNMj4R8vfXvqPQHqd88ysEL1_idAOcB4mLyUAvbA4bxwQD4-AfCPCHzIaJ9Pd01z3EnqD1J5HdlvdPk74KDzvk95APxq7uNhYg_HafxuNHg99Z5I9iez3o7kzxR7M__mLPgn2j8mGCgPvbPp8cux4jQQReA40EfIPkBc9BrMAMn0L558M9iofPQXitwrX8_Gesvd74KNrCsHWB_igCUuKu-sCUBhgG7k4KEES-7viwKXtjr0K89GfMv_b0zzB-k-WeQv9H-T64G2B-ATgq70eN47sCWB-gaj57PV4E9CerPInlr-l7ZpufJPXX8z257vf-kGPM8N4D01XfqJ-ouGSQPqGSCbwBAmDlIDN8a89f_SaXiD755y9reAvG3yd29jC_sB2oUyR5N7Ci9w6CA6gG4dBDbJuUrvyXm76B8W_3esvq3qj-t5k-1s3ZYGK8HDvffg4hA2kRrNsCmSwBQfL3mjs15PdQ-Ovfnp73l7m80c-vOURNtsHSouhOPjsOanACJyORcf8Phb4T_E_Q_OvsP57_D7k_sBBh8wWALlW2C4YNSI3mAF4HSpY_IglAVnzd_0-Q_OfxPx7zz7J_BfwoNnqwH4B1wmQBQzaCrzr9cB6_qIEAeX_l8nea-7vyv8dzD-LXq-D3QZN2YL9Y8j5V3l4B2IhH8Dm_yfQZa3958C8q_B39v9rxr8p9gZMB5450Mp4ASfqiAxUdEC8B99h__fbXwP7b-58h_0_jv_n2BhYAaQEg3QDxH_EsggzhARAZPzn9T8Zfs_dvndw77vf6CGPC4JjzeBb-ru5MgiaiJ2Er-N-DBBnonxn5J9q_Q_jv4Coj8oDY-BvDOx5Jx5EDPAxwGU9EHAF7-W-X2A_m39l-D_1_R_rb59lr_PCvpqQcoMDNj6L8L1U07AYvFdtX_7_q_y38j6r6z8vfn273y8FG5yRfqx4sAFgKu-fQB9YAZ-FawoAW_2AoIfDnwD8VvTPx39s_Pf2AoivYA0G9QgdAHCA_AKICmRV3P-BSB0qfoAowzffz1m9aPZ9gJ9SPSAMf9t_WDwt9n2Sn0V5T4GXw0hV3WgIG9zxBgNAD2fUgLT8oA4f2f8gPZ9n59Z3LIBQ83ga5yL8bwPoFIU0RDUEkBdQPAFCQ-kdAEkAZqa6nMAsIHXAoxI-AgOu8qA4CkV8RtQ10HwS3I6ky8QUZylcpS4WcAyJzqdIjrdI3RtyUFsodtx3dO3Vdw4Ca_Gj1MCogcwI8pSfUP31BsoXTi18nMQIAdBh4VAP-IV3DxEvBQgGn2mRSISQAWoKVZz00CwfILz8CAg-_zy50_DwLcoLA3L18D_AhtkR8GQbYEbsOPSIJMMFwOX2SD3AgoPADXAh_zg9sgrwMsCeAxoIKCEA_UEG9qAYbw8RsoBnyHgSuMAGT80g1yBIDWvNwLHcmg9yhaCYAmoN05KfPoKwBYAZIBSpC3O01f0PEH5ygBtgRCEYRhggoPYDxghoNSCXKTwOmC8grIIKD-fQYRiDV3WkhgJOVfYN05FfCAM4DJg04JyDvAkf0uDdOcKDdlGsM7iAYfvRjwWxDgJ4Nch-_JXzIDGgj4OaCLguYNchx_KwRLRfgNQX1BAgbYAiDi8H7H9hBoESC4A0gcEPX8oQt4JhCzA84J8CfggMn-CFwKIDsAPENZCgA6Qp4IDIMglSneDyQ3IMpC5gwzjdkqINyjwBYAUiA78XgHXDiIWQuoKODMg9wNhCKQ74J5CEA8yH7grAOADwAGdJpSi8uATACgBmfS72qDJg_wLdY2Q9XymCuQ-UINDTOSn35DBvY3zoAIgtvwWxZqFkMOClvaUI5Czgs0NaDUgw0P59rAc61sAWKDxDSpXAfUEFDpglkJeD6gt0LJCPQr4K9CnKQ0L-CrBbUCOBLaZwBc1hQTAULcovFAP-93AVwBZDIQ14ImCYwz4JmDKAhMJA8tfawDLhC3d3QZ1oQDxDcBm0DQKe9CAtINI5jQ3wNlDPQ2YItCxORHy8B-Icr2L8uuDTyT99QtoJA9JQ10PZDSwuEO5D-whALLQiAAHwwB7QwRGCDHgycO9CQPMYNnCTQnsLjC-wqcPE43ZP-G2BIgY3wiCLwq8L18ng8Ti7Csgo8PLDuvXcI2YGPPIDwAicHYH6AntUQK_Cfw7YD_DCQncMrDG2BQD0Ds0AwJFxS3JalCpwqJT0cDw3WwNq0m3UKksBHA93k8o5BKULnCgvMKmJx7yc0Lg9zwFKjLQ-Q0XwEA8ART2FDIg2ahEhKgZPzIiy0J8Jo9CIiKnhCx3EtEsBQvA_yIBjaO0NXcpMC4DtCnIPULbCtAjCL4i2I7iMQjiI-MJAAeI0L3e8EGdAAEQ-wKLzDNiuagGT9lIsTlki4PDiKQjFwoyN4jI2Z3yAZf_FTyjxtQ4IIkiefQgP0j9wwf2MiFIk8IIjeIv7C19T_N33sB2zIMPRAJAk4AEAZgPSK8ij3Df2hCCI-SMTgSIzyOCg_sd7wgYMAXsSjxMPFKPQA0otAHCjEomcNcjYoriLMjEohAO11ewfoGzCyox5Aqjco1jkMiYooiLijFI5SL-xw_DIFcAKoOcH8iLIVdwSDYATlT-BC_WqJdCCoxqKKigvS2mLx5mKwW6jkgE6HYBLaKr3cAXQJn3EDV3RaKnQVo3UOT9Jom8HqiEIsaNMigvFx2Lw3ZSwFVDafboDjYMBTjzWxbEAsLAiQAE6N_IoI_ZRgi1COCMOpgwrKhSZcqLeAgUrA2t3rc_gOwJBQUqDKj_gsIq8xwiow_CNSp0qH6Jyo8qAGMUjzwSwFOirBV-E2AafDYnfc-gMUJc0xwIQGYj0Y_aJABvo7Kj-iIvcaNSoIY0ji18pMUr2PBBQkcAZDkA9mOT9wYv-HpiyYimN-jkYmmPJi6Y3kKsEVwk4DojwDEQAIBdQvAE5jhY_KJt8-YpGP-jBYrmNI5lwogBMhcMQIFXcVwrWP4g5Y7mKNCoo0kKC8lYqmIxp4o2mKNjKfEHlCA9fdKjFD1sVd2v9WJAoENjSOEaMViEYymIFijo62NI5-fc8D19UADxzh06IhoBDiw4qABn98AySJSCA4qYV5ifY_mJVj_YoWKNikwq_3ZxbAXoEKQx4IyF6DhIZwE2A7gTlVbDHIqSIzjSOIsNhj1fc2L9irY6uNI43ZUIH1ALohfgiDO_EUG2jHotWM7CTYksLNiU45WOpj04_uPe824pIzojVPXEB2APYgyMHjjg-GMypfYtOKbj-4joOEAV3ZyhOh8whz23j-gDdAEAF4lyO9jV41OLHiN4umLPCrBH1UrFIve-PBwcfPuJvivY6KJXjEYi2JRiPIgOI_D5PBkAwB7YiIL6DF_Ew0EQXgEyF7j44mj37jIwvCPriR47-NVib4rOM6C0AtQJsA6IhakFAMgE4BGBUABeNriEE0Pwbj14xSP7ikQ_EP6hCoHIA8RRQWIDwBaEheOJDiw5ePJikExuIoS6YkDz5CiAF_WbRukSQGIQDJcxTxARvTsESAxEiYA9iQPZOIvjR4y2O4TuYxDzviMAAb0qjXAT9GGAYAbYFkSz4j-I4SFE5BPHieE22KIAKMTYD193fVEEFcRQWRPfjTYz-LXir45RMjZ-fXUBtCww7v328emQaJfiYEsdzViGhJeOjDh44xK4Tf46uOTAs4n1R1xdfdDxG9KAOAEvCwo1-JUTiEg8NITOE8hKiS1Y6zz5CgE68AiCP3CMArj8PKuPyTIokkKHjnEy-KUS8kumNC9zwrx2dji_VpLq90k8TgVjDEshNcTGk7mOChw_fIAsC5_Y8CEBEgD2KGT5Er-MiSKw6uLDY3ZFcP5cIg2d0SAIgAhKmT4ErJPT8-khpPmS1Yt73PDN0ZGjbIi_P-BOTZqAJMriE46uLe8ZklxP2S3wgOIR9MY6CBUxIjOiLLQ0QLYEIAPY2tgeT6kn-IOS6Yp9n-DlovwCzs8YziElAEEf5McTakoxNmTckkFO5jNfN2VkJtYovxX5_iDUjATVolny6SrfUJLhikUx5OBTnk6uKd9RYlj2oBzxGeDn9ZwBBAejAkuDzVi_fElMQSIklFMpT2UhAPagdcLxxSZ8gYSJfFvsdAA9jwoAxKcSyUoFJQS0U_n1qomUqIEwC6Uq8MlTtkwfz2SKUuHzZS6Ypv1FiUmdcN1ijUlgElTMkrVJyT-k1FJ2QDWJZKIAwwonCXcLvfeMiCogWcDs8PYg1kBTFEnVN589U7mLAC3ZRaJDiIgzoPtjyk_j0qS6YsAJ9STE6-MDSEAv0PYAbwO22eYEoWEkY9kgFTxSZBQ0IAZ0vU6VMRTtU-VNtTKfYvGzFRkO4MiAsBa5IqTbktWJE440uZN5SY03P3Ww1A4QIc8O0qvh1wvUzVPPjkU61NbTuY7yMR9YoGeGsSgw9KnRDewU3w9jvI5tJ5TdUs2Lpiko1uNDCCRGiJqhV3BhKm87ALNIXSekmVJLTTE0dIQC_4U-G79Z_YvyvSxQllJuTYEtdKLT2E09ITSdkVqI3TS4UuCnTzwVUM-MF0hFNfSrUp5JXSA4v7HbThgVAHUB0POiLjYmQkQFliukiDKXTh0sDOri_sLOIvDV0bMOwzp0B9PrSn00dItTB08lNLSQORH0qAhIqLyozN3LpJA5UM0DP9TV07mJkR3vYMI_dRfNDzuDT4JIxPj6M49OLSQMv1Pri6YpDnPD0ABnUkzzk6TOkyPYpDkYyRM0hLEzw_Qilwx_iVmLwgaIwFBnh5MoDLCS6k31PlTCvLXzIRsAov3sAugaPF0j0kkzMUzjM3hKsFgwgamXddYmAnsjDYwr0EzgM7lLQzmM62MK8EAgQLmp2AFKkwF5A1dzCydg0-AlTbM4j05Tsk3zKYzRMv-EK9bYonEFDJfGABMgGdVdwaAsABWk8yQvezLPTCvfnz1iBQJAJSZdYzWMqzsqIrN0DGkfG3RRDA0N3QjtqOqnYBtdZCJsCG3NCJ-Q_4OTChjSIZwNwidkmjx2pCwbrPTjBs5MDtT5PGQloBIvaCBKDZbeQOT9Zs71ISz0_SbPqpGqQWM2zVI8eECBgQ3AJX9How7LJjdsrrP2yZsuTDmyEA0UEYQ6AXUN3TnszS3ECNs-7PgCrszrOmym4zbMp8UqM8CFDMGNgEdgjgIMOSS5qL7Lmz9M0lOuz_sxSM2zc_ZJPgBQskQESTfvbAMpBYcnQN-zdqG7NRADs-7LHSrBCBjbIVgJsLHBS4elMjSdPIL1mzF07bImy_s27IBzSc973Oj0qCeAZCW_LoESB_E-nNc8x3JnO8yDMjrMJykcqJKZyOgjqIgAsBH72ghIARXIcjCM0XNJyX0iXMRz2c5HNJzKfRrAowA-EQBHDiMfqFAhoEx9I1z3WeHPV8dc4nLuz3WfnwgYNISxIuAMw6ADHhV3DKiCBl_LTwuzScgdMMT7cw2T1y9Wd7wAQf_CIKkwXxS3PVy4PWbLYyCcqbN1yZc-7PEz-vQFAqA7g_qAZ1qoDIAtBxQF0CwFYchTJZzRctnIdyOcvVkp9gsyxksAwgH73FBwc3TIDya85PL2yq8sPNQ5LImIItBLAIIHdSLM2QJIwo3R5FLySM4PMrzQ8tPL1YqExPPH9R4TvBc0yTbNLCpUAJqQqBJAE8QEi1sUvNYS640PxDyScmDgZjIROABCiZgYSPPzL8r7NPyO8onJnz5kwbJg4ucmeBp9sUkQGy0s8DAUiA78hdnLyE86fJPzRgyjMpziQbMJSpAAnYNvyA8mDi1yEc4AruyYOVTK8dsyFd2xCEgekLkwEEByFRF1suAtcgFvV6MPR3oq1E-j2svqm6BBqHrOBio3frJBQ4oZwGGzbAGGJIT0_KgoGpbUQWKYLAyLXxfcX4a8GU8ws13EdhsowhMejeC4lJqT2EzgpoL04qQvYzEZFdWU8JvJ0AJS1cqNNuTFCsmLkLuChQucBAyLeOGASglQQ8QMqWanR9k_KQoQL1fPQqyAeCwwvPxzwkfGsi1kdUIvzhQNJNZSgvKQttzQ_ewtoBHCuqDJzgDfIBngN811L9CrzF-AkKfC3qkMLmcmQolzAi7AUUjeC9dOK9MBRNjFU-ckfFdhDMYXKS8aPDIvFzSU1IuCLWOM6LBpKgoXyL9VPHFBizrCxItsKAiroGoL9CpuIyLVM_7x18lPDvwXBLwiv0kLEi_wo4L2irgocKDCkIsVS3Kfb0QzA0IaJGKZi3QomL5CrosMKKMqwTtMjciIDuD0gEoJADlihjMALfCtYs6L0izYve9GsR1P6KPENvwmBYATYGGL4ikAF4Kk804t6pziqYo2K6oDPMOQsBCIFdTm8ggBMhmiv4taLxi_qnWLLiv4tUyUmGIBCAcoYYGMRlPCx3SoLQdEoIytCkos2Kxikou-Kgi6Yvew3ZFjxSxYAEcJjzsgIooa9tCzYqDyZUiouJK0E9wCNz_ICRIMkI3JiOOLJ8xksJK0iqJKYLytCfw8c_AEoMiyhAHRx78Ri8rVWLoSi4sFLnAPZAvSccp0k49BEKROaLlSuUo6Kfiy4r2Q2ovAKiA-DVmLcATsOPJxKx3IUqIKdSyYqJKNivZFz8Oo3b0YCs6bYHXp_c14utKGSxFKZKm40TFdp-vCwNuhlPG8Bnh1IcQuGDWFF6KayyCuYSMDAvEFCUCddBwD11AYlCL6zvtH5HPB7AFgtGzD89P2TK2tVMs60m4m8DLQ4oT8Ndx4gEcFmj3fBiNHhziOIqty4PcsrU5PikACLKbqAUvmScy6Ci18cEzAE_U__TIA6iwAQvPSixwZiPsB-ysmK7LddUstRiZywoKsEwy-3UszEknRg1C0ocZJoJ2AZMunLoKMovV95yksp7LKUvstAK74j_KnTLaVEToAhcw8tGC5y2amLKOtc8vQzLy1TJKCb0gijQCKFTZMeivyl8uUCzywWMvLFUj5P4g5_B0CcwZQbICfKfS9hNPL3y8CuXKs40BHUSpE_EKel2AKTCu0wzSLPRIafYQFizXiy8t5LEUlCrTKly6CioTGPEGNRERQhIFGANILoCfKD89gpo9qKxcqiTLyv7DdkwsjEGzDi8VykUJYC8iuXK_sECpTLUK9OMvKZEQSraALQVYKIAVUoMKKlsgNoBGAnymRBkq3ymir4qZyluPk8PAPwFVCi_B8HCBEgXjyArjK6pLYSJcnio_L_MzsuMrVI0ONcp9vTy1yc6qQ8sXjki0lOcq0KwziCzYEULKjxIsyICmR_KyEu4rXy7spCrb4j72NKt0iIPMgfK6iKjwXilsqC8-yx8I7Lgq-SuMqsM-Zy_Cyg7KGyAWAGksID8qyiuQqEqhcpcqTy4yvnzLwuIgD4i_JzFiAaqquPyrOK8bLHciqpuPyqBKqwT_gsALtI8R2obUM_RduOysM5pKwqsaqwK4qrdZTM1AEmq33WBjHBnit9w8QNyw8D0SFq0zn0rEqtascyVQhBFp9swhvIEASgggskq3WY8tD9hq2itUTGgOIlp84gA-Khg6AKoKer4swKpPKVquSpGqZykL2d9ogqdAB9V3Cx0ZB5CDZObL48vKohr8SoatBrDK3sohr-fK4XyBxSnateBeok6AFABEPtJOqkKpysxreK7GsA4-EgUKFCIgkROSA-qdipOr6qqmtAqwa96qoTzwWcCoAvAd335rjcw8rmyzqpqpCr3WN2TcBBvAMJyyi_D3wGBPS3KumoIapauBrXq6muarXqmcoKSrBKIPXC4M6bXYA4ofqOy1-Mp6o89lqrmqxqLy3Wve87TTyo5LkgNZMPLUva2tkrbaz8t1q5c_qLBpP0Vd26r0qCuF2y3auKoxqbammrtqGoWvIgSYAK_PuLxAjKQkqVatypjrxa1avBqphFUq8duMzAorgPEU2v3w-kV3EPKAUj2oMqo672qmEFg4uKmANoxQhgqpgcyAWiqvRQjLr0a0iK1qQq8lnGqavajOIwvAeaqer_BCuvOqs6t7DQSWYmgAZSPEeGuohOkkeo5qgq7urWq3sKhJSoJ4ZsM9NN4TBwMlJfVmJXDhUbEoZzVaqYQGrB_N6qMqhknyK3gSuZbLvrHYOtMtLSI-wBvqM67muvrmk0WNqyiAVgDeBGwhYizB2oSyExQhguyqGSXqwstXrwaoZI6Dm0NDxvTU0xBpPqRc1-rgaP6r2tcqcyoZMp9L02sLiJsqTANfd3AUXxSZpy3Bswaq61yr_hRMY5PmQWQaCAjByvLNKbr9yh2DQ9AgGRIuzRMGMv0Di3WCITL4IyXKdJx6wRozKQYhgpqpcy6twMonAtgsGqgC3akrrtanbPnZ0U8nJsdS8JJ2cApMc8GHhiDIuIdBaqFiu4bXiqrghCHKgstZzlGsRplz1GiPPag6GlKmLxdQBoDuCRrWcC8Bjq8xocaO8lRoOz1GoHKcbZMZwDB5ZmP_zjrzs3xohDO6xnLqoAmmbPUb-fUJUsAnG3qPiA4kKNw2zkm_xrsbn89RqziUqdqFwVdQK_11BdQEtGHhWFQxvRhKQAQAtLT67akKa8miWqSaIQjeuLwAAI4aALQOhqLiIYAqQtrU6ixvCgL6m312zEmgHPnZ5s9gDLRyyv-EsAKIzYNiAIgCqMfycmxEKsauKivNsa2m6ZsRD3vEHmcBdQG8ANApMZZrER4ADzIuyZmqBpsbRG_ZuRyZmhAPPB9QdGNYVLac8D_h3GvnI-9BETZp-yOyyZvybKUixpE5BKkpvPBzwcJuBYDqwRGqiUXZGpfrGcmZriaaqBJtBb0M8Fudzvm3UGcBLAJJ1hbOPAaAdgy4ookBbKaxAr2bM655sRCs49GLeaweFt2Lxh4SRxU8iuJGsBbl6u3Mxanm-xsRCqE5wAaBYGdqEZbQedqFui3uEoMBbxmqfJpbP6gpsRCxqgahFbWFewBB5JWtd3hAYgx6pGaZm9WscrqWx5tpaBW0Iv1BZMU5k1CAmW5tcgkio1t5aFWrBrtz52TItCznadgFN4S0EpoaB5mIMOyq1PaJv1a7W-5t2aTWxVrBbXWhAJcaSmyVpYUGgdMI8RmsAoG3CYmuqOBa-W01qVbP0qwVN4XG88ATaRygAIylhgOpE2bWo1pqzbI2u1t9DnAVhRcd2oG8FYV2Wk8VRA6QxprQbUWmtsraI27Ftdaim71sJbh4XUESc2W992XcuuUX2gBy2nlqPzM23tpob52LYoGoEEHKFLhogS7CIr-Ic7zDNNmk4o1qds-dudaj8pduuKFcjNAiLQywRB_dCK7XT3bQ2pRvDbj2tRtch_i6CCmRwwZT27jwwVNuDay8g9oea9qflqVaZEBYJMLLol2OEN_amHNtbQOntufaJst-q28rBRaKujMwy9siyp_KZDNTbmsNm2bFG-JqdbqGl1rDZ3vb1otBnAWhQYVRWv-C1aUqPoDEqcm0jvg7iOk9rDYgspxvahvW0UDo6F-Rev1b2OvhugiBGj6KEbDqbXSmbxG3rMkasykFDkwZGwGOwim3MbMH8JOrFtcr7AbKEsA3ZOsvmj3yqwCKIMmmlA9hAK14s07MIjsrU7gOylPk79kW-tBKFcn0GzCqSzAHUSji14ts7WQyzta11O9X0873vdcWnB7I3qJeBl_YAOT9_OsmKs6q29DM86EAtv0cgj4iHOvzBoIaExQIu-dmNiAOsd2i6F2vzsy7KfNwEGh3APwBTS5pAYqMhHABiMqrSIRQlK8Mu_ZHRatdHzus7YuzLv59nAHAOB8MABz3iBjwAlMmTHozzqpa_Olrpi7XK2zoHCrBAZhqhNLPbwOqLgINpRrLqedgCqHW0P1y6EOnLtW6EAlMIG9Ea9KPVLBEdztTrJu8Org9Nu1jvT9JuwrqWyhQrwA7x8QJsLu6Xs5JP6gGugquy6Lusbry6Nu1bv58bwdoqyh8Kwv2zScClFmuoPukbo26furbou7VurOOIQkjYLvoTOqkUECoPu2duu7Yeq7po9bO6d2K9NgTdEECUk392aB4Wn_xsyPO-dlOrvOyOtUa8emnve9dQJ6W_Ueu7VuQ8r_DIHdS8gBrrkS6ez2tx7tu0YIQD9Oz73-JzK_by6BWsTwtCi-e87qC9LuhnuF7Ia7Yq_chQ1rDlB7iwRBfFgAmAEkBOuhcA16fQdgD56mupXsFjbOvWtCzlonILoSRE2wB2wzG07vnYrar7sV6ce5Xvh6iC97zHwLEGADQKXY2yIXB7IqmDYBk6kfAa73a93pa16ey3td6t4_3orhWG37yT6yuwbup6iChXtj7Ber3sV7Xe2vI6ozWP_yL7QIzPumSBeyTqiSrejxOQDLEliUw9dQOvv_ThQZFqaaa-qLs974-ogvoqXgKnLryjgbKH6iLcvb0PShu13rlaZUi3vTirelVpSoN8uABvT5-qRPHzx-ogsNbrGnLq76Z--dmQ6BfZDBSANCiRIKANChrtu9K-3zr-7XII5KsFcoVJA-8dQ4rilbG6oIOK4z-h9o964-nfuv74uiUFCAPSx_N8SwgAAbva1-8uvkASCzo1ejilfN2U027dNwtcbuNZSJjkkuxjvRDmFAeU0i3FeE36u6r_rLKKyqsrmRaygKOTKBfboKp7U6tsuPdNXHZu-78BxSPM6dO9sz07FqAzoISjO7oBM62-ztv4BzOmgZwG6BhqM4j043aOYGeo-aI2jlo65rWiPEKQcvJT-x6N2iBBz1yEGDokQabiTo6orVDEk66KEBboscHujk_Z6O_BaBgjvUGTIkavIjKIvoBojGa-sqMhMo5iPIiVBjaDUHZUozPkr0YjFL9CcYuiI_cGmtEJQGSY4vFcGLAXAbOL5SvUqiSAyyjODLgQ8MoEihYHKMeiAysIb5RzBzspgbkcuhvGquuRhqoyWG8rqMapgd_04bdqjbN4aFAdYGgGRaZ8VQGt4CJE4dkICTQwgzbSZ0ttQIGZyQ0jYTWG1hM4PWCk01NBe0qqUWCDG3hxVO9C9QPALnVLpyKeljHp1gQ3SSUO9TWkjBXASDUOEWZeWmYpjmYuj_Q_oc1yjhKeC4RgB2XHNwiZmmd7nVQwcBkChhZZBwmfgLwf8PHQlVOLnfklUNVXHQE1d4YmJhdbNTLVKSRElRBzwf8MO1T4d7VO1ztdIgSAQQmeAoxbtP_n_CQ-Qpjj1ElAtUuMudPCMBHGkYEeeHntGHCO0TtU-Fu0LtK7QlMo3KADhGv1REf9cUR2YWWGMRiRVilKTBMSFI8R0EdONjgIkZGkoRskYSBWzauSpGrtGkbO0kRtIHpG0R_NWSVi1IUc6VulEMmGQORsEcJGIR4kYyJoRy7QSAgXAoAMsaEKUGpGERsUbpHP9J3VxgveZUbSBOQSklh1YAP_gEAodfqRFBkgCJnt4YQQUAshTeU3jXVsaDbC0Y29VcGpJiwePktGYAC7SDcDEWYXn5nR8UDuGKMbqAjGP4C7SfgLIWMb8dbtGzRYdMAJMctg6kNMahhbtcdGOw_HWlGENEgfMYowLtOkcLGO9OMZr5ix-4d6QNQeJnlUJhjwEcRdNZ_WLApUbHH15zht2VcAuxzAB7GkIPsdRcQdWsZLHpceAD8dekXy2sQA8JVD-IiAH12_4T6elgbHM9LwkYEIx2bWiIFwBMeLBwx670eFthVxBDdAEeSygBkxssdJHrAugsbdJ-CQQdh0Ac4avGLtZJi4Bzh27U31exsADfGYSZMb_Hvxs7U30yxshFih3x0AWdHbtUbWtF4B9F2EgThmpjOHUXe50ZktIOxkuHSKa4fWBbhvx2yJkRt1DeHopD4clQvh9YB-HSJv4azVATSBWWRkR8EdcBIRkkbO1-R4UdMbeEO7TpG3URkaom-uatXzccRleDpGmJliY1H2JikfiBDRrifFGVeJYfRH-JkBVLM5RxKR_w6R1UeYn1Ru8a1HGKRHhknaRoiYUnpRgmG9pWRiyC6V6BcbEYnNJ8SZ0mrtHUdnA9RybxhsRRo0e4mjJ01zfxoxiyHtw5qBjFEn6SZEeLtHtAkb1FAxg1WDHPTIKbe0HkE8deG2-MsYrGa-RMZ5GUx8sZnH7hjMdM1UptUcuk8xzKaYJZhTcZr50p5KarHkRxEb8mowQt0KNBxiMZvGYJtifvHUI77X8QroJVHSmBUiNy0x8Jsp2nG6x00ZXggFOMaFJokA8YGn91Y8bB9Tx-lkDdLxrMZPM8p8jB0m9XEI34onxtQlGYxx4FygnBuYCdRcfxkXHSmIJygD2n0p2CcNczRs8b1JKSFMzzsop5adYRVp4I0RMjp9FG2n_x1F2WZB8E6fzgzprWi0ZrpkHQ1pXEdKeqmBAAKeCmIZ0Kd1MlUZfTeM2oXXlZ0Def1wTNVKYE0t4vTNGb-nYoT1pshtaKAHfAjhpCctdTh_eFZcLEc4c5cIMbCeC0xiI2nRIQRl4bwmwuZkZwmM1JlEomsUEs3ZNwFYSakomZ_EZdIImOyeandJgyeNHkRoaeBpFJnmcxHYpFNXVRQxsSe0nxZ8kdy5KRyWY8mJRmWbzVYSJSfLkYxVfIFmviIWc5H5obkbymImeyYFH9JtydkmTR1EeMnDuUydlGHFSycVGzZp4YtnVZ3kdYnNRhyc0gnJkjBcntZuSclGlh7mZ6hTeUMetG_NNqDh17Rx0a89KZuwH5d0cwVyzBXR2wHdGStRIC9GfR-Dj9GdaKOfaYgx7MeinHh5mdimjqeKbfx6WY7UEH0Ue6ZBR1wfqIEhZG_sBJZ57KAHIBRhpcQEVHprSenJ0AZNmSmOtL_noFJ-RaZzHR5mmaKmsiRpAiAIvBeYenK5vKe6UF596eGQs5hIVymR57pXHnCpuAEnnleaeYJJK8FuYWmMWqYHbnF_UaUaQqWBITeY3ZMewHnkcA-Y_Gx5vEAnnZgKeZ_HZ5nka3nptW7SXn0UFed1xptdeaWnD5ldiFdQJxpD3mYFueZAWEFmCSAXN5n-YmA_5krXPnLpw9BqG03MwDFwM3MmZQmoXBPTLGsJ7F3pnl4MXHNGsUU3giYxoYub1JCZkiAYXoeDehx4bkSgEoXrXZIAexw9Lhd20eJkhZSVmeFRHZnPhy404XJF7hZmgNQBjBKmyiWeRqQyxlRZPmiUURaGR0prRcGn-AasbO1Sx50YMW_HCqYlHERm2BFAWxpmTbGdFhRa3kRad4AjGRx8gB2n0cqwXqnuxz6fOH5FjxXfBdF30b1J9FkqYCXCF7SCcWmRxNQrkjAuiccX_kQKatmR5m2fVnvXTWekmHZwyYlGIlpZDpGk-YUBmoIaRgX9dEl9SkimJuGEH_Chxgu2CXJmb0zcDDxzAAu0GuNCM1G2sopnqWueMqZPmouZRZKmh5lpegnUxk-bAW8lm7ESnnR3VH7Akpk-csX4AUkcKZppyMcanEpDpZ88ul6JdRJeFuGn4XkMQRZa5IA9qdmXplw1G6XU3KJf2U5ZnqCF1BJummEmLl5JdFm1ZwObtmNlDifhHHZzyaeXoZopclA30Upf_Dylq3ArmXSNGYjGJl7LkxZXPZpbDH-ANpbamLtS6zO0oV1vhk05lusf6WRQcxfuGhl-FcG5MV9MZ-1MkC5akXTliyBmXelwxZABjF87WWW4pmabWWLuDZYs8tlq4kRW9lgRbLHtuVzxOX0pqxDRX_0IJeiXGRo7hSV3Z9JRDJfliUb9m0lt5agBHJlIGcnVm8OfEWrl95AKX16YpcBX1FspdDQyVxRYjHuoCFddQJFq4miRYeOFdaXdljaYu1YeGsY1XQVqZdGWsVgFQGWT5_FeZXkp8ZZahDV3bQFX8uClYymaVulY4kVlnSYunxZzpaFXhkTlYi59l6Fx5WCeUxcpXzl7ZeFXzVyJd0X6WeNY9huV50YCW0UIp2OHyFihALWLIGhdPgrhqYaYWWF0GfYX_R1mZ4WymPhYrWhF2yHD0xFzyd20q1DmYomawQ2b-H_hhJZG5nlnkflWLtK2FXG4AO8GPMcl-SfRQtV_5ZKW9V4Fc2kwVk1ZqXIVkXDzdOA61YRXbVnSZjXd1l1cSAZlhqdzGZgQRcjXbx6Nc2XASPNcTWqF50aOXOA_lbLHBVprJGw-J-WeZHFZ9XSFJx162b5Gr1mdbvBBRhxQXWaKRpGXWBAHVbsXDsfVfkFN1mKf_Ad1tQjG5iig9ZPIj18WZRXTx8lcDXX9AmaPGwNu9c1Go11lcjHH121fzWDlnlaL5U189cNQX8F2cIljuHd1UmMlJdZsmUlsWc1Hp14Qze47wJVZVXmRHWcXXhkODYQ2gVq0Y3XKl8Fe3WzVzDZh4w1HDfjWdJh1dRXT1jFbOWSNxaanW6kG9fFmqN8MYfWRcJ9fbWPEFNeqZ9NguzY2vJmsFzW6N59cEWEJkV1LWkB04btNrnKtYmG6F6OcjBmF7bTYXcaJtZrBxpvjZeX_ZiSZhGoAXzekEF7Ur3uhvl3JebXD-WJf7W5FjLdUW0N68we1_XO8xXhUN6pbSBalhKaOAX4a526hFh4ab_XYl0BQBH6J9vHOccNkXVygMx2WkvXBAcLgxoGR9EfFXsRy7gMI2t0jeGXetkRH6229EJfMBKSarYoxB8VuZ62zNlqczL1qTaeGRcZgGZW2KN4GZGx1gMXBKmmx2xcYFt4dsbGIuF3TQu0FtriYHGbt850dXrcFJQDkNxk-bnGeqwjg5nlxmdbXsS10me82UJxLdPmwXDCeyZ0kOmdvQxiL3nrWwtwGdLnIt_cei2J10Dd0nEthaj7mUtrSDS2pNjE2kWst2RcQVciPqfjH8tkKaK3CjG4cU2t18rYw3yV27dq3vhhrd-Gi1eJdhMWt3GAZ3xtglY62FpfxG62yNybfZ2Bt6Uf44huRpC53DNhASm2IFBkdWHzxiXfOclthad22mpzUZWnxZtabenEFj6fAn_pmBeZWCFzozCIYZzcdhhNxqVD13YoMkek76Ctqbf1JULqZsCRsJPhv0owM3cKN4Z1431dFCZGb-MDeC3ZTMzeGyEt4DtmsCO33tmxfMwztxQAu2nEK7ZcWHtj5xMXvFpPfcm3UMXFe2RacJeIXPNgHe35Tl2plxcId2hah2nEGHdC36WDhYy2n1ypgGQu1vHbK3cdkib65stonaC27l2ifZ2gN5HZA2A5yScyXPl0Uck2YN3jYlHCl-DYBXENxJmQ3dNxaZp30NlTcmWZNXtw028N6jae3oVmTWxx2XAQDr3udoCaQhd9ypkLGOrWvea40FflZ33fnPfflYQcAOV_XblhWYA2hJjnffxe91JdR2rtSDbO41VntaGQZNqfbk2vdVTboopaNDYq259iPjX3W1jbeRX650A-7mj9m_f32pd_aeQO5qE_dRWz91za24mNvVGv3MDu_e_X2NpJU43zJnjek2P9gTfYmxN0OdVXslqWfS2x9mym1WgDtdfk2UN6nYgO6drfc4B1Ng_cPXYDu1baIw1TffRWkD8gGP3WeFbcIOMgLA8BocD4Q6a4pBGzbDUr9jA_kPiDw1x_X1gFzeUO8eKQQ82yFwHYoQsXD_nxcEgVbUh3f0aHbrXK9kWmr3Edo4HVXe1hWbb3lVN1CHWsRtnY5M394Dc_3-9-Lb_3mD2WfzVvDl_YeX_D6g9eWB9uSi1nGDkfd4mbllkxZ2WRk2eiPZV2ydiP4tn_ayXOJ6DeSPwj5neomfDig89nMj9HOyPYt22cVXg55VfoODRxI4jneJ9YD0ORaApe3GODkA_JXjVng6X3FF8jBw2NdzUa132lyrckPpDqQRw3RmKY64hT9-XdunGkVufIxfpuQ9v2pBfbdd2_qoTBVGJoCFcAQPjBnTIUmdDzDNs2dL3f0B4aYPe51iZ_7YdBkJihHVJ6XKGHOH_NmtYZnoiUMeIm2ZgnfImctwdZKOBJrvb8Of8FWeqPJ14I-aOnZvbkf3Uj0o8iPUkU2YsBwT_jZyPdJqSaH33JiOb1m4T3ma42oNt_dDGITr_feWyzEI88RnZ010G23Zgk_SUKj1cFROYtyE90m6DkGQYOCjpg8pPYToLdjnzZ4FfVRbR-HQdHqkL8kpcpgHObsB1IfOcLmfZRY_C2Ed7SQy2D5son5Pa5iMcdX2jnYVoHr5-mxAAQelaS7nn53uf7mSWfFbnnIFxVawRXxw6dAnMFkectPqZ2ajAXL5kblbnUocU-8FjT1YD7mP5iDC_mxTl44IAQJmeYDP8piLydOHcqPjG0iFwu0QmHjy1z9peyaxAHIxiSnkCBwqTFEdh0AVs0LJxlH_C9RxlP3f-MfaKwSBMQ9q3kRpxlbqCLPiofmhcw3ZdzGgkZtjFCxQiz844N5-AC7RuPQ91gWrObIWs-vwlcEAG7O9Zl5QbXzAcZVaPATiKUF1n9kE_5m39hTjShUAj7xlBYgDImnOLAMMTnP_15NUA35hkWntVe3Lc8S4v5Pc8lXS1Jc5cW_-mIEgBsgXM6CIJaajwOGgt888a2VJj2YVHrzzWgzPuEe85zPqPSGkDVnvDWQtAuGZmlh5pzkmYTOkBzyQlkREQsnyV4ANPGGw7D2c6jRO9vmc51KSGAZ2VSucrkq5quUg7PPdzxrfuWkTt_YnPSKLBXMVEeL02QuyUSkyvx6z-cjLPMiaCRYub8Ls6bPURzSTFXHgCg8aQ8LrBWcB9QMtB-b7ABoGyh2oYeAYuSlN7mwVxLyS-kvZLri-HPGzji8fx1LlzFHO-LsuZgvpQRM7HBKtagF1Az9Xt2AvMMdC6suYaec-wvRdQ84Q4VzwsHah1zuIA9wPUelmPPIA4w8QGC9zuj3kkEXuiMNa1nqAhsltZ0jYg7wLTVOs2LQWSQQkBDiR00RaT6UB1vpH4VssiCBK8mMn-Io8O55T_Ukv4XMIetrlaVOOjYBwBUeR5UmxJYHiugriwz7lb7cugHlq6B-VfO4zvPdguC97JW425uRi7vQRL1xQ-ApaUzRe5hrui4-X5LkxVKVJrssx0u2LykQ4k8ULm0jA-QXgAwgUgCWyQE_LrzYL2UpWYGIRy4dKQoQspT443oSEAg1J3jIRIjhxIrrGFnWcEbqy5tSLHMTlPnDzLbah69n46mYnpUuBmB7ALMGEWfrzgFyJ16HqBXcbIMek4A6wGIkuvobXFFByJgVphXdpaaWiFInOEPjN9uoe8Suusbu7TPB1EbBgKAtNbZwIBfcGbWnOYobRA2FGdmG8YA4b8uDxvTSJT2RuYbtG_ZGab6JHUA6bnm4ZuIAVph5uObhTZUQpQHnWnGREfG8BI_8AgAfcJb7HY8R1AQjcUX0sc7xggbIU3kTwxbsMGjxYb_nB2QWbg2UzHKyfnDqhDbv1hYIDb5hmNvJqU26bQpYk0AZv9bo3htvPiO26tg1WS2_tu56IgAx4vUVW_-v3pAO9mBAbggBs2Tl4O4BuaAcO5egbEP65Dvo77G9lo66YB0BJE3RpH9v47qO7DvsbiaB2QJmXG4Rvw7lnHxwCCegn4BB5ZFXxU4TyO9Dvw7z29Lp5BQu6ivKxs3xEIxCcvBxv4blu_xv27jIFLxy8D7cRAvtqGRisHTWtTFWdyD1EOH7joy6QGq9U5Qz0rEHVX0AYXH0HQH9x1hATHN0BwEXvzlfQGXun1TAEvRGVGEFYQ17uUBBmbrqYlRgQSaIHBJ978ZiaHY7I2wm0KMLmCkEk7UAyw1U7aZxFgqLVVnVR9gTB1qh87eAb_43NIEHIp77Gu1ftx0fyC7Bv7dgBkQcAN7CIdVwByCchlmQPBRV0HleErt-xWqDdY8H3GBAeLQGfGAccAULwgzgKcdBGANEAVTNBtgGuyYfz7FklXB6H1iXBkX0Fh4lBtgcGQ0Rx0WN29IpEKd2TBcHSUCx8sGDAFwZhQK4Bdw3sMAEUe3sXBzwFvSOqDCgTsLgHYApEcgD0fVH_B2ztMgFgEodoOPB44cX75CDGc8NDoYEcRYVWDkhOoBBBnhSb10G5dZgZx6soHXJgmo05IYvBuAZgYjDiJoSTOA8eWK9sTQB-H520wNfHz6rjY2KnBABXugdx-LhOKOIGy0uLEzDSwxrS7iiRoiMTAaAGMLfHcaBuaJ9dt_bDfjgBytFB6wBEgEyCeAX0PAAWceNMwGEdvH7e7GAnHlitceIMdVEwdmHh5Sv8AnoJ-2BeoXIH6ArgAp6KfRQBoCWBFiNJ1ucBAeGoyA3uZvBOIIKTsAykrgbt16x9AfvLuQlZEFArFfLYNAaeVnCBWhJRocFHSfNgPOx3uyEeJ-FBEn7LTW0ILWe_Iopn4p-ueHYETQseRnI2zGdEXC0Dedbt2x7Ttuh1WHmdFnf9WWdX0VZ1PhE4Xx-8fuXIjVttEXhAb2vFhK5wow8XMhVB2i6Ik1wmZzmxERNcUfE5F1kTuHe8ecAJ1yVd0UV11SB1XETqtQrtdHeS2CRbHZ_0rcfRY0wGMC3XWmGMBoFnJ7gBy6S01Hu8EQALtC0BF0GMAcDAXx9ZEa2ENTyaiTFed4Nhl2kqdKYUUhjt0zGPzkKHknMtaUdyh4JGu3YNcOuTV9a4FFUN34FKyA5SIV079FBTc3n6k5MmGF_29JfOZmieG2FSGVx-fHXRkBfE6X4ZAZeoX517cG1CVl5QIMd3oA5e2obFDpoGMb5CJtCXwrk4CUbJYHFfkoKV6c5-t-OfTI6RpV8a8VXpKjVe4OXN5eQ4OLV8podXxZj1fzXqqkNebXzalNfo3C16rerXymmbf9uO17HUPFJrMaRw3h_dz34zue56v2Sc5zsZCXn_HGnvd9ae6hU3hGZ92mdmOaXf1pvOm3lGFnqFTfyX5rYxv7Xf19RhaXxGlDemXo1GcEo36IBjesd-N55fWEPl9emtkImzXfETDN5CRpwCV6leZXuV5-0thQt9Lfi3hymtfs1Trah4K3ymmrf5xbt5bfbdtt8beIPzt6g_jXq8T3mXxA83IwDzCwHrfUdTakNfxznt9tfCzPt6gsjUcN5deRFV2fdesUHd_svZwyVRffO-M-_0B-XxExWvWxIglMvFziW0xOi5l42Y_H30xHpI531j85t2PlzFo7LADtVkuoGQi_wUGgaT_evpN4T8Y-GP941E_MxdnWa2JbNikpHePql8PeaXwN-ddLkU9_ddLkC94dxo39l-DQ4ABN9SQk3y8ZTfPX6mw11NF3l5Y-n3kAARtlPrSDfes3yV_4BrKDV9_fKyf97g5lXoD67eQPuyTA--tyt82pIPq8Wg-qqVt5MtcPhD_zc3TZL4cpUPxIHQ_WETD53VAbfV60k8P7THS_CPhCx6E4JpZDI_LlyJZeV9bf56seNSZ50zFgX4UC6VUXMF7_vwIJDShefYWF6aeoANZ3RfNnZF6ediNXJ66ux3rF7eOK-UF0FBwXQ7GnebLmj4vPfDxc5SvNaal-PfGkUz7q_EaK7Rkn5BML7jwIxv963ukxbD97fJqalZLGkxM76qoLv7gwOngXbgzLGijYZGy-Uv2D7S-61SmmzMjjI43jWijH76eE58eNxq-GvoZCHef1lI_W-Pzn16cvXEXb6M_g3oZAO_mXpZA1n4j_I6-WuXnZeEOHPwxSc_UttN7cCUbS5HzeYtRV7bwXvyalre4OG76I-7volfuGijJ77TViwN0z8XDp-cXSmvvoZHB-nyVL5K-Afg1_2ZWfz4lB_VX5D_9liP91Gh_OjXGDh-SLj1_J_8ToS7f2sN2kpdJU36A9M0Df6jwWvSzpa6pPCrtH4VcMf3GCx-Wsy5G_37ZzicJ-8iW1aYxWuEn8uAyf7HYp_lvN98s23f6FB-ROWVzyp-jUCZi5_ZFKWku_XQa74E-G3yH7Z-Yxvpce-6fqHgZ-rxQX7khPiLiRF_PiMX4T_4P-cU_GbT974F-3vxZcl_Kvp8lu-Zf21aKNLrcL_l-6_2cHPdpflEzUIE3Ad6deCSeH-KPt3z161_V8io-2_Ufgz72_6Xoz7ddDvh3-1H6j8TdcnnfgP-J-GgMNSC9fCVN9h5_ftQnjWGMbuPQAGMPI_O4mFYsHX_gAY3-KKw_95Aj-0_8755_Qvq76SoWfqr7r_hDoowdX2_uPHu-Of1P4lHrX-_4F-ZYwPMefw7-mfwr-dIiL-HXGqon_37enf2V--HxKAvfwMu7z0zc833-cJL1S2M703u_H2K-LIBsgi7x8-1ABXewW1U-1AF9e1NGIBiPzSOI6272I3D9eZN0M-1vxPeU_0ZeZn3PeIuGO-Dsxd-mq3veHnxmQz70IBm6hG2_yBp-4xFv-VxAz-4EnZ-8Y21e4gM2okgKvEJf2_GOsj5-Zfy0kWf3jUKuCgUIAPz-f33F-V4jK-hr0NeUvwcosv0poK0nT-zfwV-MAIh-sANsBwyDq-48n1m3XGo-g_1o-Ss2EuB7wYBE_3eQdv3eQ8glx-3KASOS_wLevAPj-zkAEBOAMRmQgNqEu_2TeXn3P-zn17cV_xEBCrz_-lZAUB7pmkBdgFkB6QKg-AALHM1p2UB6gPABXEg0BUCgsBLSh0BVxAL-OH0gBEvwq-7b1MB9fwUUlQOe-VgMT-L_1ABdgKV-pHxIOY2gR-bgI2-2vzGmMK2w2-AM9ehv1s0kwJN-dZ24uZv14ue3E8BO33H-6P2YBCrmn-5nw4BZJyFGMk24B-SzCBuAIiBCQNIBMQLbwu_2PMnvzP-qbxc-Vqjjwu_yD-lNiAsevxSB1_0KUkfytQxqyTE3_xkBNbzkBz3wKBeEiz-Nf20BHQLrEtQK4kZX1C4L42KBQINKBO8ir-m1BMBT5DMBUPEb-8gLBB9wLpSbfyaB1gM6BPQJI-7yEcBFpEGBmv1o-5R2_O-7xWB3gLWBJnxYBYby2Bkbzn-MQBDm7JyaOIQLjw5GAfeRwLP-pwIze5wLd-q_0RQ4am9-SMy3-SdHTIu_33-h_1XyJ_0wA1wJmBl_y9mbwLSBAbgyBgINf-xuFaBYh2r-okmyBQvw-BFag1BdYkS-dSmqBzNjKB8IIMBgP2gBuIPxBFoLgBoZEuQxIOBmbR3D2KShMO47xYYSa1cUGAOx2d6C4Ws7yiBPuwXenr1OBGewUWXvFOBI2BzWFAMO2kYNcBZII2-FLxa2sYOpBcrlpB7oKWQfgNMmSyHj2GawsAgQMPgwQIJ-8YPGIhwOiBvIMEBKQIuWogMNWT339Wi03zBUgOT-WK2bBDlAbBBYKtwkgMbBrfBhB_P2e2cINHGX0zUBuYMz-n33bBeEjaBvYNkU8vxnB7yAhBWYOtBS4PqB84PK-Y4LxBG4KxBb_0nB3rC0Bg4LTUc4K7BhIK3BPQMNWHqAuWF4IzWV4Nq-ZYMzMK4JruQwKR-dH1TB0S3oBGYKYBd4Mx-9ILPeB4KGQu4KGQjvw-WewK_BPAP0A3IMrBkQNWQ4QP5BK4KJ-waHd--biuBooN92Ln1Ahqtku2x4Kb2cAAAh7yC-B6EKtQPwJyBBELEBeQL_B3P2DcJEL1BzoyfUOfzghdYm7ea4OGQi4PIhq4Kwhky37Bo4KYhNqitBp4K6Ba4OMB9EIdBrEKtQqIJEhh5kA-fEO7BR4Kqol7RxBUkNsBjYJvBwkIUh64PqWykNh-6EIDkXC0fBSYOfBIwMwhC4jd46CB_gMywv-z3lN-mlw_0j-AjBp9EUIScxngXBCoB1E0zeioOe8BUBMhqiAcQtkINEepCt-Qb1whtYBzBFy0ChuMCDmLIIaObIMX-BP00k9YIrBPuyrBwYPWmsEPEhpDzd-0oKP-2CDlBXvwSB5kOhQKNgDB7EOwhoUKWQPYKKhaUJ3BVEOHYOoNShZ4PKhn9lbBD3yqhtPzIhqkLv-lEKEhVVFNB3EO--MkJaULELahm4J6hakPqh-Eliho0JGhBH1qhMP3PBVUI0hDgJIh2kIUWN4OLWNYE9BWLwrWb3D9BbUCwBLh0EBoYPJ-4YNXAUYMEBG7zjB9WwH-ekOoBC5xwuywLH-NIM_BRqBzBwyHkEQm1cUc61a4kYAeB02hfEDGHc-4QMSh0EKOBBUPeBjEyLeWUCTE8a1aB-4PaBZbl1BhykxydR2BcC1GJycQmM2QAMpoSgIHBXUN4hqCgnBXEjaBSX0xBovz0Bhfy6B5MO6BKkPsB-ymdB_QIo-LgMuhPv3xOHgPRQ74IDej0N8BP4LYB_gJFwb0KW4EG1Xy-wLjWbv0uBC81-h_0J5BUEJ1AMEIlB24IQhlwPiBG_ySBkARBhzgny0YMPVBEMKSoUMMWY6IIYhxMKxBrfwNhvQOyEiMMjO18g1Q6MOdGCimBBdEKJhcMKvEA0LtBo3CKB2MNQUuMM3B9oIJBJsJ9hC0J0OBJFJBTMPJBGR1GBRwBVQpkKDW5kKsQlkPYu1kOVubMKPemYKtQz0LzBxuith_MMSAbJ31GSuEmoUoMEQB_0yhFkEQhibzFhiQD-h8UPWmgMOlhwMNlhHK3Sh-cJlBHyyyhCsMc-uUOVh6bxpsecNYkjcLbMRcMeBKEOvMof2VBIgPLUoXw1h4X2j-lNB1hRchqh9QNNh16wxhgAOthuf2NhceCdhc8Kmhm8K9h1MJPBRIIsIroJrATX0NsLXxuEvrB6-XQ3seUcAG-Szkae8L3Wcl3HG-h7xReBznRe6wHWhMlFVkG8HSQq3yp2e0KSh6JgmBh0MEBxANN40YLuhnEEoBT4Ouhoryou-nwehAULpBGwNYBdX3CG2wKgAmJxAhoQPAhfAOoAVcJwRQgJFwogJahaoMmomQK_-6xxP2cHDEhVVEJhFalXhNMJsBvsKYRMPz9hjm3phYikTBQcI2-LMN8h5gH8hxnyehXMJQRm0iAh5Jy4B-WgrhiJjwRMsK7mwsOJ-LcNJ-bcPJ-aELUIWXENBeEMnhVbwoR8rG1hLQMpoesMPBDsNkh2IPoRLCMph3sN3hDCL3h_sIGB_f22hvuyH-TcLUmI3F1-EcIM2UcMOOcwI0uscObO2BC8BH4IQRahBThL0LDczIN1GjR2ihX6kjAHVj4-NAAghCUKlh-CJShVuC7hBcNlBViEFewrzP-4cK8h0ZkpexCJwhAHw6hm1GoRm1A_-jQJxhmhw2O8x3hhVMIsRViP-QwiKcB09zdBaxH8uWL3MORYksO12ilcP8OOhnCKRmu71HWuF38R7MMCRnMKQRDIPYBTIKxOhSILe_wM-BxoM5Bj_yh4z_y3h7pm0Rmx0YRliJ2RKv00hNiPYRiXGchwJ2R-IyPTBYyIEREyNVcyCMZBLLwyWeP1mRQsKGQcQNbhSsOURyQOHhwyDURCyKj-WsLg4TP02oayIph5CKqRlCOBRzCIaRuyMQBByISUdiOORyk0vO5ZlgRu2mgOgCJ9-UwL2AbkOjhXiIbOPiIt-RqAThjAPGR_yGCR_4NCRek2AhXAJiRzyJFhHv0VhiQPeRKsNrhmoPug2UOD-zwPyhnyKWQ70nURvyJgA2rxWRV4iBR6yNEkmyJqRzsLqRO8MhRt4NDIJILhRUCIROxsycRiQBH-rAkJRPgJJRQiJFwFnyRh4SKihmCOaBK_zX-A8MLwYam3-hqIQhGUNlBQfxNREfFeBI8L_ePyMWRxSKqoAKLrEwqPBRIKKkOKBx0RtSPqRUKL2RrCPXU3f2BozQ0kAYzjpcN-nPhwsD6-kLwWcg31vhI3wReGzgceE3zQ0U3zfw78K84Q_HFOU71Jeu0KY-QMOiBB0J9-R0IuhJANOh4CNQAkCKuhiqJuhjlzOR90ICRlyOzBWqOmRdyMeREiOwRAMMSRMiMIRqoLmRnxDIRQ-HFOsIKaEZsLQmzpzRhEZ1dho4JZRpiGhhUXyMRnqIhRAaIQBgaNrALoNsRBswGRDiPcBB50bRfkNWBHMNbRkyN_BqcJmRGCPERWCLiR-COkRNcNkRNKOJ-9KJuBHyOEBKoPVhrUPahKwzg4kaNeObsIRhEZ0nRqMNNhM6M4hlfwtRiaDdMtCMMRTID9RUqLXR64IDRW6MORGvy4R-kJDhrAl1-DqDRRSMwxRHiOPAMcPN-RTD8R5yMThJ6KuRD9imRVqB1RR_z2B1KOWQkiM8-3n3_h90GSR86OoAxcPs-L6PbhlP2ZRdcOJ-_cISBdqK5RXyPLUvKI0RLqMgxC6N1hkkIxBy6OMRRsIUxK6LdIo6IAx46KAxyMKnRm1EdOs6IgxIqP9R0qMQxTSLlRO6MZhgyODhyqNVRiNHVRScM1RZ6O5h-5nJRWcLDm16I7BTGP4BJwOrBTNmx4RqOFBCoPJ-4oObEVCPrh3cMLhZcJtRSiPRRQ8PfRDqLHhX6IkBSyIExWoMWY5SI3hnxD_RwZ3UxgGPiA5sMpoumPAxEAJUxRmNXRG6NV--8KumTmwsAYaLGcvLi6-Armm00aLvU_X3jRN8POeo3xTRfGjTRBGhfhwrizRt3Apmx2DgA1M2m09iKJe5K1OBJaKRmZaK3eFaNYxG8nlONaPQx0CM2-t0NZhoyPIxxKJDebaJ5hMyINR5YO7RksK8x82OEssWK-RA6PBh_KIOY8CxoA12OPmdYzPm0vVr-5iIDRwrBQxsKLMxY2K9ePhx4R4vCbRFyJt-34IcxwiICB9yKCB-PyiRXaNvRPaOOxRaJ927GP-QLyMURbyJ9-KiKtQRCKSWTqNKhSWJuwN2Iths2GwWeAFwWAC22RJWLMR5OM3RdMI-xDMK-xjiN7hqVkpI2GPAOmKPJ--GKxRniKHOuKOIxbqCrRZiHgRLaO2xwONuR_yFERuwLcxB2OhxR2JYxcOOShSWguBdKNeRDKNRxb6LuBKSMD-p_yeBImLOxGEIuxmsJ_RDlDQWt2Lg4R81_mJ80exAkFJxFOKtxSGP2RbCOpxHCPMxe6OGBw_0pBdAI2xRKIFxQOOuR1GIvRHaJcxHJ1LBN6Jiod6N7RD6NiBgoONRUWLFBZqP4x8ENZRVqOVRbKNtRMWMIRoMISxzqKuxxuLxxd2NNxD2P_m-C0txZWKLxb2KpxLyj-ehKx2A--H_AfFF_uF8PAgTiAoKPyCBAxICqA3gALyv4HJAaRUPh05AyksnX4ArkBwAA-McEtgl1g4QMOokrXyAf4BhAWAB9AneJ3U5IEoATUhyAdnm9gU8BLI5QBBAbeOekbRzikyGEOo7Qx-sI-JGk8dSTwBkDe4nlHVQCAnNAh1AAAeoGRUZDgBIouChdYGxwfkDfi3sDgAUHk_jVwFetFaO1kb8QaQB8aB5n8flNjeKgA7YIe9b8YATB8d1QvyH7AA4EHAQ4P457yG_izbsFBH8d_jfNDoAmcJFQQUHfjUHjgA2OCASq4PeJb8WbcgCbATetuaB2xFOpb8QbcB8UQSf8QBoXwNBpDqIwSsCUN9mnv_iGoI_jH8ZQTOCUmj74W_iDbtBQ-CdW50iKk8vHpAT_8Qbd0CcbEQCWE9OKP09yHgE8yCQQSvOgoTJCXbAknpk9jwAk81CegT2CY5QqCVKArQJEAyCeFAH8ZFEDLsepN8bgAbHjXj-HOC8GAN25H9BmIiSkF4ZiNZRqCRWJfyAoB5APIAgAA`} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}