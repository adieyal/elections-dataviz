{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.css","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/BarChartEmbed.js","webpack:///./src/components/TurnoutBarchart/barchart.mdx","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","chartOptions","percVoterTurnout","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","eventType","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","document","events","window","clearInterval","Math","_this$getWidthHeightB2","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","setState","event","newState","detail","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","dataLoaders","getTurnoutDataForAllEvents","Promise","values","turnoutData","error","console","data","parseTurnoutDataForAllEvents","parseInt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onRegionTypeChange","province","key","muni","disabled","onClick","onPreview","concat","replace","TurnoutBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-barchart-barchart.3258cce3.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__1j4ev\",\"chart-title\":\"barchart_chart-title__1Jyfd\",\"chart-body\":\"barchart_chart-body__1kYVj\",\"percentage-label\":\"barchart_percentage-label___T79M\",\"chart\":\"barchart_chart__39bxI\",\"large\":\"barchart_large__2FPoB\",\"y-axis-label\":\"barchart_y-axis-label__2jJOX\",\"y-label\":\"barchart_y-label__1JqpW\",\"annotation-line\":\"barchart_annotation-line__2ve98\",\"tooltip\":\"barchart_tooltip__2MpDn\",\"grid\":\"barchart_grid__2s8E-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---bar-chart\"}}>{`Turnout - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};"],"sourceRoot":""}