{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/ProgVotesCountBarchart/barchart.css","webpack:///./src/components/ProgVotesCountBarchart/barchart.js","webpack:///./src/components/ProgVotesCountBarchart/BarChartEmbed.js","webpack:///./src/components/ProgVotesCountBarchart/barchart.mdx","webpack:///./src/components/ProgVotesCountBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","getFillColor","i","_typeof","name","partyName","length","getFillColorFromPartyName","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","barchart_partyColorsData","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","document","events","window","clearInterval","Math","_this$getWidthHeightB2","d3barchart","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","dataLoaders","getSeatsData","Promise","values","seatsData","error","console","data","parseSeatsData","parseInt","ProgVotesCountBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","e","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","concat","replace","ProgVotesCountBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-prog-votes-count-barchart-barchart.c9dd3ea7.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, colorsData) {\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3Wxh9\",\"chart-title\":\"barchart_chart-title__2-7-s\",\"chart-body\":\"barchart_chart-body__2yfut\",\"percentage-label\":\"barchart_percentage-label__1yd_6\",\"chart\":\"barchart_chart__2vCkM\",\"large\":\"barchart_large__17bpl\",\"y-axis-label\":\"barchart_y-axis-label__2SBFP\",\"y-label\":\"barchart_y-label__3HI51\",\"annotation-line\":\"barchart_annotation-line__30duc\",\"tooltip\":\"barchart_tooltip__33nCO\",\"grid\":\"barchart_grid__3utrk\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      // if (!partyColorsData) {\n      //   var partyColorsLoader = getPartyColors();\n      //   dataLoaders.push(partyColorsLoader);\n      // }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n      //  console.log(\"chart component\", chart)\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"progress-on-votes---bar-chart\"}}>{`Progress on Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3QXYz\"};"],"sourceRoot":""}