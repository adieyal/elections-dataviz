{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/BarChartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchart.mdx","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Math","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","dataLoaders","getSeatsData","partyColorsLoader","getPartyColors","values","seatsData","error","console","data","parseSeatsData","parseInt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","RaceForSeatBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-race-for-seat-barchart-barchart.f906ebc6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n        \n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---bar-chart\"}}>{`Race for Seats - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJFFSUYAAMWFZwJQIaC0PgghJA8GDyEo_hVVQAV7SgmC4Jgi8iECHJEPYZDJFQ9DPg3GgcLwxEiIEEjonIuiOMkcj2JFc8uOyBi7Q1dggylN0TQVc12g0h1gHYTQfHkXS5XaAABGAiBEAZUAwrpDIDVBdFRY5TgAL2cAhEmxdhuHYYB1iiARnlQK52gABnYZMZiwdp9xrGZOxYWdooAFkS9gADZEuS9YwBAgifWgRJov4ZxDkRR1MHYAAFIR-CWeyfjgNLESKmsSpoZwIG8y52AARiylL5HBdzqE8gBBOYgvYSMTLo6B0HDdh5E5IKxCWmMZHYVEApgbhgEPXz_OxeRt1rYBVqgdbggAMie8ZEnmShmnux7zG4P75TAUJ3J7VB2nYAB-DY1vDSNtqub7w0mmspBkat3zMWFNMwMAwigKZYZ2vbkfmlca0TbSCBwAjMhSa8CBu2s60Uyj8y4CY-BAPKYpi_hfBgCAUkIDmACZhZ5kB2C3VdE2ZjiVO4yWGbrXCtSpmm6ZuqQSbRsxvxAQSMIzbDcPwyTpLI2jKOoy2OIArQKBA_QGGYzSKaWEz1ywrMLN4_gzSldSmMg9gjBCOx0GTSy-JACPA5dh0jsC32QBwT1ZZFa2KNts44Dj4PgCUggffdZC07Yq2I5orORTzljDtYFJLEoRrZyj_gKlYGALTgBuLX8C0ZlnQOjKmGBO9EtuU89VOvXHghc5ARj46mXRIDnZOZ5n1eBdrzTQprM9zbgbVolcFKLDPRqOMSRwoGFXPUGLk1S8kGfZggXfjPWNKBDgGAj5PgQM-6wzwADloiOV1AIZqvw0CInAceMwT8kJT1fp6cI0AF6MSmqwGCxxT7ihlPAPAlgBTdGCsmOKocRrcxioxXBRw5Iil1DMEGdhgr7wsEwgglh3rDXaOJbokl2BHx6hYRIs0sC2AADKuECFAaKR9HRA1fOfY4iRUDlXIAATUkbYamkQABq8RGT3HGOiGAajEjGKgIyK4gNgaOUjOgbanDaxdAIH0cw6AcB_2iHARiFglDrGsSYwiwoogEHsUDKUTi_Hz1cauDxXjDqkQCesCySDsGoAcbElk5AoD-DgAgmAkZhQCzQCUxJNZkkCHMIneAABtcpkUSkAF12AAB9Ol7H6K0n0MBGJIzMAwjYHF6F4J_v5W-99AGuAmUcLoRC4B4AaHoAQuCoANG1ItOhU0ClFPYOnUeWBQLoDsJ7TMUx96rg8miUIUphSRgHJQO41TGYWAZHCZ5g44CfmlgSWwvigG0EWm4j57BUChCIFfEUEB4BXAAKxqIhWPfQ2p4DkH6KwxyVx-BizGuwcBIM-yXi2CDVqAKLBdGeNQXh8w8UgE0SSqAlKyYfJeX8dyMASmMrZRCiwRAgYQF5dHflAqhVMUcJgPlIAUUfPheQB8sr5VBIBRAZoPzXlwBwFCmFHF4V_JClSwFOrURZF1dC2FMR4CLReXcS1-q4XwECR8pGEKNVLXtTqmljl6UwHeQKiYQLzW0DDDAWlqB_V2t-eGyN_rXWM3dQqzV3qcCcrgTygZgaIXBrNSC_8GbuUlJjdq9NQguXwIGYm2sybGaeq1Q6yVIrs3GvZYzPNwKLXNpLcFNNPbq0ArrbWBt_bhXSoDW2gVpqu1hubRO0tTbx3FhrWq9tnBU2xsVQ-HNHzO2hv_NunIfat1bAfKuza6rN1ltxOgQsL1-yxs2ALQgu6O2Elnf-W9hYT03rZngC9Fh90FvwPzQWUxf0OufeBi9FkFx_ynQK0Z4KJVOA1QAdVVR8-yLAwAAAkTUWWCp2s86H_14bA4QO8zgsVBFQANIasNAMzoPTgb9-Jgo4Yw8x4DFroOEEWlx_DsGAWdsxiKWacBGqgIAOKLTE1gFiknpMyZwB4VQkY83_PXQppTUnZMAFV-jyY_eJggynDP9DUxprTF7O1-AwLAcUkb2KznITOhz6AnMRscq5tI1mMCacJNp3NH7POwGamPeFIxzxzxM0C8LMBIt_BgDFueAXHy2dXMm25mErnai4PqNoNACYoYsKMv-UBmjEcJHZj961XAjCC0Cs8jgaCuDQFGTkSxeO0BCx8pZXQVlrNoBs-I2zFp_wICNjImzIwE24LtMrtZKtgBwA1prq3Txjja0AzrAhYZLC2we98EKlD4KAYQobJCyH9cZoeaFJ50qxf0NI2woEoxotEjgc8AANRqupRSWAAPoqZ66ZxTGoLMybu7WB7dMcDPbnm91E6QDtffnjgUU54ZMNF1KA4H9g8OzVk-ecHCXKjeZcw5tIsOLDw6e12F7NAUcffR3PHVRPZpA9B9jwxDRzyYY85TpLXQUtpf0LD4Z7LhJex1FwAzMx0BZFK6J-rmQmskZ2yBDrLoDvdZYwW07tapqM1l1csjCQDOoHsio1X67uGLShQkC9DOaDhvsp3ZnBBWdo8jBjnVf2Ac87BzOsz0O6deSPCeLonuYDe993r_3HOsc47xwTrnpPyc6sS853zNOA2u9OI993sffjx-R-9v3AecBc5D3zgXQv7Mi-S9F73keCkSgEDNsbUBIyDeIT3zZ2ypem9rKR8jlGyKJBo10OgDHSlvvYKMoT6HFr6miHgHARA0CRgABw0KWG7ymXh0CJA-FAeFNAyN3rwBaeKiKYqR4bcftTThz8FKvwQG_hZGDsAAOz_6IrG4Qqr6LSv6n4f6X76A_74j36P4Xor5ob4aCbIHoaSDJg4CIoXq1LmDLaCpoFYYEG4YEbrrDrS6My54-bUB-alIY5L6jIugjB-RZCLQY7rZjgdZQB1YhpjgsG0CRhMH8EBrZZj4WDh76YyZGYQD24QoVYLjVamo4FjgpJMFNSyg0iRi5Igz97wCUBQCdxLBdDqDkpL6fINxNwtwpC-INzKazjSGRhbZLI6p_DeS6B7Z64fA2APSgLFhwCNIxRtLuznbaFOJ9AQBmHuJ6EGGlLhG-LkgvBPiKBviNIjRtKR5BKR5bQ1oUG1gSEqbJ6S6IaMw9yNzNyzi-KuCdzOC2FSazjNY-owBgAuGDTuG64ZBeFrS-HlABFBHsDFCZCIgWglQCDdxpIWhVzcKRgAAkwAYCEC1AUCMClaWax4DRn6nIW06as4xQo-bklBLeYubec8hRNADBeCQhBabB6WmAe23BV6S03CIBHy3CHBqIQgiQTGJqAKjuwUahhc6xrWOu-2h2huFq7G2en6oGL6BASwBycAxSAycJlELCbCke-6fBBaghqWwhzxuRF82u7WIJS-uBxwmBlW5K6xzhOArhbR-2eJAKSSdA04S01SAKpJ0Y66jMsYHA8JiJx4HMkx9EIASs06PJPQhSCJJSp0fJJSkY281h9gzgzgvO54BEDQv27AAA1NHNwhaDEAQLAPwJsWIHdCiTijNF4RxP6hZMtPMSDEsRWpmnKb1gGltFcCjHGCatyQdN6QNk0RzLScCXrrzH6WbpKfySdHdBGXKfwHqZAcaZklyQKhILuLIH6Z6emcmQyfsXDhrvKcGRkGSL8ucUcKtvFukuuvIf4nMtIpQJ2BkItIfGknMo2n8ogXgsrkAnWQ2b_ItI0vEsfKfD2dOG0tkh6pqgAIRTI3z6GzKnyRGjIzkzK_wjmNnBSXzXwrlwBfHJldmuBrm_zpp5B4DPJblzmrn1nThZFiG1gwI75_yI4JDOLDlXkZB_I4ATB0BaExI6GbKmKcgmQmrVnzxzKLT_lNKBHMbLkXlDlAJ2rnl3y_xgXdLL5hL-FpHKjTp8TJlbYbYyaZAzCnl0l67FnapHYtmnxkiIXzlAJZGcgfDRB0T-4CBCBHCLZFioBwD6H_gZBsUsVsWch7Grj4WEXEWFkCBkV3BH5UX9g0XIULnFEfKjLcJgV9owR_wAKnwvlAJSXtnAV4LsYIW_wwAjZtlsb_oZFoVHD8YQZyUmVmVpq2VWUNqTlPF-m_GQqpYOCUQFlEmkWsy35LC2VwkxlIljLMIWlcVWUmqvEbbymURzLUUiizlIVwWuB7HS5mbHBNG4ysSwSUSMR6wGzm7GyCJmykSyRWzHLyzZB2xATuFOzgTLxaRajuyOhGzeyTz-yiCLwjycVryTybyegKmfxTBeAiDvGzB-THR2DJwTXzxoizC7ioiAgInUQvhTUzDb5oAfAIljWHSXS2obyZzcK1U-I5wHUB5DXTyegB4HUoZnhkp5KoDe5wDyqXxOncrpVII3VoKSDvwPWrhogCxpCwR5ARBEDe6_Uby3WSAYJQBYI4KTJfWIjpVNljjLGZrpW7lmChH5JhVrEtJoD2CE2TooakkLVbUzXYjNJ9Ik1k0dKoUNL-HE2oCk1FLtJdI9Js0c1SmDqPz7IRlHLlxyyqQ5DYBnIXJ5augoa5ZcX3KPIHbeqRFfJRgq08YfoHpgphkwhXj6DKrRxCAiDirYUwhzwYpwBYoQBRWMoEpZREoLGaJQDsDPUUpyq62-p0p8KMrMqOTxCm3YVFpVrHgqq60Dqh1ioe3JmMzzrFhh0x0jpnroAJ1m0WB6rWqGpIopS60LjkqORvVXCNJtKEaiG5lcIy00AFboBFZ26Ll4Llk1a2DMZPWwAvVvWwy62fmbCoA_mOLUA6UZVKVp3WV6353UBvXgGnyNL8D7n8BtIz0gDxBQBvXz3b6zD-7oBpCEzZBpCL3lDW1RXz3PEj3HaYkq7AB53t0c7ZG61bFxAEDMV8XCiEweQ8U4DP3o6sXChCU5G3mlVV0K5K4q67r4l7CvUW2YrYogy0H-6RENr_hAIRRjg0lhKfmUB1kjAZD2CUiww4CqDYC6hgDRhMpO0B0gDbT_QWgjTsAvS63vohogZe1Rp8JBTBT8B-29isoUPD1Bpa3n0CGX2QNW3QO4owifkwRnioO2KWKTjUEsMMrRzB1MhyqPqwLFoDKMrobwCjbmA4PzD8C33JlwaI3dD4F7r8MEDCHLQY6W2H0gxXCIOSMoMQWbRWXkG3nUB57e3zCwPk0GVHCXGsEcLMP-qOMSPIOUwQXyCa28FWNYlBN9Z_3l3gOt6pZwO8NAZ9Jg32AQ2RDe6nGY514g6NQN6C6QknbJOMyrgT2Q4SaSEZPmMg2YjYN5NQ0nE15B6A4lOyYVNG7JNMkRhHCyFIZ4IhizQNCgKLQKk4DjOTPMbIa53600APhEEfK2NQM20gxrOMyhN8JLBp263KMlI7O1gR2WLh3LqYCnMWBHo3OQpWoGrwD3NX0gyr3GMVmfrjmjOMJ9BY3cpqVqMrHpU4CQB4xRgvB2SEyQtEC6oDJsNAvOnZq9HMYckZmoy61JiphaT4TsDCLmwi1HCFyu3i0iL2PsAyZo5O3KxViYsHSykDIylk0kMjFEAWgpBCChAzCJmilp2MCFLyJiBkp0yNA7JSACsLi8tm2MBoAzDhA4Uj3Tr-TzAcy0CnKhmJ1m0MsCnRmc0DIssRIWjuFCDcObEKuKsQrkj4TDAPQZAcx6kkVgggD0MCo0EF6nTkK7QYnxMX1510yG1OORPSOMhbTDoWsWBSyavKwYtRuJj0tk1Mt6trH8CsvsucvcsUPXQuvckStQBCtxbityKSvZu1iMAUk6TatRmVsGsCBsvGv6GJnmvhuMwQUevCP2OORhvNtuvuBpCnSdoT3tuiM9tuYZYNEmklvTrmPNuMyvMF0p5RAzCRgwuEzTszsQocmMCvIgzsDbAwCJCnQwsWStvABHumlHtSDbuORiAn3rtuq3vrtdsj1SDlv0wuuZlSsCrimVuJv83JvgCGscttAZsTuxsfL8tFt5vePmDRqFuCuTt1ivsSlJtVvMspuGv1umtJl3vlZhKnR7PzBPsWsjt9vAADuoDQf-q0FjtaZZtgdm1AX0eKsbMiNbOOToOYPYO4MMUENYBEMkOcPO3GnsCTnBTUO0OvQIfStXssitscNkPcNiCCfxCXtRWfvNtEfNtbtRVoUyMczKPiDKOqcgzqfYUvuvOmfclpmWe3QIe6HxqsOifRzKemsSdNszvfsJu6t_ulLoe1tpvAc8tSfge5tiD_N1QlJwfFtMdilIc_veeRk1t1sgQmuNvBfTonvHMDKad3skdRmessYCOlLABZeR2BtSPRNms2dacyfmByfOsikkRt1TCpw4DGfXvpcCprs4cWDKPo0Pp9dzLr1LvKOrudcWuknac7t7sHsleo3_iaLHjHt4dzfqOIhwtLemnKMbcwDyDtfUDVd3tbTjduonfmfNeHcQofsus5eMzdcCr2d-qsP_T8DNrkA23xAvCJDCd0Mxelvxsoe_uJd-dstAdctBd_dXehf6jCrvdpSX7-SO3HhRd5tndxdefVsg9GspcNuZvuc9e1gnvnO3czt5ceuEzevWPADnPhNIMVdhKhvsCXeKtTeOS6eMgcziBNfkrsCtf7eoDM8j33c4e9DQLzdgUPqi_hcwBDfNo6qLuRjNpjeQ8zuTe1e7v7unTNrb7ColLLd6fU_Co69MR6-mna_E_8-C_hvHcq_Tok_PsCQWfBfXdgf2-ZNp2Pc-PkLsMgBvcfcI-JAWisDoA_dPTO8A8-dA-xkAf-dg8gd0cE-JjQ-w_-9ff1QwAo9W9Xeyvysncdp8KquS0auJ8vEY9ocx_Jc0Cpd495-1hWuIg2vTgcz2CNSWD8C1-4cG9x2YBu_Efs3uuX0U-WNU_d_DTlcuMM9msd_HC2ByKwA8DACe8KMnQcwueJmRs4cu8Wtu_C8fJL_Rove-8p_w9fdB8h88O_eb8R-RlR_6tY9x8Q8l8QeCuGIOStwFbvGxBTCgLQqBACCZ9ncc-UwafsqxOj8A1WvVfHon3i6Y8K-2PKvrjyn628BU9fGAI3ztb8AAAnP_j3xcwYoiKRFO32QFyEVuR6XvoqzJ6D8OKlPLEqe2Tq09nGUTSfthxL5w5Z-HgefqdH34F9V-Cndfln2jZelXe77a_tKQS7R9U2D_TNlb2f6Ssf-qkI4EQyahPM4AAAv7jK1QBytgBKvUAav1_5OsoBFrGAeX1TaYc0uKvVAegIEAcxCBzrFXiewzoqDyBjMSgQVxoEX1HBzqMxOPyYEyNGeG_FntZxEFsBkOkfcQXfzgFSDQOWnDwOEAiDmBdB_AWITcGoC8waCl-HYP2w_TUA0mIwGjsFgsjGCUOJDDwAQADA8MdSoZCWDqVgGlDUAA8foOFG-48NrouQqQMkPiGHct-LPUQYy3CH_tJB6bR_uG0YAdCWQiQkAGMPKGGCKB7NDIdsCyFApamemFTPkNsBICReZfYoUkLKHCdKhEsXmDUPL51CGhAoGCM0O2jXRzwdTKYJJiaiyZ2hcQg7u-yCFgdPOgPfob50iFDDpBCHWQXm3Orp81B67d4WENgF2RuIQIYYSCM6juBTSxQMtuS0EgcxZiczUBPIC9Di1MR3EO2OIBfb2MBBiI6BmIBWSjBjknJEvq_lbp2R9Ad4B8CQ1mJ-sDa6ASaBQ3uZC9p-LHDttQEZSMih2bHagKyPZHhsCOw0fgLMVFFCjp-pXMUSAFmIyipRxA7DLr00bRxZixPQOiX1H68jDeUqYsIqNYFJ0lUKdNUXQONEGjDRDzJ1DajMTijgAngm0RaMNHsYrgeA4URa1spXBRYPMJUdkXxHEi6gXQVAZGEkDRheAAgXgGYE6SRjUA0Y8MZyCeBEAlg7fTNi-zSgC8_hrwi1t0LFJZiBUOZJGNlWxh5VCWhcc6l-CUD6w0IhsESPPAUii0M4QpbOAiQaqOwwIKcc8NIn5wAAtYHHqQNKwBEMfUS0FgxhJXAvAD0V1BAL7iX4UgUUHoPoAyBDIpoP2LsQ0F7FwhEQ7WNIBaFzZDiQI3cI6lcBeCfdyAy4tyKuJ7HA4Ig-hGIDMGNSiBUolAfIA4xCAeBuKtiWgKqFEA_j1g04z7nOPhiLiBA343gL-MfH05bAVrSqJwFQCX4XQExO-DsFAkQS5KXYAoFcByhYAUJYE3Cb1BAhXARowsXKMSDgBjF-gYAHCTWBog7AweGAK4CMBsBfi8JkEzqIUhgloB4JXcDgacG2CuovAAgacFcBiiJQqJFgASdOAtCZAWAeQK4AlGwm4TfxT4tAKNgtAB4rgPwF0DhMfHyBiq1YgBnWOOTSBkwTYkUPVW0CNV2xLVUOP4DJKTxY4fVIOHXDuhmhaATcW8TbWQTRxhq8NGIIjQepvR5gm0SeM-IOoKk_qW8agGvGHgugbhRoX8mzwBKOtJKgVCYMFSnyhUUOSwWrkahuS5lXKOU3dDlLBQxMMk5rAqVFR1TcJ_URUyqVaRFAH9o4giPFi_Vf60AkaNYZNBVLYQ4AJEUiOALInkS1SepfUmRJB0Wj8BGo54UUPYHPCgJLAs0GTOeHYCGJdQlgc8M4EDhrpbmU5HKb1JsSMhhpjkHVKEhkaLR8avdFxLw1JI-JNxRDNqS6jLrbSN0S0ScntNOmMhJIkSI6ZaQ-nhJa20Qc6QlIHoQUSSKhOpOz26A6l2gAAUn9BJoMkY-IysFH_zcxXUtlRaGLD2Q1hkpviV5rNGfLtwG4xpD3OXlxrspRkv2VwP1KIbNExwi0VGTWlGTaJqZtgWmVNkxnYyW2KNbIE0W3L9kkhMjVqNHESALg74IwYWX7DUggAxyt5CrA3GmYSVEccwZkiQ1KLGkTUiOG4Adn4ADh4As2GAJJnmBSg8IPYSWSACwD6g0A2iK2eYGPBjgNZyZLWWiBIbi4bw3gc2XFDiiHClo7GLUlTJplgA6ZBAbaPsOjjaklotlLUizMDnByhKmsvktkDVm9xLJvVHrBYhioUy8EN4vGDbQKwcBgotGLIO5NzlLtK2_WVcKMh8DBQI4viOILAGgiBZb2YYXtjAFFDFZHwjSAOWzKDlTYlg7GdIusErl4JkgNc8kvXJgBvYXQMETuuuhbluZ25QMTuSFXYAxye5wc9Iq6lXClFlZ8wQLPwEKAUMAUzsnWSACWpcVWW5s8-XAEKQCExY-4EAFqUjC2VJAwsaOazLgDsyxwr8zkFqQ1lHy55swPeY-HAFF8AFEKE-SQz5LCzq2MzJUiqVKZqkNSEc3WRkC3FAIdxubY0s3OiAuzwBmQC-REnNlCAsSFoTAU_kdkQKIBZSOqaNIGmQccF2skhv-PcjDAIxqjV7lwC8wqMK57KHeUAtVkHzKFHySBXGQjLmyfAH84RYzFEVnyCFcAS-RwrkXuAb5KuGKA_IjkYz9h3IcBe534Uqz95IAQ-YwrwU6BxFSi5IFIt0UyLcFp86-YouTHKKuKt8r4RHO7mfze59Mv-aowoW6Lh5RwKuDUTnDBR9FwCkhsYuPm2KoF5izKT5xKEwR4BHhJ1r_X8XsAq4lgSWkEsmwNxd5gioxdItrCyLoFqjWoRxElqJL2i7ClJVnKOCf0MlpybJdYQEWGKIlgCphfgpUUOLo418lxSQyfnsYf53ih-U_JfnCxf5_8nBQYpAVnywFJiuxeUvcB0RhQ5snfF2CNIUMt57KTtBtiBn91e6qlWSlQDSpzI2S66Vygcroru86lktT8pLSgUsx9ynAOwD8CmBVEuCc_Hhai3BmoBYMetBDOY2uWnJblpyEhsaRExVlJk8lO8L2hCilSUmO0paHtJ-DuK7w1qRIKcrOx_KzGATeytMlgqAsjltFeZCalHTyV-ur0GCscunqz1T489ResvUzrwA6V_AXekyplmRFeuZKuZPvVpUyz6VCQRlQvAXosqt6bKtpKC2FDnhJQp5VlcrxHqUrhQ0KgZI0lZW6piwO3DpMFFVU_BMAHwOcn0GYyZFS6ZBW8hYAumjgCABEaAFABXIGJrRiQOUjOROacBIipJBVQICVXHhGkTqgZPEQR4kM-QFDXokzR6R6zsY25RpBABhlhq-ZsFHALAFnATBZZJq-FfFL2UWqrVCQFcs4iWARF3eDaJFZQBRWJA0VHKl6Zpj4SfQiwVK-Cof0oAeATCAcaxdhVJKEqFKQCRpD4kW4wBk1ZtBtKAKrVtr0ah_C6QUunStr8V2lRYC6sNVyNPEEModXMmYwmN_lfpUkmeEzU2qLydqtFXKVunXw1kJUHbrmvcZDpTVaal6hapLl3j6lBAHNS6vzWapC1xa0te72pTfLjgO3FBRLEZQRz3pB0_6ZEhoUjSANziapXbyxVvqL1O7VltEF3X6tu1Za99fOvMDdq_ViRfgIGs5C9EOOowLjn_DwZBjCkiIEMZGI8CRiRgTwJYBdMjBQBAKc6lJFAHQaK44QODAjZcIfYm5E6pJWDQQHg1rF91KVQ9ZQB26hzw5v6nUv-rCRfTogwG46ftLCRgbT1qEhGamtwDWhdcCVDiLLw3rmqwNUGm6Tt2XXgblKeCHfKgA3xYBtE_ZdRaNG5i9qU0iKuqWfkW6xBdE_Uu1QBtykmpzNlm7RKkU1Vkl16WALTSKCSrQanEV0kyKSSk0yMwNWFG3mdgBTn4NNu-XzdTO0S8KIUO819iQxwC4ArFDFa-S8CcQMV0AfQJ2pGEoRP5GKz5WuR_PdkpCiAkYLACZpKI5LctyEc_IVs_LyKStA9MrRVp0LVaGK9cvvPVv6nSImid69FZrJiA7AdyeUTjZ-ViDbAZNd6mjVFoY0QzYtn0iJLJpcQJbb2xuAFKMirjsI0lMEIJXjOa4Ey-8dQWYqUqqXyBdi62bShcoyqbKIU52j-lIjvXLbitOhZbeVsyDDbuYy2qJfwGaHUbgZl0staSU-JP5jNmsyHSAFsrCyKFTshpCy2tUWhXkkoL7sLJGhdwltmssvJ3F3IWAAUP24CbPLNq5LDFXQJtZxosBFKYlS0K6RxSe17Dw5VcYHD7K7XZo_SsirAMLL01RbPaH6kLYLuPC_zcANEDAOxlhivyuZ2FRLdhVkXsZhZ8uyoErs5BGBMBkgGhCzt56o6wW3DJYDmrzUcUN11q7NdOoiIm6cAA9V7oMDsjl4xdsO-9XmtChKSLWtc3LVphLayL8d73fyBjpwB74rKuaYQKXPzm9aVF_W3utyD90zt1sQ2pxFjJT0sS092O_gKHsJ2qMcAmA_5KnpHo5y7x8ewgCQEjBnhr1NtW9d7vjl_dgUx0EhrADABpyOdmBdgmlDSC_YxNus0XUfLL3htW9sAZha8mFnOIe96WPvTAGs335hYUe79YlDBU56R6x3cCYpOF0u7febu_YJ7r2X6bfdG-tOgHtebjtg9qOgveHtUYjRo9e6WPZXrYAJ6uKSezuqPotbp7Qdme8HTvpb156QAt-6HewCR1n6zsTu1HaAc21Ibtt5gRHY_vV3TpZF6OnxdtAFRDzkygSjrfjOfIPbPh8S57a9v3KhadQC5YXWbutXT6HdlDXaLbqzUXkm9TuwHaVuF0g7KtI2yg-0pAAwHYdHOuAwjsjDyC_-cm36aBpcRtaBUyBgVKganxH7L1J-yXShr5gwl2A9-T4iIajC7bSkkhpAybpxXpLJaF2ow6cmu2vs7tkYAg09ogGJkSD72xKguS-0CpTDmObAIkRYN9agd7BjPQPS4OJ1ZFfB4_RLqjZCGn86h9gNgT9IyGIFQB83Xjq6iF6lgxOi0KToCPk7F8zh77TBFvU6padDFZpdMtsPNqIFqO4pbEuB6TCyl6rChlAZ4PD6Yd6apQ6Eal3OJRNWpHXYrv_TK7hYs6mIyItR0sKll7Cxxasu4VjqBjPB4cd3EGgqNHFREtfSUcmOmKgjL1ZoyPTCPbR4CfRzja4fMN4H7tOAR7ccOqO9VNi9hoBGQZOXC7qFsBqDchpSQ6H1tYhrigpri2SGdjNxrw2wYCMcGwdmO-ndAYUM7t1jadIQ1oYOw6GlNWxyI58fZTDptlOjD4rsrWNL4d5GRynVxqCR6T0IAeSQLx3MkOw9A7Yu5FpDTz45CcxOUnBNMEDyMjWBeQOKSeKaql-cguGk3qT1ni5GTM0KYPqFmiNQWTjeGk4uwaFRZUs3JhWuwAACKBmBoPYAADSwObHM4AMzSJLACCspmvh94ABHUIKtqknwBQgeMMiZyeixEDSTXTEPLJhpNmYB4Q8RyRaf-zdNgcKpqaaKHQzbIlpPTOTD71tNq0BAt6M8HacPnZIixuVI09clXDY5ccFJzPEtPlTMnEFrJzDKuD5MCmkzjeeVDKblOKnlTqp9U4KfKarhLT3prJDiYwg5IBY-JiMBoHtjARiTBgcCCpSikCwda7KfgGiP4CMpCAtwe4I8AqAeByAak85KeDZDvABgXoZrsdKtCnxXCgdfgPAtVLqlfsXZ6OJ2KvFECsqcU4sRGYGoCwKxygA2O_GrNqBCT9Z0CI2Ygh1wUg2pl2snA5azA8At5_Uq4EPn9VoyX-LyfxFGp2CMYcUuYnwUoq6ULVWlIBJJHXAwRbAgooapIEGJdwRiYxfxEQOyoAWCAD09KvqCWBnh0LcycC06EgvcVUAWFscBvjQCCqvzKcWC_hGGLCgg-IgNlX-ecl16vE-wcLcxbqSsXT4kkO7W9QouegUNh-uwShcPhChoA5BoBHxYEiiW8YyF_859UoAct4AcAdC44BUSSWXkKQOi-1KoAqIiBjFzSOaupHX1sIIzVtdAXdy6mMgnxFDJZYEAwSbzUAYoKuGWzL1J65jA-sO1TUeN2UTlzqe-C3N1xDLmNMlaZY_Wf4Twtl6y6uEitXAHLvlu7gCgZUqCrloquAGux1UwB7u3a3WnIg8BHEnautQlX0GiPGqkt8J1cPFbcZIIpo2VIK3xvm441A0S5Bq4Cxnrro128nRBEgGjhvZ1QQoTUR8n4C5X8r7tRlNIgaD6gBr1TI_kxAXhF1QoIAGUV2f4C9WhQ_Vj2jNZbRdXEAK1ia8mGTA0N78BFUiI2RkwQBEg7gCAOwEaRnWLrTEEuhtdH7LWQA41_UPtZGiGNFAC1pa0gBWsux1rD885s9dev7XhYER461kCOBTagENEa69qD1NYNEa2wO-J9AeuA2rmKjHay9b2vJhhYn176_NxKTA3_rlASlJtaJu_Xsbb1_a-DdcmNlLA3kdwHRmusM2mbdANG69wxvA2cbyYfG7rMJsDJibfV0m49ZVHbXdr1Nh2vfmggWhGofgAVsKBGCuBrrct-IHIkVuuAObm1idNzclt83FrAt8Wy9ZJtk2gblNkG8mERQRGN86IBNXOEaR4ZKA2QTqOiBeBa2nr5tnG7YKUAE21uqxTG39eFum2xbAdqm8mCyiHX2AMPfIJomuv6glLaATW8Hb1GYBdb4dj69-F9srEKbWN1a68hFvo2Tegtz229ayhg378MPIBIOMaSV34gXcDfPkHyDu2ubJd8O3jczv82_bOdwO2tYLuc2i7RtkG1lEjj35rARpgZIUhZvDBhgd1k4KEGbsp3Q7Q93mx3YNtd3i7udk26LYHtL29rWUKW1HdcDbA_AJwa63WT1N2BLA_QJhHegXsQAdbrd_e_rZ-ub2g729ra7vbeuIpI7N4O-G8AyD233ZdEaFJIH1DJAT4AgeCSkDvsP3c7e17-8_cNtL2t7hdj-2ncRTl32As0FIO4F7Zx2eKBAdQBAFAfRBCkhSGB8WHQft2fbnd7OxvZ7v53k7aD1u4ihHtR2eK9kauxigwBCAnIBWbYDg9gAUPU7LDlezQ7Xt0PB7KD_u8w7gdf2D7jUOctsCVsugVb8KUbHAFiERRhHn9y21lEQfr2pHb91B93bDsECIjU2-YLAAtCgJtg0KGYFdcaRTavAStgR5EEoA6P0H3tr67Q6RZGPe7TD0xyDbyiR3rAciVwN5AFDqYp74TyJ1xAgCePW7ITgx5I-QfGOZHQTva3lEweWP5bdd665eEvyoR_AiTuR8mGycpO_HaTgJ-_cydvW8oB9orJQDcfOh7b4CCakQBdt6mCApTiW-U_0er2X7DDgGxk_odh28oVtiu2hk4fV3QEAUd4sICIC9Pxn3jrO1U6Fs1OTHYz4J3lAiM3gFwrgC0Ps8nuNJ0MMELiJ2GWc7PKnGjfx4w9qfbOsn_-a2wpbVvKO6AytxpIo4IDPAxw75dEHACudPObnIdap_c62eD2JrWUf_JHfPBEVqQcoIrII-6A12YIHA7oHhmXpAv9Q0LjO-I6GfG30n5Nx5zi__yYPLwEAWyUVnnj1l5-jjgivWtgC_xlcUAbF9C-oc-OJH6z829I-JeQvSXbDjfMfdCDlaJgPoV8589AQpAlb_QeeAk6YewOJb0LsR5y4Jd52RnfLz-9C4PsEROCbj-yNdd1dAJ9XI4Nl__gGf4ukHGz8F6M_5fQvJnFLOm0cEsBvB_EKLm8H0DBoKKNQkgXUHgD6Tmp0AkgKVajghkuuaI88HtQq8ocl37XhjEumQSwwdXSG216OPqDlZRBCks4VwFNdrBDWPAeVqLAVe6v8B9QjUXN1Ts2tzXrraz256HfTfQo1b2bwJ2M7LeUJI7BMv_lMGkThA8ARpxx5eFCDKOIETESQDgxNaJ3lnbbmKHi9VdWvKbDbzN72xzcPOjb07zB_qAZDbAAJStgp7WwXAePo3IjrG-u5Bf-3nri7ptzg5bdrvGolCQV8feoCn2vn6j1qjajABTu73MUFV7W9BcXuM3V7ldxC_rdfuFHEALALAGSDynlbJEY8Nddf5QBtgqECGp-8oQWu53hj-twB6zfXvV3IHyhA66m3DvrrLBIZvENQ_4Cz3pjy9zh6A-2v8PMUXZ_fgKzw99ZrcRpNBCqyHAKPeUKj62-w_Lub3DH550dd-DuAo7gQbYI47wwvpO4D0LSFwDSAUf_8fHtdwJ-bd4eL3d7kaJHYxRQAogdgRpHp4M-oedPqnrD429o9CetPB18l0u7wAJrHHZGAgAru2CmeOXv789wu_U-4fgPNnkaGw78hoorAKyLBqChrtcKFwWj6B0e_w8BfzP_7yz4J808LvtPB9lSEfb8BDQmI1145zjFRCmf0Pnn6jz57o-av_PDr6wBCNsDQAUX8ppW_qAc_LvTPqz3x3W8S9LuNPfn1LwdaY_sBtQRwAAFLOB2HQgbd3HdFfqBcHpn3j4M_ncnvSv1nnr8LFCd-BYbcELBtCEaRuB1MUb9-4q5ABtuVvCX7z0l66_0ebPosa214FUgnPQE8GAcN09Q-iwTvC3s7754u_Le2HBmIgEQ4wCOPyIXb6gM95_dte_3p3zrx9_K_LeD7tjyIBE8cdw-ogkT570V7B9ee3vkPsr2bZPd3vhYDrj1ysliE7B-goq3LyeWJ_bBSfSn2L5d-9sJuzsSbv0p1cxvRwZMYQUCIfNOb5vC3fwYt4yhkxt9o6ZtGR9W8aTFexn7P8IHQC5-fesb54eUwZgiPng7HAgPt454Kf-AxQlQZZwr4Myvf-AUvzn0t6xuC-y7sLogIDA1-NJDEFwOgBUlnDLOzfx3ub5h-etG-ZfJvw35YDLsbuuAuCPsDXf3YZByPtPym8748_o_THHv-0919N8-_hYbDqbX_BYDXWKMXAKLwA6d8J_QfXL9r-H45-e-Uv8frKAfhefIuHAafRpPKfRBeuTgAgGYNn9L-zuJfRtmP7L-h8l-98mDvCBgGHH8xzAjSXv-gH79oAm_3fg3yAHb9e-p_PvvfGw-0aohew_QT54v_iGQWk7-3mN139z8Evp_xf736X8acZBXAfUOcPYCr_jvYA8Qv4AkD2-oODvZvvfGj7z_g_Tfhf2P3L_4CDe8MN4CIxf8R4q1Qb0oAHMF0E0dPXa62ADQA-AGi9lnH_xvBJ_ffzj9-AdUzwwIjSwFC8mbKOzHAhAFWw8RykTfwf9t_FAOcACMBQAZ83UJn0ToWfVc34B6vVwG7EjTUIBsdT4C3WZ8l6AtxGtHIWgJAB5TbsVAQK3aODl5VzcXyj8xnegMYDbEFgKrsZ_c8EsA0A-_BgAqvZRzQBHHeGwEAFdbALRBD3Lf2Pd-AOQLIDLXN30psJApgOkDyGZAN4D-Alb0jtDEce2PAHPEcCM8RXFwOWc-A0BBsDJ_UwKkDiUCwK_8rAjwKIkIjH7xOAcvbbyoAbgaLzwA3A6wKIkvApW0kDmA3wLYDO_OgNiDvvIgG8h9Ba6x-8sg1SBiDAg3f3m86AhILMDkgmf3cCVvA-wMwYeSJyVsFdTxDT8YIDKBi9dA0O0qCxoeIIYCyg1gIqDYgh13PBInVAG1MeKMIIaAhgkYKgAsGe6zD8sbDoNa9X_DHxKDugnwN6CD_AIJW8-vGT3UwraPIEdAtfFW00hnATYDuB4he_xkcDvDoNm8jA1J2etvApILWDLAyoJW8IjUIE3c8AJW2DRrrM5xFBYA2YLSCPAl3xuDuXOYNKDVgmQPWDngzBzeC3MMIMdtcQHYAKDRYSP0WDTHe4PMCUgnHwBDRYQV2EArrdN0-hcHfB0oAIAfoBSwBAJEMT8ugxIIxC-gwEIPsGgQUGZJq7RkOAUhHf4I2DhYF_wJd0Q8oMhDrA_H2tsGQDAFCBInNRz-cAZWV28g_gtoLuCBQhYJ5CwQh4IhCnggUL699QY-x9AI3GwDCCcGJkMElRgVAEpDrgjD1uCTApUNpD-QwEJE8FPOiHagcgIf1iA8Ae0MpCVPV3zNDQQlYOVC_A1II2DcbZXyIBFudTGDRJAWRDPw4AHfELAnHTsESAIwvECRDcbakJ6CVQ_wMqCabe_DWRlccb1OdXADrGGAYANzw5C0wooOMDPQmkL5DVQjwPDtggogHnhNgMUMaRzwVEB0sRQBMO5Dig3gItCKw1MOsDLbCI11BNQprwudcvAB1v92Q2UJMDewhUI7DeQx4J7Cqwvr0ZCaIGiEZtVHJx2fFtgV5ATCTQ1v3aCuwucN9DKgiO2V8RQ68DUCl5IICRCI7JMPBCfQrEI2Cy7CI1ARdTRoMaRnw8IHnsiw6wLLsbw70MxCQ7OUI8D97IUIKBPnRR2PAPiK8PbDSw5YPLCDw-8KPCHXH71YAHIa62OtEgCIBGAjQr8KAjpwmCM7CvQy0MrD8fTB3u8RgOIFRBZnVLAojDSc4O1tiAjYIwdfwoiPnD8fNhxgAN8LzFbkwggzDRAtgQgCRDWHZiO7DDw6wMRQD7E-FQBUAPwDyBGyZwLqRJQfQkEjoIj0Ngjkwu8IAjJwjwJCcIjGXmyCvnXGAccJQ8AO0ccI4WGSd3QkELUjbw_8J3tAI8yMwcDMOW2oAUgOckODZwfQkICLghiMqCKnSyPz8yw9SNsjZHbELyg2HWaBohdTWxHyB4POy2fR0AJELCjhI-CM0i5g6wImcnwlyPh9rrXwg8iogRKLwjVIgiLgiUw0SO0i-vAzFsR_vHIKqiWARKJ3CxAo21nDSohCOsCYXGsKa9YhC6ygciQxsKiBZwPIHlcJwtKI8CYXZKJajUo7ELJcIjYAKGDHHDUNFC6Ij2xGjhYMl3GiNIuyK0jVothyq8jkVsytsyoUxhFpkgB21sQHPUICwYkQ__BLCio5qI2iQojYPNcIjPDAFZZ-Ej0iA92ccKIC9Ax6JUirI4qKCi6Q1aIdd9QTxAjdXXOOzBjogV1yujCo_6LujgotEOsCy_CuxKg74BsPoD9QLwCDCho76PaDkYlv0ai9wwiJEjWojwO79Xgxr1vk-3IaGutRQJ0OaC7AaCESAkQif38i3_ayL_CgY-fyfCgEC51js3wvmIV0vI-iJ-jKg-f3WjEY8QORiD7N4LIcEfAp1JFLosyOf9JY7mJBiJgagCm9MweaIXB7IJNRVi4YgKM5iWIsqOX0-vWx0pxJXbd0cwRY5aOxDcBNWKtDhYTAUjsN8CMDCD3YzABmDho7ENdinY4iMwFMHegPhs7HRmxI8gENzApCzIoOIDjWIzATYdQEdACwZk4lFyTiU45WN9iNghOLjizYzAUadHzaFCNMnAjfCIoi4u-CRD843OLJjh7SOzWRpXFF3sAugGEmB8cI2uOrjJogIOHtg43dzcAeIoZj_5WgvGMAju4juM2iRo4ezYcIbUbHYB5TZp0DdrrOeKQ8gEBKLbj9rMeIej3A4e2qDYhBzxgBAgbyCwZrrBoCwB87AoO3iN4pGNARh7JCMyCBQYV1sQcgu-KIA7HWxHPjLbeNyHQqAkXxTdWffgF8IRQfEDX9BAnny4DUhEtxABQEdDBASq3EQN3DnrABMLBgE9YKgTkwdqKmcPEPOjjsj7WYBUUV45Z1QSxo9mKWDIEjUCASdGGf0ISN3TsAgBAgdjxvBZXQFw5CqEyf0QTyE1EEoT0MNBLYdRQCGjoBovOmL4TUAGUOHjKbQhJuj_othPYBkEywMISD7eUzPA7bMkPhQjgav2fFRsAhK4TzXVhLITpEihJQStEkGOfFbUOeMjiUXJFyVs_4TRLQSjYjmNITAEvRI4SDE5MBRicWQ0hWBtvMcEKRXIr6O8ifo1BIPwdEhxJkT_AgJMwcMApWwKA4bA5y6BEgMcKWiW7LGzCSgkpBP0TZErhJ5iK7U_wgA92djw3xIAXJKHi_E0OwCSJE42PsTUkpxPSSXEiSJeBuKLwENJPnN7DohQIEROKSEEjJL-jykqRJCTfQgJIdc8IfWJWQLgdh2gB6ya627EggAFx6dmEjJNsSSEnpLSTQkrhKDinwuu1T8bfOyzaTRYkpJWSUQgl0WSqk5ZOTAE462x9A8gT5xowPg_mCGhRicUBdA92axJzjiE0x0OS05Y5PzjabE62dcwgdj3FA2AMZKeSukuxLeTOEk5L68iPJWwtAMlOyCwDGkOCH6BUQSl00QnkhqNRCxnUFOcTsBJ8JWTnnOsnrko7Y_k-5EeG62RBgQSQHAiiEGZKzjUE7ARST2E95L6T0MLKBncIjW33WQ4Aev3vEbfYCU5ThQRv1mSWUwmPRSjbTFPSSWU8JLvh3nQ4MfpNgZom0DIgTRIlT6UxxMZT7wqBJZTBXUh2fFeo-UyZckPLlKVTv3FVN6T1U5lJigC43UyKQrrGTwSBDPdDH0JwoFRUDcjUi1woCk0b-OwoaAiBOpgggERALQYE4ayLdRraOAIhNpYXy9TYE7q1ECRU0O19TugYQhn8w0kaB0j78aGz_hrwe2znig5eFFH9sIrOOTSLI4EPKT40_1KyAk05wBTTg4_HU0l7bK-ydATIopJ2TnrQtP2SOw0tMTT1gwtNxDhgbdy6AJkrX14dlnbtMn8O0gNK7TK0hpzWS6XaJLC8-Uhv2HTJ04FJISx08tInSRoVxIbsxk1ADutPnKr2FQESdmw5Dk0wJJeSxnVdNoAK0jdPCTmnOclcjokuux7hrVBJMXsW0ytLZji0uxIvS5jfwJPSdouAERtXkLBIdthAU4Mudj099LKSv0ufDLTL09dOf8zkwhzW8Zfb4IXBNwpZwgyN05dNMdv0q9L3wHXcBBOdGtPwHiTF0jdPmScMmDM7TLA5NNdiIjEiBpcIgEj3SBt3Vl0wz_Ys9KNtcM9dNWTmPCAE6iUMjjzHA94zYAwyC0ytNjjOMuNKozx0mjIkzE4vdgiBeo_5IIBvIMjOeTP0ldJky10uTJGhPkrJM_ErrZW2ciHEe2ylMoU8zLtjEk_gFozsM89O0y4M3TMwEHXOW0exYAE50MQugTAHUyKM-zL9TqM39Ikz1Q9wBpc0oM-xjC8rHX3Yy0Ugl24y5MglBedtTPwGzCa_YQAVpwM8TIJRR0hzJ_TfQsNLFhE46V03wUXWFFjDF0grOyz_M2TMCyxYY_zlcogG1icC3AD8W2T7YkAHyyLUyrITTqsvLOcAxYEGNP9_7Q1wIVtgEYmpTRErGw6zfMrjJyyZ_PkymYsk7NyBhAHO-Dsg80qdxJxP4xNwBRk3bKwgSQ3XRgcBZgH9OoCOA3n0pcQ0_QPsAYE4QOjT4EymwOyMgPRmOyZ_G8AMwCIPZ1CAg5eIBHAAAk6IOz2AOsgwBW4rOLeyCISf0eyIZfRlyz7w88HsAaESOz1DMACajQjMgU_zAALQf5JdBxs9pIez4cmdwhytfJ7KOyDGdYLhyaETB1_tGQBwAIVugReXC8aoCCI5kDs3X3xy20_CMhzns0nMsDyc79wiMGgd5wbDBvFRToBSMjkN5yoMkhM5yScmHM7jecguJtjPnAilcA_ATp0wj80ibKuyaEOzKNtpc6HNkD8cgjK4jVIQ4IdACZIhFXis43nOmzQ7PXJeyyc_HL69nAJeVcBYwhT07gjgGxEg9F40kOUdhAS3M1yQAXnJiyOwu3O5z_A3nJtDoIPnxUVvg61VGB7ILoFZyaEN0M0zTHMPNlzx4rXJig98CIzniMQT5zwxG3LikNTxc_HL3xCc0Ny5zM8h6N5zMBPPLaALQaDyIAogReJggggOexGBk8mKEwFK8w7P1yHcoiTdiPAPwGGTj40V0SAlbZPKBDTQ_6IzyDcoiQ3dhgxt3J8bgDIBGAyE6fPZyio-fMHzE_L5MBl5TfmEXjIgHB2nzJc9PKJyoc-3J5z4crkIiNZoBrOpjHHPyDiEMgZ9DEzA88nK5C-84nIHzb8oiQtibzE8l3cvnbIBYAX0--wYjv8kPI5yr86vIXzVop8M3DUATcMCBrrAmViBICg72_zU82fPKTd8gAuX0nwrAAhjGkWaEwBCkDP2nyK8qTOetCCiPPhyDrfnNQBSC2G20RhMiEU-cm4zsF4lk8g61_zr88PN9Dyc_0NHsPxFRz3SYIbdxdSy8gL23y58-AplyF89MMaBUClRziB8HcFh-B-Ci_LGcGCkQqYKD7Ht01DUAIh2uspTRkDoAl_LCP4Kdc23KUL_8xgoC8HXEbHyBxvDgteBrrRwEgAiAXBBoh-Cm3PoLHCm_OcLynAMLVs94sILDDkgX1KTy5C8p0EKECwfLQSTwlICoAvAAp1nAMinQK_ymCvAvuz5fEIuELYcpgtzz78NwGPsavQ-JRdCnAYBxzm0vHIC9aCtPP0LiimvPTz4c48PvxB3f709jisKYAIhr_OiAyBk868LoKHs9ooXzHwioroBdTcLLPxHXfdjGKFCggqmLB84ezOTr_ADI6wMCy_CVsXaNhLGK9C3XPWKAC4CKOtILGAG5SPXZBmZd-UsYvsLgiqvOULB81hyfDgC8ONtSXaRpCGLXzc1CDlk8oSImKiil4qcLDCkaHEiIjRRwdA_IdgCgCuKU3KmA4ShEqYSrc-HPEiki14oALzHe_DmdKge3zPtaE4sCBKgiyYrBLQiiEsRR1QxwJoA74Cwt_5Pw9EshLYCnfLOLnCxFBtD5TKJJ29T4fr0-4MAUWUyLGkH7xBQrM19KaLOSrEvBLSi_ezdjT4G1GrsN8EFHhRfExovl97AOUulLKS2UpmL2AXIIFBWAN4C29a6LMFmgAoDVA_cy8_e1WK7Egwt1LBXdTFXDPnG8EGhpva0uHttSkorlzNSi4qJQYbdwFfitvUBADLUCpgNZz97J4vJL-8nUs7jQEPkyfD4MFkC9iDnY6KRLXaS_EZtAgA2JpS-TLbMZ8ds9gL2zGUNhL_zQi07KDS-fS7MgTrsiNOnRRfOBKJiEEshLLLvSrPJrLGPSO1FA5TPDHWlRQZwEMROxHZC-dNIXwgSARAaIOYT7ATsvpTWyjooxTpy7JyfDZoBMvlM8MXUAaASPAcAKAvAQsJpTFy20oWSWyoQvnLRUxcvkSVygXGcAbwaaTkxSU-EDRLA80BHPLZyk8soTFyh1ypMFpQ0HhT4gLlEpcCEj8tfLki2RMXK-veU25xdQXUHYB1y3UBkxpEEnGHLqYSkA0DPXQCsY9WSyROPKQK0JMXKuSvDAAAjhoAtAEykcpxguwUYqnLGPAoqbKxE7CuxLcKmKHQT9St7PmklfG3y_4CA1VPQqiE1otFT6KmUrjLpy6aPvwag5wF1AbwA0EMR2K2-BgCs_KirWiQS_-IErYy9sufKmKth3PB9QeQJJxBvOaU3KjPboFmgYIHipOKSklSrbKHo9Sqej78CCuxxzwG8tFA7y8d00QNkEHKfLhKqMqSSLK08pKThKgZLmldQZwD7LHKu8rltrVG2hsKNc3HKST_K4CoYq-k4Sr695ArSpvLxrPDGkRlpEDPmB1cniswruknyvfKmKm0OcAGgXRBSr9QG8Fmg8Aw1G3ceKmitjTmywBLnKiqnAXoyyqknHsAag6qput4QYd1kL9ypipaL8CkFMKqUE6cs3SBcUUDjsVE9CtPS-K8yuaq3y8apzzg4iZhE4ZMbnAaA__av35h7IeADmrDy15LGrQKnPLYc1y7nGqricBoBG8RShx0TV3KmKv_iJqsyqaqvyZatOqEM-_EnI1y88BurUcxl3fJhgLcKorVYpSoqTNgD6sYr8M9AOcAScdU1mgqq0BCyrFHVEAM9Ws6zI7L8M-KsEq1KiavArNq9aWkRdQKaUyq4bS63gw7HaADmr8q0aqWqcKxKp7zI7GqBdpGoQpGiATCH3IUFIPdCo4yFqt6shqGa9VOnLeM_rxyScHdxPoTpC73LX9eao6oxSTqxitOSsknB3DB7bH4PDBQ_Qao0yRqo8vpqEq4Wp7yFHXtJUcUXTFxFAdijRKoqq48GtLKoaxKqyhv7GaKdtRvOcnY8FEtWxwc6oqcsdrhUg5MVqHajB3BtZoC0GcAccfHF0RQEHqvlM-gYvMArHa-Wv4r9a3GqsrNS94qOsVyxaUuq2814HjrgS-QHdTa0T1PrLf4ngLX8WqusswMzssBPKEtGWsu58o0-a1oqsbcuvtr7wlvksB__NPirVocqwENDvC47L7rbCjkI7rJ_VuqFrO49DGnKdPRDMidt3VvM2TeZDAHiBlnKepnc_ajsPHqDayeunrMHewF5kNAgB28KXgAFxZdV63erHqdGCussC16gLz2cAHZRLkjbfB6HWgNUc-pndXqymy3qU60x1vqD7NwAeh3APwDTLTnHRn2DPIRqHt8uKce3frOg8Gu_rVKh6NvqHXZwBldGkjAGwT9PGAL6AWYjkOQbL6ikssrf66cqu978Zz2y9B47wouBHyp6pAA16l73gar6tup3qYoffOY9MgXJNRw0AFW1zDIHd-qpDGGwht8rnrehv_raAO_2ETnxOiAjixZfhKkbJyrONEaCGmMqIaxnehoJ858BqC9z92b4OFA0aK2sUaSGskpbqmGievbL6GiFNblKGof3rUQ_Qi34baakhIQbVGo2zXrmC0e02BUsSGzgBkbYQGaBfy-fker1S_gDcaN6_COcbhGr-unKxC9gF1APcqagwbeq75JgqMgfqLyB36xMMEaVGyJpbromth17rsHI01HzcvLzP8BS8wxu_dP6kxqEaZ_Nxv_rEbBNWVw5QDjxgg7LFlxgBJAVBtkbl6uUAyavKkJtMbt68xunLui2ePcBnaSoAWLbASMIUbA8tevGL-ar-sGaf6tRpGbMHCjEPSrUtP35hKCweNwg2Ad8nab36n8Kybr6_wPmbcQw9JdpmY_Byubjo45qqaBmmpvWD5mg-0pZhQbehusYAD5uwKGI15uUazm30PmaHXXUBFc6w4QAhlGkUFrvRSRYUGirgmuhpGbjGp5uybamkZqjyXgDxOnjGyNmrHBWko-uZjjmhqoJcImtFotTyi2eJ3S4AAWPlMqWlFLwaRm4asKKUWwFvvC16p2rTTdcFIEbTwsgoEbT36hB1ObmG4ZvwFMHZqEzQsHKAC7caqxEs7cQ_AVsTrQ7Ulpebpy9OqOQJQL7M0g1_EcLCAxs7ioZb8BMR0LrnpCgLdUWrU-HPF9LBCH4MzweO20DGrRDBXwcA58VatnLZuv0D2S30LBzPs77PpK_szX08ggc0IOWcwcz6zdbGqpZuebLAjuq7rAA5oF7qm4LCIHqgpRNvha2s0eu_Bw2vfw_8O_e8PgDY25ICACQA8ZuwaIoSAOLapI0tqbS2s-ALDb2UZlqn8c2mf1QD0AzANUc7W3AK-d8Alf2WdUAutoSsI29_2l9P_EQsV9lfVX3V9CSxsIODh_XX0V9-22zkHaTY0mLlz5A3SOUDcQMIPUDNAjttyLaGgwIXaLABtriz_A-bLOSls-hNWzLfR2DH8OQ-bMPbjUJdqDzPW9VITK8SpMvMAUyyexuaRyh0Apcsy4TIIS8yhQHWBTWj9WPB7WpdSQRyzBGhwgCTQCAsk2xS82skw4OyWTgHJJeGDhwpWGgrNopRyTxp-DeuXIBIGtCH0BIwM-DSVA0BtA8AEWcIwpoP1VXRXVsVdlA5JXAaiCMAaEGrQiArVGoEfAxlV1CRgArAy34Mf4P-Bwsp1WShVolKUZCGwIzd6iNBSQ1EHPBRVJmTwRRRRdEaIHOeYBrQG0dTsP41-HhmWxIAX-AvAyfGuWpUY4XlWFUl6BIE4874eeDXpWVfwigpssSDV075GA_h94DOQzoBRjOpTrM6LsVwB5UgEZlRs6oAcLkpcoAOzsmpHO1KxRZXO-DG6B3OrTu94hAolID5hOIzsU7TOvtkC7guld2s7l6GHiYg4eeIGi6HOmWQ_o4ulzvhNINEyEeAZHUroD4z-IgQhQ_OnLvcx9yfLtC7l6NqQKAP-EGilByuoVSq60gZzoc1npBFUjBJydruU7acZbDfpYAD-m_pT5GckC6nlGEEFB_IScknJ19ddFJJnce4nKsUmRgmLBAWWbtFVF6DK3npVOo4BnJxQBkGNMncM7os77uw02NN56bmkhQXujtXAFXkB7ojMbupkke754Yyn8gAe400XonOoHpY73u0HuChZO4018QNQPujWMKOjwFcRKaNVV1U7pMAHQsIjVwGx7C0NBXul6LOACMZgeuTsWhEezHBvksCyMFs000B0UNRtMJkhUMae-Xl00vdDK3rpalF2j-JiwK7pjcJu_0hUMsrVUQXBF6Gch67OA4NO4CZZe5k2QuAdC0cYoAReiV70AdC3np7mXHpV69aKXpJ68esnu16jmA9RyRKAVXql7r4eelKta0bTCE7rW9NVE6YAFS3wtEU6gFbJ9yPSias1OuHvk6nO11Bk6PO57jUYHUUUVdRkup7iCl9OvgR872UJzqnpfuyzpC6-VIa1s7l6GLsq6A-sqUS7y1PTq875uTLtXAE-8zqT656VPrC6Iusroz6Ku8VWz7OpNzs1R8-tLpK7U-O_V3QnO0vqC6aVFPsK6EgYrtiB_eYbti6xugTrq7JYQNT94T-fyBa67BWdlStE-7vuT6Cu_lSgA-u2cAG7r7C2HHLa-0bselOpMfCXJr4MFlGxgcEvphBUrYbk3pt6DihQxTuzAEBZWVIXpEcReo_pSoIe-Hu-6H-17uvgP-oVS-6MrblT-6ZgD_ph7dmP3rB7EgP_qh7UrNehP6owZWw4pCejKyt6UqGXvOzi3TVUgwdUGcgii8rWHCD6Qe6nr974u9lHc6Qe0sj1piBkHuf6VGEXoeMIZdK1VFABizoxxQujywFFyhIIj9Jdesnst7UFNCFJ72pE3sToZyYTX4HFra3plkz1Y7vAGxegFG7UNJH7qX62Bivo4Gj6BXoBReB9qWEksMMQfN6NJI01ZRZBtxldQ3VY_rEsMgM_sv74B9HDM7doNNC5FPLHVF45-ObVVbQnOcTgfRVVfQZKgROP4iMH_LGqzilzVZ3td7BQAiw97T4GHlLkIsFQUHpvexDDNay0XAc4DOekbmvg8B9iiWxUlJghgQhwDhFa5vUOFUZg8h2NFSG8rSAayGa0UkmWwKhySgBR9yK4DCGyeiC3d7UAT3tkoyh7VBzIjVQWjcharETo0pRcBSyGxlLVoYGKEh0Pu80awUZAu60gQPt96UujTrjQo-wZHWBI-r3gRZ5OFlCL72UeYc66LO8vr76oumvpG6nO0gaCRG-paGb70fPYcZgDhxfu66K-hlVRpIu4fqz7quhzSY68-4Puj6feKfuJSLhJSgOGu-54ZOGB-pro-G6-r4bH7c--rsn70u0_mD5Wu2sEeGwRnvpX60-tfrf4UgTfq_5oRvfvG6BOjYanIDhwCnloPxXihW6SGDSzGHl8MnqLAVEdbtsBNu1hESAduvbrkHVCIwZJHcye_pl4-S4KAOHaBmHvWBSSNqwSt10RQejh1wa_2lk9BtBX0B4YeIGI6lRkrBYGk-4Pmc88AP_v0Z51aWT6JNRpfuD5VLGgGPosMCICrszRqJC_7BRrUfQAbRkQYhQdLGgCUHv-h0Z1G9R2YANHz-QuvOxlsGUeUqpgOUb-dz-RUdI63RuzTih78IjpI70FQQmUH1e9AC9G_e_Ub6BDRpYGNHkxp0fZVLRkQHiAbR90ftGTRx0YGLnRl4gGLixoAZABTR8sZlkIjbMf4BtRvEG9HWEDMb9GnpdgATdpcR4BhAQhoYZMpSLVADRVOh4Cyk794PsfrQpyfcgwMDu3kbMApxwnjwQkJJ2ibhhxtFRKlGIJcdw5alVK23HJAUzUWQ_h9zDTRw-xccPHuZMsg1BgcDnpRMdCGclvG_e6pB3GOUa-CfGQe_whFUxuz7vUoUqD8bk6YBn8cq7uKEUFR6dCdHpfHLxsEw_V3gDK3TRDe_HvvxkB9VW0H9-18aTR3wDCaiIVDR8Y56Dx07ichoJqbvz6feAzqgnsKc_q67MRnroFU3h6vp37zh_cYvHKJmwclVpVcCacRWVCiZHoBRtglFUiegid4mUaTD2e7MARelXH3aazr2zk1bCZIE7u3_ogGQlG8Y57Ex8Sd1lFJz8ePohJtOjf7_IGFTe7PxoCbFVeiUUYr7peivpkmdJs2kkm_USgA3Hr4b1SQdAtH1WPBrJ-9hYmk0a4e4F_hgvr9s9huSYv6xup4ZomXh_vvS7CR-vsCmnOiVQEApVZiho1uJttECmrxu0f4n_MDK3cmMuMzQxsxJmAAknTgTAcXooRGWSymfmXFSgGlJw6BUm_etSfymNJ9_r97tJqaBSnlxhSZSoDJzScAnvxkycCIzJ6zosnpJ4u1kniJ7Clsm6Ueyd1w0VRpFH4XJ6-BKQypvodfGfh4AD7HGutvuaFPJgVComjhqztX71-vEfewt-yKeYmiJ1ibG7Yp-KdPJEp0VR4ndJi4mLB0phbhXQtps2lGQj0PKYKmH6eXus6j0GHtandxiqb_7JsGqc_G6p1AfB6mp9lWyQAZ0elcnTxrqch6epoVVMmOGYXohnmhIaa6sRpxVnGmo0SabItHJo9DmmOpgWkCmbeZaden4DdgDxn1xqaevgCJ6XGCHArQcb_gHJlKjHGKOicdJHXpWcYYHUNBcdmGVxwqZBg6ZwmZSotx9YFGR6-wGb07ph1Ya94I-pvpPG2GMidj6l8HabL69p4AcFVUVQvs-HR-gFBimRiK6c4mB6JKbXY-JrVQEnMpv0matRJgXvUmQAPGdC6rJu2chVSZuD0dn6ps-VeQ0VULsGmru4adnVaZgmZHHHJmURJn9JgWkgMc-o6M2Hl-VWaUZ9ZjWYX6MR5ftC6IgGYF1nEgSEY2mR-_ftRQ2JuKY4mbp2nCg0rZoKeenMAWdRXxcp72a-mipuMmF7a5j2ejmvZu0cXos5_2fMmpBrGboGQ5kWbsn2Z_yBmmMbKOYdUY5jyYb74Rtac2smuwvSNm05vLtCnrO7uZUE7wA6fxGm1GEcNn10Y2fYmEpr3Qtn3ZwJkenrZjKZenE6d6eTpPp_gBdmK-v6dKnT5iqZhUUBnWb7mMZ12eDm_SUOZHnEgSNWToJ5haaHRjcZNFJI_5-mZSpLW2KRZmne4YdAtXAKYe5mawVyj5nqZw7sWG9x4KfTnjh1fvNgcGKAF6Bb5Y6QLnKyWWZVnsBhWeX4sFuRk_Gnp9Iev6CuO_oemGoC-ern1hmpVSR_EXZB07lZ5Yb-g1Z3Ybj7stNJDvnSGFlGahPunUnfnaTSNHIYRelaYa7Fg1EZKIxFhuall5F7hkUW2elJGWxByLDBlHZFwOdAS5e8BO4H10XwYt7O5hqbv1_RjJBO0awPsY57kesCZo0z4DHsQwlxymkXpByT7uQnfFtJDAGJ-qqxqQP1Fxbp6SNRntjRme-AHt7mZ4TvgWTKI-DaGoLDoYk7xxkskQw0FxSgwXBZwGc1ml-vBexGCF1UfHs2EMhdoW5Zs8ZPHvmQgap72FxhdlVb-3IfPmq5wSdSVByXhdXAE5zzqEX_aVzn0X1FmxYkWBlqRYbGZFwXs0WBl4JauHZ5wNW86AULpY0W5FmZefmTB_md4YDFhQeYGplyQbQGK-1Qes71BqSb0GzekqGLGv56QZMGtiWwd0IiBjihp700c5coB6VWXqrKfphFjTR6h43FBZLBg7Bp7CYRwf5E6pVweIYnlxDX8H1DB_SwMI2Q8YiWUe9xcUBPFtxG8XYJwJaQsGxgJfbggl9ZbhXQlzZfwnqrAYYHGklv-BdcOLcIE5nEhtxByXLlPJZdwpZ4We-mJpilZ-B5WDhBKHR6GWdHpql2NHPHUF_hbWGk5nYbWXU5nBZXmM5sKfC76J04cYnKlpeYumTZ0uePnbpiudYX3MbVSvm3pkSdSdxFh-f7nZl8qc3EHpAQDZX9gcRZNX6LM1ZYtwgG7pmELAUOfNXwgJycw8XJtBVNXnVggFgwwF7ydInk5_yZEX1mZeeompViEYimzhhVf3ni502bLn_Ga-Y1WnpjpYTWjgUfn1Wh58xeKmW5l-atXRsL1ctWPV61a9X7V3-YzX8Zr1bHnF7d1bQhPV21e9XQFuOf-U55wEYy65-4NYlXQ14pbC6t5o6YJHI1g2cLn21-AEumVV4_RPmU1tKfYXk1nVaOAPplZYNXF6J-foGjx_sELW81utYLWa1otbrWS1xOidW61wBeNFq18gFrXKV-tbIIwF8UY_V91s9ZgXBhslaUC613C2FAeLDnGQWsl2lZnHcl-ccZWhZ7BcHWg-gRflmBVkicoX-lrhnuG8iENd2ne-1fpOm95uZfjmhVrYcP5vOjvug2tZ2DexGq-uVfs6mJhDeClc-3pee4ARpEfb6lKQpfBHV-vOfh54NwdZ-HiN_4Zb7B-6fsD4URoNfEIMNope1nu13Ee3nt-vDajXnpK9ZUMYphXjjXd0Sua1Wa51JQxxxFo5f3pNmDQdf7JkNdYyB81lZdzX1NnddKn3OWoZ2WyuOeAjGT17dbPWux25f-WmFnehtnfVCIE45YIbjnwYazfjmBX9AGqShXqGIIZJW4Fy9Wd7nAaSzQsye6lemGfeo4AOGqlyheA3alnmZ8nUu0VYg2ONhTpM65uw4cw2sRsLro3iRxtaS7kNxOdQ2U5kEey6UtkKbDXV-nDcy3LhwjaQ2bhsDeY2F58jZQxQRyVa7WiuiNflWB1rLZnmjohEfWnWN2ftXB0R5rZ43euvjd7Whu_td3nIKb4Zi2ZuordumUMRbupH-KduAC2WRuwDsh2RzkY2VdFiGUwXEZfkY1Xzuubb3o0Zl_u-YJRt1ulHVRfgBsQuAAa03FlR1YCIX4xsjqbHfZqu1u3Ne43oV67RmsatH4gFSy19j6bLHdgDN2UX82SQmS0rreudUdtG4x2HbqmaxzqEh3At4QZ-23t_7ZxH2pNjV6pB5EwZ7GElx3svUzwaDjlITsIcX4NAgDnw1R4UGuhDtFeEO13QG0c5ic21Afjl5h78YTk8GH9d3nOZBMEO3Q071DnejhsNTCi7GpulnbBWSGRem2hudyIj53OMAXbYkMNEABl3KtybupnzmPkam7WMW4dGWEt3dFJJqofYHxBZoGUFiAV3bXfLVdd2rbuHEt0klYwZRK3YbQbdgRdI3W-1jcg3NlqnYwRIAbIAH6ydkDHOZ-sLqU1RXd4VcP4W15EfP5Dd2CY1aYgP3bp2d7RwiD3Gd79QtAfZVjCPQ-Rh3ulAbWvgjeBSd_VntQQ_Q1COwjcbJbD2mGMDfA2hORLc2WS9rwRwBnAUpl1B-cZ8vPA4R6rZT2LUf1bt2wZXCcHBS94dYjD0utzkb2bRXxBbXBdkhgiNjSALRn3-ANXagpzWJRckAo98PX26P1CfcNRm9_UAMxQEOUwaBGoWaGkRx9ofab3nAffcP37AY_dP3F9iWE52g1NIgf3l9sclX3iVq1rz301e0kgQxeTDx72-sSvaWhw9lDdr3yGWPZUNjd3tywdzduIC2lL0MJZUNHdpBzvXSVy9SLk3JZ_Rtp5SMmlC3hwDyRmA-aSMmmZmWOBWVIlzZBX2EK9G2mEUX8YvARxqROmDgA7wYg5dJsDog7wPeiSA5SQL9ZrisMjjMjg4O2D7Ll2Iu91dVh6VDPg8pIkhd_BJlCjEhhkANZFTUKUyjdnRoPODlDmz1t9OeSAMQDDHRD3P92BcSXidkizI3ZyTAEbRh9mYYb2L9yfaBAvuqw6b3R9j3b7ABuOw932XDljfiAH9ufaDVAicNGDE-QXgBwgUgRxWwU0DnzZg1wPUuMGkFwHvD_gpQEZlGRc2YVmwhwCBg5PAmD7CFYPy-VAV3FIOLkd5X5GC7WAAuV0ZHLxIHWYHsAswTldoWIAb5hGIloK62Cg6ETgDrAaZyDjSPvsO2wmAsKK6y1ItSMGUjR_CBJ0WhUj5ZnnhI1cVTPB3ZJeQKBSaL_HFAkjww9zImj5dl4X2jv_AmOaRHo5l8-j9o8GOl8dY9GR1ATY7OO_8Bo9MhtSIY_VXjxqUBoYEeko-mPW5-44IAwbJ45GPGkdQGXXUpyo8KR7xYKEnJdCB47DA1DP_CZ13j-NWm0vul1khORoaE870meORilBhYME_AxYTsDnhO38JrQ6PITtE6znMTibnJQETwk92h8TnE8hpH9AtQ9yATuAwsB_j6o5oBpjxaEZOiD5k4SdIYMpFpOmTggBZOdSB_UIk-jGQYnJEVHk_ZO-TsY92gxlKDR2PmD6Y7xlzMbWVoTpfEhn0P0DIdG8m2Tmo8lOOkXaCfw12OU-wgFTtAD1xey_UDP3goI09EgTTytoEBzT6RF8QMhUpFs1kwQfSngcABA68n4R89WTRBOwne_3L1ZphyY2mApgxxnVDHFhQfQfA7k2_ibylyYl_dpjI7wz8KhMhbiLgkcY54KM7lAjGenEyP3cFgFhFZUsM7nh7e8swMkxIU2GIhKqG2EbFazziBxEc4VsQbNnYTQXlYUMfYC4klBrSWJWP6cWgcOUMQs-glxxJCT4lVwNKHQlModgEwEsCUSVXBwoSKGEkwDOzTnP9hg8XyAhoQiXkka0LiQtBPRUaBwAy7fDP_wa0DfMEkJiM0G2BxxS85nEjuxmDPP0AC0BGBCKa84lBtgJ8-FB0AGtDbUrgAAGJ9rZMBrQaJAR05YMAbHiQo_zsAERQoLqC6AvPzjIEIkSJfQi4B2AX8_IB0LuC8EkMgKSRoTZJdgCwkhkcs2PMZmBDqJMLzZ2HzgsHIUHHLFj10AotZgfQjvgjWcy16p3zGCpuAZgKeV2B6L6i6Yv4Jd857MM2Ni7WR47RPJvhpVboB4vGLygCNYJLi0DQBjwMS70tUAUZH5MGgYHAMxuymk0Eu-zSc3HouKAlBnOsARIG8gngMSlvMYpMwFJNwrWo68oxgeaGkvaLkrBQx-LjSW8o8MDi64vloXIH6ArgNS40vuypYFkivTSSEsKMgLOnMRGQdKV7IzEBa12x9AaFL4ReYRlCAUMhJ2jMvHzCy4lgLILaHlQ4gEYrcuxgES_d07LHBhGK6dUJa_2lKfy80uGgPK5YvoOysSPMHHKiyGIELQcjPNU5Ci-vNbzSeAfMiKZ8wwUiBFqg_N9ASSx_MAziLRZBmyGsi4thQVJcIsXjGw_LU9pPXfImlKMyy_wcASK2WgAUGK1SBbzSqylGzaZelKWiF8peOkKRNOkfHvcYHDsZPLYHAaASKe4Hi269-5nguPVSqEXoLQFzmBwBwY-nu4nO3fmu6wOXfnToFOKRaY5mGAOiY4ZyMG7yI4seG_uwlNilD-5nBSFEFs_uSsouzuApjnIFlGJG4xvEEPG5u476EqxTUIUI64JWqt_5RCWVruqT120NnbfMAbLymB2vlsfa7itCyxOlOvSIQheIWnaHcmUZgcXlDtE9pBUWFkPru8EQBvr6G-0WKRqNiBuXWEG4tZ4blzkhvm2OW5LY4bhDjk3Cb-nBRvcbx9gQ5srLG_eWcb1IRJvYb-bkJvTbjTlJuo2HLi7Yu2Km_V1_TtyCqu6rRBaWvJNvBCcHOB1k7ql_bqKj4XXpYO5Bhb2XAlDulr6hc87nOdWeukwrFi-2vGQOy12vkyTm8OuTUe7l5vogfm4uuZoM8n_Hbr-684GsbPkXRRDbwUUlusLz65lv-AH64U4_r9hXSJd-JW6Y4Vb8NltuIbiMT-4tbv7h1uVeO27vZsbgqzRuEOAm-C5h79dldG0QRIH1uEb_QAXvkb1jiPpkBdG413t-Etjd4SeIjiI4qbvoe9Putum4LUGb23ZUWljcO7Z4tVEFZBhAj4jS-FiUNZccUcNoo9nZb76-_NpK71e7vuiNfCBIYo6ywHTxT982Vb3292_ZAftt_eY_uWQG--_vuRVAHvv_7164sCA1ytEi637nCZSRWblO6st076dEzvHLbO5ysEgM64Fu2ELVBWIRbzRjFu6pCW9UYbrueDuuq7qKDtEr76u9UYpbr64butb9lTbvUrNW8ocmObu8kXe79dn7v12Qe5w5p7mdlHvUb424Hubbqe8xuReAYrstl7r-5oANHg25_ujbnrg3vEDhR_tvhBR29t7KbhtZuWsDIi5au4LGi1GIUI9qU6ukO7q80gHLPq_MuoAF8zfMnJPeFZvxrls28fPb_PdR34AZ9dgg3etJZ9vgDmO7WuE7-jpUMcH9m72vU7-yyzv2rE1GXphutdnbuR6DKzbvEbkthOW9HzfRdZDJqnvhucnmdjyfguNCYfgcONbo0eZH9djkfinmdnRvyBHe5dY8Z-4w-QmntXTJvE6Pe5FOPkV299WiNp9TPu3dtB8zQvd6mcSeUn_B4-RCHg-_d5XhtbneGzhq6-nQ8Z6h9DpaHnqXoeTUBW7NpKns2mqewOPW8KeWHh24tYynp7oqeBHk2-LAF72p5qfr4Hp7OeVHnrhafLbnDnaft7m59xmy1j59rA-nu3gGezaIZ4puRn7LDGfu91a_PuN94EZYXU1-ub2A6pNNdQo9pFneV2hdx_ZF3SB5m4lItrpJ_XRln7m-nRWt1w9w3JqLZ4FQdn6Xl2fLgfZ_k16H5MT3Wy1wnHjpTRUflZEjnqDVOfsKDKxBfLnpjiKffnxVjd47n0Hoeexu22-ee3niWZMgLWTrjBfw2H59TUt7-wU-4vt4QYsFEJ43vHurb5tkBeR6bp_huoRDu6-eLWO-FnAibEx5KfBnsx6xMYX-EzheEMU-56k9dpF9n6eDhdWTvSXiFHJf0n5MhG2YgDfrG2BN2l9LWWV1AEev6BFl8tIyBSWQ5fY34HB-D0AYHBo2gRrl5lRE31415fVFj5DLVBX6dHOeLWUV-bZxXzV-kMun4F_hu_ph18VZpXuwFlf4AeV8wAXn6-EafrXtp5qeDXvV6MfreKnSbfIX8m_BfoXxmFGf9t3PamvzAbCyC3ohqJ5RfNHnUBYfA7nqXYeflHpanIt354ijud3pzS9fz79a-WxNriKwWfzGYN6nY_STJ82fc6Jh9LvbaNh5gfBaNtenRjntOlLehXhV9hvEZmV91vHnoe9_eCeDXq17kBV54g_3n7R84AQ-JUTVfm2DV864DH_57-4AXpjnNeEOO7b-4EP2t9Hf-np1-MYTUFZ5kMGNiZ-Pepn_vcTuEngN8veTUa9665b3uifWeGJvDbpfp0DHGYfdHnkRff4HzyydExpzl9Fu5RYAHFukHPl8TpP3k56A-LWct_DYW3kF_n65Xqe5A-euMD8NeCeSD80_oPk7mw-S-XD4tYkP9e-C5UP4x-bZMPv7j0-qn3t8detX2z4I-J36dBI-8SLU8meI993e8PW1ygbTXgobF9ymsXjF6V2EiPF78PsNGrpHeN2JO5Je6PjO5SfYrNJ5veeb8Kepfhu9j-2nH3lh_LuhGPj84GBP7Z85fGX4T9mIxPzDyFEHV2sB2eJ0HUULf33_MR6fv3st8en4bhT8JuGvxVjk_6n6D_DYTuAz8VYjPgngMfO-ZXo0-euLT6O4EOdG_Q_zP-t4Q5LX9dl6-IUW15SB7Xsz8leIXhz7w-nPix6PuPX8j_k1vX8w99fqP7B9o-8Hq97i-Droh-TI12MN_67I31L4ff9ALj4Qesvrd7y_6Xzl4aAE3kT72lk3jhSjYdnjN6zfzD3N-ZefvwL8XsJPs2jgM2viFA6-gX2N8U-jRB8Cm_5P_99bfAP5T-A_O3zrikfE-Bb42_6ngd6ZUVedp4i_reU18J_Nv6n_MeL18zdhWQl-9dMOCAEecNRl39YCXHpZ1943f5NLd9dQlx1yj3eOf0aYPenF6Cc9f9vk97ifhf0XpO_ovs75l-g3i765uxfxj9V_KX5j_QfWP6N_V_KJjL-4_WHkT7e_URwKc_fWpyp9hm5P2Gc5VGp-hdRXRpkegt-Hf9r9U_rf0ZkvxdXkn_xWifwQaN7B3um7vYGnxX564rPt37LevnsP4FR-vgP6HfI_56Uj_k0N38T_nf_L8R_7fmdlD-U_oV4j-s_sq29-06ZP4L_g_vP5j-XX7Ccqtlp43CXGyPo98l_KPi-8DRXx894ssYv_P8ZgGP7CfT-NfqAGzeaX-eCuvzf_X5e_ePquhYeLRVqYZf5uJl6y-Sv1Jyh_S_xmEb_c_qubSti_n94agu_5t_R-vF5f6Lmsftv_DYrf3f6DouvlV91_pHnP8T5o_uP7L_j_7KY9_wPg_-bYxvm_8L_Vvk1_P-i_z_5smZv7_7To5vhf5p0Ye6R_Jb4rfQAGOfcAGETJ_5QAyAFv_GAHl_Nf7q6av6ufCj7ufOrb5zINavjOuZMQZzAwqPz472Xw5P7UXYOaV8aLbeNQKWGJ4njbKQQ_D-xtQYVC4A7ND8_Z37N_Nm6t_SAEd_LP6b_bv49rT_jjbRiaRgc1iD_J75PvBxgj_Nd4G_cf7L_QH7NBYH7UvL7ig_Gf40AidCsiJf7McGT6QAuH6u_O_4VfX_7QAkeiNvPQEbfSP4tfNf4VvdQE3_dOhaAxPh4_CwG9PS_4l8a_7aAiAG2AuAEaccn4J_UwFGA4_6uA6n7kzTwElATwFIA6CaF_JmY1gJn47sW1pQLG0Ts_LhZbvHn6WkPn6HvabpC_LfYoaaO4Ivev6nvdkhRfC94K_WL5WWeL5XfRL5m0deZeCPWZ-2WjScvG0Z2WYHAl3TL5iAkQGdsWZ4cfBfrA3Jr4lsPGaE3Kz7NsAn6b3NOiY7QHYcJJjilA_yCE3dT7-_Z_7E_Op4zsIP7ICboF3sXoFR_c25j3Id52fNb6mPQj4QA2n6xzWrrjPWv6WkRm4FbM945Alv55Agh7K_BL5q_EoF-zDea5zcw5pfRb4FfKf7VAxIC1Aof6eWV76vvMr660Sf5-2af75vHAbifZoGYGRW6tA5W7tAjD5lrBe4AA-b42fcNigAuEFjvYYEFjLHbwAHHYlsEYHz3Ce6n_RVjKPYm44caP7v_cNjjAr34zAqYGo_ez5IgqkE0_V147Anb45bfYGvGA75yAhranaHKY4AiNB4AmgElIQgEEvMXbJkFgG4PNO5rsBj7FA_oE3AsoHWIUba8AoXZgcaQGCSWQGefeQGMvF4FvA4QH1Ao35fAlN42vTl5A_Xv7Kgqf5FfUT50PIEHQ7QT5pvPUEg_Kr6mifAFQFHvhFvD94gvF1gJ9QR4b_BDidA4LgGAvt5_cTEFdvFKg9vfEHfPZYHyPcb5GvIkHUgiME0g7YHSGXoaGPHCjWPYhwCWcIBOPFs7NUYOBuPe8wePLx7DXfOB-PGCwTXXMjhAtnjsWdlbiWJBaFSaTp-3bn6-fIO6vvaO6TkFIGRfNIFJAjIFoAlB6DLbIE0feX7Cg-j4XAooFXA7ChrPLX59_HciPfGgDPfD4ENAsf4Og4t6A3dQG5PVT63PNTY2rMzaQgtP5YfOD6wgwMFrAykFU_Ev77g2kHTzekH03VAFgHaZ7coYEGCgwN4CoUUEfIG77JfTz4PfRW7vAsu5TgiQGCBR1ZPAv4FGg2f5VOef6OgucH7_F35ug2G7Lg4tZrg6liE3GEGH_REFp0BEHbg9YE7gvcEwAg8FTvbb61oFAF1_NsHzzDAHefegGcg-Fg1gnqQ4vYL6z7IgEBaL5Rdg3IE9gxOi3giFA53BIA8AwbpRvfv7lfcQgvg596agnL5RUd76PAi0EyA_UH-QJl6PXZ65ZfZtAMApbjAgloFAQ2T6Lg-EG6Au9heg8MHNvMCE7rY16IQr_6Rg6MF0gl145YMIHoHCIFjgL1ZhPV9YmWCsEoYCX4HAqX7CLAfZy_aiFRWfIF2WQoErPI9pMfEcGAQ9t7ggnH5McSt4zsat4UglSFbrddargpCFbAqMEuvbSF29BLrwvNz5ngqj7HAqiGnAmiHnAgoGXfFyFQaIcFwIDZ78An4FCfGh7g_A56mgv0gw_ecFAAiEHNsXyFVva57qQpcFBQ7TYhQjSFaQlCHNQtCF0_XYExQ08F5bDz71bZF44qHz7ovYiH-fHmjcg31S4vMiEEvGromoK8FsAlKFOQtKF-kBiE9_NrZsfNiEfIX4FUPH8Emg0r7ag-SFpva0F2iGr660ek4r_V0GZWXW4FPFXj-QsMFkguqErg0sEBQpqGoQlqGHgnSGIbXb6MgzTrYQn17sbV1QnA1gFnA7Ch0Qu8EkPLHZ3fGUFPg6b5pvL77GiRQE9SP77svSGFO0dN4CQq0Hx0AEHG8O0G7cGcEQoY6Gw_AVDw_Ct4XQnDhXQ1YHyfVSENQ0KHIQp6GqaM2jpQ_ox-nBMFSWFHYpg8i5pgnq53mEuBGKLMFDXOwQjXPMEnUAsHrAIsHTXPggBbVsjmQ2TbVggaG8_OsFJAhsGvvSO7fKdIGxQrqHx3GyHHff17dghyGzQ1J79g-iFuQiGFfvDiGiAriGj_d8G1fHGEeQ1f5gcAmFp0ZHZiWR_7hsAYGtDIHbIgj7Y6vR2E6g9cGWfTcHWfBCG7gx6HPQmmHhQgIFtQ48GWQpkHn3NDYawlm6nfZKE3gvsHpQ-8EyrFj4jgh4HrMY2G4oN8EIPXiFrQvKF7PAqGsvIqGSfer6lQs57lQ8Nj2wvGCewxVjOw7Hauw5tgDAj2EjfL2GQQz0G-wrcFMgGqGaQnuFhQ4OGRQw-4YQvYGUA-v5IvKSGj0fqG2ghdABfQaEEAsaHC7efaTQgUF_QoUHawwGGJwhaEgw3v6pfVaHv3dUEG_T4HcQkGC5w1P5Iwwr75Q4r5bQuf47Q1uEgwBQE8vDGz_g7Ci4wsuFlQ7yHrsCz6qPVOxD3WCFmvFyJgA5SGn0ALY1wi1h1wtEENwmdhNwh_4twxqG9wqmERQgVB0wlz7Dw1sFxQnCF9bH6Hu8aaEAwnWHOQzeFRsW74RvcGH3vHyGZwnj6mw8QE5wj8F5wqGHffS-Fww5OjfAiCF3wy0Esg14FVfdGGHQqNgvwmSHAQs6F_cT-GKQ5OgTfBDhVwkJ7TAxuEogwYEqHUBFSI5uETA2BGBw_uEhw2sBII4Z7JoRmEaWLSyYoAYoswpqhXmVx69XTMGZXTx48w98z8wzmEjUAJ7KXYWHzvTGhCARSwIkV3p24CWGxAqWF7SRIFkDXd4Kw5m7KwzqFx3dsGXgleHXgpX6pQlX5ig7v6Gwk55kIw34V3M2FUIi2Gzg3Oivwxr7vw4kFljXSxMcFsYTANsa-jSn59woOFxggeHU3N6EMgkeHYQ6OEJQuyFJQteGhIuaHhIgcHd_crYkIx34xIw-HxI_j7UInZ6bQwqHbQxJGL_K2FtAtJEWsOsaZI5tjZI3UZpjH0YdjfJEqIvoHzI_ojoQ0pEngrCFoIseH17CeFovKeGPTGeHyaEiH-qBeH-HBzSdg6pH_Q-OF1I3WFJwtyHbwlpFGw_eHD_ChGNAjh73MdaGZof4GFwy0hsvVaGVfbl4HQx-HYw2sAlQ3hHlwkCHjIjJHmjLJEpjVsZTI9sZeZWZHUwhBHKI1qGvQmm5lI1BGqw3rZAjI75VIzWH2QxZ4XIvBHXfNyFMQ46a3I6JH3IycGPI6cFmgviFIw6GHKodGHww75G6glGFsIhQGcI_5H9IwFGlw4FHr_fhFgop0aQo1MafjdMZwo_D4FIpFGIo1RFLIuMG6SSsRdQbdz-YTQDUAZs6swkABuIb1KMoIEDEgKoDeAbC6_gckAnZStzxNeXqMoGKA4Ac1HiwNRCz0a54QJaqr5AP8D9jH0CGonKjkgSgCiyHICDRVuA9UbHjlAEEB6okYxDyX3i64HgLwdBeDWomODXFZkgIgQ1CrmOWi0mc0A8BAAB6KaUj0OAAzs8qFnoK9kZQSaMRQxenTR85n1gVRC7gpRD7gJpntMOaIROWUHTRGaNXAsh0moS1AzYjKBXsmaK5hJiOTRY0HTRBaMrqB8m5hr5mTRaJxoQ3aNbRDF3HKzFy_wA6MPO6aJbRdaKXovFxku_Fz3OHFw7RWBBrRhaNHRTF3yumwHkuNuBKuzQkrRU6JnR7ZgTRUoCtAkQA7ReUDTRGdhnexVH9RuABIuhFlVR-iIWstAF9Aa6SxsmBy7gPqKAUhjAUA8gHkAQAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};"],"sourceRoot":""}