{"version":3,"sources":["webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.mdx","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css"],"names":["module","exports","chart-title","Chart","container","width","height","className","options","data","margin","category","floatFormat","d3","colorsData","colour","key","Math","radius","pie","d","arc","svg","path","toolTip","selection","tip","toolTipHTML","arcTween","i","this","_current","t","destroy","draw","value","colorsDataP","updatePath","data0","data1","m","length","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","chart","chartOptions","chartType","piechart_className","originName","styles","refreshIntervalID","PieChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","_assertThisInitialized","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","document","events","window","clearInterval","_this$getWidthHeightB2","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","dataLoaders","getProgressVotesCount","Promise","values","progressVotesData","error","console","chartData","parseProgressVotesCount","parseInt","Completed","Not Completed","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","PieChartEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","e","CustomEvent","CHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","province","name","muni","disabled","onClick","onPreview","concat","replace","ProgVotesCountPiechart_piechartEmbed","MDXContent","piechart_classCallCheck","piechart_possibleConstructorReturn","piechart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","piechart","embedcode"],"mappings":"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","file":"static/js/src-components-prog-votes-count-piechart-piechart.19211ab9.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-title\":\"piechart_chart-title__3WNCY\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\n\nimport events from \"../../events\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.CHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport PieChart from \"./piechart\"\nimport PieChartEmbed from \"./piechartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"progress-on-votes-count---pie-chart\"}}>{`Progress on Votes Count - Pie Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the progress on votes count as pie chart.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<PieChart width=\\\"600\\\" height=\\\"220\\\" />\\n<PieChartEmbed />'} __scope={{props: this ? this.props : props,PieChart,PieChartEmbed}}>\n    <PieChart width=\"600\" height=\"220\"/>\n    <PieChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};"],"sourceRoot":""}