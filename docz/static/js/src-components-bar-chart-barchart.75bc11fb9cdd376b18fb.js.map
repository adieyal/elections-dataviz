{"version":3,"sources":["webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsData","options","eventDescription","query","gql","_templateObject","_templateObject2","provinceName","getVotesDataM","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","_templateObject3","_templateObject4","vdNumber","getMainParties","_templateObject5","_templateObject6","muniRegName","_templateObject7","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","regionType","muniName","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","_this$getWidthHeightB2","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","setState","event","newState","detail","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","style","container","dataLoaders","partyColorsLoader","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","edge","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","react_default","type","placeholder","onChange","onEventDescriptionChange","item","key","onRegionTypeChange","disabled","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","name","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","tooltipDiv","predefColors","svg","x","y","YaxisOffset","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","REGION_CHANGE","MAP_PREVIEW","firstEdge","nodeData","results","node","el","validVotes","partyInfo","parseMainPartyData","locationToMainParty","edges","partyResults","parseSeatsData","map","seats","b","beautifiedMuniName"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.915f4710.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province:\"\", party_Event_Description:\"${eventDescription}\"){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province_Name:\"${options.provinceName}\", party_Event_Description:\"${eventDescription}\"){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  ","import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name_Icontains:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n          event_Description:\"${eventDescription}\",\n          location_Id:\"${options.vdNumber}\", \n          location_Ward_Municipality_Name_Icontains:\"${options.muniCode}\") {\n            edges{\n              node{\n                location {\n                  vdNumber\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                      }\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n  \n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n            event_Description:\"${eventDescription}\",\n            location_Ward_Municipality_Name_Icontains:\"${muniRegName}\") {\n              edges{\n                node{\n                  location {\n                    vdNumber\n                  }\n                  partyResults {\n                    edges{\n                      node{\n                        party{\n                          name\n                          abbreviation\n                        }\n                      }\n                    }  \n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  ","import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\nexport {getSeatsData} from \"./race-for-seats\"\nexport {getVotesDataM, getMainParties} from \"./race-for-votes\"\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            colour\n          }\n        }\n      }\n    }\n    `\n  })\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>RACE FOR VOTES ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              style={{width: this.state.width, height: this.state.height}}></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents\n} from \"../../api\";\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n        return (\n          <div>\n            <h3> Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"Western Cape\"\n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"City of Cape Town\"\n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={vdNumber}\n                            onChange={e => this.setState({vdNumber: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n    var svg = container.append(\"svg\")\n        .attr(\"width\", parseInt(width) + XaxisOffset)\n        .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst BARCHART_PREVIEW = \"barchart-preview\";\nconst MAP_PREVIEW = \"map-preview\";\n\nexport default {\n    REGION_CHANGE,\n    BARCHART_PREVIEW,\n    MAP_PREVIEW\n};","export function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            validVotes: el[\"validVotes\"],\n            percOfVotes: el[\"percOfVotes\"],\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function parseMainPartyData(data, props) {\n    if (!data)  return null;\n    var locationToMainParty = {};\n    var edges;\n    var regionType = props.regionType;\n    console.log(\"parseMainPartyData\", data, regionType);\n    if (regionType === \"national\") {\n        edges = data[\"data\"][\"allProvincialBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var provinceName = node[\"location\"][\"name\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[provinceName] = partyName;\n        })\n    } else if (regionType === \"province\") {\n        edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var muniCode = node[\"location\"][\"code\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[muniCode] = partyName;\n        })\n    } else {// \"municipality\"\n        edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var vdNumber = node[\"location\"][\"vdNumber\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[vdNumber] = partyName;\n        })\n    }\n    return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      partyInfo: node[\"party\"]\n    }\n  })\n  \n  results.sort(function(a,b) {\n    return b[\"seats\"] - a[\"seats\"];\n  })\n  return results.slice(0, props.numParties);\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\"-\") != -1) {\n        muniName = muniName.split(\"-\")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.vdNumber;\n  }\n}"],"sourceRoot":""}