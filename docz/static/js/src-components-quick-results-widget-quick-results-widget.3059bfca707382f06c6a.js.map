{"version":3,"sources":["webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.mdx","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutMap/map.js"],"names":["module","exports","ELVIZ_menu-widget","ELVIZ_chart-title","Chart","container","width","height","className","options","data","margin","category","floatFormat","d3","colorsData","colour","key","Math","radius","pie","d","arc","svg","path","errorText","toolTip","selection","tip","toolTipHTML","arcTween","i","this","_current","t","destroy","draw","value","colorsDataP","updatePath","data0","data1","m","length","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","chart","chartOptions","chartType","piechart_className","originName","styles","refreshIntervalID","PieChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getRegionName","react_default","a","createElement","config","ref","dataLoaders","getProgressVotesCount","values","progressVotesData","error","console","chartData","parseProgressVotesCount","Completed","Not Completed","__webpack_exports__","ELVIZ_tooltip","ELVIZ_component-transition-menu","label","active","ELVIZ_stylesheet-tv","main-left-part","main-right-part","barchart-container","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","cssPrefix","provincesData","getProvincesData","metrosData","getMetrosData","CustomLink","_possibleConstructorReturn","onClick","React","e","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","_this2","activeLinkId","handleNavBarSelection","link","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","concat","triggerCustomEvent","REGION_CHANGE","MAP_PREVIEW","content","icon","map","province","name","metro","join","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","comp","stylesheetFor","quickResultsWidget_assertThisInitialized","zipfileName","imageLoadPromises","votesInstance1","votesInstance2","seatsInstance1","seatsInstance2","turnoutInstance1","turnoutInstance2","progressInstance1","progressInstance2","spoiltInstance1","spoiltInstance2","zip","jszip_lib_default","imgs","base64","type","saveAs","CHART_PREVIEW","_this$state","barchart","Object","assign","instance","Map_map","RaceForSeatBarchart_barchart","TurnoutBarchart_barchart","piechart","SpoiltBarchart_barchart","QuickResultsWidget_quickResultsWidget","quickResultsWidgetEmbed_className","originClassName","bootstrapStyles","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","edge","QUICK_RESULTS_PREVIEW","EXPORT_SUPERWIDGET_PNG","DOMAIN","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","muni","onPreview","onExportAsPNG","replace","QuickResultsWidget_quickResultsWidgetEmbed","MDXContent","QuickResultsWidget_quickResultsWidget_classCallCheck","QuickResultsWidget_quickResultsWidget_possibleConstructorReturn","QuickResultsWidget_quickResultsWidget_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","partyColorsData","yAxisLabel","dynamicYAxisFromValues","yValue","seats","yValueFormat","BarChart","getNationOrProvinceName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","getSeatsData","partyColorsLoader","getPartyColors","seatsData","parseSeatsData","noXaxisByParty","percent","getSpoiltData","spoiltData","parseSpoiltVotesData","Valid","Spoilt","percVoterTurnout","eventType","getTurnoutDataForAllEvents","turnoutData","parseTurnoutDataForAllEvents","Map","disableNavigation","drawGraph","selectAll","remove","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","canvas","filename","lnk","createEvent","fireEvent","loading","CSS_PREFIX","react_loading__WEBPACK_IMPORTED_MODULE_9___default","color","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","getTurnoutData","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","legends","text","parseInt","getLegendXY","it","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","smunicipal","w","fo","muniImuniCodeD"],"mappings":"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","file":"static/js/src-components-quick-results-widget-quick-results-widget.6f91005a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__1KFQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__1UVX7\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__1faC8\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__284h0\",\"main-left-part\":\"quickResultsWidget_main-left-part__2PFdy\",\"main-right-part\":\"quickResultsWidget_main-right-part__3aSBj\",\"barchart-container\":\"quickResultsWidget_barchart-container__32mow\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__1QzTz\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3beRX\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3OaTN\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__1_krp\"};","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        to: `2-${i}`,\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ];\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatBarChart from '../RaceForSeatBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport JSZip from \"jszip\";\nimport {saveAs} from \"file-saver\";\nimport {\n    getRegionName,\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\",\n            stylesheetFor: \"web\"\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = this.handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      if (newState.regionType != \"municipality-vd\")\n        this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'race for votes') {\n            imageLoadPromises = [\n                this.votesInstance1.exportAsPNGUri(), \n                this.votesInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'race for seats') {\n            imageLoadPromises = [\n                this.seatsInstance1.exportAsPNGUri(), \n                this.seatsInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'turnout') {\n            imageLoadPromises = [\n                this.turnoutInstance1.exportAsPNGUri(), \n                this.turnoutInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'counting progress') {\n            imageLoadPromises = [\n                this.progressInstance1.exportAsPNGUri(), \n                this.progressInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'spoilt votes') {\n            imageLoadPromises = [\n                this.spoiltInstance1.exportAsPNGUri(), \n                this.spoiltInstance2.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            console.log(\"exporting ...\");\n            var zip = new JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            imgs.file(\"image1.png\", values[0], {base64: true});\n            imgs.file(\"image2.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n                console.log(\"exporting ended successfully\");\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState);\n\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    };\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            stylesheetFor,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            comp\n        } = this.state;\n        return (\n            <div className={cn(`stylesheet-${stylesheetFor}`)}>\n                <div className={cn(\"row\") + \" \" + cn(\"component-transition-menu\")}>\n                    <div className={cn(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results for \n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={cn(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div>\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart \n                                            ref={instance => { this.votesInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.votesInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatBarChart \n                                            ref={instance => { this.seatsInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.seatsInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart \n                                            ref={instance => { this.turnoutInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap \n                                            ref={instance => { this.turnoutInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart \n                                            ref={instance => { this.progressInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.progressInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart \n                                            ref={instance => { this.spoiltInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.spoiltInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport QuickResultsWidget from \"./quickResultsWidget\"\nimport QuickResultsWidgetEmbed from \"./quickResultsWidgetEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-results-widget-v1\"}}>{`Quick Results Widget V1`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<QuickResultsWidget />\\n<QuickResultsWidgetEmbed />'} __scope={{props: this ? this.props : props,QuickResultsWidget,QuickResultsWidgetEmbed}}>\n    <QuickResultsWidget/>\n    <QuickResultsWidgetEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n        \n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"tv\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")+\" \"+className(`${config.CSS_PREFIX}stylesheet-${stylesheetFor}`)}>\n                <div className={className(config.CSS_PREFIX + \"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(config.CSS_PREFIX + \"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .style(\"height\", \"30px\")\n                    .style(\"color\", \"black\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}