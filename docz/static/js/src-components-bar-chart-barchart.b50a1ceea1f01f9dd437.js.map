{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.9553bbbb.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={vdNumber}\n                            onChange={e => this.setState({vdNumber: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJGg2D4IISQPBg8gCP4VVUAFe0oJguCYIvIhAhyRD2GQyRUPQz4NxoHC8LokVcNogjz0Y7JyLtDV2CDKU3RNBVzXaCSHWAdhNB8eRZLldoAAEYCIEQBlQDCukUgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ28gAWQL2AANkC4L1jAECADEfWgRJvP4ZxDkRR1MHYAAFIR-CWfSfjgMLESSmsUpoZwIGsy52AARiikL5HBczqEsgBBOYnPYSMVNI6B0HDdh5E5JyxGGmMZHYVEHJgbhgEPWz7OxeRt1rYAxqgCbggAMmO8ZEnmShmgOo7zG4e75TAUJzJ7VB2nYAB-DZxvDSMZquG7wy6mspBkat3zMWFJMwMAwigKY_tm-aQYGlca0TaSCBwVLMhSa8CF22s6z4gj8y4CY-BAOKfJ8_hfBgCAUkISmACYWdpkB2C3VdExJ-iRKYrnCbrSRMex3H8d2qRUfBsxvxADiMIzbDBPw-iiJIgiAK0CgQP0BgqMkzGlhU9csKzDSWP4M0pXEyjIPYIwQjsdBk001iQFdu3DYdZbHKtkBPWItCtbOOBvYd4B-IIS33WQz0-YE13g9I-i7aUqYYFYbD3fjyQcE9LPsIj6iXPWM8ADURHgbVolcfUQosM8ivoxJHCgYU4Eb0cCBK340EROBa4IVwzFjk084LyRZggEvJNc0KYLgGAq9oIe6-7s9xWeagADkfSZVBx6QwPPSn8JoHDkAKLMVgYP7IQ_nMmu66G5vH4Hl-R7-m_UDvo50B13FDKeAeBLACm6M5ZMfknatRpj5X-T0XqGR6FAfwcB97HkjMKRmaBMEwBmgvCwXQCB9HMH7eAABtHBnl8EAF12AAB9GF7H6LQg-FFgbdVvvfVOIoKL_37K3dundh6uAEffLoIC4B4AaHoAQd8oANG1ENBB3VBF8IILqGYr07DOSIRseilgLotX4KKSU3RUrCnYKveAZV1iJD6lgWwAAZVwgQoBXH4EVc8op7Dnl3pYPqABxc8NjdSWHPM4exNZEgV3iIyK4ORuBzXQDgOE5BdRgFsV3Bx8SoCMisQIKIBAriKMZEjcp3QADU8oACkpkuHmTQXAOwidM5YFAugOwZtMxTAXquCyaJQhSmFJGAclA7iEJ5ktUIcJxmDjgJ-GZgjl5QGaM5CYtgKJEwsFsuAOBURZCGgY3Z7BUChCIC3EUEB4BXAAKzdzOUXGg2p4DkH6DowyXiQDs3auwfer0-yXi2K9GJZziEwB3qgYx8wfmoGiIZeI4KIUTKfoifBPyUVnKIM9CAmKPbYt2biyijhMBYpAE83ZrB0C70uYEcshLKUzOBmciAzQFmTIORcq59FblLLLujXZ-zDkj1oDgHl1yYjwCGhMu4ErLlSv5Ts3ZrLdnsuGnKg5XRoWwoIYKiFBJbCiqyGGKFhk9WysWWa3VJiVVEzVUTDVnL5Vos_vg6ZQqiYiqOeKt1z98FWq5ekj-AaOEspmc6rVOASX4oPp6w1PqxX_ljYG5y0bU3hq9VNSNHKM14rJfq05wrCQmvFbGwtQb5UVuLPa2sjraxRutTSulokBAJohUm01Lb6UZCrQcntba60WAbRYJtwbcToELKdB-wbNiM0IB2s5XbxWTsLOm61a68DDtrCu_886mZTA3XOhmh6d0aQXMvA1ELBHFpxU4dlAB1Kl96WBgAABIzJHUNEVZ5H3kzwO-09hA7zOA-UEVAjVmo_y_Uag5vr_xbqGvpN9j6d17NLQh_AwGj3sBQ-y9956Zkir8BgWA29DJ0VnJAuD-BKjkfNdQKjaQcAeFUJGfZyzs0kfozAEqWdbkjHPNnLMmzS2kfQLAfjfwYBCZE1jNjGAOOEi48u0tXQJquBGNHH96nsiZG01rRTj5ON1rVYMzCfTtRcH1G0GgiMBnZseJwDle6cBIZnW5g9i7BUzOcxeqAV671c0kLWW9fnQtE3w2AZ9EXiUPo_XF79YnjV_oA0BhdBBQPgboFBmAMGnORdo1hpDzlotoaS8V5N2HMvIYS4RuLTSzmrIXBsuDO6RWaZGMp1LY5HA0FcGgKMnIlh7tU7sqRXQZFyNoAo-IyihrLwIDNjIijIyIxSdes5aywA4C65GHbp4-sgUGy6AQf0liHYQ--M5ShjhAJgNIsBEDxtE0PJck84VhP6BcbYUCUYXkEAOaKc8wSGi6l3gAfXsO-vqu9QmjfE7xijTHSNpFe7Wd7-McBffk791E6RzuA4OTePqfjYeiksJDoqIOK4NHPM-2jEmpNdBk3J_QGOLC4gwKMHHXZvs0Hx_9871t4BNSZJS2jGmDPRyWOzHyGOmu1i4ubHUXAACqMxAG0Ac8R0t-3f3HYG0N87I2qtZBu_W7qRMVd9P_QkdXqB9LPQILr7NFlKCwBwB3FI0YQAp1Js9Z3NB-Cc8MQ6ZyFyEg7qxyeLo-ls4C4IELwnkZic4BB2DiH0PYfw_PIj41zOYAo9QMxghMfTgfZoGahPMAk8p7O2n-TJOycw7J1Tmn546cM4Lwcov0nBNJ7D9zk4Iwa-_Dr3jv7qfRf5GamVKX-mtPRzD-QCkAgVtzagJGSboDN-KOUYr63tY0tTsAzh7LXRcvi7d81--5Whr6miHgGNaBIwAA44FLFj9Xrw6BEgfBQC3I0D_pn4Wj-T3IK47rOo_4KZOAAFr7AEECgGFiMDsAADs6B9ylur6T6Q0sBrG8BgBSBKB-I4BkBO6gi0W76dWqGkgyYOA9yO6JCZCW28WqGL6tY1BEaQqSukKXW0ct-uyzm4WhWXBCWsWYhFg3BYhGkKWByp-EwGWh6l-EGeWBWZyzmzqmiOBtYzmFgmie28AaIlAiQGhwhoWmiQ0LoYwghhuBA_WI8JuF2eGEh5U9WSwa-6CHqO6zmPqY4dkWQI0W6Vw5WSw3mpSrhb67600Zmv8RMReJeZeTeHObBFggiNhgRtAQ0gORhThUAHWmGARyakYmRyauhfB0wZGfGrOg-8mKRNAS6YW98ZRxyzkuRmA-R0BHKOhsGhh5QJhZhq-pMkesmDgBEPWChRuThjeZubmW6veZa-6OGnhLSGC8ahRxqS2WR-WrRtAFRx-Tc0xp2w2aRk4Y4rBrshyC4oKkxZqYAA6TUugMxGQBx2aq4U4faQhRMLBAg5g0Y2aRMsYHAXhrS-ClMAeacIAwshqwJqC3hB8a0oJ6xWC_AmiFoMQBAsAoeO0-0BE2iuiHwBEeqGkI0W8jGqA-Cdx1200VwoMcYsGQJi0jJE2j2lMfw1kzxJxAgdMLJNuax4J-0ApB8fu6Jf-iQOJrEgJEKEgu4sgLJ9J8p0pbxq4-2XJJuZIiyTRBhvUnu_4PufuXWBQ7ABcrGmsUJYeLW6yum2yKy98rA1c68I8LilAnYfazklcjpYi-oLqSylB982urgLpbpAgei7AlCDpa8YiwZ04dC8R6qHKAAhGFCKG3J7qInXNqc0UcCmfZCIqGTGe6T3FKmmR3KGeYWcoGYWaGeknkHgOMsIumQWa6dOGHpURYH3EQDSDjgkJGFWS2RkEsjgBMHQJGEglKIZJGFUksipLBoIpGV_K4ENNOZQj5HGbBrmaWRmSPLKo2WWU6UucwuwCua1HGYahYLBodl1sEpkDMPWeqWdpqVyksAuQeWSHudua4G2ZyB8NEKRGngIEIEcJth7l7hkEBQBUBZyEfmZG9gZjebMPeSdhqbOncN_hvEIqmfmQeVmekbwgRGIruaGSvF6XXH2RhVqmHlKYaoIqVphcvDNr6e5gBlRceffBEURQxfZtGhEaxc6omb0dKQYSMecmMYIQ-RkEsAsfTJlqsQiceKxaBfqZQL7miaTLbvoAvoJYav0QZpGJomIu-VhU2ThWZmPN1FDA6DDHDDRGrPwnLEoArGhErNxEDqrNHO5cJKJGkoBNoM8frOBD7JqOaCbI6MrBbLnIIFqHPA6LoJAHOAHFPFPHFYzDFVMF4CIKiLeXZCtHYAHBlUDmiLMLuKiICK0kRC-FlbMK_qgB8K0mlUtFtDKolRrCHPzN5XVVfBREFTCM3pFUlYXM3g1cWmeCChOdQEnrkkKu_P3M_AeWPP1WfJ6DPOnGZIIv6oPIRR6WOH3OiouQVmYOOa9PCWCSKTQmgPYMKQpWwb8eYAVVVTMDldiNQmwhdVdTAAwkeRQnAC9bgqXu9Z9Swudf9fJTAJwt1MiewO0gLHmNgF0j0pZq6MWhZqgFlSMhEOdpRWcRYAyPMpRehubtkfonyTCFePoA-D8kICIESoaoDm8nAB8hAF8tQD8n8lFACoir2FAOwGNWCsykJbWDqhaiYj8htRLpwWcmLQSvwI-sYRkOYPYLMOLSTZmseBShLcSgWsWOrSTYOgyjrQLRYJKnyncuwI8oceeTceNagJNVcJQnQrBg2pURpa8jZnZq7rhWxUcDtjaXAATaNbANbZNX9CTcOZsKgGOc9NbeRSPJ7TRffFba9JNfgXXJQvwIGfwHQmnSAPEFAJNZnTGrMGnugGkEjNkGkNneUIzczQGCAHQroeebWFdsUUEcAInYZJNbESTdNL-QQP-eBdYiBbqWBYBWMgPe2jBRZuFWrugJrtrvlk0ZURNfJvTdXa9MkUWrBv4QQDsSNHTe8p8q9FcP-CPB5GODgFUl3bwRbdQCXnqhvZ7RkbJjsSckLdQHqsfcOTBGeBfQkjAPIATdvbvXseXquEvagAPrJmno_QnfJtYWJXkBEEQEng0UDjgKTuTu3tTrTvTozipJ0YNp4oTd0FfYagQSwFVH-XgCg4DjBWch8XQNOMNDA0cCGH1A0LvENClSkDgGwxwwTaIY3RYDcfjA-BrUTPvQzYfYZOI4LRSXqksEIyTVLQfLI9IXivgmo3hlrZgFo3rZJSTcbTcvAFo-3cvcXNKXIcQ_GXfkcL0AILtZ_FtbOntQeTgJAPDFGC8HpEjN40QBKgfE5MentR6queudKbdcjI3cCTCRCkmKmFJBYuwEUjYo6VDffDpjDTkGBofewMEoTpzeYJWKmCTXCciYKeUyKfwClMUhaCkEIHMjibE9E2gh4mICCvjI0ColIK0wuM0-eYwGgDMOENRUI4miYpTLQJ0ryYbeeZU8eEie9X7jU0QBaM8UIFAJKSTYauSBYsMIdBkJTOiRJTySANsxCqju4GkGtJAnNEAyUW3WTTQBTTCF_WfVjJfZyKOmM3of00CXKX87smU-9Ys6Dcs8KKs_U20DME0-c0Cb01AO03Az0-4n03C7WIwGsqCidSiatEKWC9UxC2syBBs1s7M-eVUjcyvQfUza9N8z8xYJc9RmtCKuY68jSzXWXqxuxpxjtOi4asFgy7TYHUnc3oXTMJGH40jIK0K43ZE5GIwJMsddsDAIkGtH4xpJS8ABq2INq7QEQPIFIEq4ZGIA3bKxCtNPyxa1a1IFi1KIC_82DOc8C6DaC6daieAES1C40yAF8w63Ewi2ICXlYCYiLIGza3a1MPM3i9G-C7U-s57mS-a0TFq2_TCiYvSwy0y9c8AKy6gHfSYly8ZpMX61a2coqzXWxQUqtPwAikCps9CXW0ilAEazXf62MxW8dZS_wGLeIGLa269O20I52ygt2yALGuQEzfEC8BKdCRO1O0AfZAOya2W0C8ayyGO_O2FIu4kBaDSuIJGcaRQ2iLEAQMu9QEO_85G0O4qUOzK43TvvI6G4mc5LW4U8ir6-wDOquy6-6zG0s4S7U96zC763y-S8O4G448_BzceCi206u0CZGzixUwB56_GyS4m6B6M8m_HdW2tCo8eJmzh3sKXmjni7c8Vi3TrsAARy1Cfd_efZ8xpJez8_e8R7WGLQeV-2dJx2IuK5yntdKwh0K5EyOyyCq2qzR6GoiAE4R1W4yPh9J_-AioR7q2LbJ__ee6gCx7K5a-Bwy0R0K7a4nTpxiwC-c4Z0TGx4ao-7avMEEx7Fu9O_ZKHtxz-4tNG267i3G5Cw0yB6W_pwM4G_qHipO9uzOzBzAHB2i4F7CUh55_i3-z58SzQKS1h8J3fnh8AKrf_Rl7stm-R0jPc63Tl5_afT_Ux-wKZ43dZ-x_Y1B4iIRTOvV0p3x7GgclEBK7GkJ7Fzh6J-u-YBJ2tLGjGhowfJq3_cN3iqN5RPgriSNzl4a5IAN9Vz83p-x9a71-W-xCZz--Z-B5Z3tFa7Z8LfZw9PwE5zu3u-gK56dO52wMh4iYl954B759C7C1t0C8F6FwuxF4WtF4i3l4M6gMM1MHl96hM_wFM6IJzOD8riC891Sa9ylyYQ2189hxtxx2goiPs9OJTPYEVJYPwHD3hVlzWpgId7KwVzc0V0UTvQ8-T3R28xV3_dNBpCT0LHt06wd-c7V2cid-_aG-d-Oz9-F_ZNd7d8dPdyCQj7G8j8Bx95j3WIG6vMadZllaewCr2gIAD6t0CUMyMxz_ZPMJM3DTM0r_ya64j1U2h6swm2j-z59zs9jzALj4c_wAAJzoHv7Uw-T3L3LE9O83qTfAD6MCCU9CvU9t209bFUf5ah-0ra9lcMcfOs_o8c_cyfe3sWfOseey-ocrN1N-eK_muMCButoMrsBZLFQm1wC682sG9g-ffG81sgA8oMrm84cJdy-28o9pfp-fe7M4-e54_8AB9nOfdatGPSpwAR9nJR8UfFfUfT_8rJ_vO_3Vts-c_gfZ87959W89-F8K-gcseMAeDhARDmAt8QkX_UB0xMZAE7AsulrUCQNj7Fu8uPcLPW8eseAEC10zRakvJTmLUh75_9UAFoAcAKBgizsZoO0N_lIHP43AL2zrfbgy1_a4svOSPXvsfwC7Jsy-qLRFlkwKhRdJA4bXrhgJQ4EsQAekJiECBL74DKG2nYAMUExZr0loaESmAABJgAfDXePIC9DeVBBTEbWOIFtZr1VubAw-mIBkSjB2kAJJXgQQDp6R9Ad4B8H7h4EiNya6ALqL6y0ZjM-eQrSRmvW-QexNB1LKRrS0Mi6D9BInJ9nCjMHAA02JJGmpj1o4_IeBtHGwRz1K6ODFurgjbozw8HZcdGuXfmhbzCyJ820wQsPt4KD5nIV-ptfgDwMSGz8Ah7HEIvFBpi2CGWERK4GzFpjxCpon4cQdILqBdAh--WSQNGF4A8kzAjCXgPUMaHtongRAJYMT1A62swo2nG1mgJ-a79omfQs5G8WBiWUpg1lUIPDHSZ2UGITEL8I5UVgu03K7SVqoYTDhAR_KYEQOOiQRbXp6oloOfC1FaiME9IKqIAi6AtB5DzkELeICqioBlkrgHgbHtsHBpmQiS9EDEi8FgB7CQIFoEYDhkeEj9XhZgd4SKAtDilBUTSdJBkERADY0gFoXYQYn2EWgKEVwF4NO3IDAjaqVhOAKwDnAGIJ8AgMAB3BGBlJbAEAJ4d0ETJBV3ABALEaCKxhoIz616K4VFBpiBR6Ru7VwM4jgAIjCB16EYDYFoAojqoLUH4CMFvKci-RHiAUUKJgAiiLEVwcUZKPMpmRXYYAcgCiLxFLRtRBI7OESJJFkj8glI9gNSMgi0j6R7gH4GKkMgIihsVXdgOcO6BIjoAUAC0JMklAzsrgaiGsFlUoAqsrgAAYg94hiVUfolVn8IAxXBWoYYkwhGMAQyIYImQLKP5CWDJh6REQT3DEBmBlxRAoUSgPkCPohAPAcAT3OEDBq8BRAVY9YNDwtDTsUgXkHoPoAyCqhqx1YmsBQ12Ypi0ATo8ER3B2CtjKx6wMKF2AKBXAYoWAQcW2OSggRoxLMWKMSF5HLx-gYAKcesGIg7BvWGAK4IKO8aDiOxtgLsWiNQC9inhpwF4euOFDThvRHIocXmIsBeABA04C0JkBYB5ArgAUScXeKHH5i0As2C0MTiVFYQ1xeYqEfUy4DXp7hwoK4PU1VacJ5YiwxGjxE8rqxk45pEUNrA2F6wthPVJ2P4GOBuwA4Xsa-BnBcjgYsglgYQPDCZrHwPYA1SQBfECyrUxhRoKOsdXErIVHyZMM_OERWJf8YASwAbgKkczrB-KQkpokJJOQAN1gjvMdEmSEkMi9UEkmugck0SWpX2IAcxPlBSY5I7YI6USfJJUk4BHEPItxB4mUmEkTJrifkRpJ8R-IAkQSUJOEkiTRISJNYNVGJKMlxI_6FkwyAcm8nVshoR1ScugCzKRM0kGSLJDkjMruSDJw0RMgpICmFIbhBAXyb1GMn5JkpxSaIEFLYmTkqkYUi4n8Xk41J6k_oB1DJOPx0V0CNMFVBxWcjy47hnEjINcRFZ9Rey_AXEYUF9bj5s4B1IVIIgAAa3I2wFkgeJjghoNUutIIgACaI0uAGNKWxDR2Y00--AOGyCPZsKQ0bOk8MZAL5-AiQBcCSP2lRUbuddGxl7R1FzhnIJzHHHMEYZ-4upoeWDDjhuAi4QA605cdnD6hVRQU5iHsCdKwD6g0AM04GeYGPBjhQ8oqFaH7g3HbAtx6AYlmWXsQgBAxYAdGRjOenSlXpaIP3GzhvDeATpfkPyHTFqSRgt01SYaTyMWljhABHsemWTIiLVI5p1M9GUtmgovTkS2QR6XiJR6aVJcwyUBtKVXCCJMx1EmYNZg4A3SzQtASiVmKZr6V3q42EWffB8DOQriDNeIDAGghKYzWYYK5sXjsyPhKEVM0aWzLHBSUAM9ddYCrKODJB1ZDBTWbAF-wugYIIdbNPrOoyigjZkYShBESWAsyzZ40ggPXRVSrgupd0-YEpn4DdS9Z0QXGVD0yCo0VmJ0oqqjTQQ652Y-4EANUkjARFJALMZmfNJpmEQWYnIapM9N9YzJI5D0qHmbyrkez45705ElpVQ4ZJ9ArgeEQi1Dxxy3pfuNOXABTmS5rYIgIIhaA94K4sZZyYcnDWwReSnE1k8ydXKbn9y4adY8yMMFObtDx2XASTBLmVlCoI5swKOY-BjlTzdkOM5uWsUBkhAeR58omJfP7lJzB5ELVOc_Izn5YfI2c9gLUg4pACq5Dci8ofLxE1zo5IAWOcvL7lolr5w8kAMkHmn3zawj8xOe4BfnFI35qCj-X7h_nsBTZC082VMArmS5J5gCjHoImDjOBtRzkI-fdLAUQLG5UCnQDArkpJd-AwcFHtyR7mrSjgwcSwHDUoXXSrpoC0-eAsQUWBkFTC9BK3OoHBxaxJzLhTbKFSdYDMuU5BNQH0oEUKKH5UMmIizLrVtFd4NNC5GknZoo02irjjOk3LYUxEldOuJnWzq50lUdiOutnXLrOL662NTCnmRMo2L06dilxfwEcW197F_ANxVfDoTuNhQ54SUPWTcU9dG6VipsoYoPiUI3FEqYsBpwYTtES6ynDJVBL6AE11uqqC2hYGCksgzwqUV0fmRxiRASyVJTcpo04Ce1ImiSssskuPCUIGlB8Q5OSBeB-4-QvrMJoDQfgbSwA2FShBADqTrSYY2Fb3HQBSATBwmt2GZLgGtCnYNF9ENrkXTKX_FQpniyFKQmKlpIVOFYyxtBX9JHAuyqAJ_FgBmnbSv5bUGmEsoTLDQFJ_-FTrEBmkLy4ANSogJlPgCe0rlNymaZQlPL4EGCUQLABspFCGVWJaiiOnspUiRNEp_yvsp-GKE8EzkABNZW_iBXciZpB87bCAsjZ-4cAuABBT1IHkvBJyP5dAH0EKaRhoECuX8r2SuLzSCZyAogJGCwDnKZkEcklchAAIUqfyVK16H9D2z0qxVTKn8nEFZUMF5pLiR7K7kSBmtxFMQHYHAEjBxRVVJpdVdsCKQlJI68KtFS5HOKHLzAKKv-gauiBorlQGK7NJbjtI8Kl4Q0ChcSsTrtTt8dQHgWAJgg4ligtKsigZUzJhzs0wcA5NgD6U6rhyz86leoujV0rMgUqmmNGpXkHSF8Oyk1Wx0iZmEoCjtVNYwoiIL5J52MihMs1dHujqoM7BfK1HlHaqXp8eCfOYRmThqcAzY03CyWEV-4ugtsUhYagkUtzJcvq05hzIFoSKsAGavKSyCzUk1ImUK45fGmqS4BiIGALdH9ALk-jG6RS_tWmpABboF8y6yoGus5BGAPekgOBDqvEW7qPGDbJYH2UUAQAZom2WrpEwqVVKmyvyupSKQimtw5EKUDTksEfUE0R0l6k0uoou6DA9IE-SdcasRXfjwOGsxOiW3RYSKPRk7FzsQpwDv5WKy6KidmMlkxrUFcaiOtyHbHJsJVSaycvLlI0_jyNZa_gGhurWS4cAHvZZGRp-Y7KjQKUr9VghOVx0IUkTE5T0sXb9LQ8YTYcpQBdL_DYIlIcVRUJd6Rg-QvADwI0JGBPAlgmaqAJyCRVFTzAUACTZrjhCK1l4iMbdUIwj5iz8NbAfAMQG3wrNogPG_LD-tTJ_rKAGnOmXTB-Q4LLV1ba1a7h82Mg0Vo6ujU1T9ywAwAMPO9VcVyJhQ0gg0jzR9InVVz2NsraGbAH7mTIF8fZBgjFs7kwA7l4BFmNhpwU9sktbGizjRunH3jzyOAcDeO0g37AYN0dODSlqEaIaRWyGwLqhqrUYalgrUHDcKjw1M0CNoqmlfBvI2JqGV1G8beazS35YGNPW2dksDzXVbDUZm6ebuqW1wrmt_Gg5awVzUDb1tF83dUWuIUzQIUiiw1G6p4aRtPVkYb1T_3m3-4_VoHANXtiDWaLY6na69a6Ky2LAmlSMN9QkGqWyhHNfZdJL-tQD_qTlgG4LTVtG3xrO1k25NSWsboSKttnGmdbMxzWRgK-UYALU5ugqHbQNEi07RpqnW7LdtZq1ghxXAJmE8d52AnUFuJ0sk5y98XhXDTDIc7OkAi1qaCju0Pbh10Pf1YGu_jBrY6oaq7TBD4WdII1ziD2p2oR0kakdkqyctKu-2MKMdFOrHWMxx0K52A5BYDfarR30bwAFaxjb1rah1qSdjavqYSohTc60G7a8VcfNrkgBhdfaiFAOuYX8TYZ9EeuXDp3WMKkt5O-FcNDg3Y7dN7Aede5qXVmlV1AGddSzCN1HaH5u62se4FIjCgTpXZLsNiU90bbGFyIw4SdNajziytGuhOXAqa1iqI9uuqPQdoN1m0U9Oqx3bztu29lBdqHWRQHvkBvbAy0KnUJmUV2zzM1deoRsiq8n_K_Nc8yyaitCks6x1Su92WjuR1q6U1le96VrrD066J9De3Hdr1n1-SMpf9ZnU3qYIskzNDaTrMYSED2zttYqrMhHNt0L0YpI6BCc5WJySBVA2ATCX5WwkGBwIQyKSKDnBxQ428eeIaKLmhRrMyOdsYAxgzbyU5sGXeXBlAee1tUwR60tnPAd6hTB9QfUIqCge7yPp0DnXSAbUVkzMSsApcCYVMOLSZ4wDOeOHAjlXCIGKcHeHBj3lXAEGiDneEg2PHmHKBFYM8b_RGA0A6xgIegHCZHHYADRPcHcS6kgSmiRVZgChygGsyAL8zSJKkd9DcBmAuzdgtEwJUKASAaHzh2wS4focD49UVIcifUFBoEBtwYlJDVQ6YY7hrMXDFoNAMeH0hOGbDDsFIAAEduaAcepohRCMYlO5gfSGDQfnhnhnAEoIHGImMOBxJAmQREBaBqYoikjV8WI6XGACekoydcBuD3CfxoAnFs_fqukYsRZHhQe7R0oHxYmFGxwlgMhPsBSPVHzVjWifjwiOCEGGgkOdXKKAaDoHCAtwe4I8DMao0_kHvMlYkGshPBbyeAEI7gdRpRstDomUSmMHkNmGlD-gEaOsAsNKixieh24IYZGi5B-gVwAY0MZGNLA8gMAUJJYCKQABFRkPCHuDjB0QAk-mCGS-OuQQAjhfQBaD1SeaPYx8x_oUyWMRGG2Kh6aN3DiCkQxRYxew44ecPIn3ZenfI5JE43KCg6zeIQpE0QInggjHxswsWjJMZAUxwRqAMUFXDBZc6ydGVlXWkZ39s0TtVcPSfcnvgmkLEvEztXMVEmo9JJ6vFSacOHGhU4pmkyEe5NWcZkQS4xnYBlZhK2OPwTALVxOUk13EHgWooUxJr5KeSAtTNt805NCo5T9qvk3EYQgU7iySnA8kIXWr2nnGadbNGxzfbHh-APyX7OqCFDpCLyOdDwLqYEz6mkAHsFxA0H1D-nHOeKK-HbUBO0cvT_AH00KD9PMoRes3A-EmZAARn9QyYZMK1Cb03kkjfaYJBAESDuAIA4ZMsxWcogO10zjPbM7mfzOtR-ASgBM0p3wRNnDYaZ7OTlybORn8zLMIszLL7SKqR4xEcMtqFCAQB_hgWbYB3Cuj1m-zoQgc3meTAsw2zigDs7NQxRZmkAyZns5QBRn9mDzOZwc_mZHMlmjglgayO4Agzhlbz95ugMuYu6rmzzzZ_M1uZ3MhN9ziAQ876ePMNmxunpj8xefZrgFoIFoIqH4FabCgRgS5ShDBfiDuJ4LrgV8xmYgCFo1z-ZqKN-Z7adm_zAF1M0BZXOZnQL_588-ufuRN6n86IWALOHDLvpKA2QKqOiBeAYXGzYF6i_hY-mEWKLxFyZKRbfPkWJclF5s1FELPgEQu-QBFOGQcOtI0A6Fk8--fEuDnJLvFxMx-aPMqXRLOFqKMOekvhAtZ8l4y7AAtBP58g-QTi6peTPqXNz34H8-6iIs5mdLwFvS9xeTBRQ3Y4BawJMIPhoJHzwwYYLWZOChAbLpKYsPpeTCaX-LYlwS72ZEtxoBLVFryxBfYBP5tgfgE4OGRdIzm7AlgfoHwinQRWsLUVzy1FDwuOWCLu5mAF2e0uAXdLyV-K6lfuRSWoaHcN4BkDnCUICZpES5JIH1DJBa4Agc4SkFKvYXPLbV2K7VfqviW3LZF5qzhfuSGW5DKQdwFc3kt6kCA6gCAINeiBoI0EE18q2pbzMrWZrv5lKymaEtNW5rdls6z5Yyt6l9I3wyhG8gwBCAjI1meGVrOOuYBlrMV6q3xdmsuXrriVzC3ddavpWio6ZbYAhZdDhkiotyWbHAHP4eQ_rLV5s_ciqvtmarl1zGwtaSuQ2sbNF8AoqvmDmXd42wS5DMCrOUJFVXgBC_DMiCUAMby18frjeBv43uzjV9y0tc8txR2r1gdxK4GsgCg2MQVkW2LcYgQA2bAt1s0Da0vzXebi14m4ObiirXybsFky5QkvBAFUI_gOW6deTAa2Lrzlq64TYhug31b6V2zP6JSBCXGLlCfeBlSIBsWZzIcpq5NeNtxQcb25vG-bYJsq2ib1tvM3FFJtPWWAL1167vAch-jIgRt-6ybY5v-2ubgdnmyRduuh2TbcUJvTeAXCuALQ-dwK5QkfQwRGInYRO6lbihxQzbYaC28HattXX1b6BWiypRQtw26AiFmGwQGeBjhBy6IOAFXebNxR0Cddvcw3czt821b-oKKOgXavng7y1IOULZnWuvW6LJo99LnWHuRm57Ctzm0rYSvCWm7mN3e-gVWuXgIA-E2zEDldKwAWA1ZoQJSNDKAIoAO92e-ffHt1XQblt086dbnuPXMreAUIHSomA-hO5iF3eCkAQv9Agcstr2ydfusAOv7xN3-yBdPsf30rqUMcK4GZv6Rwy2DkeHg5HDv257ftpy_XaDtT3VboduexHeLNZAbzbwaIFel6t9A0goZGpoRF1B4A2ERydAJIGiUE5ipbR4iEDg-oIP_r3Fuh22YdocnOC7ptvn-Y9j6hhmUQNBLOFHjhDzygSoM3qb5o_J9QRUaM0lbjPhkKHE9lq6o8uQoXNHWdlK0Y-gTtX2pDKKYC4nCDAOgC4ZS8KEDhuIpKIkgRWhsyUtV3HHPkfe6ncPsgBrH6jq5lo5ocOOio0CVa_qAZDbB6xCF7x8UgXCs3JHVjpJz5AcsH24r2ZmJ7Y_Wv2P8n0CQB1leoA5WkLyNqSGOFuRgBQnBTwG8U5BsOO1H5T-JyHcSfQJobEALALAGSAABpJcokePDhkq4UAbYKhEQZtPBnKDly2U40cVPp7qzgpxHcVV-PwygRCMCKGoBLO_eKz7pzY_Wd9OT7pTgp7nfALWZt28AeZeGWgjrJDgJz2u4rZKdnm1ncTypzc-gSt3wCwSX4O4AyuBBtgdN99AumziHQpIXANICc7HtfOunVjnp5c_-c_OknrUdq28igBRA7Ab1hcAS6Wc4uznaLi53882cDOy9TekSChbwAMW6b_6AgCuu2CkuinkT755Rd-d2PqXVT1qI9bshFwrAMif4dkUoTAyuwC4NG-NbycAvBX5L0p-i6pcJOBX6V-l1ldFt0A6bxd2GKiFJfkOA7lD5V5S75dquFXEd6wLQPJGvWxnCF_UIy7iekuU7Fj7--c9ifmv-nAru5-wG1BHAAAUs4CetCB0n8l0B-oA2ukvPnnT7mz85VdevrnWLjc0Lb8CTm4I_w6EJQjcBsYJHfN72_wEccswInbryG7y42cWvk3bMWi14FEgl3d4l6AcB7aWdswlX8bs1xW-9cAuWYj19XEQF2sYBdXMEVx8c_ldVuOnXL1F6a89eduk3PLpJyzHStU3Igotum8u6iBi2W3RrtOya_bczurnf9wtwu4js3g6y5_HYP0ByUvOz3IybYJe8Rdjv53G5jm3I9uwKPWdSjiix7GCRhBQI3U2Rro-DN_BQzPyYJET20eGpTHXp8x8a8sfZmf35Y2cJi8ovngxn6uOl9TYECeOdX3j_wGKEqBV3UP6uNt5RYQ9_vkP_AMDwZYXtEAnoTLmZxcB1eeQ5X-bxByACo_FuSPlH39_Moo_sfLABllJ1wDvh9hJXqrDIJfyrscfOXpbly2R94_8v4PAnnt03sVXLwH7lCDLJgCgAMoWPi1gt_x4MsTvZPKV-T0h8U9nmqPn-Nu2ve6D2AIulCMZ-iA4dwATgAgGYFJ4E-f4uP7Hnj-Z8rekevPq18xBgH2EMxzAlCEL-gDC9oBPPUUd_DJ9g_uuWrZn_9128s9efHrstVEL2H6CIXsvl_GCFfbi_v5jPSXyG6l749WfbbGQVwPVDnD2f7I4ZIJ7AEv5_AEgeb_T2x-q8-fKvFnyiwG_fQ3gm9jX5IFdHYABvKApGF0KjfYfhlJv03-ALK6ruDebwvXvz2l7nf8BLAzgGgr5bFf3mMrY4IQIjZIQ4JlLrHqR5RZ2-foFAr71VO-4FoemxLHse164AABakw0IBaEBQfsAPgZoD1fYMevf3vu8Ex5hbMeUITPLVt7594KQ_e64t69Lyh8sB7eYQ1ruG2gDpvTmBAK6o7yYUI-o-fPsPr7wj5HhI-tvIAMZ6D-LftWK4_l48Iy5HBvWQHrPqu9T93i0_ifCFuH999-8U_D3VPmn7S_AJ9uTglEfZ1QBuCyu8A7P4X4l53dwezzJP-H_z748c_i3vbogNZF7Thk-3Ov0SHL85-KuUXcbyiyr75-I_1fwv9K-rhC5i2ELK60hExZggRQ9PSVgzxr_ajc-PvpPtX_1_4Be-I754MW6gCCN6kJflCBoKH_D9QB_hdZx94H-F-uvyvLli32T7-_I-k_xv319C7YwM08gjoPD4jckjOBNgdwS_p1499sevfMbyd2b8D88-_fVvgP0L85_Fum9oQVJ3gAQtbJwyZdkUMt8T9t-2YJb1PylfT_--Av2ftmKta7_UZI_zF3EDsCN-z-ffvPjPwL_QfZmNfKn6S8ICrOqOroG1ra5QAgD9AZMAgVfz2_X_N_yf1v9v-lYaCChGGr15_yfNgDX_t3UTyfy3-n8j-WYCO1SdnoOlTFtEbZGwyB3IF4Gsgh_S7xh8afQANv9VfP_yz8AA3131AtXCuy2RI_RWhf8nxUYFQBr_Ov2h8d_Jv2QD7_Vv138gXeF1IgKoHIEi9YgPADoDr_ZF1jd07ZXzIDLfCgP_8NfDczpciAFTjYwtkSQDcR_8OAC7JCwem07BEgcQLxBV_DcyQCuAzP0p9eAx6zkRAEMN1LtXAQbGGAYAdl2H9VAxQM38H_Ht1t8iAIHE2AwA3W1RAqAPoE9s4Anfxp8vLIwKn9UA3gIjtdQLVydcK7F526t2vT_wMCnAlP0V9kvUgN99yA5QMF9eA312f9iIYiDvMEbemwLFtgSZHkDiA8fxh9OA4wMoCafSSzpcMAKvGx8QAoIFX8NLU33YDzfLINcCVA3INWtd4Mk2d9nbBoPCtAgznwMsXAlAJqC2g221kt1rEv2PA79UoO_9uXRv3CClArfw8tzfXIIjs-3Q9kftVWCIBGBCA1oMXdggn_yqDOgqIJp8VrJvQbcRgOIFRAY7WTAOCsSKv0wtPfbYIV91gsYOyCeA7YMesYAJ_EkwDZSP3Vw0QLYEIBV_e5DK8QgyG1_9uAtwO2D0rWuFQBUAPwEeMjgFnz-JJQT3C-Dhgqdw4Cbg6oK2DOfQWyb0YAac1EhEbOGFpt-7UMlgCuvK7xn9BbDoIBCuglmA1sm9dXBgtqAB2w7gS_WcE9wLvQkPgDUQq4JGCqfDYLJCUQikMes-oYiDJMCkfIBmcnDedHQBV_OKB-Drgjf2RDt_ZXxp9w7XYNpCV3cMl3hlQqIAlC1gjkP-DIguUKmDUQ313VwCkQdz19jQlgAlD0g34LT8uQ3UMmCZ_eeypCiAJ13P4KzMaxP9dbKIFnA8geBwcD5Qzn3ntSQ20P5t9QlmHPsm9Sb1D86bDANCBmoVf0_tyg3d0qCkQzYL1D7Qx62tcoaRmDNpkmeICvRoIZIE08CkRl1CB_hOMKlDtQm0ImDgw-0PSt30VplsBELXKCIAVWAIN9CQw9AnhCG_TkOTDuQ1MJH8sCWi1IQxHZh3kshw6IGYc4wrUIRCkwmUJTC7Qkf2s9pLFKA7grAt731AvAQQJ9CWQxwM59vPBMKV8Zwu_yDC_gmnwS9O_R1wzlgHZqHDJRQRgNd82kVwESBV_BL0DCqwk8N3DHrXeBHgK7OS2dtvwldWZDq_IkIXDyw6cNGDZw3sPnCNfd_HSsu_Q61XdvHWQVLCVgmCNfCTA9_CACJgagEjdMwKMOJcRAWXxQipwrsJ1C3wtP1PDfXKm3oxIHdJzIxAI84Jr8KItCJyDOfD3nasn8CMEj8OIzAAT82wmfzYjmIu4NYjVrN72nNqbO832cR4ajCv8Vgj3nZCwI7sIgjjw8iNYjPw9AH-F1I7oGdtNIzSNX8PeUCJIjKwkwI95bbRCkuRJhZnyfw7ycyI7g9IzsIqDwIo8LIiJ_UH28t2rORGgctI-wC6BMsUdz4i2_NyMEjAQ3eG8sRIzJzcBXgw5108jfUKKCiug7y0esGHWbHYAxnf0X4dwyVKPmcR4cUNaCEouKJRDvLW33P5GXGAECBrIf4XDIGgLACEsYo5wP3DQgxEKUjnI1kO8sZg7XwFAsrL7z192o5sK-9aol9xZRHvRume9oPfgDVCRQfEAK9wfHU30dDIUaJABd4R9HB92uaDyh8Mg7M3GjCwKaNb9Fo5MAdD9_EhBuJ5LXB1mBUFbKKrtdogMPqjIbTaMmjjCPj0uiUnTsApFnnXq1gch7Yf0eifPW6PYBto__0ujHrUUEQY6AWVxvDgY1AAJCgIlqwBjvojUDujUQB6MfQ9o9KzGczwBi3AlL_DKILFZsC6KRiOw2GImjfo-6J2i8YoAILEZUVKKkitI1ewQtl4XGL2jiIhyIWi4YomIRiSY5MEXDEmLEhWBs3McDQQ6Qs4K4tKLXaL3C2AxMLGiWYv6NQCRY1a0sA4ABC2NIiXJkVVZ_AwWNssFopGJfDrolyx-ipYynxFjAHOrwgAVWJ2yfxIAE2Pd8GI4CINiCYraOJj_ozWOBCXgUsS8AsSRC1-xSIUCEhirY6GMdjbY-GMi1pYzWIjtzEfSAsCLgJ62gBXScMne8ggQe3sDtws8xFjGY8WOZjCYvWMF9douSN2CtZDTwrgnDb2KFixopGLkj_Y1mMDj9YkuMNjcUCoEl8e_BmGagBAC0HFAXQFVnpj9IsuIzi-wrOPSskovtEsAwgJ23FA2AKOPbj7I1ON1j7YoOOTAPeX112cELUEyCBPQryN4c_sK-wRR24y0KidJ4tmIdiZ46gKzjW7F0llUMrUXmc4Cwn91QBDpCoEkAYbWjxIR241gPr8mYneIrjM4x9DZE6fdtVc9hQHMUoQK4b-Lc8PPT6I_jwnTuKnjK4tkVliO4TuxL8-6TYAeITCBOxASoE8BN3ig4tkUNjuY4kEQsxnWAAEB5nIBNxjMEtBLfju40BNMiyTdBCrNoXBIEJdH0T3HchUFfh2ISfIHG3u8HUIaJ0dP3F734AcYIIHYAdiaaL0cQzYHz4TXJf7xWiwzNaKtCUrfhO6AhE1v1ShnAVqDRCybMcGXhrwHq1Sj0ZFpz1hYvYf2UTVEsf1kSWreRMETk0PjyMTKQ8AlSjuhWkMfNZQO4ELj1Y6xPkiuw8xMUT__axMAcpvf0RggtI97zw9PrKux8SfPTxMsSlElRN9sc4--2x9ZMDRKITDE6JPHiDwvhKvwLErICsSVEzmMsso4q-PdDrXWM2Xhlg_yKMTRY5-NTiIkrJKiTWoM8N8t_RdMgdspzCUGxBVY0JJyT3EpmOqTaAbJLqT0w-WJycKbLSOYsuUc6OST-k8JIySvE1APKTTInazTdXo2WjmdkEspJyTUkhqMosek5Wkp9ykiO33gS7DlT8B2kiZIwipkgRJmTdklRLYim9RI1vsIgfZ3SB0nN-wmSBI7WLkTpkyJO8Trk1a2sxnQ16PzsJgWAE2AiADpNahS495LMTPkmpO-TwUz8JVYIgd0OHiCAayDBSO4yFOzNtkvpJMjaLBJBiAQgYqGGAkEHq1eMF40lPoii4kACMSTI85IUSvk2ZOuSI7GCw-xYAEu3ziNpNFJTi0kqlOhTek2pNnjcUniA9FcraQN1MCPV5K3iOQrFKiS_kNuyCM_ATQKc9hAdY0rtkkv5FpTMkvlO-T2YT8Ogdn8LSOuQZAjpJ1SNUy5MF9lE9mBq84HKIH2ZmfNwFLEdPdh2NS2E01PpSrk9mCAC6vLqwIck5bYC4dnUrlM2T0ki5LdTBfAg04ZpLOJ2egerG8A7g9IGL1KTE4nlzhxZHQaJmRFHLUzDN-AIR1mwFaJWmETAfEDw9hzwewGWjYzVaJICzzHNPloHAfNNb8bwdXFSg87UIHRl4gEcFG9cPSyBdIecRNKhjszBtNSgfPatOKlFaeYD48S0uBHatcAzAAypH7bQPRlm48LzHBCPewEnSh0vDxrTR0nZMF8J0wpzztApbyMO9vZcsX2dIgQcgmkc0ldLgQuk1OOHS80sdNb9d0tQM7srAgN1QU6AE5P8in09dOEd707dL7Dd00yNojELBCj8A3bRYN7SfY7M0Ayf03NNrSH0__13T9k54KxCkLSSHakQEHKK_TV005wxSq0jdJHS60xDJwzfXZwBADHwuwFvD9RGxFzpVWDKPP84bYQCwyk07NJIzYMzdKIzUA3dOoDoIYD1QV-_V0VGA_DNWMitgI7jPYzCMhDK4ycM9_Cb1UojEEQt30Gx1Rokk7DLgR38CTL_Tx0nDI945MtoAtAJnIgCiAMogJOyA2gEYCvSfID3k0z4M_9PnCJ0jv2ksPAPwBkQtIh8HCBEgBCyvTOPPDJQ8CMrTMfTV06t2ksw_Gx2vcbgDIBGA4Y7zJvTuUu9NsztMsvUSiZZFKIZgsYogHWtvMgyKZj4srdMSzF3JvT6gbUy8Lps7IC_gyB50UFOH8HMjZMhtcszjMp8HMyiOCM6yTJyQtsgFgBEyyrMTKCzJUhSPqypMxrKCyD4lINQAUgwIHDJ2pWIC6yDPBzKfjK0vzN_SEswLLL1ZM8Al3gsAEcMoQ-obT0GxMAbzI0zfM7NP8zls4jMFd3I1AE2zJzGaTHAQUyc0oRD0w8H0C1Mgsxsy8slbL4D9vT3HhtELAeIIS8PVVJezYsoNJAABsuzOrDQc1dMvNwCORD8dzIRC1sxPGH4CvSvzI7NByTs97LOyvLVT18dSMXa3DJ3jCDBy8lglHNqyXLMHMSzkwCOxmx8gMNxuzXgZryugBQO-GIgUcwNLqyMchrJ3Soc313pc0EEqMj9RA5IH4SugFHL6yuwinI-zqA88FnAqALwG8dZcygC8AUc-bPWj8MpbMxzpMwVzWzBE3B0JAmoCqN1sEgAYATi-0qtKhzDssWLizOcwbO5z2oBezNCsfLaxdxkmVr2RMZItTLKCrckHMlyzsgy1uS6AMkxFT_8PJi6Anw6rNXT2gtHN9ytc7y1xTWveWMGxJsoAgQtuaW6KvTvLN7K5yAMyPN7iivGAD_jT3M-hftf4jPLJyUrGPKGzWob4N2CWsiSNoTuaShFSh-Yo5HRkr074KzzbcnPOrzobUvymAFvVGhL8HQOyAm8pvVGnbzy8lq0ry7c_3l2DQrHD3psKRYsHbz2c8nJtzwcurNXT7kdAKZ8aAekMoR3jRiBaC1M7fM7yN88nK3zqAsZ2NIc3V-Frhzhf_FKjmfPtzFQKU9WInT7kVXNMToM9fO0zKrdiLrhpUde0ALbkVsJYzIc__LPy_8_3NF8eo1gDeAs3WzBdy-oByHZRWnCPMqtgcjnI1zs8-zPsBKrQBzYwEgxCxvAmoKNwwLM86PN_zAsyqyXcJzdwGpsCkVUPoKxsvqIoLJ8n_JwKu8-cN3gCDXYMvQWQbiILt0mAsJhsHQS-zvNAgRZU-iCDVNPkd00j90zSfkW6I4ypMp7wB9Zou_izSFo0tIg8LtCHwrS1c4WLhjVC8_JStd4ewB8g1EqSAaAYcSJFFBnACuHPAXEFRDQyHQNULMNpC_yIsKrCkxO3iTCyTLMLoYywpsSAUPqD4Kxnd9F1BRjbNygFZwLwGezwCnwtNs0clQsCKHokIpRjwi-nGcAbwXxGCRqzfPI-jvCzIv9jTCjIqsKI7XPCCRDQB7PiAn4Yr0-iQi1fPMKAigLP-iQi31zGcycXUF1B2AKIt1BgkFxDhxXCnGEpBcfJ1KaKrC8XJfi2i07OliQiq_PfQAAI4aALLPqBL9YYaVw9ykixYrKL0inaMsL9o9gHVwG0wJHQ9_409nO9y4i6KOK_CjkLSL2ihYp8gww0X31BnAXUBvADQCuAuL24Jb26tbil4qwKdYuYs1z9Yo4setzwfUFR84cANwCQYit5DkMYIQEvQJssieNBLcCiHJ8KOwuTLJxzwc8DyLRQAorqLoQhRD8jdil4o4Kk4jEu4KsSo4pDiAkXUGcB7CwkuJKYLV0SZpicyDMpTsSlouhiaSoIo2iji311R8oSvIojN30FxDCRNPSZDHACAlEpmL0SiaPKLDil4uoDnABoC-VRS_UFJxTvflHScUSr_P8LlSg4o6KXinXI1KvlCwrt8NiyhBvJbkPxxYSpi73n2Kni8Ep8hck-nFFB5LW5B2Kzc4WMsKKkhbIliTSt0szjAykSPYZTRYJDJwGgYb0c8GYfSHgBASrWO9ybogUoqLSvOTIpwNi2HAaBg3ShE1wCgSTymLSvV0vmL3SmCKb1EySIvPB8yx-yVz8E2QVSDSyqkuMLQyisvDKPSq12cA4cHbz6hScXeGlKYbVEAJcXE0TOCLuy8srBKuyn3jkyYyyJBcRdQHxClKpzSs0vRqbaABTLFS7lMeLOy7uMsKbk8AlyhuaIqDQRogdQC0jr8ttFGdASt5LTKQSjspnKDyqzN-TjY9a25inbPCAXM6MgrzvLgS1oqfLMSm6MPLDY9a3DAerAf3DASykoqsy0S3cozLVSnFPAIaQuHJGT6IRPJxipimlNSLEKjoqig2rcMJYsQ3dMidtUYlC3WtzQpooIr7ihSL3LnyngvwKdg4Fz6gLQZwFBwIcK0ttKxnPoGUzbigioAr-SoCtpKQKgisSjwikJDJxuK5_GPzdisSrkK33BQvUKlCj2AK8VS_7xmjREuaO0LH0XQskTy06RODKQANStNLUAgnksARvCLnG8t0qwAIDmvJWlsqSc4f3MqfPEyrDK-w3SvCcAClFONjwHEUI2kMAeICrtPKslzRy3K_cvnCQq1a3sANpXH26tmvF4EHtX7YKssKy9VyrlpTKynxCrHrfOw8gL_X0oY9DoCaHZQUq8J3gqQc8KoYqIckKvSs3AQ6HcA_AEQv79jCIv0sgioHV1Rp_LUqu98wqjKvcrIq1KojtnAGBzdiMAY6PxclvPoHDz_IkKr5LszSquAqXLTyuCzfo6AJBj4qh7IuBii8AuWrBK-ar6qIq6qssK9_P10yATYgnDQBsQmCBeSZq46vKrIbBapEqlq46tqraADrwhiCxUiEkijpEGM-rCI26sKc2ymWgOqqqh6uOqT3K_EKh8kUZ379hQQeCwqAaxAN6quCwUrPNlqueINldPG8KVyJPUsW5L1Y9GvSqUavj08qCzJvWtdZMRhzgAFzYQGaA6i--3JL_SmWksLXs5GrgzQa56p8hPsqvn1EqqMartLRzI4CAxspC5G2qma4ypZq9qtGpBrFqlK1JrHrGyr6gUgSYRcyXnDTH8BVMnapZr7qpaplqnquWpZraqucwYtAEOUF6skxRIFfsYASQGGqfqwKrlBSquqIfK5avWtRrKLTyryDbEq0Vsd6A0QNsAJA_6q1q2E2iq7DHqt2uZq2E1ayAxWkGACoSmLBmG09dPUWDYBByK2tKqo852pasw6kmssK48_fxjruafMK2sC6kQvTqdal2uJrW_D2t7iYAYUFLo7S2urPp06oGuMrXanOrYSPAkBwsDhAYqUoRdQLuubK_idOrmrpayuv_8PanjJeAeYvuKOAzyscC9j4q_MPTqjSjkOzqq63Op1yxnK-LgBfwrepkCN44fw9rLcypO5S168essLCKsm1OwUgWbw8gRUgoFvrLYylM8rprNmvUrUAl-tWsSoT-DkMdPCTz1LB8lxwk9Sq86zfrMqwXxfqcqiUBbTJIAr18CwgLhxuLD6i-o6cOEq3BrB7vFpWdM64V4Q_10IRiRwgf9CQywlpDQAwghS4PCRdhCJOOE9hAbX-H5NbTFMmXgckMRBjpXAJ8imQ2CQRCmxJhIHA01z_VEHPAclbhXOI7OGjGjRnBO1FXBnUSRrO4NJJti5pXOYLEgBQyC8Cvd1ZVOj8UR4EJRzoEgV5w7ggcAujCUwmMzFJor0GRvsFIEDSV7ZP2ZRoEa1G0ug0aR4WxW0aAlXRqgAGuK-ygB9GzKiMaclH6jXJTGy9G6ALGsRoc4krMLnPilGmZBUbBGnJScbXAFxq0cs6QJQSAQuSiEibvG3Ol8a66NtX8aTGsBjMbnRELAibfucXn3YJ-M5FiaHGmjEDIkmnRtzpVeWcHV4T2KUB8bDG3JuMbAmsBmkakyapqEb0cYLCUo21UenelNye7B3JbAGEEFB7IRMkTJQ8Zgij0o8Aoh6bYKbMmuFMAZxn6aclbOnVMJcZ5TwocyVuHFAGQeGDDI9m3xQ-ljm-AF4bwlJhBYQLmzRvd1JkE5t4bM6OtB4azmoinshXms5tcV_G95oYZTmoHCGhPmtBlLERQI1Wjp2G9gA8BCESJneA9m6ETQgopNJnAJXAdJUwBkWzJGyRHSK-iBbbm0Fpuazmw5Ef5P5Dhu5RFUWvi4wGGc1XOJgWjrm2VtdPZpYZSaawmLBdm8qwObWSOls1MD4Y-igBs6TcgaaRE4Dz5o6EPRmnZ0AHJAFbs6RRC4BdJOui0ZIpXFrXhZWnthhFUWteEzplWyHRSh1Wq5tTJM6R2jAYuMK01LhONJhseDTsEslYbAyClqaJ-KQMnO1BNSYRWaBpe-H7FCmSiXKMIGVuCkkRGsJREbZG8RutQQ2kRohaCASHDBawyTNU3Jo24lqBxPaeNpjb_mtIDub00VuATaGWtNvcVDkDUChaxVGFrhb9lORjpbEWjJRVackJvQxakWqtsdJClHVRaUs2mNrf1G0DlBDagmeRvfY0eTxTCUU6Zxq0bkmhxQSBPG-IHabwlPJvTaCaMJUiUBAaJX_JM1NxSp0MiYsByIclTFtOUxmJ01Rd2WzAGzovW8Vt2b9zblvjojm1Ml-aQW6hQ1Bs225tKIOWntmuaGWzOgG1DmrxUSAjFTckvafqUJQBaXFNck5apHFJsNaMNYDszTT2iFEPaLUSgF9aSyTpTissld9vwRG2wpuCaXMYaE7b7oaxqU5om6Un7aEm-prcbc6dJtiAF2Cdr8bp22DFnaamBdvrIl2nJRXaWiNduyUWMPZqN032xnj3aYAA9tOBQzYDvoFzpXWjWkn2wluvaRQW9rOb72_dsfaL2xNvCUaW2Zn0VUyT9pE6_m39vTb7FADtrYuWoVtbgdG8DvY7HRXjtegfWm1tbhKERnkQ6ulY8BQ7eCIppchnMUprF5Z2Kjv8aB2xJqHaGmhICaaUgFpqKsssbJo6aIlINtc702udto7C2ycmXbS2t9r2b121jtrQhOo4DD4uOnjriAj2_gDD5AWxTuE7ZOhlsWwb2mNqk7uOmTp-a5Ol9oukz2pDsCZM2vLtubc28JTCZAO_Zt06jWtxoM6SaKDvfoYOsztTIIyKIQZQrO1uGQ781VZp-Io9LrphQeuio1bgsRBhrD0rWxIxYc7Wiii1Jr0J1szI9tYqWWaVUQRHw6Jmjzs9h_FYDtzoluhwniBegDOT8kKO-AF27JESxv7QbUU7i3bLpGNvi74AfjjiVn1W2Q2aaMNJTY6fu5eBYdVEOtFCbnurto9gFGhFF7bgsIHqvbfu49vrYSobLodR7O4AEeAkvQPm2xcjVLugNm2FHvQbxu3lr5VcjTghOUgJaTpA7Z2E7tFagfbSolaZkTclc0Kekrqp7jW6-h5NLtELHpbbm_NshbM1dhpLaDEfQmp1ipDwGzo4eu5vRaJe3IwJ7_MS3EiYY20lumzIwB5WjRUhM1osprTaUEYal4GADaM_iDozIp7W1CmEk4pSMETJnWrbvMAdu9YEERJuyiQN6fgEZn0QTFN9pC6awbhoe7j0eVHDbzezDuF4oej9izJ9uups86iO0duk4vG8js6b_GndGo6olGJUi71FaLrY5V2wqBY7clTACN0d2_G1x6QASbv06T2nPrWkYRWxAEAne_YHz6Mkcvsr7wgd5ox4zkB3soA6-ggHg7UXKzrL7q4CvvaNwgc9EtwAscxo7bve4XhsaQ-tzoI7w-k7rSaz4rJs8LJ2j3ueR_G8LqT76O9HFLb0-v7o3aAegWioJQhfPsL63GgTog6U2UvrQha-3vtww9moVq77ZsVvob6WSZvtb6LO0IU77z-7vtb7--mSTR7HOzC0yamNGZFD6nmjOgj6oAHzr87T2GPuC64-wAeX6aO1fu11U-lkk373uzdpL7kugbqLJr-_gEP7gOrLsE7d-s_vIAL-w3pd6EejVvf67-y_of6BaJ_sv7-uhnTf7iBj_sv6v-2KRrBImOgdIG6RVURxMbTMPXJJoUKkmuw9hW00CBf3dlFuR0AEjqpIcuR1o5QcuHACIaskbBXAJXOF9gN1-tTxRy5kMdB2E0-lOmDUHBlU8jba5JYaEUHlBsAD9xs6GaA0GLQLQZlYdBsrD0GqoETX4AbBgpo56ie1ghy4VUDyQ5QsMAPsh6e23Du8HipHKH2B8QPqBlBYgLRz8HzewIZH6PYMfpuoo9LDFo54hmsGdREhsJuF5LuJjSaIEW6BpiBIAbIBkGRSLDDkHMhswYOxqsIIac7z4iXlsbaW1gnEGL4UoekH0HWodNQ5BkrRAALQUmUapu0TAYEBMh0YW16H9FBHIlZZIbQlZo2DtBgJK8bHGUF8YOADvBLqMFh75LNJmh7kwmQoaj12tW4i71qBbYf84-9cbEH7nRFoaOVHZJDTYV4CKGVd0wFGQGelVtJBV3VB1FhRe5nm-WX85KtGbQflTdC3S2081dgeBg8GjCCh1GYMQzUA_9XWFIaGADRGoB4qE5FXB-APgXmjxjO4AeB2IdxE1FWLU8DZB3gAYC9ARWPyStA64DkkD5zW6GEewbKIsChGUgIQycpOIJCWWEhIdWEhIRQLJk6oSG0CDIbG-Ngn2AnRICRdBXhNtW8ogQNgk7E0EFMTPEBxVcBHE3fK4DmN7kW8SFR3ITyG9F2APyDgR1RomGL1xcaMU_E60XsSuFjhAywwj0COtCiynxcETNBtgR4QdG6xaPFXBbRxGQlFZgJ0YlBLDd0brQoJRlEDF8zdMVXA4ZBGSRloJdgDRl7kMABjGL9IVEfFrxNqAXFPcCCUDFyADMbrRExjIBfFno98XYAJxeCQWFnKUQwyN5RbI0l64RqQ35GDYWQ12NFDTYymBUjNQzMNNDJAgCMCjfov0NDDFQwDgWxjwwsMrDW4A7H54RoGuV0TRWmRNexmhv7GNDJE02BvDJ3HRMRxh0FpNIqcIzvJIjEeG6luEP-HvhbjYY1GMNJLEcmNSR0FD8lZjeY0WMNxlYwbYKIYA1FMr-sYnrHKAfY3swDEY422Mux84zQBtgS4z6AIAG4yKhBjQ8YeNl4Z4zeMPjVfm-NGQXiX-MrgQE2BMaAUExMRwTEw16V0uwyBhNNxuEw0gETdYHnGUTMYDRM_DDE02AsTCGDMh5u62h7gzuh03EkuG2Bn0BV6Nkzug9gIyWMFWJ0HqTJOJqwWoAzWW6m4nXlIyXqGlHetlCGeW1gkfGcAaU0lNDUaUxglZTWDFq5TupI0VooAS7sKZNVMWkosF8eNqTxIcFib4mvIZITboLBEwWoAbBVhGnA7wRAGzoLQIPqgBIcAcBfbDBVU3RY9m9FkMEiYRyeR7euNNmRReuTcm8ndkLU0-5NKsVrmjeuOfg44lOEKZ8mszT7lsDUuRIHindkQHDSnKyDljBQg-GKYqlop9Fgj5DuE01gwLTB1AqJ7O51AUlRJlIeCxiTRsZknyTOSYhQFJ1ICUnpSFSYSAzu9Sc0ndEATk_hIcTFFMmFJLwT0ms2gyaMma6Si3MFmJ7KesEF8K8QyBbJ-yYCmG2eujcn_GkKc8nAuNKd8mjTZNlWmrWYKdXYwp4jgim6e9k2TY8plxk_hMp85ESniOZKbRBUp4Tgym8uVk2MnhOa6f0kCpwLiKnu6E1ulIyp-tDeIfpiwAhHSx2o2yNXyKsc2EBRusfcNXxxsenGJ4HOkRm2x7Q3thOxs4wMNfxlGZPhZxu0TGyhxkDh0Mxxhw1InJxzYHxmITdGcInFx3w2FAXOrGckg1xsI2WMtx6I16M1qfceAm7jI8Y9gTxnEemM4AS8awAFjbCdvG1jSyEfH4GHY0Rm3x13A_Hfxk4zGAcZi4xUgAJoCZAn7jXIHAnzwF42FBCcz4yuBBZOCenAATfgCQnLQME05gfkSE1iHXoSWdWNOYPCZGwCJlw1VnyZicZcMKJrXotbbTIo0XIfSBieLQ9u8ydYmhoBSV4ma6ISYt6Y516F0JBJ3puEnCSUSccmJJsIfMBpJ2SZlZWp2k2Bn5TAWlzoJ2hQSEZAcQybmmWaUyYTn5pypvPJtNEmncnwOPZpCmv2uTpi6IUZueI5W54TnlbpWxoyD5627VqHn_Wu6adQbuIoVOnMec6f1Ncp1dmunrpwqfRZJuzubZRJ55NmnmDOHPlmZDOEqaBmWUCqbQ6qpkSaSHMe5oezR6ppAkanqTZqbOR859qYFYWSRxSj7x2wLs1Um5-TErnLBKaZrmI54ybiExmSbsGmD4SHAaAHye4GGmjJUafrnDURudmZu5n5l7nAudufy60pxBc3niwcearYFWweY25h5uxFHnUyNeaEYuAPLi3n2OWeZymNub6ZzRfp3ThXnjOlBDSmyF3rgoWxmf6d3nL9QGcNRC543XrRKpjlGqmz5v_rKbYBM4j36JyqOaMlFB1wYMHOYIwc5BPBoBTOQr50kyam858k0Um6TZSefmZ-jJrI735sucboK5yaaPo_52aZ_m6WaMwsBgFhrhgAQFtWigXCSGBfaFZmYBcLRghRnl0EWSKnQwWhGOLrbnVOkFvQXNpk6awXhOcZpUgGWchYemZ52nrnmaFvualbdJIec1bVWwheI5F5q1mXnAuVebSn6BNhbiXZWDuFnAuzP6Z3mOF7hcsZSpw-dQ7AsEJqEXT53IY0l8h8prOlCpOlpzmNF2DAfmdFjqb0WwBgyGaa_sfztLmWSUxarmTJkABmn2WKxbrnZGYBYppnF4_ViF9pWgaYXqASHAH90ASHBI7_--yEcWHF8Bc4lIFmZeAAFJbxcznLaMJZbmIlvJc2XzANKay6KllBeCXlTK1n8XZWZBfwXW4bBaNpilnDloWLAAhfDhPuReZUWhWThaqXjTHhYhQ-Fq_UqkawdYGonjqM8Fg7a-I_V6gmicOcsWLJtiejn_52OZTn45olcTmZkZOaFQT5tOZEWM5i-dUWRTBqdznelrRban-lp-eLnI-3c2j6jFz-f0Bv5_FemmzJvFdYmfFgWngWxmL5fPIfloVlQXCW0JfTa7pmVeI5-51JfwX0ltVfY4olvLlYWledhZw4qFqKaSXwVq1himYp_JatZdV81n1Wt1SpfM1qltbVqWOTI-YaX0OrFdRonuwXjkbkhnDvpXJJ4qW6Xb5zRepNtFvhYsA2OYjtn7xlhBa_mzF75AsW5l_FcAWhGOxaU4jloVZGm4rMVcbo_F25YZZAl9FjlWvmhVfgAlV-5d-XiF6JZ-ZYlz0yKFDVy6fY5gVnBYHmR59VZRaMlsFayXTVnJdeWSlx5ZIWbcKKyKXa15NlKWUgcpYYWeeLhdhWalg-edX6loftTnj9USbaXxF4LEkWIAbeCMVLllwd6VXcQwY9glFkwZmRhmg0mEWxGwSRkX0HcqDxQt1jYlgw1FsUx6WBaPpbDWjuWZkabhl3ztGXIBoxcb6u52NamWhV2ucsmbFozswmtlnZb2XZ-mdiOWwFiBaFXY0O9cI5rlkxbzWhWZVaFYLVyfhGHu1oKfeWB19KfQ2e58tbcE_luHhtWDVhJeoXMeJtdoWNIf9ZhXJ17eenXbVgWjfXEV9gfBnix9CFENujcIFhmADWsc7GXxxWZpmTDdQwxmQ8CflsNvx3GbGzxNtGck3BxrEZXH-kb2cpmXDRTcJn6Znw2XGZNwIxCN1xjmbdFtxmIx5n-jPmcPGxjfQ1PGRZsWYlmbxl2fvG8DVBGUNRieWfUNFZ5qc_GbCOTY1mrjQCbkMrN3WceMIJo2agnTaM2b-MLZhCatmADFCYfT2Ae2bmAoTJ2ac3cJ4oURNPZr8ZImmZqmYXox4SieEYJhgUwIBW-1htDmfukDYJWOJslcMg45xMhq2BJ3TTjnz18HsD6Qhv1azm3N9RaDWWVkNbZW31iNa5X0UHlfn7jFy2kA35l6ufOWat7NYbnauKVcNRMNsZhr6WB7gcYWINp5ctWN561cBWmNtbgBmZ1x1bnXbsF1cXX3V7VBEXapilcZXr55lelJX13Rc5WoAfZcMWJtvlZoABV1ieA36t0Db0LDUVNdqt01lZfSkYF3xc7nltiFALWUF2_oyB7-h5e23CNnUn-th1w-FHXaQidahW7Vtjbx3NuXhbqW7O4-aaWaVlpZjMDF5ztQ3LpJDahRt1q9dEt9B_dYUXD10FQg7T1lSiu3PV9NnmBL1wkhy4b1yiGQ2hZQ1EfWsYR7cbpntgWk6mhlmIBGWNeNpr_WvtqNrjXZt2ZZ1Apl5NcbpgFqDfe3nOuDZOXjcVGkQ3b1unfG5qd2mmI2kF0jb7Xkdu6ZeWrpo6fh2e-zbd7Wjt1jfPJDODjdBm6F7jeUBqodJxYxNAagD5GAqEAAMQRo7QqBBiQKoG8Acx38HJBlaZFZABea7Sp-QfIHAAz2OYbuHTopl-aI2L8gP8BhAsAH0ET3jgAvI7hDpHIG9DGLG2EtBo9kEDj2t5G2XHZTseaKIbRBbR1z2T5BEH5RoPZGiipzQeaIAA9VRKw0cABWypR06QGx-Rh9-5BY0J9olHuHMqIqhA4fkQGyn2lN1scfGR9lmBwAooCfY320RrfYHHfxkmZH3jhefdCrN9nTa8M9N0iYv399nACP2hUGORM2L9g_eOFJ94_Yy2ojbqVn299uBEX29C0XHNArQSIAv24ocfYVskV-QAQlG93AG4ZtYEPf_0ER8CEBN9WXZj5TKLaYflE69usTmA2zBQHkB5AIAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}