{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/Map/map.mdx","webpack:///./src/components/Map/mapEmbed.css"],"names":["module","exports","map-title","region","loading-spinner","map-navbar","map-container","map","partyColorsData","regionColor","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","handlePreviewEvent","bind","_assertThisInitialized","Component","container","console","drawGraph","draw","getContainer","document","events","event","newState","detail","setState","selectionData","CustomEvent","REGION_CHANGE","d3","refs","vizcontainer","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","react_loading__WEBPACK_IMPORTED_MODULE_8___default","type","color","height","width","style","display","self","nationalMapFile","tooltipDiv","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","process","h","svg","dataLoaders","getMainParties","partyColorsLoader","getPartyColors","Promise","values","geoJsonData","locationToMainParty","parseMainPartyData","getJsonDataFeatures","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getMainPartyName","d","i","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityVdNumber","edge","topojson","projection","path","concat","parties","party","legends","parseInt","getLegendXY","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","length","j","rect1","rect2","bottom","pageX","smunicipal","w","fo","muniImuniCodeD","window","redrawChart","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","e","value","MAP_PREVIEW","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onRegionTypeChange","province","key","name","muni","checked","onClick","onPreview","replace","Map_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-map-map.a71d796a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"region\":\"map_region__1GVD7\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"map-navbar\":\"map_map-navbar__1sP3i\",\"map-container\":\"map_map-container__1nrEx\",\"map\":\"map_map__1IdTC\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        console.log(\"drawing ...map\");\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className=\"map-container\">\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className=\"loading-spinner\" ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" style={{display: 'hidden'}} className=\"map\"></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv;\n        if (document.getElementsByClassName(\"tooltip\")[0]) {\n          tooltipDiv = d3.select(\".tooltip\");\n        } else {\n          tooltipDiv = d3.select(\"body\").append(\"div\")\t\n            .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n            .style(\"opacity\", 0);\n        }\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityVdNumber(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var vdNumber = getMunicipalityVdNumber(d.properties);\n                    partyName = locationToMainParty[vdNumber];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var getJsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            getJsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(getJsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            getJsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                }\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            // if (self.state.regionType == \"province\") {\n            //    console.log(\"fetch muni Names and codes\", JSON.stringify(getJsonDataFeatures.map(d => {\n            //         function getMunicipalityCode(properties) {\n            //             return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n            //         }\n            //         var newState = {\n            //             provinceName: self.state.provinceName,\n            //             muniName: d.properties.smunicipal,\n            //             muniCode: getMunicipalityCode(d.properties),\n            //         }\n            //         return newState;\n            //     })));\n            // }\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(getJsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\"-\")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\"-\")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < getJsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < getJsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(getJsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\"-\")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\"-\")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName())\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityVdNumber(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            vdNumber: getMunicipalityVdNumber(d.properties),\n                        }\n                        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            vdNumber: self.state.vdNumber,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---map\"}}>{`Race for Votes - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the race for votes across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};"],"sourceRoot":""}