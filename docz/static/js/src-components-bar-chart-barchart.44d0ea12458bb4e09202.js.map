{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","event","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","uri","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","config","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","values","votesData","error","console","data","chartData","parseVotesData","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","Chart","width","height","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.cc0a4895.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}