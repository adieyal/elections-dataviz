{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/BarChartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchart.mdx","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css"],"names":["__webpack_require__","d","__webpack_exports__","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","container","width","height","className","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","this","draw","chartData","partyColorsData","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","name","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","barchart_partyColorsData","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","document","events","window","console","clearInterval","Math","_this$getWidthHeightB2","d3barchart","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","seatsDataLoader","getSeatsData","dataLoaders","Promise","values","seatsData","error","data","parseSeatsData","parseInt","RaceForSeatBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","e","toLowerCase","indexOf","alert","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","concat","replace","RaceForSeatBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-race-for-seat-barchart-barchart.b0be0830.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      console.log(\"drawing ...barchart1\");\n      var dataLoaders = [seatsDataLoader];\n\n      console.log(\"drawing ...barchart2\");\n      // if (!partyColorsData) {\n      //   var partyColorsLoader = getPartyColors();\n      //   dataLoaders.push(partyColorsLoader);\n      // }\n\n      console.log(\"drawing ...barchart3\");\n      Promise.all(dataLoaders).then(function(values){ \n        console.log(\"drawing ...barchart4\");\n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        console.log(\"drawing ...barchart5\"); \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n      console.log(\"drawing ...barchart6\");\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n      //  console.log(\"chart component\", chart)\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        if (this.state.regionType == \"province\" && this.state.eventDescription.toLowerCase().indexOf(\"provincial\") == -1) {\n            return alert(\"you selected province region type but didn't selected provincial event\");\n        }\n        if (this.state.regionType == \"national\" && this.state.eventDescription.toLowerCase().indexOf(\"national\") == -1) {\n            return alert(\"you selected national region type but didn't selected national event\");\n        }\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={vdNumber}\n                            onChange={e => this.setState({vdNumber: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---bar-chart\"}}>{`Race for Seats - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};"],"sourceRoot":""}