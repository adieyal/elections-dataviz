{"version":3,"sources":["webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","apollo_client__WEBPACK_IMPORTED_MODULE_0__","link","apollo_link_http__WEBPACK_IMPORTED_MODULE_1__","uri","useGETForQueries","headers","Content-Type","cache","apollo_cache_inmemory__WEBPACK_IMPORTED_MODULE_2__","getElectionEvents","query","gql","_templateObject","getPartyColors","_templateObject2","getVotesDataM","options","eventDescription","_templateObject3","_templateObject4","provinceName","muniCode","_templateObject5","_templateObject6","vdNumber","getMainParties","_templateObject7","_templateObject8","muniRegName","_templateObject9","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","Chart","container","width","height","className","tooltipDiv","predefColors","svg","parseInt","document","d3","x","y","YaxisOffset","barSvg","barTextSvg","this","draw","chartData","partyColorsData","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","d","name","bars","formatPartyName","l","toUpperCase","pageX","Number","percOfVotes","barTexts","destroy","barchart_partyColorsData","barchart_className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","regionType","muniName","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","events","window","console","clearInterval","Math","_this$getWidthHeightB2","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","style","dataLoaders","partyColorsLoader","Promise","values","votesData","error","data","parseVotesData","__webpack_exports__","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","type","placeholder","onChange","onEventDescriptionChange","item","key","onRegionTypeChange","disabled","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","REGION_CHANGE","MAP_PREVIEW","firstEdge","nodeData","results","node","el","validVotes","partyInfo","parseMainPartyData","locationToMainParty","edges","partyResults","__webpack_require__"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.9ada0806.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            colour\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getVotesDataM(options) {\n  var eventDescription = options.eventDescription;\n  if (!eventDescription)\n  return;\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots(\n          event_Description:\"${eventDescription}\"\n        ){\n          edges{\n            node{\n              partyResults {\n                edges{\n                  node{\n                    validVotes\n                    percOfVotes\n                    party {\n                      id\n                      name\n                      abbreviation\n                    }\n                  }\n                }\n                \n              }\n              location {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          event_Description:\"${eventDescription}\",\n          location_Name_Icontains:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              partyResults {\n                edges{\n                  node{\n                    validVotes\n                    percOfVotes\n                    party {\n                      id\n                      name\n                      abbreviation\n                    }\n                  }\n                }\n              }\n              location {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniCode = options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          event_Description:\"${eventDescription}\",\n          location_Province_Name:\"${options.provinceName}\", \n          location_Code: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n        event_Description:\"${eventDescription}\",\n        location_Id:\"${options.vdNumber}\", \n        location_Ward_Municipality_Name_Icontains:\"${options.muniCode}\") {\n          edges{\n            node{\n              location {\n                vdNumber\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getMainParties(options) {\n  var eventDescription = options.eventDescription;\n  if (!eventDescription)\n    return;\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          event_Description:\"${eventDescription}\"\n        ){\n          edges{\n            node{\n              partyResults {\n                edges{\n                  node{\n                    validVotes\n                    percOfVotes\n                    party {\n                      id\n                      name\n                      abbreviation\n                    }\n                  }\n                }\n              }\n              location {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          event_Description:\"${eventDescription}\",\n          location_Province_Name:\"${options.provinceName}\"\n        ) {\n          edges{\n            node {\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniRegName = options.muniName.split(\" - \")[1];\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots( \n          event_Description:\"${eventDescription}\",\n          location_Ward_Municipality_Name_Icontains:\"${muniRegName}\") {\n            edges{\n              node{\n                location {\n                  vdNumber\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                      }\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className) {\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n    var svg = container.append(\"svg\")\n        .attr(\"width\", parseInt(width) + XaxisOffset)\n        .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"PERCENTAGE VOTES\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      y.domain([0, 100]);\n  \n          svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n          svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return d + \"%\"; })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + d.percOfVotes + \"%\")\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(d.percOfVotes));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(d.percOfVotes));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return d.percOfVotes + \"%\";\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(d.percOfVotes)) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"./d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\n\n// for the purposes of the proof of concept - production data should be live\nvar use_live_data = true;\n\nvar js = {\n    \"data\": {\n      \"allProvincialBallots\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"partyResults\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"validVotes\": 15311,\n                      \"percOfVotes\": 84.44,\n                      \"party\": {\n                        \"id\": \"52\",\n                        \"name\": \"DEMOCRATIC ALLIANCE/DEMOKRATIESE ALLIANSIE\",\n                        \"abbreviation\": \"DA\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 1508,\n                      \"percOfVotes\": 8.32,\n                      \"party\": {\n                        \"id\": \"7\",\n                        \"name\": \"AFRICAN NATIONAL CONGRESS\",\n                        \"abbreviation\": \"ANC\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 328,\n                      \"percOfVotes\": 1.81,\n                      \"party\": {\n                        \"id\": \"938\",\n                        \"name\": \"AGANG SOUTH AFRICA\",\n                        \"abbreviation\": \"AGANG SA\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 255,\n                      \"percOfVotes\": 1.41,\n                      \"party\": {\n                        \"id\": \"945\",\n                        \"name\": \"ECONOMIC FREEDOM FIGHTERS\",\n                        \"abbreviation\": \"EFF\"\n                      }\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"validVotes\": 198,\n                      \"percOfVotes\": 1.09,\n                      \"party\": {\n                        \"id\": \"4\",\n                        \"name\": \"VRYHEIDSFRONT PLUS\",\n                        \"abbreviation\": \"VF Plus\"\n                      }\n                    }\n                  }\n                ]\n              },\n              \"location\": {\n                \"id\": \"UHJvdmluY2VUeXBlOjk5\",\n                \"name\": \"Out of Country\"\n              }\n            }\n          }\n        ]\n      }\n    }\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n\n    getRegionName() {\n      if (this.state.regionType == \"national\") {\n        return \"South Africa\";\n      }\n      if (this.state.regionType == \"province\") {\n        return this.state.provinceName;\n      }\n      if (this.state.regionType == \"municipality\") {\n        return this.state.muniName;\n      }\n      if (this.state.regionType == \"municipality-vd\") {\n        return this.state.muniName + \"-\" + this.state.vdNumber;\n      }\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>RACE FOR VOTES ({this.getRegionName()}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              style={{width: this.state.width, height: this.state.height}}></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      if (use_live_data) {        \n        var votesDataLoader = getVotesDataM(props);\n        var dataLoaders = [votesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n          var votesData = values[0];\n          partyColorsData = partyColorsData || values[1];          \n          self.drawGraph(container, props, votesData, partyColorsData);\n        }).catch(error => console.error(error));\n      }\n      else {\n        self.drawGraph(container, props, js, null);\n      }\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents\n} from \"../../api\";\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n        return (\n          <div>\n            <h3> Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"Western Cape\"\n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"City of Cape Town\"\n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={vdNumber}\n                            onChange={e => this.setState({vdNumber: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst BARCHART_PREVIEW = \"barchart-preview\";\nconst MAP_PREVIEW = \"map-preview\";\n\nexport default {\n    REGION_CHANGE,\n    BARCHART_PREVIEW,\n    MAP_PREVIEW\n};","export function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            validVotes: el[\"validVotes\"],\n            percOfVotes: el[\"percOfVotes\"],\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function parseMainPartyData(data, props) {\n    if (!data)  return null;\n    var locationToMainParty = {};\n    var edges;\n    var regionType = props.regionType;\n    console.log(\"parseMainPartyData\", data, regionType);\n    if (regionType === \"national\") {\n        edges = data[\"data\"][\"allProvincialBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var provinceName = node[\"location\"][\"name\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[provinceName] = partyName;\n        })\n    } else if (regionType === \"province\") {\n        edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var muniCode = node[\"location\"][\"code\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[muniCode] = partyName;\n        })\n    } else {// \"municipality\"\n        edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var vdNumber = node[\"location\"][\"vdNumber\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[vdNumber] = partyName;\n        })\n    }\n    return locationToMainParty;\n}"],"sourceRoot":""}