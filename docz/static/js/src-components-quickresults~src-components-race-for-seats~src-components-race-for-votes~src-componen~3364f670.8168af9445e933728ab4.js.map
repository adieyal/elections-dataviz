{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/turnout.js","webpack:///./src/api/spoilt.js","webpack:///./src/api/prog-votescount.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/mapEmbed.css","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/components/RaceForSeatDonut/piechart.css","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.css","webpack:///./src/components/SeatCompBarchart/barchartEmbed.css","webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutMap/mapEmbed.css","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css","webpack:///./src/components/embedBase.js","webpack:///./src/components/BarChart/barchartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchartEmbed.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutBarchart/barchartEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/SeatCompBarchart/barchartEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/VoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.js","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.js","webpack:///./src/components/embed.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/Map/map.js","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/RaceForSeatDonut/piechart.js","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/SeatCompBarchart/barchart.js","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/index.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsDataForComparison","options","query","gql","_templateObject","_templateObject2","provinceName","getSeatsData","eventDescription","_templateObject3","_templateObject4","getVotesDataForComparison","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","race_for_votes_templateObject3","race_for_votes_templateObject4","iecId","getVotesDataM","_templateObject5","_templateObject6","_templateObject7","_templateObject8","getMainParties","_templateObject9","_templateObject10","_templateObject11","getTurnoutData","turnout_templateObject","turnout_templateObject2","turnout_templateObject3","getTurnoutDataForOneEvent","turnout_templateObject4","turnout_templateObject5","turnout_templateObject6","turnout_templateObject7","getTurnoutDataForAllEvents","turnout_templateObject8","turnout_templateObject9","turnout_templateObject10","turnout_templateObject11","getSpoiltData","spoilt_templateObject","spoilt_templateObject2","spoilt_templateObject3","spoilt_templateObject4","getProgressVotesCount","prog_votescount_templateObject","prog_votescount_templateObject2","prog_votescount_templateObject3","prog_votescount_templateObject4","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","getProvincesData","name","abbreviation","munis","muniName","getMetrosData","module","exports","ELVIZ_percentage-label","ELVIZ_tooltip","ELVIZ_grouprect","ELVIZ_barchart","ELVIZ_stylesheet-tv","ELVIZ_chart-title","ELVIZ_chart-body","ELVIZ_groupbarchart","ELVIZ_deltabarchart","embedcode","barchart-map","ELVIZ_map-title","ELVIZ_loading-spinner","map-widget","legend","ELVIZ_stylesheet-web","ELVIZ_stylesheet-none","ELVIZ_menu-widget","piechart","ELVIZ_component-transition-menu","label","active","quickresultswidget","quick-results-title","race-for-seats","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","ELVIZ_current-progress","ELVIZ_current-turnout","ELVIZ_current-counting-progress","ELVIZ_current-spoilt-votes","donutchart","multievent-container","horseshoechart","multiparties-container","EmbedBase","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","loadScriptsForEmbedMode","Component","react_default","a","createElement","provincesData","className","originClassName","bootstrapStyles","styles","BarChartEmbed","barchartEmbed_classCallCheck","barchartEmbed_possibleConstructorReturn","barchartEmbed_getPrototypeOf","state","elementId","regionType","numParties","electionEvents","stylesheetFor","componentID","self","data","error","console","e","setState","value","newState","triggerCustomEvent","events","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","bind","key","description","onRegionTypeChange","nationalEventSelected","province","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_barchartEmbed","barchartEmbed_className","RaceForSeatBarchart_barchartEmbed_classCallCheck","RaceForSeatBarchart_barchartEmbed_possibleConstructorReturn","RaceForSeatBarchart_barchartEmbed_getPrototypeOf","disabled","components_RaceForSeatBarchart_barchartEmbed","SpoiltBarchart_barchartEmbed_className","SpoiltBarchart_barchartEmbed_classCallCheck","SpoiltBarchart_barchartEmbed_possibleConstructorReturn","SpoiltBarchart_barchartEmbed_getPrototypeOf","components_SpoiltBarchart_barchartEmbed","mapEmbed_className","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","disableNavigation","loadCanvg","MAP_PREVIEW","checked","Map_mapEmbed","TurnoutMap_mapEmbed_className","TurnoutMap_mapEmbed_classCallCheck","TurnoutMap_mapEmbed_possibleConstructorReturn","TurnoutMap_mapEmbed_getPrototypeOf","components_TurnoutMap_mapEmbed","TurnoutBarchart_barchartEmbed_className","TurnoutBarchart_barchartEmbed_classCallCheck","TurnoutBarchart_barchartEmbed_possibleConstructorReturn","TurnoutBarchart_barchartEmbed_getPrototypeOf","eventType","components_TurnoutBarchart_barchartEmbed","barchartMapEmbed_className","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","JSON","EXPORT_SUPERWIDGET_PNG","BarchartWithNavMap_barchartMapEmbed","quickResultsWidgetEmbed_className","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","QUICK_RESULTS_PREVIEW","QuickResultsWidget_quickResultsWidgetEmbed","piechartEmbed_className","PieChartEmbed","piechartEmbed_classCallCheck","piechartEmbed_possibleConstructorReturn","piechartEmbed_getPrototypeOf","ProgVotesCountPiechart_piechartEmbed","SeatCompBarchart_barchartEmbed_className","SeatCompBarchart_barchartEmbed_classCallCheck","SeatCompBarchart_barchartEmbed_possibleConstructorReturn","SeatCompBarchart_barchartEmbed_getPrototypeOf","eventDescriptions","partyAbbr","partyIecId","allParties","Object","api","then","edge","filter","thing","index","t","catch","values","i","l","length","selected","multiple","party","components_SeatCompBarchart_barchartEmbed","horseshoeEmbed_className","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","SeatHorseShoeChart_horseshoeEmbed","VoteCompBarchart_barchartEmbed_className","VoteCompBarchart_barchartEmbed_classCallCheck","VoteCompBarchart_barchartEmbed_possibleConstructorReturn","VoteCompBarchart_barchartEmbed_getPrototypeOf","components_VoteCompBarchart_barchartEmbed","TVSeatCompBarchart_barchartEmbed_className","TVSeatCompBarchart_barchartEmbed_classCallCheck","TVSeatCompBarchart_barchartEmbed_possibleConstructorReturn","TVSeatCompBarchart_barchartEmbed_getPrototypeOf","partyAbbrs","partyIecIds","partyIdx","onPartyAbbrsChange","formatPartyName","components_TVSeatCompBarchart_barchartEmbed","TVSeatSwingBarchart_barchartEmbed_className","TVSeatSwingBarchart_barchartEmbed_classCallCheck","TVSeatSwingBarchart_barchartEmbed_possibleConstructorReturn","TVSeatSwingBarchart_barchartEmbed_getPrototypeOf","event","components_TVSeatSwingBarchart_barchartEmbed","TVVoteCompBarchart_barchartEmbed_className","TVVoteCompBarchart_barchartEmbed_classCallCheck","TVVoteCompBarchart_barchartEmbed_possibleConstructorReturn","TVVoteCompBarchart_barchartEmbed_getPrototypeOf","components_TVVoteCompBarchart_barchartEmbed","TVVoteSwingBarchart_barchartEmbed_className","TVVoteSwingBarchart_barchartEmbed_classCallCheck","TVVoteSwingBarchart_barchartEmbed_possibleConstructorReturn","TVVoteSwingBarchart_barchartEmbed_getPrototypeOf","components_TVVoteSwingBarchart_barchartEmbed","RaceForSeatDonut_piechartEmbed_className","RaceForSeatDonut_piechartEmbed_classCallCheck","RaceForSeatDonut_piechartEmbed_possibleConstructorReturn","RaceForSeatDonut_piechartEmbed_getPrototypeOf","components_RaceForSeatDonut_piechartEmbed","__webpack_require__","d","__webpack_exports__","Chart","container","width","height","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","minMaxY","dynamicYAxisFromValues","maxValue","parseFloat","customizeDynamicMaxValue","bars","getFillColor","getTooltipText","pageX","Number","barTexts","_typeof","partyName","getFillColorFromPartyName","destroy","barchart_partyColorsData","barchart_className","originName","cn","chartOptions","maxVal","Math","BarChart","_assertThisInitialized","fetchDataFromOBJ","chart","refreshIntervalID","exportAsPNG","exportAsPNGUri","handleRegionChange","handlePreviewEvent","getContainer","setInterval","document","clearInterval","detail","targetState","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","ref","dataLoaders","partyColorsLoader","votesData","parseVotesData","BarChart_barchart","RaceForSeatBarchart_barchart_partyColorsData","seats","RaceForSeatBarchart_barchart_className","barchart_cn","barchart_classCallCheck","barchart_getPrototypeOf","barchart_assertThisInitialized","getNationOrProvinceName2","barchart_chartOptions","seatsData","parseSeatsData","RaceForSeatBarchart_barchart","percent","SpoiltBarchart_barchart_className","SpoiltBarchart_barchart_cn","SpoiltBarchart_barchart_classCallCheck","SpoiltBarchart_barchart_possibleConstructorReturn","SpoiltBarchart_barchart_getPrototypeOf","SpoiltBarchart_barchart_assertThisInitialized","SpoiltBarchart_barchart_chartOptions","spoiltData","parseSpoiltVotesData","Valid","Spoilt","SpoiltBarchart_barchart","map_partyColorsData","regionColor","map_className","map_cn","Map","map_classCallCheck","map_getPrototypeOf","map_assertThisInitialized","drawGraph","selectAll","remove","prevProps","prevState","rect","rendercanvas","window","ignoreDimensions","scaleWidth","scaleHeight","canvg","canvas","filename","lnk","createEvent","fireEvent","loading","react_loading_default","color","fullRouteGeoJsonFile","getRegionFileName","h","all","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","getMunicipalityiecId","topojson","projection","path","parties","availableCnt","b","legends","parseInt","getLegendXY","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","undefinedText","mainPartyName","subRegionName","tooltipText","REGION_CHANGE","smunicipal","appendSpan","foDiv","regionName","addSub","appendLink","setRegionType","fo","currentRegionName","setTimeout","alert","Map_map","TurnoutMap_map_className","TurnoutMap_map_cn","TurnoutMap_map_classCallCheck","TurnoutMap_map_getPrototypeOf","TurnoutMap_map_assertThisInitialized","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it","turnoutData","TurnoutMap_map","percVoterTurnout","TurnoutBarchart_barchart_className","TurnoutBarchart_barchart_cn","TurnoutBarchart_barchart_classCallCheck","TurnoutBarchart_barchart_possibleConstructorReturn","TurnoutBarchart_barchart_getPrototypeOf","TurnoutBarchart_barchart_assertThisInitialized","TurnoutBarchart_barchart_chartOptions","parseTurnoutDataForAllEvents","TurnoutBarchart_barchart","barchartMap_className","BarchartWithNavMap","barchartMap_classCallCheck","barchartMap_getPrototypeOf","barchartMap_assertThisInitialized","zip","JSZip","imgs","base64","content","saveAs","assign","instance","barchartInstance","mapInstance","BarchartWithNavMap_barchartMap","d3piechart_Chart","margin","variable","category","floatFormat","colour","radius","pie","arc","totalSvg","transformX","labelSvg","toolTip","selection","on","tip","toolTipHTML","arcTween","_current","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","piechart_cn","PieChart","piechart_classCallCheck","piechart_getPrototypeOf","piechart_assertThisInitialized","piechart_chartOptions","progressVotesData","parseProgressVotesCount","Completed","Not Completed","ProgVotesCountPiechart_piechart","piechart_partyColorsData","viewBox","RaceForSeatDonut_piechart_className","RaceForSeatDonut_piechart_cn","DonutChart","RaceForSeatDonut_piechart_classCallCheck","RaceForSeatDonut_piechart_getPrototypeOf","RaceForSeatDonut_piechart_assertThisInitialized","getNationOrProvinceName","RaceForSeatDonut_piechart_chartOptions","components_RaceForSeatDonut_piechart","cssPrefix","metrosData","toShowChartLabels","toShowCharts","CustomLink","navbar_classCallCheck","navbar_possibleConstructorReturn","navbar_getPrototypeOf","navbar_assertThisInitialized","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","comp","activeLinkId","handleNavBarSelection","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","icon","toshowchart","chartIdx","navbar_provincesData","map","join","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","quickResultsWidget_cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","quickResultsWidget_assertThisInitialized","fetchCurrentResultData","newProps","progVotesData","parsedSpoiltData","parsedTurnoutData","parseTurnoutDataForOneEvent","parsedProgVotesData","zipfileName","imageLoadPromises","votesInstance1","votesInstance2","seatsInstance1","seatsInstance2","turnoutInstance1","turnoutInstance2","progressInstance1","progressInstance2","spoiltInstance1","spoiltInstance2","triggerState","getRegionName2","renderTurnoutProgressSpoilt","getRegionName3","QuickResultsWidget_quickResultsWidget","SeatCompBarchart_barchart_partyColorsData","SeatCompBarchart_barchart_className","SeatCompBarchart_barchart_cn","SeatCompBarchart_barchart_classCallCheck","SeatCompBarchart_barchart_getPrototypeOf","SeatCompBarchart_barchart_assertThisInitialized","SeatCompBarchart_barchart_chartOptions","parseSeatsComparisonData","SeatCompBarchart_barchart","d3horseshoe_Chart","mainSvg","originChartData","totalSeats","rows","poslist","J","R","angle","Totals","PI","onMouseMove","onMouseOut","Counter","partySvg","pythonConvertedCode","horseshoe_partyColorsData","horseshoe_className","horseshoe_cn","HorseShoeChart","horseshoe_classCallCheck","horseshoe_getPrototypeOf","horseshoe_assertThisInitialized","horseshoe_chartOptions","SeatHorseShoeChart_horseshoe","VoteCompBarchart_barchart_partyColorsData","VoteCompBarchart_barchart_className","VoteCompBarchart_barchart_cn","VoteCompBarchart_barchart_classCallCheck","VoteCompBarchart_barchart_getPrototypeOf","VoteCompBarchart_barchart_assertThisInitialized","parseVotesComparisonData","VoteCompBarchart_barchart","d3groupbarchart_Chart","groupChartData","groupSvgs","groupSvg","formatClassNameFromPartyAbbr","bandwidth","YaxisOffset","subX","barAxisTextSvg","barAxisTexts","exec","TVSeatCompBarchart_barchart_partyColorsData","topLabel","usedValue","TVSeatCompBarchart_barchart_className","TVSeatCompBarchart_barchart_cn","TVSeatCompBarchart_barchart_classCallCheck","TVSeatCompBarchart_barchart_getPrototypeOf","TVSeatCompBarchart_barchart_assertThisInitialized","TVSeatCompBarchart_barchart_chartOptions","desc","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","d3deltabarchart_Chart","newGroupChartData","_objectSpread","delta","deltaData","barTextYDelta","axisThick","TVSeatSwingBarchart_barchart_partyColorsData","TVSeatSwingBarchart_barchart_className","TVSeatSwingBarchart_barchart_cn","TVSeatSwingBarchart_barchart_classCallCheck","TVSeatSwingBarchart_barchart_getPrototypeOf","TVSeatSwingBarchart_barchart_assertThisInitialized","TVSeatSwingBarchart_barchart_chartOptions","years","TVSeatSwingBarchart_barchart","TVVoteCompBarchart_barchart_partyColorsData","TVVoteCompBarchart_barchart_className","TVVoteCompBarchart_barchart_cn","TVVoteCompBarchart_barchart_classCallCheck","TVVoteCompBarchart_barchart_getPrototypeOf","TVVoteCompBarchart_barchart_assertThisInitialized","TVVoteCompBarchart_barchart_chartOptions","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","TVVoteSwingBarchart_barchart_partyColorsData","TVVoteSwingBarchart_barchart_className","TVVoteSwingBarchart_barchart_cn","TVVoteSwingBarchart_barchart_classCallCheck","TVVoteSwingBarchart_barchart_getPrototypeOf","TVVoteSwingBarchart_barchart_assertThisInitialized","TVVoteSwingBarchart_barchart_chartOptions","TVVoteSwingBarchart_barchart","CSS_PREFIX","calcPercent","toFixed","results","firstEdge","nodeData","node","el","validVotes","partyInfo","edges","partyResults","result","partyfilter_edges","reverse","new_results","available","totalCount","count","getTopPartyNameFromNode","beautifiedMuniName","tooltipClassName","labelElements","regions","overlapCnt","rect1","rect2","bottom","eventName","eventParam","CustomEvent","toUpperCase","PKLVDNUMBE","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","loadScript","id","scriptURL","callback","script"],"mappings":"qVAOMA,EAAS,IAAAC,EAAA,EAAiB,CAC5BC,KAAM,IAAAC,EAAA,EAAa,CAAEC,IAJzB,oCAIuCC,kBAAhB,EAAwCC,QAAS,CAACC,eADzC,yBAE5BC,MAAO,IAFXC,EAAA,yuFCJO,SAAAC,EAAAC,GACL,kBAAIA,aACKX,QAAa,CAClBY,MAAOC,IAAFC,OA4BAd,QAAa,CAClBY,MAAOC,IAAFE,IAEoCJ,EAH3CK,gBA8BG,SAAAC,EAAAN,GACH,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAEA,kBAAIP,aACKX,QAAa,CAClBY,MAAOC,IAAFM,IADPD,MA+BAA,GADAA,GADAA,EAAmBA,qBAAnBA,eACmBA,mBAAnBA,eACmBA,mBAAnBA,cACOlB,QAAa,CAClBY,MAAOC,IAAFO,IAEoCT,EAFpCK,aADPE,ooQClGC,SAAAG,EAAAV,GACL,eAAIA,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAFS,OA6BF,eAAIX,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAFU,IAGgBZ,EAJvBK,gBAgCK,mBAAIL,aAAsC,CAC/C,IAAIa,EAAWb,YAAoBA,wBAAnC,GAEA,OAAOX,QAAa,CAClBY,MAAOC,IAAFY,IAGyBd,EAHzBK,aADPQ,KAqCK,yBAAIb,aACFX,QAAa,CAClBY,MAAOC,IAAFa,IAGiBf,EAHjBgB,MAIkChB,EALzCa,iBADK,EAmCF,SAAAI,EAAAjB,GACH,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAAA,CAEA,eAAIP,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAFgB,IADPX,KAiCK,eAAIP,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAFiB,IAAAZ,EAIgBP,EALvBK,gBAiCK,mBAAIL,aAAsC,CAC/C,IAAIa,EAAWb,YAAoBA,wBAAnC,GAEA,OAAOX,QAAa,CAClBY,MAAOC,IAAFkB,IAAAb,EAIyBP,EAJzBK,aADPQ,KAmCK,yBAAIb,aACFX,QAAa,CAClBY,MAAOC,IAAFmB,IAAAd,EAIiBP,EAJjBgB,MAKkChB,EANzCa,iBADK,GAoCF,SAAAS,EAAAtB,GACL,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAAA,CAEA,eAAIP,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAFqB,IADPhB,KA2BK,eAAIP,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAFsB,IAAAjB,EAIyBP,EALhCK,gBA+BkBL,wBAAlB,GACE,OAAOX,QAAa,CAClBY,MAAOC,IAAFuB,IAAAlB,EAI2CP,EAJ3CK,aAKmCL,EAN1Ca,20KC7VC,SAAAa,EAAA1B,GACL,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAEA,kBAAIP,aACKX,QAAa,CAClBY,MAAOC,IAAFyB,IADPpB,KAmBK,YAAIP,aACFX,QAAa,CAClBY,MAAOC,IAAF0B,IAAArB,EAIyBP,EALhCK,gBAsBShB,QAAa,CAClBY,MAAOC,IAAF2B,IAAAtB,EAIgCP,EALvCa,YAqBC,SAAAiB,EAAA9B,GACL,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAAA,CAGA,eAAIP,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAF6B,IADPxB,KAqBK,eAAIP,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAF8B,IAAAzB,EAIgBP,EALvBK,gBAsBK,mBAAIL,aAAsC,CAC7C,IAAIa,EAAWb,YAAoBA,wBAAnC,GAEA,OAAOX,QAAa,CAClBY,MAAOC,IAAF+B,IAAA1B,EAIyBP,EAJzBK,aADPQ,KAuBG,yBAAIb,aACAX,QAAa,CAClBY,MAAOC,IAAFgC,IAAA3B,EAIiBP,EAJjBgB,MAKkChB,EANzCa,iBADG,GA2BF,SAAAsB,EAAAnC,GACL,eAAIA,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAFkC,OAkBF,eAAIpC,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAFmC,IAGgBrC,EAJvBK,gBAqBK,mBAAIL,aAAsC,CAC7C,IAAIa,EAAWb,YAAoBA,wBAAnC,GAEA,OAAOX,QAAa,CAClBY,MAAOC,IAAFoC,IAG2BtC,EAH3BK,aADPQ,KAsBG,yBAAIb,aACAX,QAAa,CAClBY,MAAOC,IAAFqC,IAGmBvC,EAHnBgB,MAIoChB,EAL3Ca,iBADG,oqECjPF,SAAA2B,EAAAxC,GACL,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAAA,CAEA,eAAIP,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAFuC,IADPlC,KAqBK,eAAIP,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAFwC,IAAAnC,EAIgBP,EALvBK,gBAsBK,mBAAIL,aAAsC,CAC7C,IAAIa,EAAWb,YAAoBA,wBAAnC,GAEA,OAAOX,QAAa,CAClBY,MAAOC,IAAFyC,IAAApC,EAI2BP,EAJ3BK,aADPQ,KAwBG,yBAAIb,aACAX,QAAa,CAClBY,MAAOC,IAAF0C,IAAArC,EAImBP,EAJnBgB,MAKoChB,EAN3Ca,iBADG,ulDC5EJ,SAAAgC,GAAA7C,GACH,IAAIO,EAAmBP,EAAvBO,iBACA,GAAAA,EAAA,CAEA,eAAIP,aACF,OAAOX,QAAa,CAClBY,MAAOC,IAAF4C,KADPvC,KAgBK,eAAIP,aACT,OAAOX,QAAa,CAClBY,MAAOC,IAAF6C,KAAAxC,EAIgBP,EALvBK,gBAiBK,mBAAIL,aAAsC,CAC/C,IAAIa,EAAWb,YAAoBA,wBAAnC,GAEA,OAAOX,QAAa,CAClBY,MAAOC,IAAF8C,IAAAzC,EAIyBP,EAJzBK,aADPQ,KAkBK,yBAAIb,aACFX,QAAa,CAClBY,MAAOC,IAAF+C,IAAA1C,EAIiBP,EAJjBgB,MAKkChB,EANzCa,iBADK,2iBCtDJ,SAAAqC,KACL,OAAO7D,QAAa,CAClBY,MAAOC,IAAFiD,QAaF,SAAAC,KACL,OAAO/D,QAAa,CAClBY,MAAOC,IAAFmD,QAiBF,SAAAC,KAgDL,MA/CoB,CAChB,CACIC,KADJ,UAEIC,aAFJ,MAGIC,MAAS,CAAC,CAACpD,aAAD,UAA0BqD,SAA1B,mCAAwE7C,SAAzE,UAA8F,CAACR,aAAD,UAA0BqD,SAA1B,yCAA8E7C,SAA5K,UAAiM,CAACR,aAAD,UAA0BqD,SAA1B,qCAA0E7C,SAA3Q,UAAgS,CAACR,aAAD,UAA0BqD,SAA1B,sCAA2E7C,SAA3W,UAAgY,CAACR,aAAD,UAA0BqD,SAA1B,iCAAsE7C,SAAtc,UAA2d,CAACR,aAAD,UAA0BqD,SAA1B,4BAAiE7C,SAA5hB,UAAijB,CAACR,aAAD,UAA0BqD,SAA1B,kCAAuE7C,SAAxnB,UAA6oB,CAACR,aAAD,UAA0BqD,SAA1B,mCAAwE7C,SAArtB,UAA0uB,CAACR,aAAD,UAA0BqD,SAA1B,qCAA0E7C,SAApzB,UAAy0B,CAACR,aAAD,UAA0BqD,SAA1B,wCAA6E7C,SAAt5B,UAA26B,CAACR,aAAD,UAA0BqD,SAA1B,qCAA0E7C,SAAr/B,UAA0gC,CAACR,aAAD,UAA0BqD,SAA1B,sCAA2E7C,SAArlC,UAA0mC,CAACR,aAAD,UAA0BqD,SAA1B,mCAAwE7C,SAAlrC,UAAusC,CAACR,aAAD,UAA0BqD,SAA1B,uCAA4E7C,SAAnxC,UAAwyC,CAACR,aAAD,UAA0BqD,SAA1B,mCAAwE7C,SAAh3C,UAAq4C,CAACR,aAAD,UAA0BqD,SAA1B,gCAAqE7C,SAA18C,UAA+9C,CAACR,aAAD,UAA0BqD,SAA1B,qCAA0E7C,SAAziD,UAA8jD,CAACR,aAAD,UAA0BqD,SAA1B,iCAAsE7C,SAApoD,UAAypD,CAACR,aAAD,UAA0BqD,SAA1B,+BAAoE7C,SAA7tD,UAAkvD,CAACR,aAAD,UAA0BqD,SAA1B,uCAA4E7C,SAA9zD,UAAm1D,CAACR,aAAD,UAA0BqD,SAA1B,wCAA6E7C,SAAh6D,UAAq7D,CAACR,aAAD,UAA0BqD,SAA1B,0CAA+E7C,SAApgE,UAAyhE,CAACR,aAAD,UAA0BqD,SAA1B,sCAA2E7C,SAApmE,UAAynE,CAACR,aAAD,UAA0BqD,SAA1B,kCAAuE7C,SAAhsE,UAAqtE,CAACR,aAAD,UAA0BqD,SAA1B,mEAAwG7C,SAJ1zE,YAMhB,CACI0C,KADJ,aAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,aAA6BqD,SAA7B,+CAAuF7C,SAAxF,SAA4G,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAAlL,SAAsM,CAACR,aAAD,aAA6BqD,SAA7B,gCAAwE7C,SAA9Q,SAAkS,CAACR,aAAD,aAA6BqD,SAA7B,qCAA6E7C,SAA/W,SAAmY,CAACR,aAAD,aAA6BqD,SAA7B,6BAAqE7C,SAAxc,SAA4d,CAACR,aAAD,aAA6BqD,SAA7B,+BAAuE7C,SAAniB,SAAujB,CAACR,aAAD,aAA6BqD,SAA7B,uCAA+E7C,SAAtoB,SAA0pB,CAACR,aAAD,aAA6BqD,SAA7B,0BAAkE7C,SAA5tB,SAAgvB,CAACR,aAAD,aAA6BqD,SAA7B,+BAAuE7C,SAAvzB,SAA20B,CAACR,aAAD,aAA6BqD,SAA7B,qCAA6E7C,SAAx5B,SAA46B,CAACR,aAAD,aAA6BqD,SAA7B,+BAAuE7C,SAAn/B,SAAugC,CAACR,aAAD,aAA6BqD,SAA7B,kCAA0E7C,SAAjlC,SAAqmC,CAACR,aAAD,aAA6BqD,SAA7B,kCAA0E7C,SAA/qC,SAAmsC,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAAzwC,SAA6xC,CAACR,aAAD,aAA6BqD,SAA7B,+BAAuE7C,SAAp2C,SAAw3C,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAA97C,SAAk9C,CAACR,aAAD,aAA6BqD,SAA7B,4BAAoE7C,SAAthD,SAA0iD,CAACR,aAAD,aAA6BqD,SAA7B,wCAAgF7C,SATvnD,WAWhB,CACI0C,KADJ,UAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,UAA0BqD,SAA1B,+BAAoE7C,SAArE,OAAuF,CAACR,aAAD,UAA0BqD,SAA1B,iCAAsE7C,SAA7J,SAAiL,CAACR,aAAD,UAA0BqD,SAA1B,6BAAkE7C,SAAnP,SAAuQ,CAACR,aAAD,UAA0BqD,SAA1B,8BAAmE7C,SAA1U,SAA8V,CAACR,aAAD,UAA0BqD,SAA1B,oCAAyE7C,SAAva,SAA2b,CAACR,aAAD,UAA0BqD,SAA1B,oCAAyE7C,SAApgB,SAAwhB,CAACR,aAAD,UAA0BqD,SAA1B,kCAAuE7C,SAA/lB,SAAmnB,CAACR,aAAD,UAA0BqD,SAA1B,wCAA6E7C,SAAhsB,SAAotB,CAACR,aAAD,UAA0BqD,SAA1B,4CAAiF7C,SAAryB,OAAuzB,CAACR,aAAD,UAA0BqD,SAA1B,iCAAsE7C,SAd13B,SAgBhB,CACI0C,KADJ,gBAEIC,aAFJ,MAGIC,MAAS,CAAC,CAACpD,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA7E,OAA+F,CAACR,aAAD,gBAAgCqD,SAAhC,8BAAyE7C,SAAxK,UAA6L,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAvQ,UAA4R,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAApW,UAAyX,CAACR,aAAD,gBAAgCqD,SAAhC,kCAA6E7C,SAAtc,UAA2d,CAACR,aAAD,gBAAgCqD,SAAhC,oCAA+E7C,SAA1iB,UAA+jB,CAACR,aAAD,gBAAgCqD,SAAhC,2CAAsF7C,SAArpB,UAA0qB,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAArvB,UAA0wB,CAACR,aAAD,gBAAgCqD,SAAhC,4BAAuE7C,SAAj1B,UAAs2B,CAACR,aAAD,gBAAgCqD,SAAhC,qCAAgF7C,SAAt7B,UAA28B,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAArhC,UAA0iC,CAACR,aAAD,gBAAgCqD,SAAhC,uCAAkF7C,SAA5nC,UAAipC,CAACR,aAAD,gBAAgCqD,SAAhC,qCAAgF7C,SAAjuC,UAAsvC,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAh0C,UAAq1C,CAACR,aAAD,gBAAgCqD,SAAhC,4CAAuF7C,SAA56C,UAAi8C,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAAzgD,UAA8hD,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAxmD,UAA6nD,CAACR,aAAD,gBAAgCqD,SAAhC,kCAA6E7C,SAA1sD,UAA+tD,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAzyD,UAA8zD,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAAt4D,UAA25D,CAACR,aAAD,gBAAgCqD,SAAhC,yBAAoE7C,SAA/9D,UAAo/D,CAACR,aAAD,gBAAgCqD,SAAhC,4BAAuE7C,SAA3jE,UAAglE,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAAxpE,UAA6qE,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAAzvE,UAA8wE,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA11E,UAA+2E,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA37E,UAAg9E,CAACR,aAAD,gBAAgCqD,SAAhC,oCAA+E7C,SAA/hF,UAAojF,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAA9nF,UAAmpF,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAA7tF,UAAkvF,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAA1zF,UAA+0F,CAACR,aAAD,gBAAgCqD,SAAhC,2BAAsE7C,SAAr5F,UAA06F,CAACR,aAAD,gBAAgCqD,SAAhC,uCAAkF7C,SAA5/F,UAAihG,CAACR,aAAD,gBAAgCqD,SAAhC,0BAAqE7C,SAAtlG,UAA2mG,CAACR,aAAD,gBAAgCqD,SAAhC,0CAAqF7C,SAAhsG,UAAqtG,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAA7xG,UAAkzG,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA93G,UAAm5G,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA/9G,UAAo/G,CAACR,aAAD,gBAAgCqD,SAAhC,qCAAgF7C,SAApkH,UAAylH,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAnqH,UAAwrH,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAAhwH,UAAqxH,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAAj2H,UAAs3H,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAA97H,UAAm9H,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAA3hI,UAAgjI,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAA1nI,UAA+oI,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAAvtI,UAA4uI,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAAxzI,UAA60I,CAACR,aAAD,gBAAgCqD,SAAhC,6BAAwE7C,SAAr5I,UAA06I,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAAr/I,UAA0gJ,CAACR,aAAD,gBAAgCqD,SAAhC,qCAAgF7C,SAA1lJ,UAA+mJ,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAzrJ,UAA8sJ,CAACR,aAAD,gBAAgCqD,SAAhC,kCAA6E7C,SAnBxxJ,YAqBhB,CACI0C,KADJ,aAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,aAA6BqD,SAA7B,iCAAyE7C,SAA1E,SAA8F,CAACR,aAAD,aAA6BqD,SAA7B,2BAAmE7C,SAAjK,SAAqL,CAACR,aAAD,aAA6BqD,SAA7B,kCAA0E7C,SAA/P,SAAmR,CAACR,aAAD,aAA6BqD,SAA7B,kCAA0E7C,SAA7V,SAAiX,CAACR,aAAD,aAA6BqD,SAA7B,iCAAyE7C,SAA1b,SAA8c,CAACR,aAAD,aAA6BqD,SAA7B,6BAAqE7C,SAAnhB,SAAuiB,CAACR,aAAD,aAA6BqD,SAA7B,iCAAyE7C,SAAhnB,SAAooB,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAA1sB,SAA8tB,CAACR,aAAD,aAA6BqD,SAA7B,mCAA2E7C,SAAzyB,SAA6zB,CAACR,aAAD,aAA6BqD,SAA7B,sCAA8E7C,SAA34B,SAA+5B,CAACR,aAAD,aAA6BqD,SAA7B,2BAAmE7C,SAAl+B,SAAs/B,CAACR,aAAD,aAA6BqD,SAA7B,oCAA4E7C,SAAlkC,SAAslC,CAACR,aAAD,aAA6BqD,SAA7B,kCAA0E7C,SAAhqC,SAAorC,CAACR,aAAD,aAA6BqD,SAA7B,qCAA6E7C,SAAjwC,SAAqxC,CAACR,aAAD,aAA6BqD,SAA7B,qDAA6F7C,SAAl3C,SAAs4C,CAACR,aAAD,aAA6BqD,SAA7B,oCAA4E7C,SAAl9C,SAAs+C,CAACR,aAAD,aAA6BqD,SAA7B,iCAAyE7C,SAA/iD,SAAmkD,CAACR,aAAD,aAA6BqD,SAA7B,iCAAyE7C,SAA5oD,SAAgqD,CAACR,aAAD,aAA6BqD,SAA7B,yCAAiF7C,SAxB9uD,WA0BhB,CACI0C,KADJ,aAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,aAA6BqD,SAA7B,oCAA4E7C,SAA7E,SAAiG,CAACR,aAAD,aAA6BqD,SAA7B,gCAAwE7C,SAAzK,SAA6L,CAACR,aAAD,aAA6BqD,SAA7B,6BAAqE7C,SAAlQ,SAAsR,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAA5V,SAAgX,CAACR,aAAD,aAA6BqD,SAA7B,mCAA2E7C,SAA3b,SAA+c,CAACR,aAAD,aAA6BqD,SAA7B,iCAAyE7C,SAAxhB,SAA4iB,CAACR,aAAD,aAA6BqD,SAA7B,gCAAwE7C,SAApnB,SAAwoB,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAA9sB,SAAkuB,CAACR,aAAD,aAA6BqD,SAA7B,4BAAoE7C,SAAtyB,SAA0zB,CAACR,aAAD,aAA6BqD,SAA7B,4BAAoE7C,SAA93B,SAAk5B,CAACR,aAAD,aAA6BqD,SAA7B,gCAAwE7C,SAA19B,SAA8+B,CAACR,aAAD,aAA6BqD,SAA7B,2BAAmE7C,SAAjjC,SAAqkC,CAACR,aAAD,aAA6BqD,SAA7B,qCAA6E7C,SAAlpC,SAAsqC,CAACR,aAAD,aAA6BqD,SAA7B,4BAAoE7C,SAA1uC,SAA8vC,CAACR,aAAD,aAA6BqD,SAA7B,+BAAuE7C,SAAr0C,SAAy1C,CAACR,aAAD,aAA6BqD,SAA7B,8BAAsE7C,SAA/5C,SAAm7C,CAACR,aAAD,aAA6BqD,SAA7B,0BAAkE7C,SAAr/C,SAAygD,CAACR,aAAD,aAA6BqD,SAA7B,kCAA0E7C,SAAnlD,SAAumD,CAACR,aAAD,aAA6BqD,SAA7B,6BAAqE7C,SAA5qD,SAAgsD,CAACR,aAAD,aAA6BqD,SAA7B,gCAAwE7C,SA7BrwD,SA+BhB,CACI0C,KADJ,eAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,eAA+BqD,SAA/B,mCAA6E7C,SAA9E,OAAgG,CAACR,aAAD,eAA+BqD,SAA/B,mCAA6E7C,SAA7K,SAAiM,CAACR,aAAD,eAA+BqD,SAA/B,2CAAqF7C,SAAtR,SAA0S,CAACR,aAAD,eAA+BqD,SAA/B,+BAAyE7C,SAAnX,SAAuY,CAACR,aAAD,eAA+BqD,SAA/B,+BAAyE7C,SAAhd,SAAoe,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAA9iB,SAAkkB,CAACR,aAAD,eAA+BqD,SAA/B,0CAAoF7C,SAAtpB,SAA0qB,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAApvB,SAAwwB,CAACR,aAAD,eAA+BqD,SAA/B,6BAAuE7C,SAA/0B,SAAm2B,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAA76B,SAAi8B,CAACR,aAAD,eAA+BqD,SAA/B,4BAAsE7C,SAAvgC,SAA2hC,CAACR,aAAD,eAA+BqD,SAA/B,+BAAyE7C,SAApmC,SAAwnC,CAACR,aAAD,eAA+BqD,SAA/B,4BAAsE7C,SAA9rC,SAAktC,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAA9xC,SAAkzC,CAACR,aAAD,eAA+BqD,SAA/B,4BAAsE7C,SAAx3C,SAA44C,CAACR,aAAD,eAA+BqD,SAA/B,2BAAqE7C,SAAj9C,SAAq+C,CAACR,aAAD,eAA+BqD,SAA/B,2BAAqE7C,SAA1iD,SAA8jD,CAACR,aAAD,eAA+BqD,SAA/B,oCAA8E7C,SAA5oD,SAAgqD,CAACR,aAAD,eAA+BqD,SAA/B,+BAAyE7C,SAAzuD,SAA6vD,CAACR,aAAD,eAA+BqD,SAA/B,6BAAuE7C,SAAp0D,SAAw1D,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAAl6D,SAAs7D,CAACR,aAAD,eAA+BqD,SAA/B,oCAA8E7C,SAApgE,SAAwhE,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAApmE,SAAwnE,CAACR,aAAD,eAA+BqD,SAA/B,4BAAsE7C,SAA9rE,SAAktE,CAACR,aAAD,eAA+BqD,SAA/B,8BAAwE7C,SAA1xE,SAA8yE,CAACR,aAAD,eAA+BqD,SAA/B,oCAA8E7C,SAA53E,SAAg5E,CAACR,aAAD,eAA+BqD,SAA/B,4BAAsE7C,SAAt9E,SAA0+E,CAACR,aAAD,eAA+BqD,SAA/B,mCAA6E7C,SAAvjF,SAA2kF,CAACR,aAAD,eAA+BqD,SAA/B,+BAAyE7C,SAAppF,SAAwqF,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAApvF,SAAwwF,CAACR,aAAD,eAA+BqD,SAA/B,wCAAkF7C,SAA11F,SAA82F,CAACR,aAAD,eAA+BqD,SAA/B,4BAAsE7C,SAAp7F,SAAw8F,CAACR,aAAD,eAA+BqD,SAA/B,2BAAqE7C,SAA7gG,SAAiiG,CAACR,aAAD,eAA+BqD,SAA/B,0CAAoF7C,SAArnG,SAAyoG,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAAntG,SAAuuG,CAACR,aAAD,eAA+BqD,SAA/B,mCAA6E7C,SAApzG,SAAw0G,CAACR,aAAD,eAA+BqD,SAA/B,2BAAqE7C,SAA74G,SAAi6G,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAA7+G,SAAigH,CAACR,aAAD,eAA+BqD,SAA/B,4CAAsF7C,SAlCplH,SAoChB,CACI0C,KADJ,gBAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,gBAAgCqD,SAAhC,sCAAiF7C,SAAlF,SAAsG,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAAjL,SAAqM,CAACR,aAAD,gBAAgCqD,SAAhC,8BAAyE7C,SAA9Q,SAAkS,CAACR,aAAD,gBAAgCqD,SAAhC,4BAAuE7C,SAAzW,SAA6X,CAACR,aAAD,gBAAgCqD,SAAhC,sCAAiF7C,SAA9c,SAAke,CAACR,aAAD,gBAAgCqD,SAAhC,gCAAwE7C,SAA1iB,SAA8jB,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA1oB,SAA8pB,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAAzuB,SAA6vB,CAACR,aAAD,gBAAgCqD,SAAhC,8BAAyE7C,SAAt0B,SAA01B,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAAr6B,SAAy7B,CAACR,aAAD,gBAAgCqD,SAAhC,sCAAiF7C,SAA1gC,SAA8hC,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAA1mC,SAA8nC,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAxsC,SAA4tC,CAACR,aAAD,gBAAgCqD,SAAhC,kCAA6E7C,SAAzyC,SAA6zC,CAACR,aAAD,gBAAgCqD,SAAhC,sBAAiE7C,SAA93C,SAAk5C,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAA59C,SAAg/C,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAA3jD,SAA+kD,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAA1pD,SAA8qD,CAACR,aAAD,gBAAgCqD,SAAhC,oCAA+E7C,SAA7vD,SAAixD,CAACR,aAAD,gBAAgCqD,SAAhC,oCAA+E7C,SAAh2D,SAAo3D,CAACR,aAAD,gBAAgCqD,SAAhC,kCAA6E7C,SAAj8D,SAAq9D,CAACR,aAAD,gBAAgCqD,SAAhC,oCAA+E7C,SAApiE,SAAwjE,CAACR,aAAD,gBAAgCqD,SAAhC,+BAA0E7C,SAAloE,SAAspE,CAACR,aAAD,gBAAgCqD,SAAhC,gCAA2E7C,SAAjuE,SAAqvE,CAACR,aAAD,gBAAgCqD,SAAhC,mCAA8E7C,SAAn0E,SAAu1E,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAAn6E,SAAu7E,CAACR,aAAD,gBAAgCqD,SAAhC,2BAAsE7C,SAvC1/E,WAyChB,CACI0C,KADJ,eAEIC,aAFJ,KAGIC,MAAS,CAAC,CAACpD,aAAD,eAA+BqD,SAA/B,sCAAgF7C,SAAjF,OAAmG,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAA7K,SAAiM,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAA3Q,SAA+R,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAAzW,SAA6X,CAACR,aAAD,eAA+BqD,SAA/B,8CAAwF7C,SAArd,SAAye,CAACR,aAAD,eAA+BqD,SAA/B,iCAA2E7C,SAApjB,SAAwkB,CAACR,aAAD,eAA+BqD,SAA/B,6BAAuE7C,SAA/oB,SAAmqB,CAACR,aAAD,eAA+BqD,SAA/B,8BAAwE7C,SAA3uB,SAA+vB,CAACR,aAAD,eAA+BqD,SAA/B,sCAAgF7C,SAA/0B,SAAm2B,CAACR,aAAD,eAA+BqD,SAA/B,oCAA8E7C,SAAj7B,SAAq8B,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAA/gC,SAAmiC,CAACR,aAAD,eAA+BqD,SAA/B,oCAA8E7C,SAAjnC,SAAqoC,CAACR,aAAD,eAA+BqD,SAA/B,wCAAkF7C,SAAvtC,SAA2uC,CAACR,aAAD,eAA+BqD,SAA/B,oCAA8E7C,SAAzzC,SAA60C,CAACR,aAAD,eAA+BqD,SAA/B,6CAAuF7C,SAAp6C,SAAw7C,CAACR,aAAD,eAA+BqD,SAA/B,gCAA0E7C,SAAlgD,SAAshD,CAACR,aAAD,eAA+BqD,SAA/B,2CAAqF7C,SAA3mD,SAA+nD,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAA3sD,SAA+tD,CAACR,aAAD,eAA+BqD,SAA/B,0BAAoE7C,SAAnyD,SAAuzD,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAAn4D,SAAu5D,CAACR,aAAD,eAA+BqD,SAA/B,0CAAoF7C,SAA3+D,SAA+/D,CAACR,aAAD,eAA+BqD,SAA/B,0BAAoE7C,SAAnkE,SAAulE,CAACR,aAAD,eAA+BqD,SAA/B,kCAA4E7C,SAAnqE,SAAurE,CAACR,aAAD,eAA+BqD,SAA/B,uCAAiF7C,SAAxwE,SAA4xE,CAACR,aAAD,eAA+BqD,SAA/B,wCAAkF7C,SA5C/3E,YAkDK,SAAA8C,KAWL,MAViB,CACf,CAACtD,aAAD,eAA+BqD,SAA/B,mCAA6E7C,SAD9D,OAEf,CAACR,aAAD,eAA+BqD,SAA/B,sCAAgF7C,SAFjE,OAGf,CAACR,aAAD,UAA0BqD,SAA1B,4CAAiF7C,SAHlE,OAIf,CAACR,aAAD,UAA0BqD,SAA1B,iCAAsE7C,SAJvD,OAKf,CAACR,aAAD,UAA0BqD,SAA1B,+BAAoE7C,SALrD,OAMf,CAACR,aAAD,gBAAgCqD,SAAhC,iCAA4E7C,SAN7D,OAOf,CAACR,aAAD,aAA6BqD,SAA7B,gCAAwE7C,SAPzD,OAQf,CAACR,aAAD,eAA+BqD,SAA/B,4CAAsF7C,SARxF,ugBC9FF+C,EAAAC,QAAA,CAAkBC,yBAAA,yCAAAC,cAAA,gCAAAC,gBAAA,kCAAAC,eAAA,iCAAAC,sBAAA,sCAAAC,oBAAA,oCAAAC,mBAAA,mCAAAC,oBAAA,sCAAAC,oBAAA,sGCAlBV,EAAAC,QAAA,CAAkBU,UAAA,yGCAlBX,EAAAC,QAAA,CAAkBE,cAAA,mCAAAS,eAAA,kCAAAN,sBAAA,sHCAlBN,EAAAC,QAAA,CAAkBU,UAAA,qFCAlBX,EAAAC,QAAA,CAAkBY,kBAAA,6BAAAC,wBAAA,mCAAAX,cAAA,2BAAAY,aAAA,wBAAAT,sBAAA,iCAAAU,OAAA,oBAAAC,uBAAA,kCAAAC,wBAAA,yFCAlBlB,EAAAC,QAAA,CAAkBU,UAAA,mFCAlBX,EAAAC,QAAA,CAAkBkB,oBAAA,2GCAlBnB,EAAAC,QAAA,CAAkBM,oBAAA,oCAAAa,SAAA,2BAAAd,sBAAA,oHCAlBN,EAAAC,QAAA,CAAkBU,UAAA,gHCAlBX,EAAAC,QAAA,CAAkBE,cAAA,0CAAAkB,kCAAA,4DAAAC,MAAA,kCAAAC,OAAA,mCAAAC,mBAAA,+CAAAlB,sBAAA,gDAAAmB,sBAAA,gDAAAC,iBAAA,2CAAAC,UAAA,sCAAAC,iBAAA,2CAAAC,iBAAA,2CAAAC,iBAAA,2CAAAC,yBAAA,mDAAAC,wBAAA,kDAAAC,kCAAA,4DAAAC,6BAAA,2ICAlBlC,EAAAC,QAAA,CAAkBU,UAAA,sHCAlBX,EAAAC,QAAA,CAAkBU,UAAA,oGCAlBX,EAAAC,QAAA,CAAkBM,oBAAA,oCAAAJ,cAAA,gCAAAgC,WAAA,6BAAA7B,sBAAA,8GCAlBN,EAAAC,QAAA,CAAkBU,UAAA,yGCAlBX,EAAAC,QAAA,CAAkBU,UAAA,iCAAAyB,uBAAA,kHCAlBpC,EAAAC,QAAA,CAAkBM,oBAAA,qCAAAJ,cAAA,iCAAAkC,eAAA,kCAAA/B,sBAAA,kHCAlBN,EAAAC,QAAA,CAAkBU,UAAA,wGCAlBX,EAAAC,QAAA,CAAkBU,UAAA,2GCAlBX,EAAAC,QAAA,CAAkBU,UAAA,iCAAAyB,uBAAA,uHCAlBpC,EAAAC,QAAA,CAAkBU,UAAA,iCAAAyB,uBAAA,sHCAlBpC,EAAAC,QAAA,CAAkBU,UAAA,iCAAAyB,uBAAA,4CAAAE,yBAAA,yHCAlBtC,EAAAC,QAAA,CAAkBU,UAAA,iCAAAyB,uBAAA,4CAAAE,yBAAA,qHCAlBtC,EAAAC,QAAA,CAAkBU,UAAA,8FCAlBX,EAAAC,QAAA,CAAkBU,UAAA,oGCAlBX,EAAAC,QAAA,CAAkBU,UAAA,iCAAAyB,uBAAA,4rCCKGG,kBACjB,SAAAA,EAAAC,GAAmB,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,GACfE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAAH,IACAO,cAFeN,yPADgBO,uDAO/B,OACIC,EAAAC,EAAAC,cAAA,MADJ,60CCGR,IAAIC,EAAgB1D,cAEpB,SAAA2D,EAAAC,GACI,OAAOC,QAAoCC,IAApCD,IAAPD,EAGEG,kBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAiB,CAAAf,KAAAc,IACfhB,EAAAkB,EAAAhB,KAAAiB,EAAAH,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,eAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQT4G,WARS,EAUTC,eAVS,GAWTC,cAXS,MAYTC,YAZJ,GAFe1B,yPAFKF,qDAqBpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAaFxC,KAbEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF4G,EAXEmB,EAAAnB,WAYFC,EAZEkB,EAAAlB,eAeFmB,EAAkBhC,SAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,sDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAPN,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBARN,gBASMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA5Cd,qBAgDQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,GAAiBA,MAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACEmC,KADF,SAEEjC,UAAWA,EAFb,gBAGEkC,YAHF,IAIEb,MAJFV,EAKEwB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACT,WAAYQ,SAA/BE,YAEjBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,aAAyBA,EAA9F,gBAnHN,YAqHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,aAAyBA,EAFxC,gBAtHN,kBA0HIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,6HAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,iDAAAgJ,OAAApC,EAAA,4CAAAqC,QAAA,iBA9HnB,6CAmJRC,EAAA,0hDChOA,IAAIlD,EAAgB1D,cAEpB,SAAA6G,EAAAjD,GACI,OAAOC,QAAoCC,IAApCD,IAAPD,EAGEG,kBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAA+D,CAAA7D,KAAAc,IACfhB,EAAAgE,EAAA9D,KAAA+D,EAAAjD,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQT4G,WARS,EAUTC,eAVS,GAWTC,cAXS,MAYTC,YAZJ,GAFe1B,yPAFKF,qDAqBpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAaFxC,KAbEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF4G,EAXEmB,EAAAnB,WAYFC,EAZEkB,EAAAlB,eAeFmB,EAAkBhC,SAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,qDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YA1Cd,cA8CQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,GAAiBA,MAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,SACXiC,SAvFlB,YAuF6B5C,KAIrB,mBAACA,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,SACXiC,SApGlB,YAoG6B5C,KAGzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACEmC,KADF,SAEEjC,UAAWA,EAFb,gBAGEkC,YAHF,IAIEb,MAJFV,EAKEwB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACT,WAAYQ,SAA/BE,YAEjBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,aAAyBA,EAA9F,gBAjHN,YAmHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,aAAyBA,EAFxC,gBApHN,kBAwHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,yIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,iDAAAgJ,OAAApC,EAAA,4CAAAqC,QAAA,iBA5HnB,6CAiJRO,EAAA,qhDC5NA,IAAIxD,EAAgB1D,cAEpB,SAAAmH,EAAAvD,GACI,OAAOC,QAAoCC,IAApCD,IAAPD,EAGEG,kBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAqE,CAAAnE,KAAAc,IACfhB,EAAAsE,EAAApE,KAAAqE,EAAAvD,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAST6G,eATS,GAUTC,cAVS,MAWTC,YAXJ,GAFe1B,yPAFKF,qDAoBpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAYFxC,KAZEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF6G,EAXEkB,EAAAlB,eAcFmB,EAAkBhC,SAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,qDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAInBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAnBd,UAsBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAPN,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBARN,gBASMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA7Cd,qBAiDQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,GAAiBA,MAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,EAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,SACXiC,SA1FlB,YA0F6B5C,KAIrB,mBAACA,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,EAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,SACXiC,SAvGlB,YAuG6B5C,KAGzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,aAAyBA,EAA9F,gBA3GN,YA6GIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,aAAyBA,EAFxC,gBA9GN,kBAkHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,EAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,mIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,4CAAAiJ,QAAA,iBAtHnB,6CA0IRY,EAAA,shDCnNA,IAAI7D,GAAgB1D,cACpB,SAAAwH,GAAA5D,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGE6D,mBAEF,SAAAA,EAAA3E,GAAmB,IAAAC,EAAA,mGAAA2E,CAAAzE,KAAAwE,IACf1E,EAAA4E,GAAA1E,KAAA2E,GAAAH,GAAArE,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETyD,mBAFS,EAGT5K,iBAHS,yBAIToH,WAJS,WAKTtH,aALS,eAMTqD,SANS,GAOTmE,eAPS,GAQTC,cARS,MASTC,YATJ,GAFe1B,0PAFAF,qDAkBfiF,cACA,IAAIpD,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAAD4C,YAAqB9E,KAAvCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAWFxC,KAXEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMF4K,EANEpC,EAAAoC,kBAOFxD,EAPEoB,EAAApB,WAQFtH,EARE0I,EAAA1I,aASFqD,EATEqF,EAAArF,SAUFmE,EAVEkB,EAAAlB,eAYFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iCAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,UAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKpB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,gBAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAJN,YAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBAxCd,kBA4CQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOtBmD,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eAEEJ,EAAAC,EAAAC,cAAA,SAAOE,UAAWA,GAAlB,qBACIJ,EAAAC,EAAAC,cAAA,SACImC,KADJ,WAEIjC,UAAWA,GAFf,oBAGIqB,MAHJ6C,EAII/B,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC8C,kBAAmB/C,SAAtCkD,aAnFzB,+BAwFIzE,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBAzFN,YA2FIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA5FN,kBAgGEJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACIJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,wHAAAmB,OAAAtC,EAAA,sDAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAmB,EAAA,gDAAAnB,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,6CAAAuG,QAAA,iBApGnB,+CAsHRsB,GAAA,0hDC3LA,IAAIvE,GAAgB1D,cACpB,SAAAkI,GAAAtE,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGE6D,mBAEF,SAAAA,EAAA3E,GAAmB,IAAAC,EAAA,mGAAAoF,CAAAlF,KAAAwE,IACf1E,EAAAqF,GAAAnF,KAAAoF,GAAAZ,GAAArE,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETyD,mBAFS,EAGT5K,iBAHS,yBAIToH,WAJS,WAKTtH,aALS,eAMTqD,SANS,GAOTmE,eAPS,GAQTC,cARS,MASTC,YATJ,IAFe1B,0PAFAF,qDAkBfiF,cACA,IAAIpD,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAAD4C,YAAqB9E,KAAvCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAWFxC,KAXEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFqD,EALEpC,EAAAoC,kBAMF5K,EANEwI,EAAAxI,iBAOFoH,EAPEoB,EAAApB,WAQFtH,EARE0I,EAAA1I,aASFqD,EATEqF,EAAArF,SAUFmE,EAVEkB,EAAAlB,eAYFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iCAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKpB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,gBAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAPN,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBA3Cd,kBA+CQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOtBmD,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eAEEJ,EAAAC,EAAAC,cAAA,SAAOE,UAAWA,GAAlB,qBACIJ,EAAAC,EAAAC,cAAA,SACImC,KADJ,WAEIjC,UAAWA,GAFf,oBAGIqB,MAHJ6C,EAII/B,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC8C,kBAAmB/C,SAAtCkD,aAtFzB,+BA2FIzE,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA5FN,YA8FIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA/FN,kBAmGEJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACIJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,+HAAAmB,OAAAtC,EAAA,sDAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAmB,EAAA,gDAAAnB,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,6CAAAuG,QAAA,iBAvGnB,+CAyHR2B,GAAA,oiDClMA,IAAI5E,GAAgB1D,cAEpB,SAAAuI,GAAA3E,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAyF,CAAAvF,KAAAc,IACfhB,EAAA0F,GAAAxF,KAAAyF,GAAA3E,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETuE,UAFS,WAGTtE,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAST6G,eATS,GAUTC,cAVS,MAWTC,YAXJ,IAFe1B,0PAFKF,qDAoBpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,8FAMHE,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAYFxC,KAZEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFmE,EALElD,EAAAkD,UAMFtE,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAcFgI,GAdED,EAAAlB,eAcgBb,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,IACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,qDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH2D,EAEG7C,SAAU,SAAAhB,GAAA,OAAOQ,EAAAP,SAAc,CAAC4D,UAAW7D,SAAjCE,UACPzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,cA3Bd,gBA8BIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHN,cAKU2D,eACApF,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YANV,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YARN,YASMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBATN,gBAUMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA1Cd,qBA8CQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,SACXiC,SAvFlB,YAuF6B5C,KAIrB,mBAACA,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,SACXiC,SApGlB,YAoG6B5C,KAGzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBAxGN,YA0GIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA3GN,kBA+GIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,oIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,gDAAAkC,OAAAiC,EAAA,iDAAAjC,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,4CAAAiJ,QAAA,iBAnHnB,+CAuIRiC,GAAA,i4CCvMA,IAAIlF,GAAgB1D,cAEpB,SAAA6I,GAAAjF,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEkF,mBAEF,SAAAA,EAAAhG,GAAmB,IAAAC,+FAAAgG,CAAA9F,KAAA6F,GACf/F,0EAAAiG,CAAA/F,KAAAgG,GAAAH,GAAA1F,KAAAH,KAAAH,IACA,IAAI4B,EAAIwE,MAARnG,IAFe,OAGfA,EAAAoB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQT4G,WARS,EAUTC,eAVS,GAWTC,cAXS,MAYTC,YAZJ,GAcA7E,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KArBH7B,0PAFeF,qJAgCTiC,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACN,IAAIG,EAAWkE,WAAWA,eAAelG,KAAzCkB,QACAc,mBACAC,YAAmBC,IAADC,cAAlBF,GACAA,YAAmBC,IAAD4C,YAAlB7C,yCAGUJ,GACVI,YAAmBC,IAADiE,uBAAgCnG,KAAlDiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAaFxC,KAbEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF4G,EAXEmB,EAAAnB,WAYFC,EAZEkB,EAAAlB,eAcFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,4CAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBEzB,EAAAC,EAAAC,cAAA,sEAC4DF,EAAAC,EAAAC,cAAA,KAD5D,uDAGIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cAHJ,mNAWIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cAhCN,yKAwCIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAPN,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBA9Dd,kBAkEQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAMtBmD,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACEmC,KADF,SAEEjC,UAAWA,GAFb,gBAGEkC,YAHF,IAIEb,MAJFV,EAKEwB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACT,WAAYQ,SAA/BE,YAEjBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA3GN,YA6GIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA9GN,kBAkHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,uIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,iDAAAgJ,OAAApC,EAAA,4CAAAqC,QAAA,iBAtHnB,+CA2IR0C,GAAA,gkDCzNA,IAAI3F,GAAgB1D,cAEpB,SAAAsJ,GAAA1F,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGE2F,mBAEF,SAAAA,EAAAzG,GAAmB,IAAAC,EAAA,mGAAAyG,CAAAvG,KAAAsG,IACfxG,EAAA0G,GAAAxG,KAAAyG,GAAAH,GAAAnG,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQT8G,cARS,OASTF,WATS,EAWTC,eAXS,GAYTE,YAZJ,GAFe1B,0PAFeF,qDAqB9B,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADwE,sBAA+B1G,KAAjDiC,6CAGUJ,GACVI,YAAmBC,IAADiE,uBAAgCnG,KAAlDiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAaFxC,KAbEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF4G,EAXEmB,EAAAnB,WAYFC,EAZEkB,EAAAlB,eAcFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,2CAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAPN,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBA3Cd,kBA+CQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAMtBmD,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,mCAEIF,EAAAC,EAAAC,cAAA,SACEmC,KADF,SAEEjC,UAAWA,GAFb,gBAGEkC,YAHF,IAIEb,MAJFV,EAKEwB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACT,WAAYQ,SAA/BE,YAEjBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBAxFN,YA0FIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA3FN,kBA+FIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,uIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,iDAAAgJ,OAAApC,EAAA,4CAAAqC,QAAA,iBAnGnB,+CAwHRiD,GAAA,0jDCnMA,IAAIlG,GAAgB1D,cAEpB,SAAA6J,GAAAjG,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEkG,mBAEF,SAAAA,EAAAhH,GAAmB,IAAAC,EAAA,mGAAAgH,CAAA9G,KAAA6G,IACf/G,EAAAiH,GAAA/G,KAAAgH,GAAAH,GAAA1G,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAST6G,eATS,GAUTC,cAVS,MAWTC,YAXJ,GAFe1B,0PAFKF,qDAoBpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACjBA,qDAAJ,YACQ7B,KAAAkB,MAAAE,WACJpB,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAjCE,mDAIWF,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAYFxC,KAZEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF6G,EAXEkB,EAAAlB,eAcFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,qDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAIUmD,YAAsBnD,KAAtBmD,QACA7C,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YALV,YAOMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAPN,YAQMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBARN,gBASMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA5Cd,qBAgDQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,SACXiC,SAzFlB,YAyF6B5C,KAIrB,mBAACA,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,SACXiC,SAtGlB,YAsG6B5C,KAGzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA1GN,YA4GIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA7GN,kBAiHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,sIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,4CAAAiJ,QAAA,iBArHnB,+CAyIRuD,GAAA,0iDClNA,IAAIxG,GAAgB1D,cAEpB,SAAAmK,GAAAvG,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAqH,CAAAnH,KAAAc,IACfhB,EAAAsH,GAAApH,KAAAqH,GAAAvG,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETmG,kBAAmB,oHAFV,0BAcTlG,WAdS,WAeTtH,aAfS,eAgBTqD,SAhBS,GAiBT7C,SAjBS,GAkBTG,MAlBS,GAmBT8M,UAnBS,MAoBTC,WApBS,KAsBTlG,eAtBS,GAuBTmG,WAvBS,GAwBTlG,cAxBS,MAyBTC,YAzBJ,GAFe1B,0PAFKF,qDAkCpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KAClB+F,OAAAC,EAAA,EAAAD,GAAAE,KACU,SAAAlG,GACF,IAAI+F,EAAa/F,EAAI,KAAJA,qBAAwC,SAAAmG,GAAI,OAAIA,EAAI,OACrEJ,EAAaA,EAAAK,OAEL,SAAAC,EAAAC,EAAAvG,GAAA,OACJuG,IAAUvG,YAAe,SAAAwG,GAAA,OACrBA,SAAWF,EADUtN,UAI7BgH,WAAc,CAACgG,WAAfhG,MAVRyG,MAWa,SAAAvG,GAAK,OAAIC,cAAJD,oGAMGE,GAGrB,IAFA,IAAIpI,EAAUoI,SAAdpI,QACI0O,EAAJ,GACSC,EAAJ,EAAWC,EAAI5O,EAApB6O,OAAoCF,EAApCC,EAA2CD,IACrC3O,KAAJ8O,UACEJ,OAAY1O,KAAZ0O,OAGJnI,KAAA8B,SAAc,CACVwF,kBADJa,+CAKetG,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAeFxC,KAfEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKF+F,EALE9E,EAAA8E,kBAMFlG,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF8M,EAXE/E,EAAA+E,UAYFC,EAZEhF,EAAAgF,WAaFlG,EAbEkB,EAAAlB,eAcFmG,EAdEjF,EAAAiF,WAiBFhF,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAInBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAnBd,UAsBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAJN,YAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBALN,gBAMMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA9Bd,qBAiCIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,wBACGqB,MADHuF,EAEGzE,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,SACQ,SAAAoB,GAAI,UAAIA,8CAAiDtB,yBAAjDsB,gBADhBpB,IAEK,SAAAoB,GACD,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAGIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACMqB,MAAOwF,MADbC,EAEM3E,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CACzByF,UAAW1F,0BADc,GAEzB2F,WAAY3F,0BAFL,OAIXvB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IANN,cAQU0F,GAAcA,MAAe,SAAAgB,GACzB,OAAOnI,EAAAC,EAAAC,cAAA,UACKwC,IAAKyF,EAAK,KACV1G,MAAO0G,EAAK,aAALA,IAAiCA,EAAK,OACxCA,EAAK,UAMxCnI,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA/HN,YAiIIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBAlIN,kBAsIIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,mDAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,4IAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAOsByC,eAPtBoB,GAAA,gDAAA7D,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,gDAAAgJ,OAAA8D,EAAA,gDAAA9D,OAAA+D,EAAA,2CAAA9D,QAAA,iBA1InB,+CAgKRgF,GAAA,6iDC9QA,IAAIjI,GAAgB1D,cAEpB,SAAA4L,GAAAhI,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEiI,mBAEF,SAAAA,EAAA/I,GAAmB,IAAAC,EAAA,mGAAA+I,CAAA7I,KAAA4I,IACf9I,EAAAgJ,GAAA9I,KAAA+I,GAAAH,GAAAzI,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAST6G,eATS,GAUTC,cAVS,MAWTC,YAXJ,GAFe1B,0PAFMF,qDAoBrB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACrB,GAAIA,iDACA7B,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CACV9H,iBAAkB6H,SADRE,MAEVX,WAFJ,wDAOWS,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAYFxC,KAZEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF6G,EAXEkB,EAAAlB,eAcFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,qDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,SACXiC,SA3ElB,YA2E6B5C,KAIrB,mBAACA,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,SACXiC,SAxFlB,YAwF6B5C,KAGzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA5FN,YA8FIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA/FN,kBAmGIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,uIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,4CAAAiJ,QAAA,iBAvGnB,+CA2HRsF,GAAA,2iDCpMA,IAAIvI,GAAgB1D,cAEpB,SAAAkM,GAAAtI,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAoJ,CAAAlJ,KAAAc,IACfhB,EAAAqJ,GAAAnJ,KAAAoJ,GAAAtI,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETmG,kBAAmB,oHAFV,0BAcTlG,WAdS,WAeTtH,aAfS,eAgBTqD,SAhBS,GAiBT7C,SAjBS,GAkBTG,MAlBS,GAmBT8M,UAnBS,MAoBTC,WApBS,KAsBTlG,eAtBS,GAuBTmG,WAvBS,GAwBTlG,cAxBS,MAyBTC,YAzBJ,IAFe1B,0PAFKF,qDAkCpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KAClB9E,mBACU,SAAA6E,GACF,IAAI+F,EAAa/F,EAAI,KAAJA,qBAAwC,SAAAmG,GAAI,OAAIA,EAAI,OACrEJ,EAAaA,SAAkB,SAAAM,EAAAC,EAAAvG,GAAA,OAC3BuG,IAAUvG,YAAe,SAAAwG,GAAA,OACrBA,SAAWF,EADUtN,UAI7BgH,WAAc,CAACgG,WAAfhG,MARR5E,MASa,SAAA8E,GAAK,OAAIC,cAAJD,oGAMGE,GAGrB,IAFA,IAAIpI,EAAUoI,SAAdpI,QACI0O,EAAJ,GACSC,EAAJ,EAAWC,EAAI5O,EAApB6O,OAAoCF,EAApCC,EAA2CD,IACrC3O,KAAJ8O,UACEJ,OAAY1O,KAAZ0O,OAGJnI,KAAA8B,SAAc,CACVwF,kBADJa,+CAKetG,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAeFxC,KAfEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKF+F,EALE9E,EAAA8E,kBAMFlG,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF8M,EAXE/E,EAAA+E,UAYFC,EAZEhF,EAAAgF,WAaFlG,EAbEkB,EAAAlB,eAcFmG,EAdEjF,EAAAiF,WAiBFhF,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAInBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAnBd,UAsBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,wBACGqB,MADHuF,EAEGzE,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAJN,YAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBALN,gBAMMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA1Cd,qBA8CQ,YAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAGIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACMqB,MAAOwF,MADbC,EAEM3E,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CACzByF,UAAW1F,0BADc,GAEzB2F,WAAY3F,0BAFL,OAIXvB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IANN,cAQU0F,GAAcA,MAAe,SAAAgB,GACzB,OAAOnI,EAAAC,EAAAC,cAAA,UACKwC,IAAKyF,EAAK,KACV1G,MAAO0G,EAAK,aAALA,IAAiCA,EAAK,OACxCA,EAAK,UAMxCnI,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA7HN,YA+HIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBAhIN,kBAoIIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,2IAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAOsByC,eAPtBoB,GAAA,gDAAA7D,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,gDAAAgJ,OAAA8D,EAAA,gDAAA9D,OAAA+D,EAAA,2CAAA9D,QAAA,iBAxInB,+CA8JR2F,GAAA,4iDCrQA,IAAI5I,GAAgB1D,cAEpB,SAAAuM,GAAA3I,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAyJ,CAAAvJ,KAAAc,IACfhB,EAAA0J,GAAAxJ,KAAAyJ,GAAA3I,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETmG,kBAAmB,oHAFV,0BAcTlG,WAdS,WAeTtH,aAfS,eAgBTqD,SAhBS,GAiBT7C,SAjBS,GAkBTG,MAlBS,GAmBTiP,WAAY,YAnBH,OAoBTC,YAAa,WApBJ,MAsBTrI,eAtBS,GAuBTmG,WAvBS,GAwBTlG,cAxBS,MAyBTC,YAzBJ,IAFe1B,0PAFKF,qDAkCpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KAClB9E,mBACU,SAAA6E,GACF,IAAI+F,EAAa/F,EAAI,KAAJA,qBAAwC,SAAAmG,GAAI,OAAIA,EAAI,OACrEJ,EAAaA,SAAkB,SAAAM,EAAAC,EAAAvG,GAAA,OAC3BuG,IAAUvG,YAAe,SAAAwG,GAAA,OACrBA,SAAWF,EADUtN,UAI7BgH,WAAc,CAACgG,WAAfhG,MARR5E,MASa,SAAA8E,GAAK,OAAIC,cAAJD,oGAMGE,GAGrB,IAFA,IAAIpI,EAAUoI,SAAdpI,QACI0O,EAAJ,GACSC,EAAJ,EAAWC,EAAI5O,EAApB6O,OAAoCF,EAApCC,EAA2CD,IACrC3O,KAAJ8O,UACEJ,OAAY1O,KAAZ0O,OAGJA,EAASA,UAATA,GACAnI,KAAA8B,SAAc,CACVwF,kBADJa,+CAKetG,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAeFxC,KAfEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKF+F,EALE9E,EAAA8E,kBAMFlG,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWFiP,EAXElH,EAAAkH,WAYFC,EAZEnH,EAAAmH,YAaFrI,EAbEkB,EAAAlB,eAcFmG,EAdEjF,EAAAiF,WAiBFhF,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YA3Bd,cA8BIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,WAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,wBACGqB,MADHuF,EAEGzE,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,SACQ,SAAAoB,GAAI,UAAIA,8CAAiDtB,yBAAjDsB,gBADhBpB,IAEK,SAAAoB,GACD,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,0BACMqB,MAAO2H,MAAe,SAAAnC,EAAAqC,GAAA,OAAyBrC,MAAiBoC,EAA1CC,KACtB/G,SAAUgH,SAFhB7J,OAIUyH,GAAcA,MAAe,SAAAgB,EAAAmB,GACzB,OAAOtJ,EAAAC,EAAAC,cAAA,UACKwC,IADL4G,EAEK7H,MAAO0G,EAAK,aAALA,IAAgCA,EAAK,OACvCqB,YAAgBrB,EAAK,WAMxDnI,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBAvHN,YAyHIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA1HN,kBA8HIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,uIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAOsByC,eAPtBoB,GAAA,gDAAA7D,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,gDAAAgJ,OAaeyC,eAbfwD,GAAA,gDAAAjG,OAcgByC,eAdhByD,GAAA,2CAAAjG,QAAA,iBAlInB,+CAwJRqG,GAAA,6iDClQA,IAAItJ,GAAgB1D,cAEpB,SAAAiN,GAAArJ,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAmK,CAAAjK,KAAAc,IACfhB,EAAAoK,GAAAlK,KAAAmK,GAAArJ,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETmG,kBAAmB,iCAFV,0BAcTlG,WAdS,WAeTtH,aAfS,eAgBTqD,SAhBS,GAiBT7C,SAjBS,GAkBTG,MAlBS,GAmBTiP,WAAY,YAnBH,OAoBTC,YAAa,WApBJ,MAsBTrI,eAtBS,GAuBTmG,WAvBS,GAwBTlG,cAxBS,MAyBTC,YAzBJ,IAFe1B,0PAFKF,qDAkCpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KAClB9E,mBACU,SAAA6E,GACF,IAAI+F,EAAa/F,EAAI,KAAJA,qBAAwC,SAAAmG,GAAI,OAAIA,EAAI,OACrEJ,EAAaA,SAAkB,SAAAM,EAAAC,EAAAvG,GAAA,OAC3BuG,IAAUvG,YAAe,SAAAwG,GAAA,OACrBA,SAAWF,EADUtN,UAI7BgH,WAAc,CAACgG,WAAfhG,MARR5E,MASa,SAAA8E,GAAK,OAAIC,cAAJD,8FAMHE,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAeFxC,KAfEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKF+F,EALE9E,EAAA8E,kBAMFlG,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWFiP,EAXElH,EAAAkH,WAYFC,EAZEnH,EAAAmH,YAaFrI,EAbEkB,EAAAlB,eAcFmG,EAdEjF,EAAAiF,WAiBFhF,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YA3Bd,cA8BIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MAAOuF,EADV,GAEGzE,SAAU,SAAAuH,GACP/H,EAAAP,SAAc,CAACwF,kBAAmB,CAAC8C,SAADrI,MAAqBuF,EAAvD,QAGIhG,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MAAOuF,EADV,GAEGzE,SAAU,SAAAuH,GACN/H,EAAAP,SAAc,CAACwF,kBAAmB,CAACA,EAAD,GAAuB8C,SAAzDrI,WAGGT,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,0BACMqB,MAAO2H,MAAe,SAAAnC,EAAAqC,GAAA,OAAyBrC,MAAiBoC,EAA1CC,KACtB/G,SAAUgH,SAFhB7J,OAIUyH,GAAcA,MAAe,SAAAgB,EAAAmB,GACzB,OAAOtJ,EAAAC,EAAAC,cAAA,UACKwC,IADL4G,EAEK7H,MAAO0G,EAAK,aAALA,IAAgCA,EAAK,OACvCqB,YAAgBrB,EAAK,WAMxDnI,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBArIN,YAuIIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBAxIN,kBA4IIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,wIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAOsByC,eAPtBoB,GAAA,gDAAA7D,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,gDAAAgJ,OAaeyC,eAbfwD,GAAA,gDAAAjG,OAcgByC,eAdhByD,GAAA,2CAAAjG,QAAA,iBAhJnB,+CAsKR2G,GAAA,o8CClQA,IAAI5J,GAAgB1D,cAEpB,SAAAuN,GAAA3J,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAAyK,CAAAvK,KAAAc,IACfhB,EAAA0K,GAAAxK,KAAAyK,GAAA3J,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETmG,kBAAmB,oHAFV,0BAcTlG,WAdS,WAeTtH,aAfS,eAgBTqD,SAhBS,GAiBT7C,SAjBS,GAkBTG,MAlBS,GAmBTiP,WAAY,YAnBH,OAoBTC,YAAa,WApBJ,MAsBTrI,eAtBS,GAuBTmG,WAvBS,GAwBTlG,cAxBS,MAyBTC,YAzBJ,IAFe1B,0PAFKF,qDAkCpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KAClB9E,mBACU,SAAA6E,GACF,IAAI+F,EAAa/F,EAAI,KAAJA,qBAAwC,SAAAmG,GAAI,OAAIA,EAAI,OACrEJ,EAAaA,SAAkB,SAAAM,EAAAC,EAAAvG,GAAA,OAC3BuG,IAAUvG,YAAe,SAAAwG,GAAA,OACrBA,SAAWF,EADUtN,UAI7BgH,WAAc,CAACgG,WAAfhG,MARR5E,MASa,SAAA8E,GAAK,OAAIC,cAAJD,oGAMGE,GAGrB,IAFA,IAAIpI,EAAUoI,SAAdpI,QACI0O,EAAJ,GACSC,EAAJ,EAAWC,EAAI5O,EAApB6O,OAAoCF,EAApCC,EAA2CD,IACrC3O,KAAJ8O,UACEJ,OAAY1O,KAAZ0O,OAGJA,EAASA,UAATA,GACAnI,KAAA8B,SAAc,CACVwF,kBADJa,+CAKetG,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAeFxC,KAfEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKF+F,EALE9E,EAAA8E,kBAMFlG,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWFiP,EAXElH,EAAAkH,WAYFC,EAZEnH,EAAAmH,YAaFrI,EAbEkB,EAAAlB,eAcFmG,EAdEjF,EAAAiF,WAiBFhF,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAInBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAnBd,UAsBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAJN,YAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBALN,gBAMMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA9Bd,qBAiCIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,WAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,wBACGqB,MADHuF,EAEGzE,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,0BACMqB,MAAO2H,MAAe,SAAAnC,EAAAqC,GAAA,OAAyBrC,MAAiBoC,EAA1CC,KACtB/G,SAAUgH,SAFhB7J,OAIUyH,GAAcA,MAAe,SAAAgB,EAAAmB,GACzB,OAAOtJ,EAAAC,EAAAC,cAAA,UACKwC,IADL4G,EAEK7H,MAAO0G,EAAK,aAALA,IAAgCA,EAAK,OACvCqB,YAAgBrB,EAAK,WAMxDnI,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBAxHN,YA0HIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA3HN,kBA+HIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,uIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAOsByC,eAPtBoB,GAAA,gDAAA7D,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,gDAAAgJ,OAaeyC,eAbfwD,GAAA,gDAAAjG,OAcgByC,eAdhByD,GAAA,2CAAAjG,QAAA,iBAnInB,+CAyJRgH,GAAA,6iDCnQA,IAAIjK,GAAgB1D,cAEpB,SAAA4N,GAAAhK,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEG,mBAEF,SAAAA,EAAAjB,GAAmB,IAAAC,EAAA,mGAAA8K,CAAA5K,KAAAc,IACfhB,EAAA+K,GAAA7K,KAAA8K,GAAAhK,GAAAX,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETmG,kBAAmB,iCAFV,0BAcTlG,WAdS,WAeTtH,aAfS,eAgBTqD,SAhBS,GAiBT7C,SAjBS,GAkBTG,MAlBS,GAmBTiP,WAAY,YAnBH,OAoBTC,YAAa,WApBJ,MAsBTrI,eAtBS,GAuBTmG,WAvBS,GAwBTlG,cAxBS,MAyBTC,YAzBJ,IAFe1B,0PAFKF,qDAkCpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,KAClB9E,mBACU,SAAA6E,GACF,IAAI+F,EAAa/F,EAAI,KAAJA,qBAAwC,SAAAmG,GAAI,OAAIA,EAAI,OACrEJ,EAAaA,SAAkB,SAAAM,EAAAC,EAAAvG,GAAA,OAC3BuG,IAAUvG,YAAe,SAAAwG,GAAA,OACrBA,SAAWF,EADUtN,UAI7BgH,WAAc,CAACgG,WAAfhG,MARR5E,MASa,SAAA8E,GAAK,OAAIC,cAAJD,oGAMGE,GAGrB,IAFA,IAAIpI,EAAUoI,SAAdpI,QACI0O,EAAJ,GACSC,EAAJ,EAAWC,EAAI5O,EAApB6O,OAAoCF,EAApCC,EAA2CD,IACrC3O,KAAJ8O,UACEJ,OAAY1O,KAAZ0O,OAGJA,EAASA,UAATA,GACAnI,KAAA8B,SAAc,CACVwF,kBADJa,+CAKetG,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAeFxC,KAfEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKF+F,EALE9E,EAAA8E,kBAMFlG,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWFiP,EAXElH,EAAAkH,WAYFC,EAZEnH,EAAAmH,YAaFrI,EAbEkB,EAAAlB,eAcFmG,EAdEjF,EAAAiF,WAiBFhF,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHX,EAEGyB,SAAU7C,KAAAkD,mBAAAH,KAFb/C,OAGMM,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAHN,YAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,YAJN,YAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,gBALN,gBAMMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,mBA7Bd,qBAgCIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MAAOuF,EADV,GAEGzE,SAAU,SAAAuH,GACP/H,EAAAP,SAAc,CAACwF,kBAAmB,CAAC8C,SAADrI,MAAqBuF,EAAvD,QAGIhG,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAKlB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MAAOuF,EADV,GAEGzE,SAAU,SAAAuH,GACN/H,EAAAP,SAAc,CAACwF,kBAAmB,CAACA,EAAD,GAAuB8C,SAAzDrI,WAGGT,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,YAKrB,mBAACX,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,YAIzBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,UAAQgI,UAAR,EAAiB9H,UAAWA,uBAA8BA,GAA1D,0BACMqB,MAAO2H,MAAe,SAAAnC,EAAAqC,GAAA,OAAyBrC,MAAiBoC,EAA1CC,KACtB/G,SAAUgH,SAFhB7J,OAIUyH,GAAcA,MAAe,SAAAgB,EAAAmB,GACzB,OAAOtJ,EAAAC,EAAAC,cAAA,UACKwC,IADL4G,EAEK7H,MAAO0G,EAAK,aAALA,IAAgCA,EAAK,OACvCqB,YAAgBrB,EAAK,WAMxDnI,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBAvIN,YAyIIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA1IN,kBA8IIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,wIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAOsByC,eAPtBoB,GAAA,gDAAA7D,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,gDAAAgJ,OAaeyC,eAbfwD,GAAA,gDAAAjG,OAcgByC,eAdhByD,GAAA,2CAAAjG,QAAA,iBAlJnB,+CAwKRqH,GAAA,0iDCvRA,IAAItK,GAAgB1D,cAEpB,SAAAiO,GAAArK,GACI,OAAOC,QAAoCC,KAApCD,IAAPD,EAGEkG,mBAEF,SAAAA,EAAAhH,GAAmB,IAAAC,EAAA,mGAAAmL,CAAAjL,KAAA6G,IACf/G,EAAAoL,GAAAlL,KAAAmL,GAAAtE,GAAA1G,KAAAH,KAAAH,KACAqB,MAAa,CACTC,UADS,OAETnH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAST6G,eATS,GAUTC,cAVS,MAWTC,YAXJ,IAFe1B,0PAFKF,qDAoBpB,IAAI6B,EAAJzB,KACArD,mBACU,SAAA+E,GACF,IAAIJ,EAAiBI,EAAI,KAAJA,UACrBD,WAAc,CAACH,eAAfG,MAHR9E,MAIa,SAAAgF,GAAK,OAAIC,cAAJD,oGAMGE,IACrB,GAAIA,iDACA7B,KAAA8B,SAAc,CAAC9H,iBAAkB6H,SAAnBE,MAAmCX,WAAnC,WAA2DtH,aAAzE,iBAEAkG,KAAA8B,SAAc,CACV9H,iBAAkB6H,SADRE,MAEVX,WAFJ,wDAOWS,GACf,IAAIG,EAAW,CAACZ,WAAYS,SAA5BE,OACA/B,KAAA8B,SAAAE,qCAGMH,GACNI,YAAmBC,IAADC,cAAuBnC,KAAzCiC,6CAGUJ,GACVI,YAAmBC,IAADE,WAAoBpC,KAAtCiC,wCAGM,IAAAI,EAAArC,KACFsC,EAASC,IAAbD,OADME,EAYFxC,KAZEkB,MAGFC,EAHEqB,EAAArB,UAIFI,EAJEiB,EAAAjB,cAKFvH,EALEwI,EAAAxI,iBAMFoH,EANEoB,EAAApB,WAOFtH,EAPE0I,EAAA1I,aAQFqD,EAREqF,EAAArF,SASF7C,EATEkI,EAAAlI,SAUFG,EAVE+H,EAAA/H,MAWF6G,EAXEkB,EAAAlB,eAcFmB,EAAkBhC,UAAqB,SAAAiC,GAAI,OAAIA,QAAJ5I,IAA/C,GACA,OACEwG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,qDAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,kBAIIC,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACX,UAAWU,SAA9BE,YAGnBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACMJ,EAAAC,EAAAC,cAAA,aADN,cAEMF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADHR,EAEGsB,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACP,cAAeM,SAAlCE,UACRzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,MAHN,MAIMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,OAJN,OAKMzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,QAlBd,UAqBIzB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACGqB,MADH/H,EAEG6I,SAAU7C,KAAA8C,yBAAAC,KAFb/C,OAIUsB,MAAmB,SAAAoB,GACf,OAAQpC,EAAAC,EAAAC,cAAA,UAAQwC,IAAKN,EAAbO,YAA+BlB,MAAOW,EAAtCO,aAAyDP,EAAjEO,iBAMd,YAAC7B,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJjI,EAEI+I,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAChI,aAAc+H,SAAjCE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQtB,IAAiBA,OAAkB,SAAA2C,GAC/B,OAAO9C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKI,EAAbpG,KAA4B+E,MAAOqB,EAAnCpG,MAAmDoG,EAA1DpG,UAOlB,gBAACoE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQE,UAAWA,GAAnB,gBACIqB,MADJ5E,EAEI0F,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAAC3E,SAAU0E,SAA7BE,UACXzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAR,IAHJ,cAKQU,GAAmBA,YAA0B,SAAAY,GACzC,OAAO/C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKK,EAAblG,SAA4B4E,MAAOsB,EAAnClG,UAAmDkG,EAA1DlG,cAOlB,mBAACiE,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,MAIIb,MAJJzH,EAKIuI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACxH,SAAUuH,SAA7BE,SACXiC,SA3ElB,YA2E6B5C,KAIrB,mBAACA,GACCd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACImC,KADJ,OAEIjC,UAAWA,GAFf,gBAGIkC,YAHJ,WAIIb,MAJJtH,EAKIoI,SAAU,SAAAhB,GAAC,OAAIQ,EAAAP,SAAc,CAACrH,MAAOoH,SAA1BE,SACXiC,SAxFlB,YAwF6B5C,KAGzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SAAsBW,QAAStD,KAAAuD,UAAAR,KAA/B/C,MAA0DU,UAAWA,cAAyBA,GAA9F,gBA5FN,YA8FIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACEJ,EAAAC,EAAAC,cAAA,UAAQmC,KAAR,SACIW,QAAStD,KAAAwD,cAAAT,KADb/C,MAEIU,UAAWA,cAAyBA,GAFxC,gBA/FN,kBAmGIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,eACIJ,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,cACEJ,EAAAC,EAAAC,cAAA,YAAO,kCAAAiD,OAAAtC,EAAA,+CAAAsC,OAAAnB,EAAA,mIAAAmB,OAAAtC,EAAA,gFAAAsC,OAAAlC,EAAA,uDAAAkC,OAAAzJ,EAAA,iDAAAyJ,OAAArC,EAAA,mDAAAqC,OAAA3J,EAAA,+CAAA2J,OAAAtG,EAAA,+CAAAsG,OAAAnJ,EAAA,4CAAAmJ,OAAAhJ,EAAA,4CAAAiJ,QAAA,iBAvGnB,+CA2HR0H,GAAA,0cCrNAC,EAAAC,EAAAC,EAAA,sBAAA5H,IAAA0H,EAAAC,EAAAC,EAAA,sBAAAtH,IAAAoH,EAAAC,EAAAC,EAAA,sBAAAjH,IAAA+G,EAAAC,EAAAC,EAAA,sBAAAvG,KAAAqG,EAAAC,EAAAC,EAAA,sBAAAlG,KAAAgG,EAAAC,EAAAC,EAAA,sBAAA5F,KAAA0F,EAAAC,EAAAC,EAAA,sBAAAnF,KAAAiF,EAAAC,EAAAC,EAAA,sBAAA5E,KAAA0E,EAAAC,EAAAC,EAAA,sBAAAtE,KAAAoE,EAAAC,EAAAC,EAAA,sBAAA7C,KAAA2C,EAAAC,EAAAC,EAAA,sBAAAvC,KAAAqC,EAAAC,EAAAC,EAAA,sBAAAlC,KAAAgC,EAAAC,EAAAC,EAAA,sBAAAxB,KAAAsB,EAAAC,EAAAC,EAAA,sBAAAlB,KAAAgB,EAAAC,EAAAC,EAAA,sBAAAb,KAAAW,EAAAC,EAAAC,EAAA,sBAAAR,KAAAM,EAAAC,EAAAC,EAAA,sBAAAH,svBCQO,SAAAI,EAAAC,EAAAC,EAAAC,EAAAjL,EAAAjH,GAGLA,IACEA,MAEGA,EAALmS,YACEnS,8BAEGA,EAALoS,aACEpS,iCAEGA,EAALqS,SACErS,SAAiB,SAAA6R,GACf,OAAOA,EAAPS,cAGCtS,EAALuS,eACEvS,eAAuB,SAAAsI,GACrB,OAAOA,EAAP,MAMJ0J,4BAEE,IAEIQ,EAAe,iBAAnB,OAEIC,EAAMT,2EAEW,eAFXA,uBAAV,GAKIU,EAAaC,YAAjB1L,GAEI2L,EAAIC,iBACM,CAZd,GAJFZ,MAkBMa,EAAID,iBACM,CAlBhBX,IAIE,KAgBAO,+BACqB,qBADrBA,4BAGiBxL,EAAU6B,eAH3B2J,0DAKQzS,EALRyS,yCAQAA,sDAEqB,oBAErBA,sDAEqB,oBAErB,IAAIM,EAASN,2BACIxL,EADjB,kBAEI+L,EAAaP,2BACAxL,EADjB,sBAEIgM,EAAYR,+BACK,sBADLA,kCAAhB,UAKAlM,KAAA2M,KAAY,SAAAC,EAAAC,GAGV,GADAjL,4BACAgL,EAAA,CAIEF,WAEF,IAAII,EAAJ,GAEA,GAAIrT,EAAJsT,oBAEO,CACL,IAAIC,EAAJH,EACIG,GAAmBA,EAAe,KAAfA,kBACrBA,EAAe,KAAfA,yBAAuD,SAAAnF,GACrDiF,EAAiBjF,OAAjBiF,MAAmCjF,OAAnCiF,SA6BNT,SAASO,MAAc,SAAAtB,GACnB,OAAOA,EAAPtO,QAEJ,IAAIiQ,EAAU,GAAd,KACA,GAAIxT,EAAJyT,uBAAoC,CAClC,IAAIC,EAAWb,MAAkB,SAAAhB,GAAc,OAAO8B,WAAW3T,SAAlB6R,MAC3C7R,EAAJ4T,0BACEJ,KAAaxT,2BAAbwT,GACArL,qCAA8CqL,EAA9CrL,IACAA,4BAEAqL,KAAaE,EAAbF,EAGJV,YAEAL,oDAAsDI,IAAtDJ,IACAA,oDAAsDI,2BAExC,SAAAhB,GAAc,OAAO7R,eAAP6R,MAG5B,IAAIgC,EAAOd,uBAAqB9L,EAArB8L,cAAXI,GAEAU,6CAGa,SAAAhC,GACT,OAAOiB,EAAP,KAJJe,qDAUAA,sCAEmB,SAAAhC,GAAA,OAAO5K,iBAA6B4K,EAApCtO,OAFnBsQ,SAGe,SAAAhC,GACT,OAAOe,EAAEf,EAAFe,MAAUA,cAAjB,KAJNiB,aAMmBjB,gBANnBiB,gBAOkB,SAAAhC,EAAAlD,GAAA,OAASmF,EAAYjC,EAArBlD,KAPlBkF,eAQqB,SAAAhC,EAAAlD,GACbkE,6BAEAH,iDAGAA,OAxDR,SAAAb,EAAAlD,GACE,OAAI3O,EAAJsT,eACSzB,aAAiB7R,eAAqBA,SAA7C6R,IAEOxB,YAAgBwB,YAAhBxB,YAA4CrQ,eAAqBA,SAAxE6R,IAoDoBkC,CAAclC,IAA9Ba,aACoBG,IAADmB,MADnBtB,kBAEmBG,UAAD,GAFlBH,QAdRmB,cAkBoB,SAAAhC,GACZgB,4BAEAH,kDArBRmB,SAyBe,SAAAhC,GACT,OAAOiB,EAAP,KA1BNe,iBA8BEd,uBAAqB9L,EAArB8L,6BACgB,SAAAlB,EAAAlD,GAAA,OAAUmF,EAAYjC,EAAtBlD,KADhBoE,oCAIa,SAAAlB,GACT,OAAOiB,EAAEmB,OAAOjU,SAAhB6R,OALJkB,cAOkB,SAAAlB,GACd,OAnKVK,IAmK0BY,EAAEmB,OAAOjU,SAAzB6R,OAGJ,IAAIqC,EAAWlB,uBAAyB/L,EAAzB+L,kBAAfG,GAEAe,6CAGa,SAAArC,GACT,OAAOiB,KAAP,IAJJoB,oCASAA,sCACiBjN,EADjBiN,qBAEa,SAAArC,GACT,OAAOe,EAAEf,EAAFe,MAAUA,cAAjB,IAHJsB,+DAOa,SAAArC,GACT,OAAOiB,KAAP,IAEJE,uBAAyB/L,EAAzB+L,0BACQ,SAAAnB,GACJ,OAAO7R,eAAqBA,SAA5B6R,MAFJmB,oCAMa,SAAAnB,GACT,OAAOiB,EAAEmB,OAAOjU,SAAT8S,KAAP,SAjJJG,sCAsBF,SAAAa,EAAAjC,EAAAlD,GACE,OAAI3O,EAAJsT,eACE,UAAIa,EAAAf,GACKA,EAAWvB,EAAlBtO,MACF,mBAAI6P,EACKA,EAAUvB,EAAjBlD,GACFyE,EAVJ,SAAAgB,EAAAzF,GACE,OAAO0E,EAAiBe,aAAjBf,KAA6Cb,EAAa7D,EAAE6D,EAAnE3D,QAWSwF,CAA0BxC,YAADtO,KAAhCoL,KAsHNpI,KAAA+N,QAAe,WACb7B,4kCCnNN,IAUA8B,EARA,SAAAC,EAAAC,GACE,OAAOrN,QAAPqN,EAGF,SAAAC,EAAAD,GACE,OAAOxN,EAAU6B,eAAjB2L,GAKF,IAAIE,EAAe,CACjBxC,UADiB,iBAEjBC,WAFiB,mBAGjBqB,wBAHiB,EAIjBG,yBAA0B,SAAAgB,GAAA,OAAYC,aAAZ,IAA0BD,IACpDvC,OAAQ,SAAAR,GAAC,OAAIA,EAAJS,aACTC,aAAc,SAAAjK,GAAK,OAAIA,EAAJ,MAGfwM,cAEF,SAAAA,EAAA1O,GAAmB,IAAAC,+FAAAC,CAAAC,KAAAuO,GACjBzO,wEAAAG,CAAAD,KAAAE,EAAAqO,GAAApO,KAAAH,KAAAH,IACQ2O,IAAR1O,IAFiB,OAGjBA,EAAAoB,MAAa,CACXG,WADW,EAEXrH,iBAFW,yBAGXoH,WAHW,WAIXtH,aAJW,GAKXqD,SALW,GAMX7C,SANW,GAOXG,MAPW,GAQX8G,cARW,MASXC,YATF,GAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAyL,IAAnB1O,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAyL,IAAtB1O,KACAA,EAAAgP,mBAA0BA,aAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAyL,IAA1B1O,KAtBiBA,yPAFAO,kEA6BjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QArDc,KAuDhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAtN,oCACA5B,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIIlB,KAAJ0O,QACE1O,KAAA0O,MAAAX,UACA/N,KAAA0O,MAAA,MAEFQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,uDAGU/E,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,qCAAuFI,YAAc1P,KAArGsP,0DAIA,IAAI7N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,mDAKaxF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAlD,EAAUxL,KAAVgP,eAAA,UAAAf,EAAbG,GACApO,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAIJxC,KAJIkB,MAENK,EAFMiB,EAAAjB,cAGNC,EAHMgB,EAAAhB,YAQR,OAFAI,0CAGItB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,kBAAuBA,EAAE,cAAA1K,OAAzClC,MAEIC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,EAAhB,gBAAoCC,EAApCxC,UAAA,KAA8D8D,YAAc1P,KAA5EkB,OAF5B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,EAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIrV,YAAtBmF,IAGA,IAAAmO,EAAsB,CACpB,IAAIgC,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI8H,EAAY9H,EAAhB,GACA6E,EAAkBA,GAAmB7E,EAArC6E,GACAvL,uBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYsD,YAAcxO,EAA9B7B,GAEKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAlD,EAAAC,EAAA,UAAAwC,EAAbG,IACFpO,KAAA0O,MAAA/B,KAAAC,EAAAI,wCAIRmD,EAAA,soDCtJA,IAqBAC,EApBIhC,EAAe,CACjBxC,UADiB,iBAEjBC,WAFiB,cAGjBqB,wBAHiB,EAIjBpB,OAAQ,SAAAR,GACN,OAAOA,EAAP+E,OAEFrE,aAAc,SAAAqE,GACZ,OAAAA,IAIJ,SAAAC,EAAApC,GACE,OAAOrN,QAAPqN,EAGF,SAAAqC,EAAArC,GACE,OAAOxN,EAAU6B,eAAjB2L,GAKIK,kBAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAA0Q,CAAAxQ,KAAAuO,KACjBvO,MAAAF,MAAA2Q,EAAAlC,GAAApO,KAAAH,KAAAH,oDACAqB,MAAa,CACXG,WADW,EAEXrH,iBAFW,yBAGXoH,WAHW,WAIXtH,aAJW,GAKXqD,SALW,GAMX7C,SANW,GAOXG,MAPW,GAQX8G,cARW,MASXC,YATF,GAWAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAA2N,IAAnB5Q,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAA2N,IAAtB5Q,KACAA,EAAAgP,mBAA0BA,aAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAA2N,IAA1B5Q,KApBiBA,yPAFAO,kEA0BjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QApDc,KAsDhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACV,IAAIiF,EAAcjF,EAAlBgF,OACIC,eAA2BrP,KAAAkB,MAA/BM,cAEAI,6BACA0N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,qCAAuFqB,YAAyB3Q,KAAhHsP,6DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UAEF/N,KAAA0O,MAAa,IAAAlD,EAAUxL,KAAVgP,eAAA,UAAAsB,EAAbM,GACA5Q,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAKJxC,KALIkB,MAGNK,EAHMiB,EAAAjB,cAINC,EAJMgB,EAAAhB,YAMR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,kBAAuBA,EAAE,cAAA1K,OAAzClC,MAEMC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,EAAhB,gBAAoCC,EAApCxC,UAAA,KAA8D+E,YAAyB3Q,KAAvFkB,OAF9B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,EAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIhW,YAAtB8F,IAGA,IAAAuQ,EAAsB,CACpB,IAAIJ,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI0I,EAAY1I,EAAhB,GACA6E,EAAkBA,GAAmB7E,EAArC6E,GACAvL,uBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYkE,YAAcpP,EAA9B7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAlD,EAAAC,EAAA,UAAA6E,EAAbM,IAEF5Q,KAAA0O,MAAA/B,KAAAC,EAAAI,wCAIR+D,EAAA,soDCnJA,IACI3C,EAAe,CACjBxC,UADiB,wBAEjBC,WAFiB,mBAGjBkB,gBAHiB,EAIjBjB,OAAQ,SAAAR,GAAC,OAAIA,EAAJ0F,SACThF,aAAc,SAAAjK,GAAK,OAAIA,EAAJ,MAGrB,SAAAkP,EAAA/C,GACE,OAAOrN,QAAPqN,EAGF,SAAAgD,EAAAhD,GACE,OAAOxN,EAAU6B,eAAjB2L,GAGIK,kBAEF,SAAAA,EAAA1O,GAAmB,IAAAC,+FAAAqR,CAAAnR,KAAAuO,GACjBzO,wEAAAsR,CAAApR,KAAAqR,EAAA9C,GAAApO,KAAAH,KAAAH,IACQyR,IAARxR,IAFiB,OAGjBA,EAAAoB,MAAa,CACXG,WADW,EAEXrH,iBAFW,yBAGXoH,WAHW,WAIXtH,aAJW,GAKXqD,SALW,GAMX7C,SANW,GAOXG,MAPW,GAQX8G,cARW,MASXC,YATF,GAWAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAuO,IAAnBxR,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAuO,IAAtBxR,KACAA,EAAAgP,mBAA0BA,aAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAuO,IAA1BxR,KArBiBA,yPAFAO,kEA2BjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA/Cc,KAiDhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,6BAA+EI,YAAc1P,KAA7FsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAlD,EAAUxL,KAAVgP,eAAA,UAAAiC,EAAbM,GACAvR,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAIJxC,KAJIkB,MAENK,EAFMiB,EAAAjB,cAGNC,EAHMgB,EAAAhB,YAKR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,kBAAuBA,EAAE,cAAA1K,OAAzClC,MAEMC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,EAAhB,gBAAoCC,EAApCxC,UAAA,KAA8D8D,YAAc1P,KAA5EkB,OAF9B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,EAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADK9T,YAAvB4D,IAGA8P,oBAA8B,SAAAxH,GAC5B,IAAIqJ,EAAarJ,EAAjB,GACA1G,qBAFFkO,MAGS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,GACxB,IAAIkL,EAAY6E,YAAoB/P,EAApC7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAlD,EAAAC,EAAA,UAAAwF,EAAbM,IAEFvR,KAAA0O,MAAA/B,KAAAC,EAA2B,CACzB8E,MADyB,eAEzBC,OAFF,sDAORC,EAAA,40DCjIA,IAIAC,GAFIC,GAAJ,UAIA,SAAAC,GAAA7D,GACE,OAAOrN,SAAPqN,EAGF,SAAA8D,GAAA9D,GACE,OAAOxN,GAAU6B,eAAjB2L,GAGI+D,mBAEF,SAAAA,EAAApS,GAAmB,IAAAC,MAAA,mGAAAoS,CAAAlS,KAAAiS,KACfjS,MAAAF,MAAAqS,GAAAF,GAAA9R,KAAAH,KAAAH,sDACAqB,MAAa,CACTlH,iBADS,yBAEToH,WAFS,WAGTtH,aAHS,GAITqD,SAJS,GAKT7C,SALS,GAMTG,MANS,GAOTmK,mBAPS,EAQTrD,cARS,MASTC,YATJ,GAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA6O,kBAAA,EACA7O,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAqP,MAAtBtS,KACAA,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAqP,MAAnBtS,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAqP,MAA1BtS,KAnBeA,0PAFLO,mDAwBToL,EAAW5L,GACZG,KAAAqS,UAAA5G,EAAA5L,+CAIA,IAAI4B,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA9CY,KAiDdyN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,YAA8ClP,KAA9CkP,mEAIFlP,KAAAgP,eAAAsD,UAAA,OAAAC,SACArD,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,YAAiDlP,KAAjDkP,+DASiBsD,EAAWC,GACtBvM,oBAA8BA,eAAelG,KAAjDkB,QACIlB,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,gDAIJ,IAAIO,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACf,IAAI6C,EAAO,IAAPA,EAAJ,IACIC,EAAezD,uBAAnB,UACAyD,uBAAmCD,GACnCC,wBAAoCD,GAEpCE,eAA2BnR,oBAA3BmR,UAA6D,CACzDC,kBADyD,EAEzDC,WAAYJ,EACZK,YAAaL,IAEjB9C,EAAQ+C,2CAAR/C,0CAIIxF,GAER,GADkBA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,YAAA,CAEA,IAAIkR,EAAO,IAAPA,EAAJ,IACIC,EAAezD,uBAAnB,UAIA,GAHAyD,uBAAmCD,GACnCC,wBAAoCD,IAE/BE,OAALI,MACI,OAAOpR,cAAP,8BAEJgR,eAA2B5S,KAAAuP,KAAAC,aAA3BoD,UAA6D,CACzDC,kBADyD,EAEzDC,WAAYJ,EACZK,YAAaL,IAIjB,IACA7Q,EADIoR,EAAJN,EAA2BO,EAAQ,sBAAAzP,OAAyBiM,YAAc1P,KAAvCkB,OAAnC,SACIiS,EAAMjE,uBAAV,KAEAiE,aACAA,OAAWF,YAAXE,oBAEIjE,SAAJkE,cACIvR,EAAIqN,qBAAJrN,gBACAA,kEAGAsR,oBACOA,EAAJE,WACHF,mEAIW/I,GACf,IAAIpI,EAAWoI,EAAfgF,OACApP,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,0DAIA,OAAOlD,IAAUtM,KAAAuP,KAAjB+D,0CAGM,IAAA9Q,EAKFxC,KALEkB,MAGFK,GAHEiB,EAAAoC,kBAAApC,EAAAjB,eAIFC,EAJEgB,EAAAhB,YAMN,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,qBAA4ByN,GAAE,cAAA1K,OAA9ClC,MAEQC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,cAAkCuB,YAAc1P,KAFhFkB,QAKIZ,EAAAC,EAAAC,cAAA,OAAKsP,IAAL,eAAwBpP,UAAWA,GALvC,SAMIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,mBAAuC2B,IAAvC,WACIxP,EAAAC,EAAAC,cAAA+S,GAAAhT,EAAA,CAAcoC,KAAd,OAA4B6Q,MAA5B,OAA2C7H,OAA3C,IAAwDD,MARpE,0CAcMD,EAAW5L,GAAO,IAAAwC,EAAArC,KACpByB,EAAJzB,KAEIyT,EAAuBlR,uBAA8BmR,YAAkBjS,EAA3EP,OAEAO,6FAMA,IAAI0K,EAAaC,YAAjB2F,IAGI4B,EAAJ,IAIAlI,4BACA,IAAIS,EAAMT,2EAEW,YAAkCkI,EANvD,KAIUlI,uBAAV,GAOIsE,EAAc,CAFEzD,IAApBmH,GAC4B1Y,YAA5B8E,IAGA,IAAAgS,GAAsB,CACpB,IAAI7B,EAAoBnT,cACxBkT,UAGFJ,QAAAiE,IAAA7D,GAAAnI,KAA8B,SAAAO,GAC1B,IAAI0L,EAAc1L,EAAlB,GACI2L,EAAsBC,YAAmB5L,EAAD,GAA5CtI,GACAmN,GAAkBA,IAAmB7E,EAArC6E,GAEA,IAuCAgH,EAvCIlH,EAAJ,GACImH,EAAJ,GAQA,SAAAnG,EAAAD,GACE,OAAAA,GAEOf,EAAiBe,aAAjBf,KADLgF,GAIJ,SAAAoC,EAAA5I,EAAAlD,GACI,IAAAyF,EACIzM,EAAaK,QAAjBL,WACA,gBAAIA,EAA2B,CAC3B,IAAItH,EAAewR,aAAnB6I,UACAtG,EAAYiG,EAAZjG,QACG,gBAAIzM,EAA2B,CAClC,IAAI9G,EAAW8Z,YAAoB9I,EAAnC+I,YACAxG,EAAYiG,EAAZjG,QACG,oBAAIzM,EAA8B,CACrC,IAAI3G,EAAQ6Z,YAAqBhJ,EAAjC+I,YACAxG,EAAYiG,EAAZjG,OACG,CACCpT,EAAQ6Z,YAAqBhJ,EAAjC+I,YACAxG,EAAYiG,EAAZjG,GAEJ,OAAAA,EASJ,GAtCIb,IAAmBA,GAAe,KAAfA,kBACrBA,GAAe,KAAfA,yBAAuD,SAAAnF,GACrDiF,EAAiBjF,OAAjBiF,MAAmCjF,OAAnCiF,OACAmH,EAAgBpM,OAAhBoM,MAAkCpM,OAAlCoM,gBAmCJ,IAAIR,uBAEA,oBADIrS,EAAaK,QAAjBL,YACkC,CAC9B,IAAKyS,UAAoBpS,QAAzBnH,UACI,OACJuZ,EAAcU,MAA8BV,UAAoBpS,QAAhEoS,eACG,CACH,IAAKA,UAAoBpS,QAAzBhH,OACI,OACJoZ,EAAcU,MAA8BV,UAAoBpS,QAAhEoS,QAIRG,EAAmBH,EAAnBG,SAEA,IAAIQ,EAAalI,cAAyB,CAhF9C,IAgFqBA,GAAjBuH,GACIY,EAAOnI,iBAAXkI,GAGAtI,uBAAkBxL,GAAlBwL,wDAImBxL,GAJnBwL,yBA1PZ,WA0PYA,YA1BA,SAAAZ,EAAAlD,GAGI,OADiB0F,EADDoG,EAAgB5I,MAyBpCY,UAOgB,SAAAZ,EAAAlD,GACR,gBAAA3E,OAAA2E,KARR8D,YAYA,IAAIwI,EAAJ,GACIC,EAAJ,GACAX,UAAyB,SAAA1I,EAAAlD,GACrB,IAAIK,EAAQyL,EAAgB5I,IAC5B,GAAIoJ,cACAA,UACAC,WAEAA,EAAaD,UAAbC,QAIRD,OAAa,SAAAnU,EAAAqU,GACT,OAAOD,EAAaD,UAAbC,IAAmCA,EAAaD,UAAvDnU,MAMJ,IAAIsU,EAAU3I,uBAAkBxL,GAAlBwL,qDAIKxL,GAJLwL,4BAKS,SAAAZ,EAAAlD,GAAA,MAAU,aARjC,SAAAA,GACI,MAAO,CAAEA,EAAD,EAAD,IAAYuL,KAAnB,GAA4BmB,SAAS1M,EAAT0M,IAOgBC,CAAf3M,GAAV,MAoIvB,GAnIAyM,wFAMkB,SAAApM,EAAAL,GACV,OAAO0F,EAAPrF,KAERoM,gDAGU,SAAApM,GAAK,OAAIwL,EAAJxL,MAEf,GAAIhH,4CACAyK,EAAAoG,UAAA,gBAAA5Q,KAAAsS,GAAAgB,QAAAC,OAAA,QAAAC,KAAA,uBAAAA,KAAA,oBAAAA,KAAA,YAKuB,SAAA5J,GACf,IAAA6J,EAAAC,EACA,kBAAI9J,iBACA6J,EAASE,KAAU/J,WAAnB6J,cACAC,EAAmBZ,EAAnBY,IACAA,OACO,aAAAA,EAAP,MAEAD,EAASE,KAAU/J,uBAAnB6J,KACAC,EAAmBZ,EAAnBY,IACAA,MACO,aAAAA,EAAP,OAhBZF,KAAA,cAAAI,MAAA,wBAAAC,KAqBU,SAAAjK,GAAC,OAAIkK,YAAiBlK,EAAD+I,WAAe5S,EAAnCP,UAGf,GAAIO,4CACAgU,cAIJvJ,2GAMgB,SAAAZ,EAAAlD,GACR,oBAAA3E,OAAA2E,KAPR8D,0CAUqB,SAAAZ,EAAAlD,GACbkE,4EAXRJ,eAeqB,SAAAZ,EAAAlD,GAMb,IAAAsN,EAJAvJ,gDAMIuJ,EADJ,aAAIjU,mBACAiU,mDAEAA,sDAEJ,IAAIC,EAAgBzB,EAAgB5I,GAChCsK,EAAgBJ,YAAiBlK,EAAD+I,WAAe5S,EAAnDP,OACI2U,EAAc,qBAACF,EACNC,QADKD,EAAlBD,EAGAvJ,uBACoBG,IAADmB,MADnBtB,kBAEmBG,UAAD,GAFlBH,QAhCRD,cAoCoB,SAAAZ,EAAAlD,GACZkE,yEAIA,iBAAI7K,oBAEJ0K,kDA3CRD,WA+CiB,SAAAZ,EAAAlD,GACT,IAAI3G,QAAJmD,kBAAA,CAGAuH,gDAIA,IAAI/K,EAAaK,QAAjBL,WAEA,gBAAIA,EACAY,EAAW,CACPZ,WADO,WAEPtH,aAAcwR,aAFlBtJ,WAIAC,YAAmBC,IAAD4T,cAAlB7T,GACAR,mBACG,gBAAIL,EACPY,EAAW,CACPZ,WADO,eAEPtH,aAAc2H,QAFP3H,aAGPqD,SAAUmO,aAHHyK,WAIPzb,SAAU8Z,YAAoB9I,EAJlCtJ,aAMAC,YAAmBC,IAAD4T,cAAlB7T,GAEAR,kBACG,CACH,IAAIO,EAAW,CACXZ,WADW,kBAEXtH,aAAc2H,QAFH3H,aAGXqD,SAAUsE,QAHCtE,SAIX7C,SAAUmH,QAJCnH,SAKXG,MAAO6Z,YAAqBhJ,EALhC+I,aAOApS,YAAmBC,IAAD4T,cAAlB7T,GAEAR,mBAGPA,QAALmD,kBAAmC,KA0C3BxD,EApBK4U,EAAT,SAAAC,EAAAC,EAAAC,GACIA,GAAYF,6BACZA,2EAMKG,EAAT,SAAAH,EAAAC,EAAA9U,EAAA+U,GACIA,GAAYF,6BACZA,kFAIiB,YA5BrB,SAAA7U,GACI,IACIY,KAAW,CACXZ,WAAYK,QADDL,WAEXtH,aAAc2H,QAFH3H,aAGXqD,SAAUsE,QAHCtE,SAIX7C,SAAUmH,QAJCnH,SAKXG,MAAOgH,QALXhH,QAOAuH,aACAC,YAAmBC,IAAD4T,cAAlB7T,GACAR,cAkBQ4U,OAIRJ,EAxCK/J,oGAAT,gBAwCYoK,OAAZ,aAEA,aADIlV,EAAaK,QAAjBL,YAEI4U,EAAUC,EAAA,gBAAVD,IAEAI,EAAUH,EAAA,2BAAVG,GACA,YAAIhV,EACA4U,EAAUC,EAAQxU,QAAR3H,cAAVkc,IAEAI,EAAUH,EAAQxU,QAAR3H,aAAA,YAAVsc,GACA,gBAAIhV,EACA4U,EAAUC,EAAQxU,QAARnH,UAAV0b,IAEAI,EAAUH,EAAQxU,QAARnH,SAAA,gBAAV8b,GACAJ,EAAUC,EAAQxU,QAARhH,OAAVub,MAkChBvU,gDAjUJyG,MAmUS,SAAAvG,GACLC,iBACAH,8CAGA,IAAI8U,EAAoB7G,YAAcrN,EAAtCnB,OACIE,EAAaK,QAAjBL,WAGIY,EAAW,CACXZ,WAAYK,QADDL,WAEXtH,aAAc2H,QAFH3H,aAGXqD,SAAUsE,QAHCtE,SAIX7C,SAAUmH,QAJCnH,SAKXG,MAAOgH,QALXhH,OAQA,aAAI2G,EACAY,wBACG,iBAAIZ,EACPY,wBACG,oBAAIZ,IACPY,6BAGJC,YAAmBC,IAAD4T,cAAlB7T,GACAR,cACA+U,WAAW,WACPC,MAAK,GAAAhT,OAAA8S,EAALE,8BADJD,8CAOZE,GAAA,kqDC5hBA,SAAAC,GAAAzI,GACE,OAAOrN,SAAPqN,EAGF,SAAA0I,GAAA1I,GACE,OAAOxN,GAAU6B,eAAjB2L,GAGkBnR,cAApB,IAEMkV,eAEF,SAAAA,EAAApS,GAAmB,IAAAC,MAAA,mGAAA+W,CAAA7W,KAAAiS,KACfjS,MAAAF,MAAAgX,GAAA7E,GAAA9R,KAAAH,KAAAH,sDACAqB,MAAa,CACT0D,mBADS,EAET5K,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQT8G,cARS,MASTC,YATJ,IAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA6O,kBAAA,EACA7O,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAgU,MAAtBjX,KACAA,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAgU,MAAnBjX,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAgU,MAA1BjX,KAnBeA,0PAFLO,mDAwBToL,EAAW5L,GACZG,KAAAqS,UAAA5G,EAAA5L,+CAIA,IAAI4B,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA/CY,KAkDdyN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,YAA8ClP,KAA9CkP,mEAIAlP,KAAAgP,eAAAsD,UAAA,OAAAC,SACArD,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,YAAiDlP,KAAjDkP,+DAGesD,EAAWC,GACtBvM,oBAA8BA,eAAelG,KAAjDkB,QACIlB,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,gDAKJ,IAAIO,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACf,IAAI6C,EAAO,IAAPA,EAAJ,IACIC,EAAezD,uBAAnB,UAIA,GAHAyD,uBAAmCD,GACnCC,wBAAoCD,IAE/BE,OAALI,MACI,OAAOnD,EAAP,8BAGJ+C,eAA2BnR,oBAA3BmR,UAA6D,CACzDC,kBADyD,EAEzDC,WAAYJ,EACZK,YAAaL,IAEjB9C,EAAQ+C,2CAAR/C,0CAIIxF,GAER,GADkBA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,YAAA,CAEA,IAAIkR,EAAO,IAAPA,EAAJ,IACIC,EAAezD,uBAAnB,UAIA,GAHAyD,uBAAmCD,GACnCC,wBAAoCD,IAE/BE,OAALI,MACI,OAAOpR,cAAP,8BAGJgR,eAA2B5S,KAAAuP,KAAAC,aAA3BoD,UAA6D,CACzDC,kBADyD,EAEzDC,WAAYJ,EACZK,YAAaL,IAGjB,IACA7Q,EADIoR,EAAJN,EAA2BO,EAAQ,eAAAzP,OAAkBiM,YAAc1P,KAAhCkB,OAAnC,SACIiS,EAAMjE,uBAAV,KAEAiE,aACAA,OAAWF,YAAXE,oBAEIjE,SAAJkE,cACIvR,EAAIqN,qBAAJrN,gBACAA,kEAGAsR,oBACOA,EAAJE,WACHF,mEAIW/I,GACf,IAAIpI,EAAWoI,EAAfgF,OACApP,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,0DAIA,OAAOlD,IAAUtM,KAAAuP,KAAjB+D,0CAGM,IAAA9Q,EAKFxC,KALEkB,MAGFK,GAHEiB,EAAAoC,kBAAApC,EAAAjB,eAIFC,EAJEgB,EAAAhB,YAMN,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,qBAAgCyN,GAAE,cAAA1K,OAAlDlC,MAEQC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,cAAkCuB,YAAc1P,KAFhFkB,QAIIZ,EAAAC,EAAAC,cAAA,OAAKsP,IAAL,eAAwBpP,UAAWA,GAJvC,SAKIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,mBAAuC2B,IAAvC,WACIxP,EAAAC,EAAAC,cAAA+S,GAAAhT,EAAA,CAAcoC,KAAd,OAA4B6Q,MAA5B,OAA2C7H,OAA3C,IAAwDD,MAPpE,0CAaMD,EAAW5L,GAAO,IAAAwC,EAAArC,KACpByB,EAAJzB,KAEIyT,EAAuBlR,uBAA8BmR,YAAkBjS,EAA3EP,OAEAO,6FAMA,IAAI0K,EAAaC,YAAjBuK,IAGIhD,EAAJ,IAIAlI,4BACA,IAAIS,EAAMT,2EAEW,YAAkCkI,EANvD,KAIUlI,uBAAV,GAOIsE,EAAc,CAFEzD,IAApBmH,GACwBtY,YAAxB0E,IAGA8P,QAAAiE,IAAA7D,GAAAnI,KAA8B,SAAAO,GAC1B,IAyDA6L,EAzDIH,EAAc1L,EAAlB,GACI6O,EAAoBC,YAAiB9O,EAAD,GAAxCtI,GAaA,SAAAqX,EAAAC,GACE,OAAIA,EAAJ,GACE,UACEA,GAAJ,GACE,UACEA,GAAJ,GACE,UACEA,GAAJ,GACE,UACEA,GAAJ,GACE,UACEA,GAAJ,GACE,UACEA,GAAJ,GACE,UACEA,GAAJ,GACE,UACF,UAGF,SAAAC,EAAA9L,EAAAlD,GACI,IAAA+O,EACI/V,EAAaK,QAAjBL,WACA,gBAAIA,EAA2B,CAC3B,IAAItH,EAAewR,aAAnB6I,UACAgD,EAAUH,EAAVG,QACG,gBAAI/V,EAA2B,CAClC,IAAI9G,EAAW8Z,YAAoB9I,EAAnC+I,YACA8C,EAAUH,EAAVG,QACG,oBAAI/V,EAA8B,CACrC,IAAI3G,EAAQ6Z,YAAqBhJ,EAAjC+I,YACA8C,EAAUH,EAAVG,OACG,CACC1c,EAAQ6Z,YAAqBhJ,EAAjC+I,YACA8C,EAAUH,EAAVG,GAEJ,OAAAA,EAQJ,QAAI1D,uBAEA,oBADIrS,EAAaK,QAAjBL,YACkC,CAC9B,IAAKyS,UAAoBpS,QAAzBnH,UACI,OACJuZ,EAAcU,MAA8BV,UAAoBpS,QAAhEoS,eACG,CACH,IAAKA,UAAoBpS,QAAzBhH,OACI,OACJoZ,EAAcU,MAA8BV,UAAoBpS,QAAhEoS,QAIRG,EAAmBH,EAAnBG,SAEA,IAAIQ,EAAalI,cAAyB,CAzF9C,IAyFqBA,GAAjBuH,GACIY,EAAOnI,iBAAXkI,GAGAtI,uBAAkBxL,GAAlBwL,wDAImBxL,GAJnBwL,yBAlQZ,WAkQYA,YAzBA,SAAAZ,EAAAlD,GAGI,OADgB8O,EADFE,EAAU9L,MAwB5BY,UAOgB,SAAAZ,EAAAlD,GACR,gBAAA3E,OAAA2E,KARR8D,YA4CA,IAAI2I,EAAU3I,uBAAkBxL,GAAlBwL,iBAhCM,CAAC,CACjBqJ,KADiB,gBAEjB4B,QAFgB,IAGlB,CACE5B,KADF,YAEE4B,QALgB,IAMlB,CACE5B,KADF,YAEE4B,QARgB,IASlB,CACE5B,KADF,YAEE4B,QAXgB,IAYlB,CACE5B,KADF,YAEE4B,QAdgB,IAelB,CACE5B,KADF,YAEE4B,QAjBgB,IAkBlB,CACE5B,KADF,YAEE4B,QApBgB,IAqBlB,CACE5B,KADF,YAEE4B,QAvBgB,IAwBlB,CACE5B,KADF,gBAEE4B,QA1BJ,MAgCcjL,iCAIKxL,GAJLwL,4BAKS,SAAAZ,EAAAlD,GAAA,MAAU,aARjC,SAAAA,GACI,MAAO,CAAEA,EAAD,EAAD,IAAYuL,KAAnB,GAA4BmB,SAAS1M,EAAT0M,IAOgBC,CAAf3M,GAAV,MAuInB,GAtIJyM,wFAMkB,SAAAwC,GACV,OAAOH,EAAwBG,EAA/BF,WAERtC,gDAGU,SAAAwC,GAAE,OAAIA,EAAJ9B,OAEZ,iBAAI9T,oBACAyK,EAAAoG,UAAA,gBAAA5Q,KAAAsS,GAAAgB,QAAAC,OAAA,QAAAC,KAAA,uBAAAA,KAAA,oBAAAA,KAAA,YAKuB,SAAA5J,GACf,IAAA6J,EAAAC,EACA,kBAAI9J,iBACA6J,EAASE,KAAU/J,WAAnB6J,cACAC,EAAmBZ,EAAnBY,IACAA,OACO,aAAAA,EAAP,MAEAD,EAASE,KAAU/J,uBAAnB6J,KACAC,EAAmBZ,EAAnBY,IACAA,MACO,aAAAA,EAAP,OAhBZF,KAAA,cAAAI,MAAA,wBAAAC,KAqBU,SAAAjK,GAAC,OAAIkK,YAAiBlK,EAAD+I,WAAe5S,EAAnCP,SAGf,iBAAIO,oBACAgU,cAIJvJ,2GAMgB,SAAAZ,EAAAlD,GACR,oBAAA3E,OAAA2E,KAPR8D,0CAUqB,SAAAZ,EAAAlD,GACbkE,4EAXRJ,eAeqB,SAAAZ,EAAAlD,GAKb,IAAAsN,EAJAvJ,gDAOQuJ,GAFR,GAAIjU,yCACA,aAAIA,mBACAiU,mDAEAA,sDAGJA,wBAGJ,IAAI4B,EAAcF,EAAU9L,GACxBsK,EAAgBJ,YAAiBlK,EAAD+I,WAAe5S,EAAnDP,OACI2U,EAAc,qBAACyB,EACN1B,UADK,IAAlBF,EAGAvJ,uBACoBG,IAADmB,MADnBtB,kBAEmBG,UAAD,GAFlBH,QApCRD,cAwCoB,SAAAZ,EAAAlD,GACZkE,yEAIA,iBAAI7K,oBAEJ0K,kDA/CRD,WAmDiB,SAAAZ,EAAAlD,GACT,IAAI3G,QAAJmD,kBAAA,CAGAuH,gDAIA,IAAI/K,EAAaK,QAAjBL,WAEA,gBAAIA,EACAY,EAAW,CACPZ,WADO,WAEPtH,aAAcwR,aAFlBtJ,WAIAC,YAAmBC,IAAD4T,cAAlB7T,GACAR,mBACG,gBAAIL,EACPY,EAAW,CACPZ,WADO,eAEPtH,aAAc2H,QAFP3H,aAGPqD,SAAUmO,aAHHyK,WAIPzb,SAAU8Z,YAAoB9I,EAJlCtJ,aAMAC,YAAmBC,IAAD4T,cAAlB7T,GACAR,kBACG,CACH,IAAIO,EAAW,CACXZ,WADW,kBAEXtH,aAAc2H,QAFH3H,aAGXqD,SAAUsE,QAHCtE,SAIX7C,SAAUmH,QAJCnH,SAKXG,MAAO6Z,YAAqBhJ,EALhC+I,aAOApS,YAAmBC,IAAD4T,cAAlB7T,GAEAR,mBAGHA,QAALmD,kBAAmC,KA0C3BxD,EApBK4U,EAAT,SAAAC,EAAAC,EAAAC,GACIA,GAAYF,6BACZA,2EAMKG,EAAT,SAAAH,EAAAC,EAAA9U,EAAA+U,GACIA,GAAYF,6BACZA,kFAIiB,YA5BrB,SAAA7U,GACI,IACIY,KAAW,CACXZ,WAAYK,QADDL,WAEXtH,aAAc2H,QAFH3H,aAGXqD,SAAUsE,QAHCtE,SAIX7C,SAAUmH,QAJCnH,SAKXG,MAAOgH,QALXhH,QAOAuH,aACAC,YAAmBC,IAAD4T,cAAlB7T,GACAR,cAkBQ4U,OAIRJ,EAxCK/J,oGAAT,gBAwCYoK,OAAZ,aAEA,aADIlV,EAAaK,QAAjBL,YAEI4U,EAAUC,EAAA,gBAAVD,IAEAI,EAAUH,EAAA,2BAAVG,GACA,YAAIhV,EACA4U,EAAUC,EAAQxU,QAAR3H,cAAVkc,IAEAI,EAAUH,EAAQxU,QAAR3H,aAAA,YAAVsc,GACA,gBAAIhV,EACA4U,EAAUC,EAAQxU,QAARnH,UAAV0b,IAEAI,EAAUH,EAAQxU,QAARnH,SAAA,gBAAV8b,GACAJ,EAAUC,EAAQxU,QAARhH,OAAVub,MAkCpBvU,gDA/VJyG,MAiWS,SAAAvG,GACLC,iBACAH,8CAEA,IAAI8U,EAAoB7G,YAAcrN,EAAtCnB,OACIE,EAAaK,QAAjBL,WAGIY,EAAW,CACXZ,WAAYK,QADDL,WAEXtH,aAAc2H,QAFH3H,aAGXqD,SAAUsE,QAHCtE,SAIX7C,SAAUmH,QAJCnH,SAKXG,MAAOgH,QALXhH,OAQA,aAAI2G,EACAY,wBACG,iBAAIZ,EACPY,wBACG,oBAAIZ,IACPY,6BAGJC,YAAmBC,IAAD4T,cAAlB7T,GACAR,cACA+U,WAAW,WACPC,MAAK,GAAAhT,OAAA8S,EAALE,8BADJD,8CAOZe,GAAA,kqDChkBA,IACInJ,GAAe,CACjBxC,UADiB,mBAEjBC,WAFiB,aAGjBkB,gBAHiB,EAIjBjB,OAAQ,SAAAR,GACN,OAAOA,EAAPkM,kBAEFxL,aAAc,SAAAwL,GACZ,OAAOA,EAAP,MAIJ,SAAAC,GAAAvJ,GACE,OAAOrN,QAAPqN,EAGF,SAAAwJ,GAAAxJ,GACE,OAAOxN,GAAU6B,eAAjB2L,GAIIK,mBAEF,SAAAA,EAAA1O,GAAmB,IAAAC,+FAAA6X,CAAA3X,KAAAuO,GACjBzO,0EAAA8X,CAAA5X,KAAA6X,GAAAtJ,GAAApO,KAAAH,KAAAH,IACQiY,MAARhY,IAFiB,OAGjBA,EAAAoB,MAAa,CACXwE,UADW,WAEXtE,WAFW,WAGXtH,aAHW,GAIXqD,SAJW,GAKX7C,SALW,GAMXG,MANW,GAOX8G,cAPW,MAQXC,YARF,IAUAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAA+U,MAAnBhY,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAA+U,MAAtBhY,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAA+U,MAA1BhY,KApBiBA,0PAFAO,kEA0BjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QAnDc,KAqDhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,8BAAgFI,YAAc1P,KAA9FsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAlD,EAAUxL,KAAVgP,eAAA,UAAAyI,GAAbM,IACA/X,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAIJxC,KAJIkB,MAENK,EAFMiB,EAAAjB,cAGNC,EAHMgB,EAAAhB,YAKR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAuBA,GAAE,cAAA1K,OAAzClC,MAEMC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,gBAAoCC,GAApCxC,UAAA,KAA8D8D,YAAc1P,KAA5EkB,OAF9B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADMnU,YAAxBiE,IAGA8P,oBAA8B,SAAAxH,GAC5B,IAAImP,EAAcnP,EAAlB,GACA1G,sCAFFkO,MAGS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMmL,GAC9B,IAAID,EAAYoL,YAA4BtW,EAA5C7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAlD,EAAAC,EAAA,UAAAgM,GAAbM,KAEF/X,KAAA0O,MAAA/B,KAAAC,EAAAC,0CAIRoL,GAAA,mxDC9IA,SAAAC,GAAAhK,GACI,OAAOrN,SAAPqN,EAOEiK,mBACF,SAAAA,EAAAtY,GAAmB,IAAAC,MAAA,mGAAAsY,CAAApY,KAAAmY,KACfnY,MAAAF,MAAAuY,GAAAF,GAAAhY,KAAAH,KAAAH,sDACAqB,MAAa,CACTG,WADS,EAETrH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQT8G,cARS,MASTC,YATJ,GAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAuV,MAAnBxY,KAhBeA,0PADUO,0DAoBjB+J,GAER,GADkBA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,YAAA,CAEA,IAAIC,EAAJzB,KACA2P,YAAY,CACRlO,mBADQoN,iBAERpN,cAFJkO,wBAGQ,SAAAxH,GACJ,IAAIoQ,EAAM,IAAI3F,OAAd4F,MAEIC,EAAOF,SAAX,iBACAE,sBAA0BtQ,EAA1BsQ,GAAqC,CAACC,QAAtCD,IACAA,iBAAqBtQ,EAArBsQ,GAAgC,CAACC,QAAjCD,IAEAF,gBAAkB,CAAC5V,KAAnB4V,cACM,SAAAI,GACFC,kBAAMD,EAAA,+BAAAlV,OAAyCiM,YAAcjO,EAAvDP,OAAN0X,cAZRjJ,MAcS,SAAAhO,GACLC,+EAKJsN,0BAA0BhN,IAA1BgN,uBAAyDlP,KAAzDkP,4DAIAA,6BAA6BhN,IAA7BgN,uBAA4DlP,KAA5DkP,8CAGK,IAxDbhB,EAwDa7L,EAAArC,KAELuB,EACEvB,KAHGkB,MAAAK,cAKL,OACAjB,EAAAC,EAAAC,cAAA,OAAKsP,IAAL,cAAuBpP,UAAWA,wBA9D1CwN,EA8D8E,cAAAzK,OAAtElC,GA7DCb,GAAU6B,eAAjB2L,KA8DU5N,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,sBAAiDoP,IAAjD,YACIxP,EAAAC,EAAAC,cAAA2P,EAAAzI,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA0W,iBAAAD,IACf9Y,KAFRkB,MAAA,CAGIM,aALZ,QAOIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,kBACIJ,EAAAC,EAAAC,cAAAkW,GAAAhP,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA2W,YAAAF,IACf9Y,KAFRkB,MAAA,CAGIM,aAZZ,gDAmBRyX,GAAA,wUC9FO,SAAAC,GAAAzN,EAAAC,EAAAC,EAAAjL,EAAAjH,GACH,IAAIiI,EAAJ,GAGIyX,EAAS,GAATA,EAAS,GAATA,EAAS,GAATA,EAHJ,GAIIC,EAAW3f,EAJf2f,SAKIC,EAAW5f,EALf4f,SAQIC,EAAchN,IARlB,OAUIO,EAVJ,KAeA,SAAA0M,EAAAvW,GAEI,OAAI6J,GAAcA,EAAlB7J,GACW6J,EAAP7J,GAEG,WAASsL,cAAT,QAAmCA,cAAnC,QAA6DA,cAApE,IAGJ7C,4BAEA,IAAI+N,EAASlL,SAzBb,SAyBA,EAEImL,EAAMnN,YACC,SAAAhB,GAAc,OAAOgO,EAAYhO,EAAnB8N,MADf9M,KAAV,MAIIoN,EAAMpN,qBACOkN,GADPlN,eAEOkN,GAFPlN,aA/BV,GA+BUA,SA/BV,MAqCIqN,EAAWlO,2EAEMhS,WAAoB,QAvCzC,IAuC2D0f,EAAcA,GAAhC,KAvCzC,IAuCyGA,EAAaA,IAFvG1N,uBAAf,GAMImO,EAAajO,IACjB,4BAAIlS,cAEAmgB,EAAalO,KAEjB,IAAIQ,EAAMyN,+BAEa,aAAAC,EAAA,SAEnBC,EAAWF,+BAEQ,sBAEvBzN,qCACAA,oCAEA,IAAIuI,EAAOvI,2CAEDuN,EAFCvN,uCAIO,SAAAZ,GAAc,OAAOiO,EAAOjO,OAAd+N,MAJrBnN,SAAXwN,GAOIhN,EAAYR,gDAAhB,UA6EA,SAAA4N,EAAAC,GAEIA,EAAAC,GAAA,aAA2B,SAAAtY,GAIvBwK,gEAoBR,SAAAxK,GAEI,+BAAIjI,YAAiD,CACjD,IAAIwgB,EAAJ,GACAA,GAAO,0BAAsCvY,eAAtC,YACPuY,GAAO,2CAAuDvY,aAA9DuY,WACAA,GAAO,kCAA8CvY,kBAArDuY,eACG,CACH,IAAIA,EAAJ,GACAA,GAAO,uBAAmCvY,aAA1CuY,WACAA,GAAO,kCAA8CvY,YAArDuY,WAEJ,OAAAA,EA7BcC,CAHVhO,4DAOAA,2DAEesN,GAFftN,aAGmBqN,EAAO7X,OAH1BwK,iCAQJ6N,gBAAyB,WACrBzN,8BAmBR,SAAA6N,EAAA7O,GACI,IAAIlD,EAAIkE,IAAetM,KAAfsM,SAARhB,GAEA,OADAtL,KAAAoa,SAAgBhS,EAAhB,GACO,SAAAH,GAAc,OAAOyR,EAAItR,EAAXH,KAoBzB,SAAAjF,EAAAsI,GACI,OAAOA,OAAP+N,GA1IJrZ,KAAA+N,QAAe,WACXtC,6BAEJzL,KAAA2M,KAAY,SAAA5K,EAAAsY,GACR,GAAAtY,EAAA,CAOA,GAHI2K,WAGJ,4BAAIjT,YACAoT,QACG,CACH,IAAIC,EAAJ,GAEIE,EAAJqN,EACIrN,GAAmBA,EAAe,KAAfA,kBACnBA,EAAe,KAAfA,yBAAuD,SAAAnF,GACnDiF,EAAiBjF,OAAjBiF,cAA2CjF,OAA3CiF,SAGRD,IAGJnL,IAEA,4BAAIjI,cACAogB,wGAKU,cAAqBnY,aAL/BmY,KAMAA,8CAGU,mBAA0BnY,YAHpCmY,wDAMAA,+CAGU,UAAiBnY,iBAH3BmY,yDAQJ,IAAIS,EAAahO,yBAAjB,QAEIiO,EAAQ9F,EAAZ/S,OACI8Y,EAAQf,EADZ/X,IAGA4Y,EAAaA,SAAbA,IAEAA,4BACU,SAAAhP,EAAAlD,GAAiBpI,KAAAoa,SAgE/B,SAAAhS,EAAAmS,EAAAC,EAAAxX,GACI,IAAAsI,EACA,OAAQA,EAKZ,SAAAlD,EAAAmS,EAAAC,EAAAxX,GACI,IAAIyX,EAAIF,EAARjS,OACA,OAAOF,GAAP,GAEI,IADA,IAAIsS,EAAI1X,EAAIwX,EAAZpS,IACSuS,EAAT,EAAgBA,EAAhBF,IAAAE,EACI,GAAI3X,EAAIuX,EAAJvX,MAAJ0X,EAAyB,OAAOH,EAAPI,GAVrBC,CAAaxS,EAAAmS,EAAAC,EAAlBxX,IAA4C,CAAC6X,WAAYvP,EAAbwP,SAAyBA,SAAUxP,EAA/EwP,WACAxP,EAkBX,SAAAlD,EAAAmS,EAAAC,EAAAxX,GACI,IAAI+X,EAAIP,EAARlS,OAAsBmS,EAAIF,EAA1BjS,OACA,OAAOF,EAAP2S,GAEI,IADA,IAAIL,EAAI1X,EAAIwX,EAAZpS,IACSuS,EAAT,EAAgBA,EAAhBF,IAAAE,EACI,GAAI3X,EAAIuX,EAAJvX,MAAJ0X,EAAyB,OAAOH,EAAPI,GAvBtBK,CAAa5S,EAAAmS,EAAAC,EAAlBxX,IAA4C,CAAC6X,WAAYvP,EAAbuP,WAA2BC,SAAUxP,EAAjFuP,YADN,KAlE2CI,CAAe7S,EAAAmS,EAAAC,EAAfS,IAAhB3P,IAD3BgP,YAEkB,SAAAhP,GAAe,OAAOiO,EAAOjO,OAAd+N,MAFjCiB,YAKAA,+BAlIJ,KAkIIA,0BAMAA,wBAxIJ,KAwIIA,iBAGAhO,kDAhEII,s/BC5DZ,IACI0B,GAAe,CACjBxC,UADiB,0BAEjBwN,SAFiB,UAGjBC,SAHF,QAMA,SAAA6B,GAAAhN,GACE,OAAOrN,SAAPqN,EAGF,SAAAiN,GAAAjN,GACE,OAAOxN,GAAU6B,eAAjB2L,GAIIkN,mBAEF,SAAAA,EAAAvb,GAAmB,IAAAC,MAAA,mGAAAub,CAAArb,KAAAob,KACjBpb,MAAAF,MAAAwb,GAAAF,GAAAjb,KAAAH,KAAAH,sDACAqB,MAAa,CACXG,WADW,EAEXrH,iBAFW,yBAGXoH,WAHW,WAIXtH,aAJW,GAKXqD,SALW,GAMX7C,SANW,GAOXG,MAPW,GAQX8G,cARW,MASXC,YATF,GAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAwY,MAAnBzb,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAwY,MAAtBzb,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAwY,MAA1Bzb,KArBiBA,0PAFAO,kEA2BjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA9Cc,KAgDhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,wCAA0FI,YAAc1P,KAAxGsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAwK,GAAUlZ,KAAVgP,eAAA,UAAAkM,GAAbM,IACAxb,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAIJxC,KAJIkB,MAENK,EAFMiB,EAAAjB,cAGNC,EAHMgB,EAAAhB,YAKR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,mBAA0ByN,GAAE,cAAA1K,OAA5ClC,MAEIC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,gBAAoCC,GAApCxC,UAAA,KAA8D8D,YAAc1P,KAA5EkB,OAF5B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADYzT,YAA9BuD,IAGA8P,oBAA8B,SAAAxH,GAC5B,IAAIsT,EAAoBtT,EAAxB,GACA1G,qBAFFkO,MAGS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,GACxB,IAAIkL,EAAY8O,YAAuBha,EAAvC7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAwK,GAAAzN,EAAA,UAAAyP,GAAbM,KAEFxb,KAAA0O,MAAA/B,KAAAC,EAA2B,CACzB+O,UADyB,UAEzBC,gBAFF,mDAORC,GAAA,wrDCrIA,IAgBAC,GAfI1N,GAAe,CACjBxC,UADiB,6BAEjBwN,SAFiB,QAGjBC,SAHiB,OAIjB0C,QAJF,iBAOA,SAAAC,GAAA9N,GACE,OAAOrN,SAAPqN,EAGF,SAAA+N,GAAA/N,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKIgO,mBAEF,SAAAA,EAAArc,GAAmB,IAAAC,MAAA,mGAAAqc,CAAAnc,KAAAkc,KACjBlc,MAAAF,MAAAsc,GAAAF,GAAA/b,KAAAH,KAAAH,sDACAqB,MAAa,CACXG,WADW,IAEXrH,iBAFW,yBAGXoH,WAHW,WAIXtH,aAJW,GAKXqD,SALW,GAMX7C,SANW,GAOXG,MAPW,GAQX8G,cARW,MASXC,YATF,IAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAsZ,MAAnBvc,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAsZ,MAAtBvc,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAsZ,MAA1Bvc,KArBiBA,0PAFEO,kEA2BnB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QAhDc,KAkDhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACV,IAAIiF,EAAcjF,EAAlBgF,OACIC,eAA2BrP,KAAAkB,MAA/BM,cAEAI,6BACA0N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,6CAA+FgN,YAAwBtc,KAAvHsP,6DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAwK,GAAUlZ,KAAVgP,eAAA,UAAAgN,GAAbO,IACAvc,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAKJxC,KALIkB,MAGNK,EAHMiB,EAAAjB,cAINC,EAJMgB,EAAAhB,YAOR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,qBAAgCyN,GAAE,cAAA1K,OAAlDlC,MAEIC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,gBAAoCC,GAApCxC,UAAA,KAA8D0Q,YAAwBtc,KAAtFkB,OAF5B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIhW,YAAtB8F,IAGA,IAAAic,GAAsB,CACpB,IAAI9L,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI0I,EAAY1I,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYkE,YAAcpP,EAA9B7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAwK,GAAAzN,EAAA,UAAAuQ,GAAbO,KAIFvc,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIRwP,GAAA,6tECjJA,SAAAC,GAAAvO,GACI,OAAO3L,eAAP2L,EAGJ,IAAIzN,GAAgB1D,cAChB2f,GAAatf,cACbuf,GAAoB,4BAAxB,kBACIC,GAAe,4BAAnB,kBAGMC,eACF,SAAAA,IAAc,IAAA/c,EAAA,OAAAgd,GAAA9c,KAAA6c,IACZ/c,EAAAid,GAAA/c,KAAAgd,GAAAH,GAAA1c,KAAAH,QAEAsD,QAAexD,EAAAwD,QAAAP,KAAAka,MAAfnd,KAHYA,cADOod,IAAM7c,+CAOnBwB,GACF7B,KAAAH,MAAJsd,WAA2Bnd,KAAAH,MAAAud,cAA3Bvb,GAEE7B,KAAAH,MAAAwd,WAAsB,CACpBC,YAAatd,KAAAH,MADO0d,GAEpBC,kBAAmBxd,KAAAH,MAFrBlB,yCAQF,OACE2B,EAAAC,EAAAC,cAAA,OAAKE,UAAL,iBAAgC4C,QAAStD,KAAzCsD,SACGtD,KAAAH,MAFL4d,mBAQAC,eAEF,SAAAA,EAAA7d,GAAmB,IAAAwC,EAAA,OAAAya,GAAA9c,KAAA0d,IACfrb,EAAA0a,GAAA/c,KAAAgd,GAAAU,GAAAvd,KAAAH,KAAAH,KACAqB,MAAa,CACTlH,iBADS,yBAEToH,WAFS,WAGTtH,aAHS,GAITqD,SAJS,GAKT7C,SALS,GAMTG,MANS,GAOTkjB,KAPS,iBAQTC,aARJ,IAWI/d,EAAJuB,aACIiB,EAAAnB,MAAAE,WAAwBvB,EAAxBuB,YAEAvB,EAAJ/F,eACIuI,EAAAnB,MAAApH,aAA0B+F,EAA1B/F,cAEA+F,EAAJ1C,WACIkF,EAAAnB,MAAA/D,SAAsB0C,EAAtB1C,UAEJkF,EAAAwb,sBAA6Bxb,EAAAwb,sBAAA9a,KAAAka,MAA7B5a,KAtBeA,cAFFhC,gEA6BT,IAQIrH,EATJkW,wBAAJ,gBACQlW,EAAOkW,uBAAX,SACAlW,eACAA,mBACAA,OAAYuJ,WAAZvJ,cACAkW,8BAGAA,wBAAJ,mBACQlW,EAAOkW,uBAAX,SACAlW,kBACAA,mBACAA,4FACAkW,8BAGJlP,KAAAuP,KAAAuO,OAAAC,iBAAA,QAA2C/d,KAA3C6d,sEAIA7d,KAAAuP,KAAAuO,OAAAE,oBAAA,QAA8Che,KAA9C6d,mHAMkBhc,GAClB,OAAIA,6CAAJ,CAGA,IAKAT,EAJI6c,EADYpc,uBAAhBnB,UACgBwd,MAAhB,KAEIC,EADYF,EAAUA,SAA1B,GACeG,MAAf,KAEgBC,EAAhB,GAAoCzS,EAApC,GACIgS,EAAJ,GAEA,QAAIO,KACA/c,aACAwK,EAAYgR,GAAauB,EAAzBvS,IACAgS,WACG,QAAIO,KACP/c,aACAid,EAAgB5d,GAAc0d,EAA9BE,IACAzS,EAAYgR,GAAauB,EAAzBvS,SACG,QAAIuS,KACP/c,iBACAid,EAAgB5d,GAAc0d,EAAd1d,UAAiC0d,EAAjDE,IACAzS,EAAYgR,GAAauB,EAAzBvS,IACAgS,EAAY,KAAAna,OAAQ0a,EAAR,QAAA1a,OAAuB0a,EAAnCP,QACG,SAAIO,KAMP,OALA/c,iBACAid,EAAgB3B,GAAWyB,EAA3BE,IACAzS,mBACAgS,EAAY,KAAAna,OAAQ0a,EAApBP,IAKJ,GAAAhS,EAAA,CAKA,IAAA5J,EACA,GAFAH,mBAEA,YAAIT,GAEA,GADAY,EAAW,CAACZ,WAAZY,GACIhC,KAAAkB,MAAAE,YAAyBY,EAAzBZ,YACGpB,KAAAkB,MAAAyc,MADP/R,EAEI,YACD,eAAIxK,GAKP,GAJAY,EAAW,CACPZ,WADOA,EAEPtH,aAAcukB,EAFlBrc,MAIIhC,KAAAkB,MAAAE,YAAyBY,EAAzBZ,YACGpB,KAAAkB,MAAApH,cAA2BkI,EAD9BlI,cAEGkG,KAAAkB,MAAAyc,MAFP/R,EAGI,YACD,mBAAIxK,IACPY,EAAW,CACPZ,WADOA,EAEPtH,aAAcukB,EAFPvkB,aAGPqD,SAAUkhB,EAHHlhB,SAIP7C,SAAU+jB,EAJdrc,UAMIhC,KAAAkB,MAAAE,YAAyBY,EAAzBZ,YACGpB,KAAAkB,MAAApH,cAA2BkI,EAD9BlI,cAEGkG,KAAAkB,MAAAc,UAAuBA,EAF1B7E,UAGG6C,KAAAkB,MAAAyc,MAHP/R,GAII,OAGR5J,SAIAC,YAAmBC,IAADwE,sBAAlBzE,GAIAD,iBACAhC,KAAA8B,SAAAE,sCAIA,IA/KRkM,EA+KYyK,EAAU,CACV,CACI2F,KADJ,IAEI3f,MAFJ,oBAIIga,QAASgE,OAAsB,SAAA4B,EAAAC,GAC3B,MAAO,CACHF,KAAI,KAAA7a,OADD+a,GAEH7f,MAFG4f,EAGHhB,GAAE,KAAA9Z,OAHN+a,OAOR,CACIF,KADJ,GAEI3f,MAFJ,uBAGIga,QAAS8F,GAAAC,IAAkB,SAAAtb,EAAAgF,GACvB,MAAO,CACHkW,KAAI,KAAA7a,OADD2E,GAEHzJ,MAAOyE,EAFJpG,KAIH2b,QAASgE,OAAsB,SAAA4B,EAAAC,GAC3B,MAAO,CACHF,KAAI,KAAA7a,OAAA2E,EAAA,KAAA3E,OADD+a,GAEH7f,MAFG4f,EAGHhB,GAAE,KAAA9Z,OAAA2E,EAAA,KAAA3E,OAHN+a,WAoCpB,OACIle,EAAAC,EAAAC,cAAA,OAAKE,UAAW,EA1O5BwN,EA0OuCuO,GAAX,eAzOnB5b,SAAPqN,GAyOgEuO,GAAtC,gBAAAkC,KAAhB,KAA2F7O,IAA3F,UACIxP,EAAAC,EAAAC,cAAAoe,GAAAre,EAAA,CAAWqd,aAAc5d,KAAAkB,MAAzB0c,aAAkDjF,QAAlDA,EAAoEkG,cAF5EC,eAQRC,GAAA,unCCrNA,SAAAC,GAAA9Q,GACI,OAAOrN,SAAPqN,EAGJ,SAAA+Q,GAAA/Q,GACI,OAAOxN,GAAU6B,eAAjB2L,GAGEgR,mBACF,SAAAA,EAAArf,GAAmB,IAAAC,MAAA,mGAAAqf,CAAAnf,KAAAkf,KACflf,MAAAF,MAAAsf,GAAAF,GAAA/e,KAAAH,KAAAH,sDACAqB,MAAa,CACTG,WADS,EAETrH,iBAFS,yBAGToH,WAHS,WAITtH,aAJS,GAKTqD,SALS,GAMT7C,SANS,GAOTG,MAPS,GAQTkjB,KARS,iBASTpc,cATS,MAUTC,YAVJ,GAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAsc,MAAnBvf,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAsc,MAA1Bvf,KAnBeA,0PADUO,kEAwBzB,IAAIoB,EAAJzB,KACAA,KAAA2O,kBAAyBM,YAAY,WACjCxN,4BApCU,KAuCdyN,0BAA0BhN,IAA1BgN,uBAAyDlP,KAAzDkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,sBAAwDlP,KAAxDkP,oBAEAlP,KAAAsf,wEAIApQ,6BAA6BhN,IAA7BgN,uBAA4DlP,KAA5DkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,sBAA2DlP,KAA3DkP,iEAIFlP,KAAAsf,0EAIE1d,4CACA,IAAIH,EAAJzB,KACIuf,EAAWrZ,WAAWA,eAAelG,KAAzCkB,QAEI6O,EAAc,CACd9T,YADcsjB,GAEdhkB,YAFcgkB,GAGdjjB,YAHJijB,IAMA5P,oBAA8B,SAAAxH,GAC1B,IAAIqJ,EAAarJ,EAAjB,GACImP,EAAcnP,EAAlB,GACIqX,EAAgBrX,EAApB,GAEAvG,4BACAA,6BACAA,+BAEA,IAAI6d,EAAmBhO,YAAoBD,EAA3C+N,GACIG,EAAoBC,YAA2BrI,EAAnDiI,GACIK,EAAsBlE,YAAuB8D,EAAjDD,GAEIvd,EACgB0d,KADLlI,iBAAXxV,EAEqB4d,KAFV5O,QAAXhP,EAGoByd,KAHxBzO,QAMAvP,gCAAqCO,EAArCP,IACAA,qCAA0CO,EAA1CP,IACAA,oCAAyCO,EAAzCP,IAEAG,kCACAA,mCACAA,uCAzBJ+N,MA2BS,SAAAhO,GAAK,OAAIC,cAAJD,yCAGNyI,GAER,GADkBA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,YAAA,CAFe,IAKXmc,EACA3d,KANWkB,MAAAyc,KAQXkC,EAAW,wBAAApc,OAA2Bka,iBAA3B,UAAAla,OAAwDiM,YADvE1P,KACekB,OAAf,KACI4e,EAAJ,GACA,kBAAInC,EACAmC,EAAoB,CAChB9f,KAAA+f,eADgBlR,iBAEhB7O,KAAAggB,eAFJF,kBAIG,kBAAInC,EACPmC,EAAoB,CAChB9f,KAAAigB,eADgBpR,iBAEhB7O,KAAAkgB,eAFJJ,kBAIG,WAAInC,EACPmC,EAAoB,CAChB9f,KAAAmgB,iBADgBtR,iBAEhB7O,KAAAogB,iBAFJN,kBAIG,qBAAInC,EACPmC,EAAoB,CAChB9f,KAAAqgB,kBADgBxR,iBAEhB7O,KAAAsgB,kBAFJR,kBAIG,gBAAInC,IACPmC,EAAoB,CAChB9f,KAAAugB,gBADgB1R,iBAEhB7O,KAAAwgB,gBAFJV,mBAKJnQ,oBAAoC,SAAAxH,GAChC,IAAIoQ,EAAM,IAAI3F,OAAd4F,MAEIC,EAAOF,SAAXsH,GACApH,oBAAwBtQ,EAAxBsQ,GAAmC,CAACC,QAApCD,IACAA,oBAAwBtQ,EAAxBsQ,GAAmC,CAACC,QAApCD,IAEAF,gBAAkB,CAAC5V,KAAnB4V,cACM,SAAAI,GACFC,kBAAMD,EAAA,GAAAlV,OAAAoc,EAANjH,aATRjJ,MAWS,SAAAhO,GACLC,8EAIWwI,GACf,IAAIpI,EAAWoI,EAAfgF,OACApP,KAAA8B,SAAAE,GAEA,IAAIye,EAAeva,WAAWA,eAA9BlE,IACAye,mBAEAxe,YAAmBC,IAADC,cAAlBF,GACAA,YAAmBC,IAAD4C,YAAlB7C,yDAKA,OACI3B,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,qBACI7N,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,oBACI7N,EAAAC,EAAAC,cAAA,WADJ,WAEIF,EAAAC,EAAAC,cAAA,OAAKsP,IAAL,kBALZ,EAEI,MAKIxP,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,8BACI7N,EAAAC,EAAAC,cAAA,WADJ,qBAEIF,EAAAC,EAAAC,cAAA,OAAKsP,IAAL,uBATZ,EAEI,MASIxP,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,yBACI7N,EAAAC,EAAAC,cAAA,WADJ,gBAEIF,EAAAC,EAAAC,cAAA,OAAKsP,IAAL,sBAbZ,EACA,wCAkBK,IAAAzN,EAAArC,KAAAwC,EAWDxC,KAXCkB,MAEDyc,EAFCnb,EAAAmb,KAKDpc,GALCiB,EAAAnB,WAAAmB,EAAAxI,iBAAAwI,EAAAjB,eAAAiB,EAAApB,WAAAoB,EAAA1I,aAAA0I,EAAArF,SAAAqF,EAAAlI,SAAAkI,EAAA/H,MAaL,OACI6F,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,6BAAwCyN,GAAE,cAAA1K,OAA1DlC,KAkCIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,QACI7N,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAmBzN,GAAnC,mBACIJ,EAAAC,EAAAC,cAAAue,GAFR,OAKgBpB,qBACArd,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAmBzN,GAAnC,oBACIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,2CACoBJ,EAAAC,EAAAC,cAAA,QAAME,UAAN,cAA8BggB,YA5C9E1gB,KA0CwBkB,SAKQlB,KALR2gB,8BAYIrgB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,uBACIJ,EAAAC,EAAAC,cAAA2P,EAAAzI,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA0d,eAAAjH,IACf9Y,KAFRkB,MAAA,CAGIM,aAhBZ,QAkBIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,kBACIJ,EAAAC,EAAAC,cAAAkW,GAAAhP,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA2d,eAAAlH,IACf9Y,KAFRkB,MAAA,CAGIM,aA5B5B,SAiCgBmc,qBACArd,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAmBzN,GAAnC,oBACIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,8BAAqCA,GAArD,sCACoBJ,EAAAC,EAAAC,cAAA,QAAME,UAAN,cAA8BgP,YAxE9E1P,KAuE4BkB,QADJ,YAKQlB,KALR2gB,8BAYIrgB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,uBACIJ,EAAAC,EAAAC,cAAAgc,GAAA9U,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA4d,eAAAnH,IACf9Y,KAFRkB,MAAA,CAGIM,aAhBZ,QAkBIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,kBACIJ,EAAAC,EAAAC,cAAAkW,GAAAhP,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA6d,eAAApH,IACf9Y,KAFRkB,MAAA,CAGIM,aAxD5B,SA6DgBmc,cACArd,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAmBzN,GAAnC,oBACIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,qDAC+BkgB,YApG3D5gB,KAkGwBkB,QAKQlB,KALR2gB,8BAYIrgB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,uBACIJ,EAAAC,EAAAC,cAAAyX,GAAAvQ,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA8d,iBAAArH,IACf9Y,KAFRkB,MAAA,CAGIM,aAhBZ,QAkBIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,kBACIJ,EAAAC,EAAAC,cAAA+W,GAAA7P,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAA+d,iBAAAtH,IACf9Y,KAFRkB,MAAA,CAGIM,aApF5B,SA0FgBmc,wBACArd,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAmBzN,GAAnC,oBACIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,8CACwBgP,YAjIpD1P,KA+HwBkB,QAKQlB,KALR2gB,8BAYIrgB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,uBACIJ,EAAAC,EAAAC,cAAAqb,GAAAnU,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAAge,kBAAAvH,IACf9Y,KAFRkB,MAAA,CAGIM,aAhBZ,QAkBIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,kBACIJ,EAAAC,EAAAC,cAAAkW,GAAAhP,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAAie,kBAAAxH,IACf9Y,KAFRkB,MAAA,CAGIM,aAjH5B,SAsHgBmc,mBACArd,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAmBzN,GAAnC,oBACIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,yCACmBgP,YA7J/C1P,KA4J4BkB,OAC6CZ,EAAAC,EAAAC,cAAA,KAFjD,OAKQR,KALR2gB,8BAYIrgB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,uBACIJ,EAAAC,EAAAC,cAAAoR,EAAAlK,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAAke,gBAAAzH,IACf9Y,KAFRkB,MAAA,CAGIM,aAhBZ,QAkBIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,GAAhB,kBACIJ,EAAAC,EAAAC,cAAAkW,GAAAhP,OAAAmR,OAAA,CACI/I,IAAK,SAAAgJ,GAAczW,EAAAme,gBAAA1H,IACf9Y,KAFRkB,MAAA,CAGIM,aAhLpC,kDA0LRqf,GAAA,44CChZA,IAqBAC,GApBI1S,GAAe,CACjBxC,UADiB,4BAEjBC,WAFiB,cAGjBqB,wBAHiB,EAIjBpB,OAAQ,SAAAR,GACN,OAAOA,EAAP+E,OAEFrE,aAAc,SAAAqE,GACZ,OAAAA,IAIJ,SAAA0Q,GAAA7S,GACE,OAAOrN,QAAPqN,EAGF,SAAA8S,GAAA9S,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKIK,mBAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAAmhB,CAAAjhB,KAAAuO,KACjBvO,MAAAF,MAAAohB,GAAA3S,GAAApO,KAAAH,KAAAH,sDACAqB,MAAa,CACXqG,UADW,MAEXC,WAFW,KAGXF,kBAAmB,oHAHR,0BAeXlG,WAfW,WAgBXtH,aAhBW,GAiBXqD,SAjBW,GAkBX7C,SAlBW,GAmBXG,MAnBW,GAoBX8G,cApBW,MAqBXC,YArBF,GAuBAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAoe,MAAnBrhB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAoe,MAAtBrhB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAoe,MAA1BrhB,KAhCiBA,0PAFAO,kEAsCjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QAhEc,KAkEhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,gDAAkGgN,YAAwBtc,KAA1HsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAlD,EAAUxL,KAAVgP,eAAA,UAAA+R,GAAbK,IACAphB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAIJxC,KAJIkB,MAENK,EAFMiB,EAAAjB,cAGNC,EAHMgB,EAAAhB,YAMR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAuBA,GAAE,cAAA1K,OAAzClC,MAEMC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,gBAAoCC,GAApCxC,UAAA,KAA8D0Q,YAAwBtc,KAAtFkB,OAF9B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIvW,YAAtBqG,IAGA,IAAAihB,GAAsB,CACpB,IAAI9Q,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI0I,EAAY1I,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYyU,YAAwB3f,EAAxC7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAlD,EAAAC,EAAA,UAAAsV,GAAbK,KAEFphB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIRsU,GAAA,+wBC7KO,SAAAC,GAAA9V,EAAAC,EAAAC,EAAAjL,EAAAjH,GACLA,IACEA,MAKFgS,4BAEE,IAAIQ,EAAe,iBAAnB,OAEIC,EAAMT,2EAEW,eAFXA,uBAAV,GAKIU,EAAaC,YAAjB1L,GAEI8gB,EAAUtV,SAAd,KAEIQ,EAAYR,+BACK,uBADLA,kCAAhB,UAKAlM,KAAA2M,KAAY,SAAA8U,EAAA5U,GACV,IAAID,EAAJ,GACA,GAAA6U,EAAA,CAIE/U,WAGF,IAAI,IAAItE,EAAIqZ,SAAZ,EAAwCrZ,GAAxC,EAAiDA,GAAjD,EACEwE,OAAe6U,EAAf7U,IAEF,IAAKxE,GAAG,EAARA,EAAgBA,EAAIqZ,EAApBnZ,OAA4CF,GAA5C,EACEwE,OAAe6U,EAAf7U,IAIF,IAAIE,EAAJ,GAEIE,EAAJH,EACIG,GAAmBA,EAAe,KAAfA,kBACnBA,EAAe,KAAfA,yBAAuD,SAAAnF,GACvDiF,EAAiBjF,OAAjBiF,MAAmCjF,OAAnCiF,SAYJ,IAAI4U,EAAJ,EACA,IAAStZ,EAAT,EAAgBA,EAAIwE,EAApBtE,OAAsCF,IACpCsZ,GAAc9U,KAAd8U,OAGF,SAAAA,EAAAF,GACE,IASAG,EACAnI,EACAoI,EACAC,EAAAC,EAAAC,EAZIC,EAAO,ycAAX,OAEIN,EAAaM,EAAOA,SAAxB,IACIpgB,8BAA+BogB,EAAOA,SAAtCpgB,IAGA8f,EAAJ,GACE9f,iCAOA,IAAK,IAAIwG,EAAT,EAAgBA,EAAI4Z,EAApB1Z,OAAmCF,IAC/B,GAAI4Z,MAAJN,EAA6B,CACzBC,EAAOvZ,EAAPuZ,EACA,MAQR,IAJAnI,EAAS,GAATA,EAGAoI,KACSxZ,EAAT,EAAgBA,EAAhBuZ,EAA0BvZ,IAKxB,GADA0Z,GAAK,EAAAH,EAAS,EAATvZ,EAAD,IAAsB,EAA1B0Z,GACA,IAHAD,EAAI/M,SAAU4M,EAAYM,EAAOL,EAApB,GAA4BrT,KAA5B2T,IAAqC,EAAE3T,UAAU,GAAK,EAAAqT,EAAS,EAATvZ,EAAnEyZ,OAIED,OAAa,CACXG,MAAOzT,QADI,EAEXjC,EAAG,KAFQyV,EAGXvV,EAHFqV,SAMA,IAAK,IAAIjH,EAAT,EAAgBA,EAAhBkH,EAAuBlH,IAIrBoH,EAASpH,GAAIrM,QAAQ,EAAIA,SAASkL,EAA1BsI,KAAsCD,EAAtC,GAA6CvT,SAASkL,EAA9DuI,GACAH,OAAa,CACXG,MADWA,EAEX1V,EAAGyV,EAAExT,SAAFwT,GAFQ,KAGXvV,EAAGuV,EAAExT,SAHPsT,KAUN,GADAE,GAAG,EAAAH,EAAD,IAAgB,EAAlBG,GACA,IAFAD,EAAEH,EAAWE,EAAbC,QAGID,OAAa,CACXG,MAAOzT,QADI,EAEXjC,EAAG,KAFQyV,EAGXvV,EAHFqV,SAOA,IAASjH,EAAT,EAAgBA,EAAhBkH,EAAuBlH,IACnBoH,EAAOpH,GAAIrM,QAAQ,EAAIA,SAASkL,EAA1BsI,KAAuCD,EAAvC,GAA+CvT,SAASkL,EAA9DuI,GACAH,OAAa,CACXG,MADWA,EAEX1V,EAAGyV,EAAExT,SAAFwT,GAFQ,KAGXvV,EAAGuV,EAAExT,SAHPsT,KAeR,SAAAM,EAAAhW,EAAA9D,GAvFJ,IAAAkD,EAwFMY,qBAEAC,iDAGAA,QA7FNb,EA6FqCsB,EAADxE,GA5FzBkD,EAAPtO,OA4FEmP,aACoBG,IAADmB,MADnBtB,kBAEmBG,UAAD,GAFlBH,MAIF,SAAAgW,EAAAjW,GACEA,oBAEAC,gDApBFyV,OAAa,SAAArhB,EAAAqU,GACX,SAAA7S,EAAAsK,GACE,OAAOA,QAAUiC,QAAjB,EAEF,OAAOvM,KAAWA,EAAlBxB,KAqBFihB,iKAMA,IAAIY,EAAJ,EACA,IAASha,EAAT,EAAgBA,EAAIwE,EAApBtE,OAAsCF,IAAK,CAEzC,IAAIia,EAAWb,0BACC1T,EAA0BlB,eAAD5P,KAD1BwkB,cAED5U,KAFd5P,MAOA,IAHAqlB,iBAAyBH,cAAzBG,kBACkBF,YADlBE,IAGS1H,EAAT,EAAgBA,EAAI/N,KAApByD,MAAwCsK,IAAMyH,IAC5CC,6BACcT,WADdS,aAEc,KAAO,KAAKT,KAAZrV,GAFd8V,gBAGa7I,IAIrB8I,CAAmBZ,EAAnBY,QA5JE5V,sCAuBF,SAAAoB,EAAAD,EAAAzF,GACE,OAAO0E,EAAiBe,aAAjBf,KAA6Cb,EAAa7D,EAAE6D,EAAnE3D,UAuIJtI,KAAA+N,QAAe,WACb7B,29BC3KN,IAaAqW,GAZInU,GAAe,CACjBxC,UADF,kCAIA,SAAA4W,GAAAtU,GACE,OAAOrN,SAAPqN,EAGF,SAAAuU,GAAAvU,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKIwU,mBAEF,SAAAA,EAAA7iB,GAAmB,IAAAC,MAAA,mGAAA6iB,CAAA3iB,KAAA0iB,KACjB1iB,MAAAF,MAAA8iB,GAAAF,GAAAviB,KAAAH,KAAAH,sDACAqB,MAAa,CACXG,WADW,IAEXrH,iBAFW,yBAGXoH,WAHW,WAIXtH,aAJW,GAKXqD,SALW,GAMX7C,SANW,GAOXG,MAPW,GAQX8G,cARW,MASXC,YATF,GAYAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAA8f,MAAnB/iB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAA8f,MAAtB/iB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAA8f,MAA1B/iB,KArBiBA,0PAFMO,kEA2BvB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA7Cc,KA+ChByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,4CAA8FgN,YAAwBtc,KAAtHsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAA6S,GAAUvhB,KAAVgP,eAAA,UAAAwT,GAAbM,IACA9iB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAKJxC,KALIkB,MAGNK,EAHMiB,EAAAjB,cAINC,EAJMgB,EAAAhB,YAMR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWA,yBAAoCyN,GAAE,cAAA1K,OAAtDlC,MAEMC,QAAwBlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,gBAAoCC,GAApCxC,UAAA,KAA8D0Q,YAAwBtc,KAAtFkB,OAF9B,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIhW,YAAtB8F,IAGA,IAAA0iB,GAAsB,CACpB,IAAIvS,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI0I,EAAY1I,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYkE,YAAcpP,EAA9B7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAA6S,GAAA9V,EAAA,UAAA+W,GAAbM,KAEF9iB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIR+V,GAAA,2pDCzIA,IAYAC,GAZoBjmB,cAIpB,SAAAkmB,GAAA/U,GACE,OAAOrN,QAAPqN,EAGF,SAAAgV,GAAAhV,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKF,IAAIE,GAAe,4BAObG,eAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAAqjB,CAAAnjB,KAAAuO,KACjBvO,MAAAF,MAAAsjB,GAAA7U,GAAApO,KAAAH,KAAAH,sDACAqB,MAAa,CACXqG,UADW,MAEXC,WAFW,KAGXF,kBAAmB,oHAHR,0BAeXlG,WAfW,WAgBXtH,aAhBW,GAiBXqD,SAjBW,GAkBX7C,SAlBW,GAmBXG,MAnBW,GAoBX8G,cApBW,MAqBXC,YArBF,IAwBAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAsgB,MAAnBvjB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAsgB,MAAtBvjB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAsgB,MAA1BvjB,KAjCiBA,0PAFAO,kEAwCjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA9Dc,KAgEhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIIlB,KAAJ0O,QACE1O,KAAA0O,MAAAX,UACA/N,KAAA0O,MAAA,MAEFQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,gDAAkGI,YAAc1P,KAAhHsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAlD,EAAUxL,KAAVgP,eAAA,UAAbiU,IACAjjB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAAAhN,EAIJxC,KAJIkB,MAENK,EAFMiB,EAAAjB,cAGNC,EAHMgB,EAAAhB,YAKR,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,mBAAuBA,GAAE,cAAA1K,OAAzClC,KAEMC,GAAelB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,GAAhB,gBAAoCC,GAApC,KAA8DsB,YAAc1P,KAA5EkB,OAFrB,OAIEZ,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GAPnB,8CAaG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADI5V,YAAtB0F,IAGA,IAAAmjB,GAAsB,CACpB,IAAIhT,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI8H,EAAY9H,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAY0W,YAAwB5hB,EAAxC7B,GAEKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAlD,EAAAC,EAAA,UAAbwX,KACFjjB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIRuW,GAAA,GC9KO,SAAAC,GAAA/X,EAAAC,EAAAC,EAAAjL,EAAAjH,GACLA,IACIA,MAIJgS,4BAEE,IAEIQ,EAAe,iBAAnB,OAEIC,EAAMT,2EAEWhS,WAAoB,eAF/BgS,uBAAV,GAKIU,EAAaC,YAAjB1L,GAEI2L,EAAIC,iBACM,CAZd,GAJFZ,MAkBMa,EAAID,iBACM,CAlBhBX,IAIE,MAgBIe,EAAYR,+BACK,sBADLA,kCAAhB,UAKAlM,KAAA2M,KAAY,SAAA8W,EAAA5W,GAgBV,GAdAX,kCACAA,gFAGaR,KAHbQ,kBAKQzS,EALRyS,UAaAuX,EAAA,CAIE/W,WAEF,IAAII,EAAJ,GAEME,EAAJH,EACIG,GAAmBA,EAAe,KAAfA,kBACnBA,EAAe,KAAfA,yBAAuD,SAAAnF,GACvDiF,EAAiBjF,OAAjBiF,MAAmCjF,OAAnCiF,SAoBNT,SAASoX,MAAmB,SAAA/gB,GAAI,OAAIA,EAAJ6E,aAEhC,IAAI0F,EAAU,GAAd,KACIxT,EAAJyT,yBACED,KAAaX,IAAOmX,MAAmB,SAAA/gB,GAAI,OAAI4J,IAAO5J,EAAP4J,KAAkB,SAAAhB,GAAc,OAAO8B,WAAW3T,SAAlB6R,SAA/E2B,GAEFV,YAEA,IAAImX,EAAYxX,+BAAhBuX,GACAC,yEAMIC,EAAWD,mCAEE,SAAApY,GAAC,mBAAA7H,OAAiBmgB,YAA6BtY,EAA9C/D,cAFHmc,iBAGM,SAAApY,GAAA,mBAAA7H,OAAoB4I,EAAEf,EAAtB/D,WAAA,WAErBoc,4BACiBjjB,EAAU6B,eAD3BohB,uBAEa,GAACtX,EAADwX,YAFbF,aAGaG,IAHbH,aAIiBtX,gBAJjBsX,iBAKkB,KAElBA,uFAEkCtX,gBAFlCsX,eAEwDG,GAFxDH,uDAKU,SAAArY,GAAC,OAAIA,EAAJ/D,YAEXoc,4CAGAA,gDAGAA,oDAGA,IAAK,IAAIvb,EAAT,EAAgBA,EAAIqb,EAApBnb,OAA2CF,IAAM,CAC/C,IASIub,EATApc,EAAYkc,KAAhBlc,UACIqF,EAAY6W,KAAhB/hB,KAEIqiB,EAAOzX,iBACG,GAAID,gBADPC,WAEDM,MAAc,SAAAtB,GACpB,OAAOA,EAAPtO,QAKAwP,GAFAmX,EAAWzX,iCAA4B0X,YAA3Crc,MAEaoc,OAAb,kBACIlX,EAAakX,SAAjB,sBACIK,EAAiBL,SAArB,0BAEIrW,EAAOd,uBAAqB9L,EAArB8L,cAAXI,GAEAU,6CAGa,SAAAhC,GACT,OAAOiB,EAAP,KAJJe,qDAWAA,sCAEmB,SAAAhC,GAAA,OAAO5K,iBAA6B4K,EAApCtO,OAFnBsQ,SAGe,SAAAhC,EAAAlD,GACT,OAAO2b,EAAKzY,EAALyY,MAAaA,cAApB,IAJNzW,aAMmByW,gBANnBzW,eAOkB,SAAAhC,EAAAlD,GAAA,OAASmF,EAAYjC,EAArBlD,KAPlBkF,eAQqB,SAAAhC,EAAAlD,GACbkE,6BAEAH,iDAGAA,OAAgBqB,EAAclC,IAA9Ba,aACoBG,IAADmB,MADnBtB,kBAEmBG,UAAD,GAFlBH,QAdRmB,cAkBoB,SAAAhC,GACZgB,4BAEAH,kDArBRmB,SAyBe,SAAAhC,GACT,OAAOiB,EAAP,KA1BNe,iBA8BEd,uBAAqB9L,EAArB8L,6BACgB,SAAAlB,EAAAlD,GAAA,OAAUmF,EAAYjC,EAAtBlD,KADhBoE,oCAIa,SAAAlB,GACT,OAAOiB,EAAEmB,OAAOjU,SAAhB6R,OALJkB,cAOkB,SAAAlB,GACd,OAtLZK,IAsL4BY,EAAEmB,OAAOjU,SAAzB6R,OAIJ,IAAI2Y,EAAeD,uBAA6BtjB,EAA7BsjB,kBAAnBpX,GACAqX,wEAMAA,sCACiBvjB,EADjBujB,qBAEa,SAAA3Y,GACT,OAAOyY,EAAKzY,EAALyY,MAAaA,cAApB,IAHJE,8DAOa,SAAA3Y,GACT,OAAOiB,KAAP,KAEJyX,uBAA6BtjB,EAA7BsjB,0BACQ,SAAA1Y,GACJ,MAAO,gBAAA4Y,KAAqB5Y,EAArBtO,MAAP,KAIJ,IAAI2Q,EAAWlB,uBAAyB/L,EAAzB+L,kBAAfG,GACAe,6CAGa,SAAArC,GACT,OAAOiB,KAAP,IAJJoB,oCASAA,sCACiBjN,EADjBiN,qBAEa,SAAArC,GACT,OAAOyY,EAAKzY,EAALyY,MAAaA,cAApB,IAHJpW,8DAOa,SAAArC,GACT,OAAOiB,KAAP,IAEJE,uBAAyB/L,EAAzB+L,0BACQ,SAAAnB,GACJ,OAAO7R,eAAqBA,SAA5B6R,MAFJmB,oCAMa,SAAAnB,GACT,OAAOiB,EAAEmB,OAAOjU,SAAT8S,KAAP,UAlMNG,sCAkBF,SAAAa,EAAAjC,EAAAlD,GACI,OALJ,SAAAyF,EAAAzF,GACE,OAAO0E,EAAiBe,aAAjBf,KAA6Cb,EAAa7D,EAAE6D,EAAnE3D,QAISwF,CAA0BxC,YAADtO,KAAhCoL,GAGJ,SAAAoF,EAAAlC,EAAAlD,GACE,OAAI3O,EAAJsT,eACSzB,aAAiB7R,eAAqBA,SAA7C6R,IAEOxB,YAAgBwB,YAAhBxB,YAA4CrQ,eAAqBA,SAAxE6R,MA4KNtL,KAAA+N,QAAe,WACb7B,8pDCtON,IAmBAiY,GAjBI/V,GAAe,CACjBgW,SADiB,sCAEjBC,UAFiB,gBAGjBvY,OAAQ,SAAAR,GAAC,OAAIA,EAAJ+E,OACTrE,aAAc,SAAAqE,GAAK,OAAAA,GACnBnD,wBALiB,EAMjB6O,QANF,gBASA,SAAAuI,GAAApW,GACE,OAAOrN,QAAPqN,EAGF,SAAAqW,GAAArW,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKIK,mBAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAA0kB,CAAAxkB,KAAAuO,KACjBvO,MAAAF,MAAA2kB,GAAAlW,GAAApO,KAAAH,KAAAH,sDACAqB,MAAa,CACXwI,WAAY,kBADD,MAEXC,YAAa,gBAFF,MAGXrC,kBAAmB,0FAHR,0BAeXlG,WAfW,WAgBXtH,aAhBW,GAiBXqD,SAjBW,GAkBX7C,SAlBW,GAmBXG,MAnBW,GAoBX8G,cApBW,MAqBXC,YArBF,IAwBAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAA2hB,MAAnB5kB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAA2hB,MAAtB5kB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAA2hB,MAA1B5kB,KAjCiBA,0PAFAO,kEAuCjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA/Dc,KAiEhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,gDAAkGgN,YAAwBtc,KAA1HsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAA8U,GAAUxjB,KAAVgP,eAAA,UAAAsV,GAAbK,IACA3kB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAGNjO,EACEvB,KAJIkB,MAAAK,cAKR,OACIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,wBAA4BA,GAAE,cAAA1K,OAA9ClC,KAEEjB,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GALnB,8CAWG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIvW,YAAtBqG,IAWA,GARAuO,sBAA2BvO,aAA3BuO,oCAAuEvO,wBAA4B,SAAA+kB,GAAI,MAAI,gBAAAV,KAAAU,GAAJ,KAAhC/kB,KAAvEuO,OAEA,YAAIvO,aACFuO,4DAEAA,kDAAuDkO,YAAvDlO,KAGF+V,GAAsB,CACpB,IAAInU,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI0I,EAAY1I,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYiY,YAAuCnjB,EAAvD7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAA8U,GAAA/X,EAAA,UAAA6Y,GAAbK,KAEF3kB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIR8X,GAAA,mcClLO,SAAAC,GAAAtZ,EAAAC,EAAAC,EAAAjL,EAAAjH,GACLA,IACIA,MAIJgS,4BAEE,IAEIQ,EAAe,iBAAnB,OAEIC,EAAMT,2EAEW,eAFXA,uBAAV,GAKIU,EAAaC,YAAjB1L,GAEI2L,EAAIC,iBACM,CAZd,GAJFZ,MAkBMa,EAAID,iBACM,CAlBhBX,IAIE,MAgBIe,EAAYR,+BACK,sBADLA,kCAAhB,UAKAlM,KAAA2M,KAAY,SAAA8W,EAAA5W,GAUV,GARAX,kCACAA,gFAGaR,KAHbQ,kBAKQzS,EALRyS,UAOAuX,EAAA,CAIE/W,WAEF,IAAII,EAAJ,GAEME,EAAJH,EACIG,GAAmBA,EAAe,KAAfA,kBACnBA,EAAe,KAAfA,yBAAuD,SAAAnF,GACvDiF,EAAiBjF,OAAjBiF,MAAmCjF,OAAnCiF,SAoBN,IAAIkY,EAAoBvB,MAAmB,SAAA/gB,GACzC,IAAIkK,EAAYlK,EAAhBhB,KACA,OAAAujB,GAAA,GAAAviB,EAAA,CAEEhB,KAAM,CAAAujB,GAAA,GACDrY,EADC,IAEJsY,MAAOzrB,SAAemT,EAAfnT,IAA+BA,SAAemT,EAJzD,WASFP,SAASoX,MAAmB,SAAA/gB,GAAI,OAAIA,EAAJ6E,aAEhC,IAAI0F,EAAU,MAAd,KACIxT,EAAJyT,yBACED,KAAaX,IAAO0Y,MAAsB,SAAAtiB,GAAI,OAAI0K,WAAW1K,UAAfwiB,UAA9CjY,EACAA,KAAaX,IAAO0Y,MAAsB,SAAAtiB,GAAI,OAAI0K,WAAW1K,UAAfwiB,UAA9CjY,GAEFV,YAEA,IAAImX,EAAYxX,+BAAhB8Y,GACAtB,yEAMIC,EAAWD,mCAEE,SAAApY,GAAC,mBAAA7H,OAAiBmgB,YAA6BtY,EAA9C/D,cAFHmc,iBAGM,SAAApY,GAAA,mBAAA7H,OAAoB4I,EAAEf,EAAtB/D,WAAA,WAErBoc,qFAEkCtX,gBAFlCsX,eAEwDG,GAFxDH,uDAKU,SAAArY,GAAC,OAAIA,EAAJ/D,YAEXoc,4CAGAA,gDAGA,IAAK,IAAIvb,EAAT,EAAgBA,EAAI4c,EAApB1c,OAA8CF,IAAM,CAClD,IAGIub,EAHApc,EAAYyd,KAAhBzd,UACI4d,EAAYH,KAAhBtjB,KAII8K,GAFAmX,EAAWzX,iCAA4B0X,YAA3Crc,MAEaoc,OAAb,kBACIlX,EAAakX,SAAjB,sBAEIrW,EAAOd,uBAAqB9L,EAArB8L,cAAX2Y,GAEA7X,yFAOAA,sCAEmB,SAAAhC,GAAA,OAAO5K,iBAA6B4K,EAApCtO,OAFnBsQ,SAGejB,cAHfiB,gBAImBjB,gBAJnBiB,eAKkB,SAAAhC,EAAAlD,GAAA,OAASmF,EAAYjC,EAArBlD,KALlBkF,eAMqB,SAAAhC,EAAAlD,GACbkE,6BAEAH,iDAGAA,OAAgBqB,EAAclC,IAA9Ba,aACoBG,IAADmB,MADnBtB,kBAEmBG,UAAD,GAFlBH,QAZRmB,cAgBoB,SAAAhC,GACZgB,4BAEAH,kDAnBRmB,SAuBe,SAAAhC,GACT,OAAOiB,EAAP,KAxBNe,iBA4BEd,uBAAqB9L,EAArB8L,6BACgB,SAAAlB,EAAAlD,GAAA,OAAUmF,EAAYjC,EAAtBlD,KADhBoE,oCAIa,SAAAlB,GACT,OAAOgD,SAAS/B,EAAEmB,OAAOpC,EAAlBgD,QAA6B/B,EAApC,MALJC,cAOkB,SAAAlB,GACd,OAAOgD,SAAS/B,EAAEmB,OAAOpC,EAATiB,QAAqBA,EAArC,MAGJ,IAAIoB,EAAWlB,uBAAyB/L,EAAzB+L,kBAAf0Y,GACAxX,wEAMAA,sCACiBjN,EADjBiN,qBAEa,SAAArC,GACT,OAAOe,cAAP,IAHJsB,+DAOa,SAAArC,GACT,OAAIA,QAAJ,EACSiB,KAAP,EACKA,KAAP,IAEJE,uBAAyB/L,EAAzB+L,0BACQ,SAAAnB,GACJ,OAAO7R,eAAqB6R,EAA5B4Z,SAFJzY,oCAMa,SAAAnB,GACT,IAAI8Z,EAAJ,EAMA,OAJEA,EADE9Z,QAAJ,GACE8Z,EAEAA,GAEK7Y,EAAEmB,OAAOpC,EAATiB,QAAP6Y,IAIRlZ,mCAEAA,+DADA,GACAA,wCA3MF,IA2MEA,UAKcK,KAAK8Y,GALnBnZ,UA/MJR,KA+MIQ,UAOcK,KAAK8Y,QAjLjB3Y,sCAkBF,SAAAa,EAAAjC,EAAAlD,GACI,OALJ,SAAAyF,EAAAzF,GACE,OAAO0E,EAAiBe,aAAjBf,KAA6Cb,EAAa7D,EAAE6D,EAAnE3D,QAISwF,CAA0BxC,YAADtO,KAAhCoL,GAGJ,SAAAoF,EAAAlC,EAAAlD,GACE,OAAI3O,EAAJsT,eACSzB,aAAiB7R,eAAqB6R,EAA7C4Z,OAEOpb,YAAgBwB,YAAhBxB,YAA4CrQ,eAAqB6R,EAAxE4Z,SAyJNllB,KAAA+N,QAAe,WACb7B,8pDC3MN,IAkBAoZ,GAhBIlX,GAAe,CACjBgW,SADiB,gCAEjBC,UAFiB,gBAGjBvY,OAAQ,SAAAR,GAAC,OAAIA,EAAJ+E,OACTrE,aAAc,SAAAqE,GAAK,OAAAA,GACnBnD,wBALF,GAQA,SAAAqY,GAAArX,GACE,OAAOrN,QAAPqN,EAGF,SAAAsX,GAAAtX,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKIK,mBAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAA2lB,CAAAzlB,KAAAuO,KACjBvO,MAAAF,MAAA4lB,GAAAnX,GAAApO,KAAAH,KAAAH,sDACAqB,MAAa,CACXwI,WAAY,kBADD,MAEXC,YAAa,gBAFF,MAGXrC,kBAAmB,iCAHR,0BAeXlG,WAfW,WAgBXtH,aAhBW,GAiBXqD,SAjBW,GAkBX7C,SAlBW,GAmBXG,MAnBW,GAoBX8G,cApBW,MAqBXC,YArBF,IAwBAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAA4iB,MAAnB7lB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAA4iB,MAAtB7lB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAA4iB,MAA1B7lB,KAjCiBA,0PAFAO,kEAuCjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA9Dc,KAgEhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIAlB,KAAA0O,MAAA,KACAQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACV,IAAIiF,EAAcjF,EAAlBgF,OACIC,eAA2BrP,KAAAkB,MAA/BM,cAEAI,6BACA0N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,2CAA6FgN,YAAwBtc,KAArHsP,6DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAqW,GAAU/kB,KAAVgP,eAAA,UAAAuW,GAAbK,IACA5lB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAGNjO,EACEvB,KAJIkB,MAAAK,cAKR,OACIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,wBAA4BA,GAAE,cAAA1K,OAA9ClC,KAEEjB,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GALnB,8CAWG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADIvW,YAAtBqG,IAGIgmB,EAAQhmB,wBAA4B,SAAA+kB,GAAI,MAAI,gBAAAV,KAAAU,GAAJ,KAAhC/kB,KAAZ,KAOA,GANA,YAAIA,aACFuO,kDAEAA,sBAA2BkO,YAA3BlO,0BAGFkX,GAAsB,CACpB,IAAItV,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI0I,EAAY1I,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAYiY,YAAuCnjB,EAAvD7B,GACKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAqW,GAAAtZ,EAAA,UAAA8Z,GAAbK,KAEF5lB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIR8Y,GAAA,qpDC/JA,IAYAC,GAZoBhpB,cAIpB,SAAAipB,GAAA9X,GACE,OAAOrN,QAAPqN,EAGF,SAAA+X,GAAA/X,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKF,IAAIE,GAAe,CACjBgW,SADiB,sCAEjBC,UAFiB,gBAGjBvY,OAAQ,SAAAR,GAAC,OAAIA,EAAJS,aACTC,aAAc,SAAAjK,GAAK,OAAIA,EAAJ,KACnBmL,wBALF,GAQMqB,eAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAAomB,CAAAlmB,KAAAuO,KACjBvO,MAAAF,MAAAqmB,GAAA5X,GAAApO,KAAAH,KAAAH,sDACAqB,MAAa,CACXwI,WAAY,kBADD,MAEXC,YAAa,gBAFF,MAGXrC,kBAAmB,0FAHR,0BAeXlG,WAfW,WAgBXtH,aAhBW,GAiBXqD,SAjBW,GAkBX7C,SAlBW,GAmBXG,MAnBW,GAoBX8G,cApBW,MAqBXC,YArBF,IAwBAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAAqjB,MAAnBtmB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAAqjB,MAAtBtmB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAAqjB,MAA1BtmB,KAjCiBA,0PAFAO,kEAwCjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA/Dc,KAiEhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIIlB,KAAJ0O,QACE1O,KAAA0O,MAAAX,UACA/N,KAAA0O,MAAA,MAEFQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,gDAAkGI,YAAc1P,KAAhHsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAA8U,GAAUxjB,KAAVgP,eAAA,UAAAgX,GAAbK,IACArmB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAENjO,EACEvB,KAHIkB,MAAAK,cAIR,OACIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,wBAA4BA,GAAE,cAAA1K,OAA9ClC,KAEEjB,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GALnB,8CAWG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADI5V,YAAtB0F,IAUA,GARAuO,sBAA2BvO,aAA3BuO,oCAAuEvO,wBAA4B,SAAA+kB,GAAI,MAAI,gBAAAV,KAAAU,GAAJ,KAAhC/kB,KAAvEuO,OAEA,YAAIvO,aACFuO,4DAEAA,kDAAuDsB,YAAvDtB,KAGF2X,GAAsB,CACpB,IAAI/V,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI8H,EAAY9H,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAY0Z,YAAuC5kB,EAAvD7B,GAEKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAA8U,GAAA/X,EAAA,UAAAua,GAAbK,KACFrmB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIRuZ,GAAA,qpDCnKA,IAYAC,GAZoBzpB,cAIpB,SAAA0pB,GAAAvY,GACE,OAAOrN,QAAPqN,EAGF,SAAAwY,GAAAxY,GACE,OAAOxN,GAAU6B,eAAjB2L,GAKF,IAAIE,GAAe,CACjBgW,SADiB,sCAEjBC,UAFiB,gBAGjBvY,OAAQ,SAAAR,GAAC,OAAIA,EAAJS,aACTC,aAAc,SAAAjK,GAAK,OAAKA,QAAD,IAAwBA,UAAxB,GAAJ,KACnBmL,wBALF,GAQMqB,eAEF,SAAAA,EAAA1O,GAAmB,IAAAC,MAAA,mGAAA6mB,CAAA3mB,KAAAuO,KACjBvO,MAAAF,MAAA8mB,GAAArY,GAAApO,KAAAH,KAAAH,sDACAqB,MAAa,CACXwI,WAAY,kBADD,MAEXC,YAAa,gBAFF,MAGXrC,kBAAmB,iCAHR,0BAeXlG,WAfW,WAgBXtH,aAhBW,GAiBXqD,SAjBW,GAkBX7C,SAlBW,GAmBXG,MAnBW,GAoBX8G,cApBW,MAqBXC,YArBF,IAwBAiN,YAAiB3O,EAADoB,MAAhBuN,GAEA3O,EAAA4O,MAAA,KACA5O,EAAA6O,kBAAA,EACA7O,EAAA8O,YAAmB9O,EAAA8O,YAAA7L,KAAA8jB,MAAnB/mB,KACAA,EAAA+O,eAAsB/O,EAAA+O,eAAA9L,KAAA8jB,MAAtB/mB,KACAA,EAAAgP,mBAA0BA,eAA1BhP,KACAA,EAAAiP,mBAA0BjP,EAAAiP,mBAAAhM,KAAA8jB,MAA1B/mB,KAjCiBA,0PAFAO,kEAwCjB,IAAIoB,EAAJzB,KACAA,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,OACAlB,KAAA2O,kBAAyBM,YAAY,WACnCxN,OAAUA,EAAVA,eAA+BA,EAA/BA,QA/Dc,KAiEhByN,0BAA0BhN,IAA1BgN,WAA6ClP,KAA7CkP,aACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,oBACAA,0BAA0BhN,IAA1BgN,cAAgDlP,KAAhDkP,iEAIAlP,KAAA2M,KAAU3M,KAAVgP,eAA+BhP,KAA/BkB,sDAIIlB,KAAJ0O,QACE1O,KAAA0O,MAAAX,UACA/N,KAAA0O,MAAA,MAEFQ,6BAA6BhN,IAA7BgN,WAAgDlP,KAAhDkP,aACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAA,6BAA6BhN,IAA7BgN,cAAmDlP,KAAnDkP,oBACAC,cAAcnP,KAAdmP,4DAIA,IAAI1N,EAAJzB,KACA,OAAO,IAAA2P,QAAY,SAAAC,EAAAC,GACjBP,gBAAqB7N,+BAArB6N,MAA+D,SAAApW,GAC7D0W,EAAQ1W,aAAR0W,4CAKMxF,GACQA,EAAlBgF,OACIC,aAA2BrP,KAAAkB,MAA/BM,aAEA8N,iBAAsBtP,KAAAuP,KAAAC,aAAAC,WAAtBH,2CAA6FI,YAAc1P,KAA3GsP,4DAGiBlF,GACjB,IAAIpI,EAAWoI,EAAfgF,OACIpP,KAAJ0O,OACE1O,KAAA0O,MAAAX,UACF/N,KAAA0O,MAAa,IAAAqW,GAAU/kB,KAAVgP,eAAA,UAAAyX,GAAbK,IACA9mB,KAAA8B,SAAAE,0CAIA,OAAOsK,IAAUtM,KAAAuP,KAAjBC,+CAGQ,IAENjO,EACEvB,KAHIkB,MAAAK,cAIR,OACIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAWyN,wBAA4BA,GAAE,cAAA1K,OAA9ClC,KAEEjB,EAAAC,EAAAC,cAAA,OACEsP,IADF,eAEEpP,UAAWyN,GALnB,8CAWG1C,EAAW5L,GACd,IAAI4B,EAAJzB,KAEI+P,EAAc,CADI5V,YAAtB0F,IAGIgmB,EAAQhmB,wBAA4B,SAAA+kB,GAAI,MAAI,gBAAAV,KAAAU,GAAJ,KAAhC/kB,KAAZ,KAOA,GANA,YAAIA,aACFuO,kDAEAA,sBAA2BsB,YAA3BtB,0BAGFoY,GAAsB,CACpB,IAAIxW,EAAoBnT,cACxBkT,UAGFJ,oBAA8B,SAAAxH,GAC5B,IAAI8H,EAAY9H,EAAhB,GACA6E,GAAkBA,IAAmB7E,EAArC6E,GACAvL,wBAHFkO,MAIS,SAAAhO,GAAK,OAAIC,cAAJD,uCAGN8J,EAAW5L,EAAO6B,EAAMsL,GAC9B,IAAIJ,EAAY0Z,YAAuC5kB,EAAvD7B,GAEKG,KAAL0O,QACE1O,KAAA0O,MAAa,IAAAqW,GAAAtZ,EAAA,UAAAgb,GAAbK,KACF9mB,KAAA0O,MAAA/B,KAAAC,EAAAI,0CAIR+Z,GAAA,ssBCvLA1b,EAAAC,EAAAC,EAAA,sBAAA4E,IAAA9E,EAAAC,EAAAC,EAAA,sBAAAwF,IAAA1F,EAAAC,EAAAC,EAAA,sBAAAqG,IAAAvG,EAAAC,EAAAC,EAAA,sBAAAmL,KAAArL,EAAAC,EAAAC,EAAA,sBAAAgM,KAAAlM,EAAAC,EAAAC,EAAA,sBAAA0M,KAAA5M,EAAAC,EAAAC,EAAA,sBAAA0N,KAAA5N,EAAAC,EAAAC,EAAA,sBAAAsV,KAAAxV,EAAAC,EAAAC,EAAA,sBAAAsQ,KAAAxQ,EAAAC,EAAAC,EAAA,sBAAA+V,KAAAjW,EAAAC,EAAAC,EAAA,sBAAAwX,KAAA1X,EAAAC,EAAAC,EAAA,sBAAAgY,KAAAlY,EAAAC,EAAAC,EAAA,sBAAAuZ,KAAAzZ,EAAAC,EAAAC,EAAA,sBAAAua,KAAAza,EAAAC,EAAAC,EAAA,sBAAAgb,KAAAlb,EAAAC,EAAAC,EAAA,sBAAAwb,KAAA1b,EAAAC,EAAAC,EAAA,sBAAAiR,2DCMAjR,EAAA,EANa,CACTjJ,OADS,+CAGT0kB,WAHJ,gECOezb,EAAA,GACXuK,cARJ,gBASI3T,cARJ,gBASI2C,YARJ,cASI4B,sBARJ,wBASItE,WARJ,mkDCDA,SAAA6kB,EAAA1mB,EAAAqU,GACE,UAAIA,EACF,GAEQrU,IAAD,KAAA2mB,QAAP,GAIG,SAAAhX,EAAAxO,EAAA7B,GACH,IAAAsnB,EAAAC,EACIhmB,EAAavB,EAAjBuB,WAUA,KAREgmB,EADF,YAAIhmB,EACUM,EAAI,KAAJA,iBAAZ0lB,GACK,YAAIhmB,EACGM,EAAI,KAAJA,2BAAZ0lB,GACK,gBAAIhmB,EACEM,EAAI,KAAJA,0BAAX0lB,GAEY1lB,EAAI,KAAJA,+BAAZ0lB,IAIA,OADAxlB,uCACA,KAGF,IAAIylB,EAAWD,EAAS,KAUxB,OALAD,GAFAA,GADAA,GADmBE,EAAQ,cAAoBA,EAAQ,WACjC,OACZF,KAAa,SAAA5mB,EAAAqU,GAAgB,OAAOA,mBAAqBrU,OAA5BwL,eAE7Bob,QAAiBtnB,EAA3BsnB,YAEAvlB,sBACAA,yBAEOulB,MAAY,SAAAG,GACf,IAAIC,EAAKD,EAAI,KACb,MAAO,CACHtqB,KAAMuqB,EAAE,MAAFA,aACNC,WAAYD,EAAE,WAAFA,QAFT,GAGHxb,YAAawb,EAAE,YAAFA,QAHV,GAIHE,UAAWF,EAAE,SAKlB,SAAAjE,EAAA5hB,EAAA7B,GAyCL,IAxCA,IACIuB,EAAavB,EAAjBuB,WAoCI+lB,GAnCJ,YAAI/lB,EACMM,EAAI,KAAJA,WAARgmB,MACK,YAAItmB,EACDM,EAAI,KAAJA,qBAARgmB,MACK,gBAAItmB,EACFM,EAAI,KAAJA,oBAAPgmB,MAEQhmB,EAAI,KAAJA,yBAARgmB,OAGsBA,IAAU,SAAA7f,GAChC,IAAIwf,EAAWxf,EAAI,KACf8f,EAAeN,EAAQ,cAAoBA,EAAQ,UAKnDO,GAJJT,EAAUQ,EAAY,MAAZA,OACA,SAAApnB,GAAC,OAAIV,aACRU,oBAA4BV,EADpBA,WAERU,2BAAmCV,EAF/B0H,aAGX,GACA,GAAAqgB,EAAY,CACV,IAAIL,EAAKK,EAAM,KACf,MAAO,CACH5qB,KAAMqqB,EAAQ,MAARA,YACNtb,YAAawb,EAAE,YAAFA,QAFV,GAGHE,UAAWF,EAAE,OAGnB,MAAO,CACLvqB,KAAMqqB,EAAQ,MAARA,YACNtb,YAFK,EAGL0b,UAAW,CACTzqB,KAAM6C,EADG0H,UAETtK,aAAc4C,EALlB0H,cASYsgB,OAAyB,SAAAhgB,GAAI,UAAIhI,4BAAgCgI,EAAhChI,QAA/CioB,UAEIC,EAAJ,GACQ3f,EAAR,EAAeA,EAAIvI,oBAAnByI,OAAmDF,IAAM,CAEvD,IADA,IAAI4f,GAAJ,EACSrN,EAAT,EAAgBA,EAAIwM,EAApB7e,OAAoCqS,IAClC,GAAIwM,WAAmBtnB,oBAAvBuI,GAAmD,CAC7C4f,GAAJ,EACAD,OAAiBZ,EAAjBY,IACA,MAGJC,GACED,OAAiB,CACf/qB,KAAM6C,oBADSuI,GAEf2D,YAFe,EAGf0b,UAAW,CACTzqB,KAAM6C,EADG0H,UAETtK,aAAc4C,EALlBkoB,aAUJ,OAAAA,EAGK,SAAAzB,EAAA5kB,EAAA7B,GACL,OAAOA,iBAAqB,SAAA0H,EAAAqC,GAC1B,IAAI2V,EAAQ0F,EAAA,GAAZplB,GAGA,OAFA0f,cACAA,aAAsB1f,cAAtB0f,GACO,CACLhY,UADKA,EAEL7F,KAAM4hB,EAAwB5hB,EAFhC6d,MAOG,SAAA7D,EAAAha,EAAA7B,GACL,IAAAunB,EACIhmB,EAAavB,EAAjBuB,WAUA,KAREgmB,EADF,YAAIhmB,EACUM,EAAI,KAAJA,iBAAZ0lB,GACK,YAAIhmB,EACGM,EAAI,KAAJA,2BAAZ0lB,GACK,gBAAIhmB,EACEM,EAAI,KAAJA,0BAAX0lB,GAEY1lB,EAAI,KAAJA,+BAAZ0lB,IAIA,OADAxlB,sDACA,KAGF,IAAIylB,EAAWD,EAAS,KAExB,MAAO,CACL,CACEpqB,KADF,YAEEgU,QAASiW,EAAYI,EAAQ,sBAA2BA,EAAQ,SAChEY,WAAYZ,EAAQ,QACpBa,MAAOb,EAAQ,uBACd,CACDrqB,KADC,gBAEDgU,QAAS,IAAMiW,EAAYI,EAAQ,sBAA2BA,EAAQ,SACtEY,WAAYZ,EAAQ,QACpBa,MAAOb,EAAQ,QAAcA,EAAQ,wBAiD3C,SAAAc,EAAAb,GACE,OAAIA,GAAQA,EAAI,UAAgBA,EAAI,SAAJA,OAA6BA,EAAI,SAAJA,WAClDA,EAAI,SAAJA,WACX,GAGK,SAAAvT,EAAArS,EAAA7B,GACL,IAAA6B,EAAY,YACZ,IAAIoS,EAAJ,GAEI1S,EAAavB,EAAjBuB,WAuBA,MAtBA,aAAIA,EACQM,EAAI,KAAJA,qBAARgmB,MACAA,QAAc,SAAA7f,GACV,IAAIyf,EAAOzf,EAAXyf,KACIxtB,EAAewtB,EAAI,SAAJA,KACnBxT,KAAoCqU,EAApCrU,KAED,aAAI1S,EACCM,EAAI,KAAJA,yBAARgmB,MACAA,QAAc,SAAA7f,GACV,IAAIyf,EAAOzf,EAAXyf,KACIhtB,EAAWgtB,EAAI,SAAJA,KACfxT,KAAgCqU,EAAhCrU,KAGIpS,EAAI,KAAJA,2BAARgmB,MACAA,QAAc,SAAA7f,GACV,IAAIyf,EAAOzf,EAAXyf,KACI7sB,EAAQ6sB,EAAI,SAAJA,MACZxT,KAA6BqU,EAA7BrU,KAGRA,EAGK,SAAAhD,EAAApP,EAAA7B,GACL,IAAA6B,EAAY,YACZ,IAAIgmB,EAAQhmB,EAAI,KAAJA,oBAAZgmB,MACItmB,EAAavB,EAAjBuB,WAmBA,OAlBcsmB,EAAAhJ,IAAU,SAAA7W,GACtB,IAAIyf,EAAOzf,EAAXyf,KAOA,MAAO,CACLjX,MANF,aAAIjP,EACMkmB,EAAI,WAAiBA,EAAI,SAEzBA,EAAI,SAIZtqB,KAAMsqB,EAAI,MAAJA,aACNG,UAAWH,EAAI,SAOZH,QAAiBtnB,EAAxBwB,YAGK,SAAAggB,EAAA3f,EAAA7B,GACL,IAAA6B,EAAY,YACZ,IAAIgmB,EAAQhmB,EAAI,KAAJA,oBAAZgmB,MACItmB,EAAavB,EAAjBuB,WAEI+lB,EAAUO,EAAAhJ,IAAU,SAAA7W,GACtB,IAAIyf,EAAOzf,EAAXyf,KAOA,MAAO,CACLjX,MANF,aAAIjP,EACMkmB,EAAI,WAAiBA,EAAI,SAEzBA,EAAI,SAIZtqB,KAAMsqB,EAAI,MAAJA,kBACNG,UAAWH,EAAI,SAXLxf,OAaJ,SAAA8f,GAAM,UAAI/nB,4BAAgC+nB,EAAhC/nB,QAbNiI,OAcN,SAAA8f,GAAM,OACZ/nB,aACG+nB,mBAA6B/nB,EADhCA,WAEG+nB,0BAAoC/nB,EAH3B0H,YAMd3F,yBAAqC/B,EAArC+B,YAGA,IADA,IAAImmB,EAAJ,GACQ3f,EAAR,EAAeA,EAAIvI,oBAAnByI,OAAmDF,IAAM,CAEvD,IADA,IAAI4f,GAAJ,EACSrN,EAAT,EAAgBA,EAAIwM,EAApB7e,OAAoCqS,IAClC,GAAIwM,WAAmBtnB,oBAAvBuI,GAAmD,CAC7C4f,GAAJ,EACAD,OAAiBZ,EAAjBY,IACA,MAGJC,GACED,OAAiB,CACf/qB,KAAM6C,oBADSuI,GAEfiI,MAFe,EAGfoX,UAAW,CACTzqB,KAAM6C,EADG0H,UAETtK,aAAc4C,EALlBkoB,aAoBJ,OADAnmB,6BACAmmB,EAGK,SAAAlD,EAAAnjB,EAAA7B,GAEL,OADA+B,2DACO/B,iBAAqB,SAAA0H,EAAAqC,GAC1B,IAAI2V,EAAQ0F,EAAA,GAAZplB,GAIA,OAHA0f,cACAA,aAAsB1f,cAAtB0f,GACA3d,4CACO,CACL2F,UADKA,EAEL7F,KAAM2f,EAAwB3f,EAFhC6d,MAOG,SAAAtI,EAAAvV,EAAA7B,GACL,IAAA6B,EAAY,YACZ,IAAIsV,EAAJ,GAEI5V,EAAavB,EAAjBuB,WA0BA,MAzBA,aAAIA,EACQM,EAAI,KAAJA,qBAARgmB,MACAA,QAAc,SAAA7f,GACV,IAAIyf,EAAOzf,EAAXyf,KACIxtB,EAAewtB,EAAI,SAAJA,KACf9P,EAAmB8P,EAAI,iBAAJA,QAAvB,GACAtQ,SAED,aAAI5V,EACCM,EAAI,KAAJA,oBAARgmB,MACAA,QAAc,SAAA7f,GACV,IAAIyf,EAAOzf,EAAXyf,KACIhtB,EAAWgtB,EAAI,SAAJA,KACX9P,EAAmB8P,EAAI,iBAAJA,QAAvB,GACAtQ,SAGItV,EAAI,KAAJA,yBAARgmB,MACAA,QAAc,SAAA7f,GACV,IAAIyf,EAAOzf,EAAXyf,KACI7sB,EAAQ6sB,EAAI,SAAJA,MACR9P,EAAmB8P,EAAI,iBAAJA,QAAvB,GACAtQ,SAGRA,EAGK,SAAAgB,EAAAtW,EAAA7B,GACL,IAAA6B,EAAY,YACZ,IAAAgmB,EACItmB,EAAavB,EAAjBuB,WAWA,MAVA,YAAIA,EACFsmB,EAAQhmB,EAAI,KAAJA,WAARgmB,MACK,YAAItmB,EACTsmB,EAAQhmB,EAAI,KAAJA,qBAARgmB,MACK,gBAAItmB,EACTsmB,EAAQhmB,EAAI,KAAJA,oBAARgmB,MACK,mBAAItmB,IACTsmB,EAAQhmB,EAAI,KAAJA,yBAARgmB,OAGKA,MAAU,SAAA7f,GACf,IAAIyf,EAAOzf,EAAXyf,KAIA,MAAO,CACLtqB,KAJUsqB,EAAI,MAAJA,YAKV5hB,UAJc4hB,EAAI,MAAJA,sBAKd9P,iBAJqB8P,EAAI,iBAAJA,QAAvB,MAJKI,OAUG,SAAA7f,GAAI,UAAIA,kCAAqChI,EAArCgI,aAGb,SAAA8X,EAAAje,EAAA7B,GACL,IAAA6B,EAAY,YACZ,IAAAgmB,EACItmB,EAAavB,EAAjBuB,WAWA,MAVA,YAAIA,EACFsmB,EAAQhmB,EAAI,KAAJA,WAARgmB,MACK,YAAItmB,EACTsmB,EAAQhmB,EAAI,KAAJA,qBAARgmB,MACK,gBAAItmB,EACTsmB,EAAQhmB,EAAI,KAAJA,oBAARgmB,MACK,mBAAItmB,IACTsmB,EAAQhmB,EAAI,KAAJA,yBAARgmB,OAGKA,MAAU,SAAA7f,GACf,IAAIyf,EAAOzf,EAAXyf,KAGA,MAAO,CACLtqB,KAHUsqB,EAAI,MAAJA,YAIV9P,iBAHqB8P,EAAI,iBAAJA,QAAvB,MAQG,SAAA7V,EAAA/P,EAAA7B,GACL,IAAAunB,EACIhmB,EAAavB,EAAjBuB,WAUA,KAREgmB,EADF,YAAIhmB,EACUM,EAAI,KAAJA,iBAAZ0lB,GACK,YAAIhmB,EACGM,EAAI,KAAJA,2BAAZ0lB,GACK,gBAAIhmB,EACEM,EAAI,KAAJA,0BAAX0lB,GAEY1lB,EAAI,KAAJA,+BAAZ0lB,IAIA,OADAxlB,wCACA,KAGF,IAAIylB,EAAWD,EAAS,KAExB,MAAO,CACL,CACEpqB,KADF,QAEEgU,QAASiW,EAAYI,EAAQ,gBAAqBA,EAAQ,iBACzD,CACDrqB,KADC,SAEDgU,QAASiW,EAAYI,EAAQ,YAAiBA,EAAQ,kBAKrD,SAAA3X,EAAAxO,GACL,SAAAknB,EAAAjrB,GAOE,OANA,GAAIA,mBACAA,EAAWA,eAAXA,KAEJ,GAAIA,iBACAA,EAAWA,aAAXA,IAEJA,EAEF,kBAAI+D,aACF,eAEF,YAAIA,aACKA,EAAPpH,aAEF,gBAAIoH,aACKknB,EAAmBlnB,EAA1B/D,UAEF,mBAAI+D,aACKknB,EAAmBlnB,EAAnBknB,cAA2ClnB,EAAlDzG,WADF,EAKK,SAAAimB,EAAAxf,GACL,kBAAIA,aACF,oBACKwO,EAAPxO,GAGK,SAAA0f,EAAA1f,GACL,kBAAIA,aACF,WACKwO,EAAPxO,GAKK,SAAAob,EAAApb,GACL,kBAAIA,aACF,eAEKA,EAAPpH,aAGK,SAAA6W,EAAAzP,GACL,kBAAIA,aACF,oBAEKA,EAAPpH,aAGK,SAAAsS,EAAA1L,GACL,IAAI2nB,EAAmB3nB,EAAU6B,eAAjC,WACA,OAAI2M,mCAAJ,GACS5C,eAAP+b,IAEO/b,0DAAP,GAQG,SAAAmJ,IACL,IAGArN,EAHIkgB,EAAgBpZ,gCAApB,eACIqZ,EAAJ,GACIC,EAAJ,GAGA,IAAKpgB,EAAL,EAAYA,EAAIkgB,EAAhBhgB,OAAsCF,IAClCmgB,KAAaD,KAAbC,wBAGJ,IAAKngB,EAAL,EAAYA,EAAIkgB,EAAhBhgB,OAAsCF,IAAM,CACxC,IAAK,IAAIuS,EAAT,EAAgBA,EAAhBvS,EAAuBuS,IAAM,CACzB,IAAI8N,EAAQF,EAAZngB,GACIsgB,EAAQH,EAAZ5N,KACgB8N,QAAcC,EAAdD,MACZA,OAAaC,EADDD,OAEZA,SAAeC,EAFHD,KAGZA,MAAYC,EAHhBC,UAKIH,KAAgBA,KAAgBA,KAAhBA,EAAhBA,GAGJA,KAAJ,EACIF,+BACOE,KAAJ,IACHF,eAA6BA,0BAA7BA,QAOH,SAAArmB,EAAA2mB,EAAAC,GACL,IAAIze,EAAQ,IAAA0e,YAAAF,EAA2B,CAAExZ,OAAzCyZ,IACA3Z,0BAGK,SAAApF,EAAA9M,GACL,OAAOA,8CAAkD,SAAAqL,GAAa,OAAOA,EAAP0gB,gBAGjE,SAAAvT,EAAAnB,EAAAnT,GACL,mBAAIA,aACOmT,EAAPF,UACG,aAAIjT,aACAmT,cAAyBA,wCAAhC,GAEKC,EAAPD,GAQG,SAAAD,EAAAC,GACL,OAAOA,QAAoBA,cAAyBA,2CAApD,IAGK,SAAAC,EAAAD,GACL,OAAOA,YAAuBA,EAA9B2U,WAGK,SAAAtV,EAAAxS,GAgBL,OAAOA,EAAPE,YACI,eACI,MAjBR,0BAkBI,eACI,MAjBwB,CACxB6nB,QADwB,qBAExBC,WAFwB,oBAGxBC,QAHwB,oBAIxBC,gBAJwB,qBAKxBC,aALwB,oBAMxBC,aANwB,oBAOxBC,eAPwB,oBAQxBC,gBARwB,oBASxBC,eATJ,qBAiB+BvoB,EAA3BpH,cACJ,mBACI,OAAOoH,WAAP,YACJ,sBACI,MAAO,WAAaA,EAAb5G,SAAA,IAAoC4G,EAApCzG,MAAP,YACJ,QACI,OAVR,MAcK,SAAAivB,EAAAC,EAAAC,EAAAC,GACL,IAAI3a,wBAAJya,GAAA,CAEA,IAAIG,EAAS5a,uBAAb,UACA4a,SAAgB,WACdD,GACEA,KAGJC,OACAA,QAEA5a,8BAGK,SAAArK,IACL6kB,EAAU,6EAAgF,WACxF9nB,2CAUG,SAAAxB,IACLyE,IANA6kB,EAAU,gFAAmF,WAC3F9nB,yCAUG,SAAAkN,EAAA1E,GACL,IAAIpI,EAAWkE,WAAWA,eAAekE,EAAzCgF,gBACOpN,EAAPR,YACAxB,KAAA8B,SAAAE,GAGK,SAAAyM,EAAAvN,EAAArB,GACL6H,uBAA2B,SAAA1E,GACrBnD,EAAJmD,KACE9B,KAAarB,EAAbqB,MAKC,SAAA0iB,EAAArc,GACL,OAAOA,2BAAP,IAGK,SAAAsC,EAAAhI,GAGH,IAFA,IAAIpI,EAAUoI,SAAdpI,QACI0O,EAAJ,GACSC,EAAJ,EAAWC,EAAI5O,EAApB6O,OAAoCF,EAApCC,EAA2CD,IACrC3O,KAAJ8O,UACEJ,OAAY1O,KAAZ0O,OAGJA,EAASA,UAATA,GACAnI,KAAA8B,SAAc,CACV4H,WAAYvB,MAAW,SAAApG,GAAK,OAAIA,aAAJ,KAC5B4H,YAAaxB,MAAW,SAAApG,GAAK,OAAIA,aAAJ,OAI9B,SAAAoB,EAAAjC,GACL,IAAK,IAAIkH,EAAT,EAAgBA,EAAIlH,iBAApBoH,OAAiDF,IAC/C,GAAIlH,iCAAuCA,EAA3ClH,mBACE,GAAIkH,4EACF,SAIN","file":"static/js/src-components-quickresults~src-components-race-for-seats~src-components-race-for-votes~src-componen~3364f670.d349b257.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\n\n\nconst client = new ApolloClient({\n    link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n    cache: new InMemoryCache()\n  })\n\nexport {\n    API_URI,\n    client\n}","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getSeatsDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            party_Event_Description_Icontains:\"national\",\n            orderBy:[\"-national_pr\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  } else { //  if (options.regionType == \"province\")\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(province_Name:\"${options.provinceName}\", orderBy:[\"-regional\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  }\n}\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(party_Event_Description:\"${eventDescription}\", orderBy:[\"-national_pr\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else { //  if (options.regionType == \"province\")\n      eventDescription = eventDescription.replace(\"National\", \"Provincial\");\n      eventDescription = eventDescription.replace(\"NATIONAL\", \"PROVINCIAL\");\n      eventDescription = eventDescription.replace(\"national\", \"provincial\");\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province_Name:\"${options.provinceName}\", party_Event_Description:\"${eventDescription}\", orderBy:[\"-regional\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getVotesDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots{\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          location_Name:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          location_Province_Name:\"${options.provinceName}\", \n          location_Code: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                      iecId\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n          location_IecId:\"${options.iecId}\", \n          location_Ward_Municipality_Code:\"${options.muniCode}\"\n        ) {\n          edges{\n            node{\n              event {\n                description\n              }\n              location {\n                iecId\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\", \n            location_Ward_Municipality_Code:\"${options.muniCode}\"\n          ) {\n            edges{\n              node{\n                location {\n                  iecId\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByProvince(location_Country_Event_Description:\"${eventDescription}\") {\n            edges {\n              node {\n                location{\n                  id\n                  name\n                }\n                totalVotesCast\n                topParty{\n                  validVotes\n                  percOfVotes\n                  party {\n                      id\n                      name\n                      abbreviation\n                      iecId\n                  }\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByMunicipality(\n            location_Province_Country_Event_Description:\"${eventDescription}\", \n            location_Province_Name:\"${options.provinceName}\") {\n            \n            edges {\n              node {\n                location{\n                    code\n                    name\n                    longName\n                }\n                totalVotesCast\n                topParty{\n                  party {               \n                    name\n                    abbreviation\n                    iecId\n                  }\n                  validVotes\n                  percOfVotes\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { //if (options.regionType == \"municipality\") {\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            topPartiesByVotingDistrict(\n              location_Ward_Municipality_Province_Country_Event_Description:\"${eventDescription}\", \n              location_Ward_Municipality_Province_Name:\"${options.provinceName}\",\n              location_Ward_Municipality_Code: \"${options.muniCode}\"\n            ) {\n              \n              edges {\n                node {\n                  location{\n                    iecId\n                  }\n                  topParty{\n                    party{\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n\n\n  export function getTurnoutData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                percVoterTurnout\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                percVoterTurnout\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { // municipality or municipality-vd\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n            event_Description:\"${eventDescription}\",\n            location_Ward_Municipality_Code:\"${options.muniCode}\") {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n  export function getTurnoutDataForOneEvent(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n              event_Description:\"${eventDescription}\"\n              location_Province_Name:\"${options.provinceName}\", \n              location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              event_Description:\"${eventDescription}\"\n              location_IecId:\"${options.iecId}\", \n              location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n\n  export function getTurnoutDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getSpoiltData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                    id\n                    name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                event_Description:\"${eventDescription}\",\n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    code\n                    name\n                    longName\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                event_Description:\"${eventDescription}\",\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n  ","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getProgressVotesCount(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\", \n            location_Ward_Municipality_Code:\"${options.muniCode}\"\n          ) {\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport {getSeatsData, getSeatsDataForComparison} from \"./race-for-seats\"\nexport {getVotesDataM, getVotesDataForComparison, getMainParties} from \"./race-for-votes\"\nexport {getTurnoutData, getTurnoutDataForOneEvent, getTurnoutDataForAllEvents} from \"./turnout\"\nexport {getSpoiltData} from \"./spoilt\"\nexport {getProgressVotesCount} from \"./prog-votescount\"\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n        eventType {\n          description\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            abbreviation\n            colour\n            iecId\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getProvincesData() {\n  var provincesData = [\n      {\n          \"name\": \"Limpopo\",\n          \"abbreviation\": \"LIM\",\n          \"munis\": [{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM331 - Greater Giyani [Giyani]\",\"muniCode\":\"LIM331\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM332 - Greater Letaba [Duiwelskloof]\",\"muniCode\":\"LIM332\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM333 - Greater Tzaneen [Tzaneen]\",\"muniCode\":\"LIM333\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM334 - Ba-Phalaborwa [Phalaborwa]\",\"muniCode\":\"LIM334\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM335 - Maruleng [Hoedspruit]\",\"muniCode\":\"LIM335\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM341 - Musina [Messina]\",\"muniCode\":\"LIM341\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM342 - Mutale [Mutale-Masisi]\",\"muniCode\":\"LIM342\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM343 - Thulamela [Thohoyandou]\",\"muniCode\":\"LIM343\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM344 - Makhado [Louis Trichardt]\",\"muniCode\":\"LIM344\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM351 - Blouberg [Bochum/My Darling]\",\"muniCode\":\"LIM351\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM352 - Aganang [Moletji/Matlala]\",\"muniCode\":\"LIM352\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM353 - Molemole [Dendron/Dikgale]\",\"muniCode\":\"LIM353\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM354 - Polokwane [Pietersburg]\",\"muniCode\":\"LIM354\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM355 - Lepele-Nkumpi [Lebowakgomo]\",\"muniCode\":\"LIM355\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM361 - Thabazimbi [Thabazimbi]\",\"muniCode\":\"LIM361\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM362 - Lephalale [Ellisras]\",\"muniCode\":\"LIM362\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM364 - Mookgopong [Naboomspruit]\",\"muniCode\":\"LIM364\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM365 - Modimolle [Nylstroom]\",\"muniCode\":\"LIM365\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM366 - Bela-Bela [Warmbad]\",\"muniCode\":\"LIM366\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM367 - Mogalakwena [Potgietersrus]\",\"muniCode\":\"LIM367\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM471 - Ephraim Mogale [Marble Hall]\",\"muniCode\":\"LIM471\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM472 - Elias Motsoaledi [Groblersdal]\",\"muniCode\":\"LIM472\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM473 - Makhuduthamaga [Ngwaritsi]\",\"muniCode\":\"LIM473\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM474 - Fetakgomo [Fetakgomo ]\",\"muniCode\":\"LIM474\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM475 - Greater Tubatse [Burgersfort/Ohrigstad/Eastern Tubatse]\",\"muniCode\":\"LIM475\"}]\n      },\n      {\n          \"name\": \"Mpumalanga\",\n          \"abbreviation\": \"MP\",\n          \"munis\": [{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP301 - Albert Luthuli [Elukwatini/Carolina]\",\"muniCode\":\"MP301\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP302 - Msukaligwa [Ermelo]\",\"muniCode\":\"MP302\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP303 - Mkhondo [Piet Retief]\",\"muniCode\":\"MP303\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP304 - Pixley Ka Seme [Volksrust]\",\"muniCode\":\"MP304\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP305 - Lekwa [Standerton]\",\"muniCode\":\"MP305\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP306 - Dipaleseng [Balfour]\",\"muniCode\":\"MP306\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP307 - Govan Mbeki [Highveld Ridge]\",\"muniCode\":\"MP307\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP311 - Delmas [Delmas]\",\"muniCode\":\"MP311\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP312 - Emalahleni [Witbank]\",\"muniCode\":\"MP312\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP313 - Steve Tshwete [Middelburg]\",\"muniCode\":\"MP313\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP314 - Emakhazeni [Belfast]\",\"muniCode\":\"MP314\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP315 - Thembisile [KwaMhlanga]\",\"muniCode\":\"MP315\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP316 - Dr JS Moroka [Mdutjana]\",\"muniCode\":\"MP316\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP321 - Thaba Chweu [Sabie]\",\"muniCode\":\"MP321\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP322 - Mbombela [Nelspruit]\",\"muniCode\":\"MP322\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP323 - Umjindi [Barberton]\",\"muniCode\":\"MP323\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP324 - Nkomazi [Nkomazi]\",\"muniCode\":\"MP324\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP325 - Bushbuckridge [Bushbuckridge]\",\"muniCode\":\"MP325\"}]\n      },\n      {\n          \"name\": \"Gauteng\",\n          \"abbreviation\": \"GT\",\n          \"munis\": [{\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT421 - Emfuleni [Vereeniging]\",\"muniCode\":\"GT421\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT422 - Midvaal [Meyerton]\",\"muniCode\":\"GT422\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT423 - Lesedi [Heidelberg]\",\"muniCode\":\"GT423\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT481 - Mogale City [Krugersdorp]\",\"muniCode\":\"GT481\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT482 - Randfontein [Randfontein]\",\"muniCode\":\"GT482\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT483 - Westonaria [Westonaria]\",\"muniCode\":\"GT483\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT484 - Merafong City [Carletonville]\",\"muniCode\":\"GT484\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"}]\n      },\n      {\n          \"name\": \"KwaZulu-Natal\",\n          \"abbreviation\": \"KZN\",\n          \"munis\": [{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN211 - Vulamehlo [Dududu]\",\"muniCode\":\"KZN211\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN212 - Umdoni [Scottburgh]\",\"muniCode\":\"KZN212\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN213 - Umzumbe [Umzumbe]\",\"muniCode\":\"KZN213\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN214 - UMuziwabantu [Harding]\",\"muniCode\":\"KZN214\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN215 - Ezinqoleni [Izinqolweni]\",\"muniCode\":\"KZN215\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN216 - Hibiscus Coast [Port Shepstone]\",\"muniCode\":\"KZN216\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN221 - uMshwathi [Wartburg]\",\"muniCode\":\"KZN221\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN222 - uMngeni [Howick]\",\"muniCode\":\"KZN222\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN223 - Mooi Mpofana [Mooirivier]\",\"muniCode\":\"KZN223\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN224 - Impendle [Impendle]\",\"muniCode\":\"KZN224\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN225 - Msunduzi [Pietermaritzburg]\",\"muniCode\":\"KZN225\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN226 - Mkhambathini [Camperdown]\",\"muniCode\":\"KZN226\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN227 - Richmond [Richmond]\",\"muniCode\":\"KZN227\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN232 - Emnambithi/Ladysmith [Ladysmith]\",\"muniCode\":\"KZN232\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN233 - Indaka [Waaihoek]\",\"muniCode\":\"KZN233\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN234 - Umtshezi [Estcourt]\",\"muniCode\":\"KZN234\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN235 - Okhahlamba [Bergville]\",\"muniCode\":\"KZN235\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN236 - Imbabazane [Loskop]\",\"muniCode\":\"KZN236\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN241 - Endumeni [Dundee]\",\"muniCode\":\"KZN241\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN242 - Nqutu [Nqutu]\",\"muniCode\":\"KZN242\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN244 - Msinga [Pomeroy]\",\"muniCode\":\"KZN244\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN245 - Umvoti [Greytown]\",\"muniCode\":\"KZN245\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN252 - Newcastle [Newcastle]\",\"muniCode\":\"KZN252\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN253 - eMadlangeni [Utrecht]\",\"muniCode\":\"KZN253\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN254 - Dannhauser [Durnacol]\",\"muniCode\":\"KZN254\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN261 - eDumbe [Paulpietersburg]\",\"muniCode\":\"KZN261\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN262 - UPhongolo [Pongola]\",\"muniCode\":\"KZN262\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN263 - Abaqulusi [Vryheid]\",\"muniCode\":\"KZN263\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN265 - Nongoma [Nongoma]\",\"muniCode\":\"KZN265\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN266 - Ulundi [Ulundi]\",\"muniCode\":\"KZN266\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN271 - Umhlabuyalingana [Emangusi]\",\"muniCode\":\"KZN271\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN272 - Jozini [Mkuze]\",\"muniCode\":\"KZN272\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN273 - The Big 5 False Bay [Hluhluwe]\",\"muniCode\":\"KZN273\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN274 - Hlabisa [Somkele]\",\"muniCode\":\"KZN274\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN275 - Mtubatuba [Mtubatuba]\",\"muniCode\":\"KZN275\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN281 - Mfolozi [KwaMbonambi]\",\"muniCode\":\"KZN281\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN282 - uMhlathuze [Richards Bay]\",\"muniCode\":\"KZN282\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN283 - Ntambana [Ntambana]\",\"muniCode\":\"KZN283\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN284 - uMlalazi [Eshowe]\",\"muniCode\":\"KZN284\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN285 - Mthonjaneni [Melmoth]\",\"muniCode\":\"KZN285\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN286 - Nkandla [Nkandla]\",\"muniCode\":\"KZN286\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN291 - Mandeni [Mandeni]\",\"muniCode\":\"KZN291\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN292 - KwaDukuza [Stanger]\",\"muniCode\":\"KZN292\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN293 - Ndwedwe [Ndwedwe]\",\"muniCode\":\"KZN293\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN294 - Maphumulo [Maphumulo]\",\"muniCode\":\"KZN294\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN431 - Ingwe [Creighton]\",\"muniCode\":\"KZN431\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN432 - Kwa Sani [Underberg]\",\"muniCode\":\"KZN432\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN433 - Greater Kokstad [Kokstad]\",\"muniCode\":\"KZN433\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN434 - Ubuhlebezwe [Ixopo]\",\"muniCode\":\"KZN434\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN435 - Umzimkhulu [Umzimkulu]\",\"muniCode\":\"KZN435\"}]\n      },\n      {\n          \"name\": \"North West\",\n          \"abbreviation\": \"NW\",\n          \"munis\": [{\"provinceName\":\"North West\",\"muniName\":\"NW371 - Moretele [Makapanstad]\",\"muniCode\":\"NW371\"},{\"provinceName\":\"North West\",\"muniName\":\"NW372 - Madibeng [Brits]\",\"muniCode\":\"NW372\"},{\"provinceName\":\"North West\",\"muniName\":\"NW373 - Rustenburg [Rustenburg]\",\"muniCode\":\"NW373\"},{\"provinceName\":\"North West\",\"muniName\":\"NW374 - Kgetlengrivier [Koster]\",\"muniCode\":\"NW374\"},{\"provinceName\":\"North West\",\"muniName\":\"NW375 - Moses Kotane [Mogwase]\",\"muniCode\":\"NW375\"},{\"provinceName\":\"North West\",\"muniName\":\"NW381 - Ratlou [Setlagole]\",\"muniCode\":\"NW381\"},{\"provinceName\":\"North West\",\"muniName\":\"NW382 - Tswaing [Delareyville]\",\"muniCode\":\"NW382\"},{\"provinceName\":\"North West\",\"muniName\":\"NW383 - Mafikeng [Mafikeng]\",\"muniCode\":\"NW383\"},{\"provinceName\":\"North West\",\"muniName\":\"NW384 - Ditsobotla [Lichtenburg]\",\"muniCode\":\"NW384\"},{\"provinceName\":\"North West\",\"muniName\":\"NW385 - Ramotshere Moiloa [Zeerust]\",\"muniCode\":\"NW385\"},{\"provinceName\":\"North West\",\"muniName\":\"NW392 - Naledi [Vryburg]\",\"muniCode\":\"NW392\"},{\"provinceName\":\"North West\",\"muniName\":\"NW393 - Mamusa [Schweizer-Reneke]\",\"muniCode\":\"NW393\"},{\"provinceName\":\"North West\",\"muniName\":\"NW394 - Greater Taung [Reivilo]\",\"muniCode\":\"NW394\"},{\"provinceName\":\"North West\",\"muniName\":\"NW396 - Lekwa-Teemane [Christiana]\",\"muniCode\":\"NW396\"},{\"provinceName\":\"North West\",\"muniName\":\"NW397 - NW397 Local Municipality [Ganyesa/Pomfret]\",\"muniCode\":\"NW397\"},{\"provinceName\":\"North West\",\"muniName\":\"NW401 - Ventersdorp [Ventersdorp]\",\"muniCode\":\"NW401\"},{\"provinceName\":\"North West\",\"muniName\":\"NW402 - Tlokwe [Potchefstroom]\",\"muniCode\":\"NW402\"},{\"provinceName\":\"North West\",\"muniName\":\"NW403 - Matlosana [Klerksdorp]\",\"muniCode\":\"NW403\"},{\"provinceName\":\"North West\",\"muniName\":\"NW404 - Maquassi Hills [Wolmaransstad]\",\"muniCode\":\"NW404\"}]\n      },\n      {\n          \"name\": \"Free State\",\n          \"abbreviation\": \"FS\",\n          \"munis\": [{\"provinceName\":\"Free State\",\"muniName\":\"FS161 - Letsemeng [Koffiefontein]\",\"muniCode\":\"FS161\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS162 - Kopanong [Trompsburg]\",\"muniCode\":\"FS162\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS163 - Mohokare [Zastron]\",\"muniCode\":\"FS163\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS164 - Naledi [Dewetsdorp]\",\"muniCode\":\"FS164\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS181 - Masilonyana [Theunissen]\",\"muniCode\":\"FS181\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS182 - Tokologo [Dealesville]\",\"muniCode\":\"FS182\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS183 - Tswelopele [Hoopstad]\",\"muniCode\":\"FS183\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS184 - Matjhabeng [Welkom]\",\"muniCode\":\"FS184\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS185 - Nala [Bothaville]\",\"muniCode\":\"FS185\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS191 - Setsoto [Senekal]\",\"muniCode\":\"FS191\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS192 - Dihlabeng [Bethlehem]\",\"muniCode\":\"FS192\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS193 - Nketoana [Reitz]\",\"muniCode\":\"FS193\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS194 - Maluti a Phofung [Qwa-Qwa]\",\"muniCode\":\"FS194\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS195 - Phumelela [Vrede]\",\"muniCode\":\"FS195\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS196 - Mantsopa [Ladybrand]\",\"muniCode\":\"FS196\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS201 - Moqhaka [Kroonstad]\",\"muniCode\":\"FS201\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS203 - Ngwathe [Parys]\",\"muniCode\":\"FS203\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS204 - Metsimaholo [Sasolburg]\",\"muniCode\":\"FS204\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS205 - Mafube [Frankfort]\",\"muniCode\":\"FS205\"},{\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"}]\n      },\n      {\n          \"name\": \"Eastern Cape\",\n          \"abbreviation\": \"EC\",\n          \"munis\": [{\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC101 - Camdeboo [Graaff-Reinet]\",\"muniCode\":\"EC101\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC102 - Blue Crane Route [Somerset East]\",\"muniCode\":\"EC102\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC103 - Ikwezi [Jansenville]\",\"muniCode\":\"EC103\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC104 - Makana [Grahamstown]\",\"muniCode\":\"EC104\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC105 - Ndlambe [Port Alfred]\",\"muniCode\":\"EC105\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC106 - Sundays River Valley [Kirkwood]\",\"muniCode\":\"EC106\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC107 - Baviaans [Willowmore]\",\"muniCode\":\"EC107\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC108 - Kouga [Humansdorp]\",\"muniCode\":\"EC108\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC109 - Kou-Kamma [Kareedouw]\",\"muniCode\":\"EC109\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC121 - Mbhashe [Idutywa]\",\"muniCode\":\"EC121\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC122 - Mnquma [Butterworth]\",\"muniCode\":\"EC122\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC123 - Great Kei [Komga]\",\"muniCode\":\"EC123\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC124 - Amahlathi [Stutterheim]\",\"muniCode\":\"EC124\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC126 - Ngqushwa [Peddie]\",\"muniCode\":\"EC126\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC127 - Nkonkobe [Alice]\",\"muniCode\":\"EC127\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC128 - Nxuba [Adelaide]\",\"muniCode\":\"EC128\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC131 - Inxuba Yethemba [Cradock]\",\"muniCode\":\"EC131\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC132 - Tsolwana [Tarkastad]\",\"muniCode\":\"EC132\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC133 - Inkwanca [Molteno]\",\"muniCode\":\"EC133\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC134 - Lukhanji [Queenstown]\",\"muniCode\":\"EC134\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC135 - Intsika Yethu [Cofimvaba]\",\"muniCode\":\"EC135\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC136 - Emalahleni [Lady Frere]\",\"muniCode\":\"EC136\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC137 - Engcobo [Engcobo]\",\"muniCode\":\"EC137\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC138 - Sakhisizwe [Elliot]\",\"muniCode\":\"EC138\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC141 - Elundini [Mount Fletcher]\",\"muniCode\":\"EC141\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC142 - Senqu [Lady Grey]\",\"muniCode\":\"EC142\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC143 - Maletswai [Aliwal North]\",\"muniCode\":\"EC143\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC144 - Gariep [Burgersdorp]\",\"muniCode\":\"EC144\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC153 - Ngquza Hill [Flagstaff]\",\"muniCode\":\"EC153\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC154 - Port St Johns [Port St Johns]\",\"muniCode\":\"EC154\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC155 - Nyandeni [Libode]\",\"muniCode\":\"EC155\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC156 - Mhlontlo [Qumbu]\",\"muniCode\":\"EC156\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC157 - King Sabata Dalindyebo [Umtata]\",\"muniCode\":\"EC157\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC441 - Matatiele [Matatiele]\",\"muniCode\":\"EC441\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC442 - Umzimvubu [Mount Ayliff]\",\"muniCode\":\"EC442\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC443 - Mbizana [Bizana]\",\"muniCode\":\"EC443\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC444 - Ntabankulu [Ntabankulu]\",\"muniCode\":\"EC444\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}]\n      },\n      {\n          \"name\": \"Northern Cape\",\n          \"abbreviation\": \"NC\",\n          \"munis\": [{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC061 - RICHTERSVELD [Port Nolloth]\",\"muniCode\":\"NC061\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC062 - NAMA KHOI [Springbok]\",\"muniCode\":\"NC062\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC064 - KAMIESBERG [Garies]\",\"muniCode\":\"NC064\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC065 - HANTAM [Calvinia]\",\"muniCode\":\"NC065\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC066 - KAROO HOOGLAND [Fraserburg]\",\"muniCode\":\"NC066\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC067 - KHâI-MA [Pofadder]\",\"muniCode\":\"NC067\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC071 - UBUNTU [Victoria West]\",\"muniCode\":\"NC071\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC072 - UMSOBOMVU [Colesberg]\",\"muniCode\":\"NC072\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC073 - EMTHANJENI [De Aar]\",\"muniCode\":\"NC073\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC074 - KAREEBERG [Carnarvon]\",\"muniCode\":\"NC074\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC075 - RENOSTERBERG [Phillipstown]\",\"muniCode\":\"NC075\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC076 - THEMBELIHLE [Hopetown]\",\"muniCode\":\"NC076\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC077 - SIYATHEMBA [Prieska]\",\"muniCode\":\"NC077\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC078 - SIYANCUMA [Griekwastad]\",\"muniCode\":\"NC078\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC081 - MIER [Mier]\",\"muniCode\":\"NC081\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC082 - KAI !GARIB [Keimoes]\",\"muniCode\":\"NC082\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC083 - KHARA HAIS [Upington]\",\"muniCode\":\"NC083\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC084 - !KHEIS [Groblershoop]\",\"muniCode\":\"NC084\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC085 - TSANTSABANE [Postmasburg]\",\"muniCode\":\"NC085\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC086 - KGATELOPELE [Danielskuil]\",\"muniCode\":\"NC086\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC091 - Sol Plaatje [Kimberley]\",\"muniCode\":\"NC091\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC092 - Dikgatlong [Barkley West]\",\"muniCode\":\"NC092\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC093 - Magareng [Warrenton]\",\"muniCode\":\"NC093\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC094 - Phokwane [Hartswater]\",\"muniCode\":\"NC094\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC451 - Joe Morolong [Kgalagadi]\",\"muniCode\":\"NC451\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC452 - GA-SEGONYANA [Kuruman]\",\"muniCode\":\"NC452\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC453 - GAMAGARA [Kathu]\",\"muniCode\":\"NC453\"}]\n      },\n      {\n          \"name\": \"Western Cape\",\n          \"abbreviation\": \"WC\",\n          \"munis\": [{\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC011 - Matzikama [Vredendal]\",\"muniCode\":\"WC011\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC012 - Cederberg [Citrusdal]\",\"muniCode\":\"WC012\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC013 - Bergrivier [Velddrif]\",\"muniCode\":\"WC013\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC014 - Saldanha Bay [West Coast Peninsula]\",\"muniCode\":\"WC014\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC015 - Swartland [Malmesbury]\",\"muniCode\":\"WC015\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC022 - Witzenberg [Ceres]\",\"muniCode\":\"WC022\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC023 - Drakenstein [Paarl]\",\"muniCode\":\"WC023\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC024 - Stellenbosch [Stellenbosch]\",\"muniCode\":\"WC024\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC025 - Breede Valley [Worcester]\",\"muniCode\":\"WC025\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC026 - Langeberg [Robertson]\",\"muniCode\":\"WC026\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC031 - Theewaterskloof [Caledon]\",\"muniCode\":\"WC031\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC032 - Overstrand [Greater Hermanus]\",\"muniCode\":\"WC032\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC033 - Cape Agulhas [Bredasdorp]\",\"muniCode\":\"WC033\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC034 - Swellendam [Barrydale/Swellendam ]\",\"muniCode\":\"WC034\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC041 - Kannaland [Ladismith]\",\"muniCode\":\"WC041\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC042 - Hessequa [Heidelberg/Riversdale]\",\"muniCode\":\"WC042\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC043 - Mossel Bay [Mossel Bay]\",\"muniCode\":\"WC043\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC044 - George [George]\",\"muniCode\":\"WC044\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC045 - Oudtshoorn [Oudtshoorn]\",\"muniCode\":\"WC045\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC047 - Bitou [Greater Plettenberg Bay]\",\"muniCode\":\"WC047\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC048 - Knysna [Knysna]\",\"muniCode\":\"WC048\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC051 - Laingsburg [Laingsburg]\",\"muniCode\":\"WC051\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC052 - Prince Albert [Prins Albert]\",\"muniCode\":\"WC052\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC053 - Beaufort West [Beaufort West]\",\"muniCode\":\"WC053\"}]\n      }\n  ]\n  return provincesData;\n}\n\nexport function getMetrosData() {\n  var metrosData = [\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},\n    {\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},\n    {\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},\n    {\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"},\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}\n  ]\n  return metrosData;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\",\"ELVIZ_grouprect\":\"barchart_ELVIZ_grouprect__3r-aC\",\"ELVIZ_barchart\":\"barchart_ELVIZ_barchart__2NZ_A\",\"ELVIZ_stylesheet-tv\":\"barchart_ELVIZ_stylesheet-tv__1BK01\",\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_chart-body\":\"barchart_ELVIZ_chart-body__Zewz3\",\"ELVIZ_groupbarchart\":\"barchart_ELVIZ_groupbarchart__3A7Qi\",\"ELVIZ_deltabarchart\":\"barchart_ELVIZ_deltabarchart__1KKc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__tgFvS\",\"barchart-map\":\"barchartMap_barchart-map__1q5Ah\",\"ELVIZ_stylesheet-tv\":\"barchartMap_ELVIZ_stylesheet-tv__2Oynn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"map-widget\":\"map_map-widget__2RFiV\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\",\"ELVIZ_stylesheet-web\":\"map_ELVIZ_stylesheet-web__QqAjU\",\"ELVIZ_stylesheet-none\":\"map_ELVIZ_stylesheet-none__3Bxph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__1KFQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\",\"piechart\":\"piechart_piechart__1_rKy\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__1l-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__1UVX7\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__1faC8\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"quickresultswidget\":\"quickResultsWidget_quickresultswidget__1za_y\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__284h0\",\"quick-results-title\":\"quickResultsWidget_quick-results-title__l1vy0\",\"race-for-seats\":\"quickResultsWidget_race-for-seats__2jA3-\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__1QzTz\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3beRX\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3OaTN\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__1_krp\",\"ELVIZ_current-progress\":\"quickResultsWidget_ELVIZ_current-progress__2hsjC\",\"ELVIZ_current-turnout\":\"quickResultsWidget_ELVIZ_current-turnout__3BLN5\",\"ELVIZ_current-counting-progress\":\"quickResultsWidget_ELVIZ_current-counting-progress__3GJGf\",\"ELVIZ_current-spoilt-votes\":\"quickResultsWidget_ELVIZ_current-spoilt-votes__2nH8V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__1v6iW\",\"ELVIZ_tooltip\":\"piechart_ELVIZ_tooltip__nq19G\",\"donutchart\":\"piechart_donutchart__2UxpS\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__23IoW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__2O9dV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__29vdd\",\"multievent-container\":\"barchartEmbed_multievent-container__1G-dC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__3KEZl\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__2bLlY\",\"horseshoechart\":\"horseshoe_horseshoechart__2Js34\",\"ELVIZ_stylesheet-tv\":\"horseshoe_ELVIZ_stylesheet-tv__1-bHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3Hovq\",\"multievent-container\":\"barchartEmbed_multievent-container__2y7nI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3iHSi\",\"multievent-container\":\"barchartEmbed_multievent-container__3dDi0\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2Ln06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};","import React, { Component } from \"react\";\n\nimport {\n    loadScriptsForEmbedMode\n} from \"../utils\";\n\nexport default class EmbedBase extends Component {\n    constructor(props) {\n        super(props);\n        loadScriptsForEmbedMode();\n    }\n\n    render () {\n        return (\n            <div></div>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 1\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 6\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForSeatsBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 9\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    loadCanvg\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();        \n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,  \n            stylesheetFor,    \n            eventDescription,      \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    loadCanvg,\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,       \n            stylesheetFor,     \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 10\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 2\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var newState = JSON.parse(JSON.stringify(this.state));\n        newState.componentID = -1000;\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionEvents: [],\n            componentID: 5\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 4\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showProgVotesPiechart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 7\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties\n                // .filter(party => party.event.description == )\n                .filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`                 \n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatsComparisonBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 8\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatHorseShoeChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 16\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showVoteComparisonBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 12\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 13\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 14\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 15\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 17\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatDonutChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","export {default as BarChartEmbed} from \"./BarChart/barchartEmbed\";\nexport {default as RaceForSeatsBarChartEmbed} from \"./RaceForSeatBarchart/barchartEmbed\";\nexport {default as SpoiltBarChartEmbed} from \"./SpoiltBarchart/barchartEmbed\";\nexport {default as MapEmbed} from \"./Map/mapEmbed\";\nexport {default as TurnoutMapEmbed} from \"./TurnoutMap/mapEmbed\";\nexport {default as TurnoutBarChartEmbed} from \"./TurnoutBarchart/barchartEmbed\";\nexport {default as BarchartWithNavMapEmbed} from \"./BarchartWithNavMap/barchartMapEmbed\";\nexport {default as QuickResultsWidgetEmbed} from \"./QuickResultsWidget/quickResultsWidgetEmbed\";\nexport {default as ProgVotesCountPiechartEmbed} from \"./ProgVotesCountPiechart/piechartEmbed\";\nexport {default as RaceForSeatsComparisonBarChartEmbed} from \"./SeatCompBarchart/barchartEmbed\";\nexport {default as SeatHorseShoeChartEmbed} from \"./SeatHorseShoeChart/horseshoeEmbed\";\nexport {default as VoteComparisonBarchartEmbed} from \"./VoteCompBarchart/barchartEmbed\";\n\nexport {default as TVSeatCompBarchartEmbed} from \"./TVSeatCompBarchart/barchartEmbed\";\nexport {default as TVSeatSwingBarchartEmbed} from \"./TVSeatSwingBarchart/barchartEmbed\";\nexport {default as TVVoteCompBarchartEmbed} from \"./TVVoteCompBarchart/barchartEmbed\";\nexport {default as TVVoteSwingBarchartEmbed} from \"./TVVoteSwingBarchart/barchartEmbed\";\n\nexport {default as SeatDonutChartEmbed} from \"./RaceForSeatDonut/piechartEmbed\";","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      console.log(\"draw Chart\", options);\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        var maxValue = d3.max(chartData, function(d) { return parseFloat(options.yValue(d)); });\n        if (options.customizeDynamicMaxValue) {\n          minMaxY[1] = options.customizeDynamicMaxValue(maxValue);\n          console.log(\"maxValue -> minMaxY1\", maxValue, minMaxY[1]);\n          console.log(\"chartData\", chartData );\n        } else {\n          minMaxY[1] = maxValue + 1;\n        }\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  dynamicYAxisFromValues: true,\n  customizeDynamicMaxValue: (maxVal) => Math.min(100, maxVal * 1.5),\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 1\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      console.log(\"component did update\");\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n\n      console.log(\"rfv barchart componentID\", componentID);\n\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName2,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 6\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      console.log(\"targetState\", targetState);\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName2(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n        \n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName2(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 9\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            disableNavigation: false,\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    // componentWillReceiveProps(newProps) {\n    //     var newState = JSON.parse(JSON.stringify(this.state));\n    //     fetchDataFromOBJ(newState, newProps);\n    //     this.setState(newState);\n    // }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                var regionType = self.state.regionType\n                if (regionType == \"municipality\") {\n                    if (!geoJsonData.objects[self.state.muniCode])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                } else { // \"municipality-vd\"\n                    if (!geoJsonData.objects[self.state.iecId])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                }\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    // if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    var undefinedText;\n                    if (self.state.regionType === \"province\") {\n                        undefinedText = \"New municipality - no previous results available\"\n                    } else {\n                        undefinedText = \"New voting district - no previous results available\"\n                    }\n                    var mainPartyName = getMainPartyName(d, i);\n                    var subRegionName = getSubRegionName(d.properties, self.state);\n                    var tooltipText = (typeof mainPartyName !== \"undefined\")? \n                                (subRegionName + \" : \" + mainPartyName) : undefinedText;\n\n                    tooltipDiv.html(tooltipText)\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 500)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                \n                function setRegionType(regionType) {\n                    var newState;\n                    var newState = {\n                        regionType: self.state.regionType, \n                        provinceName: self.state.provinceName,\n                        muniName: self.state.muniName,\n                        muniCode: self.state.muniCode,\n                        iecId: self.state.iecId,\n                    }\n                    newState.regionType = regionType;\n                    triggerCustomEvent(events.REGION_CHANGE, newState);\n                    self.setState(newState);\n                }\n\n                function appendSpan(foDiv, regionName, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"span\")\n                        .style(\"height\", \"30px\")\n                        .style(\"cursor\", \"default\")\n                        .html(regionName);\n                }\n\n                function appendLink(foDiv, regionName, regionType, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"a\")\n                        .style(\"height\", \"30px\")\n                        .style(\"cursor\", \"pointer\")\n                        .html(regionName)\n                        .on(\"click\", function() {\n                            setRegionType(regionType);\n                        });\n                }\n                \n                var foDiv = fo.append(\"xhtml:div\");\n                var regionType = self.state.regionType;\n                if (regionType == \"national\") {\n                    appendSpan(foDiv, \"South Africa\", false);\n                } else {\n                    appendLink(foDiv, \"South Africa\", \"national\", false);\n                    if (regionType == \"province\") {\n                        appendSpan(foDiv, self.state.provinceName, true);\n                    } else {\n                        appendLink(foDiv, self.state.provinceName, \"province\", true);\n                        if (regionType == \"municipality\") {\n                            appendSpan(foDiv, self.state.muniCode, true);\n                        } else {\n                            appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                            appendSpan(foDiv, self.state.iecId, true);\n                        }\n                    }\n                }\n                // foDiv\n                //     .append(\"button\")\n                //     .attr(\"class\", \"go-back\")\n                //     .style(\"height\", \"30px\")\n                //     .style(\"color\", \"black\")\n                //     .html(\"go back\")\n                //     .on(\"click\", function() {\n                //         var regionType = self.state.regionType;\n                //         var newState, event;\n    \n                //         var newState = {\n                //             regionType: self.state.regionType, \n                //             provinceName: self.state.provinceName,\n                //             muniName: self.state.muniName,\n                //             muniCode: self.state.muniCode,\n                //             iecId: self.state.iecId,\n                //         }\n                        \n                //         if (regionType === \"province\") {\n                //             newState.regionType = \"national\";\n                //         } else if (regionType === \"municipality\") {\n                //             newState.regionType = \"province\";\n                //         } else if (regionType === \"municipality-vd\") {\n                //             newState.regionType = \"municipality\";\n                //         }\n    \n                //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                //         self.setState(newState);\n                //     });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(`${currentRegionName} has been disestablished`); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            if (!window.canvg) {\n                return reject(\"canvg module not available\");\n            }\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                var regionType = self.state.regionType\n                if (regionType == \"municipality\") {\n                    if (!geoJsonData.objects[self.state.muniCode])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                } else { // \"municipality-vd\"\n                    if (!geoJsonData.objects[self.state.iecId])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                }\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    \n                    var undefinedText;\n                    if (self.state.eventDescription.indexOf(\"2019\") == -1) {\n                        if (self.state.regionType === \"province\") {\n                            undefinedText = \"New municipality - no previous results available\"\n                        } else {\n                            undefinedText = \"New voting district - no previous results available\"\n                        }\n                    } else {\n                        undefinedText = \"votes not counted yet\";\n                    }\n\n                    var turnoutData = getTurnout(d, i);\n                    var subRegionName = getSubRegionName(d.properties, self.state);\n                    var tooltipText = (typeof turnoutData !== \"undefined\")? \n                                (subRegionName + \" : \" + turnoutData + \"%\") : undefinedText;\n\n                    tooltipDiv.html(tooltipText)\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n                if (!self.state.disableNavigation) {\n                    var fo = svg.append(\"foreignObject\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", 10)\n                        .attr(\"width\", 500)\n                        .attr(\"height\", 30)\n                        .attr(\"class\", \"map-controls\")\n                    \n                    function setRegionType(regionType) {\n                        var newState;\n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        newState.regionType = regionType;\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    }\n    \n                    function appendSpan(foDiv, regionName, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"span\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"default\")\n                            .html(regionName);\n                    }\n    \n                    function appendLink(foDiv, regionName, regionType, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"a\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"pointer\")\n                            .html(regionName)\n                            .on(\"click\", function() {\n                                setRegionType(regionType);\n                            });\n                    }\n                    \n                    var foDiv = fo.append(\"xhtml:div\");\n                    var regionType = self.state.regionType;\n                    if (regionType == \"national\") {\n                        appendSpan(foDiv, \"South Africa\", false);\n                    } else {\n                        appendLink(foDiv, \"South Africa\", \"national\", false);\n                        if (regionType == \"province\") {\n                            appendSpan(foDiv, self.state.provinceName, true);\n                        } else {\n                            appendLink(foDiv, self.state.provinceName, \"province\", true);\n                            if (regionType == \"municipality\") {\n                                appendSpan(foDiv, self.state.muniCode, true);\n                            } else {\n                                appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                appendSpan(foDiv, self.state.iecId, true);\n                            }\n                        }\n                    }\n                    // foDiv\n                    //     .append(\"button\")\n                    //     .attr(\"class\", \"go-back\")\n                    //     .style(\"height\", \"30px\")\n                    //     .style(\"color\", \"black\")\n                    //     .html(\"go back\")\n                    //     .on(\"click\", function() {\n                    //         var regionType = self.state.regionType;\n                    //         var newState, event;\n        \n                    //         var newState = {\n                    //             regionType: self.state.regionType, \n                    //             provinceName: self.state.provinceName,\n                    //             muniName: self.state.muniName,\n                    //             muniCode: self.state.muniCode,\n                    //             iecId: self.state.iecId,\n                    //         }\n                            \n                    //         if (regionType === \"province\") {\n                    //             newState.regionType = \"national\";\n                    //         } else if (regionType === \"municipality\") {\n                    //             newState.regionType = \"province\";\n                    //         } else if (regionType === \"municipality-vd\") {\n                    //             newState.regionType = \"municipality\";\n                    //         }\n        \n                    //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                    //         self.setState(newState);\n                    //     });\n                }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);       \n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(`${currentRegionName} has been disestablished`); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 10\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n    \n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 2\n        }      \n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n      const {\n        stylesheetFor\n      } = this.state;\n\n        return (\n        <div ref=\"superwidget\" className={className(\"barchart-map\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = options.variable,\n        category = options.category,\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n\n        \n\n    function colour(key) {\n        // console.log(\"colorsData\", colorsData);\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var totalSvg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom)))\n        .classed(\"svg-content\", true);\n    \n    \n    var transformX = height / 2, transformY = height / 2;\n    if (options.chartType === 'Progress on Votes Count') {\n    } else {\n        transformX = width / 2;\n    }\n    var svg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + transformX + ',' + transformY + ')');\n    \n    var labelSvg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + height * 6 / 5 + ',' + height / 2 + ')');\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n\n        if (options.chartType === 'Progress on Votes Count') {\n            colorsData = colorsDataP;\n        } else {\n            var partyColorByName = {};\n\n            var partyColorsData = colorsDataP;\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.abbreviation] = edge.node.colour;\n                })\n            }\n            colorsData = partyColorByName;\n        }\n        \n        data = value;\n\n        if (options.chartType === 'Progress on Votes Count') {\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', -15)\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle')\n                .text('Completed' + ': ' + data[0][\"percent\"] + '%');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .text('Captured Votes' + ': ' + data[0][\"count\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 15)\n                .text('Total' + ': ' + data[0][\"totalCount\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n        }\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            // console.log(\"mouseenter\", data);\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        if (options.chartType === 'Progress on Votes Count') {\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n        } else { //'Race for Seats Donut chart'\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Seats' + ': ' + data.data[\"seats\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Party' + ': ' + data.data[\"name\"] + '</tspan>';\n        }\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count',\n  variable: 'percent',\n  category: 'name'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 4\n      }     \n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"piechart\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"../ProgVotesCountPiechart/d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Donut Chart',\n  variable: 'seats',\n  category: 'name',\n  viewBox: '170 0 360 320'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass DonutChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 17\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      console.log(\"targetState\", targetState);\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-donutchart-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      // console.log(\"styles\", styles);\n      return (\n          <div className={className(\"donutchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n\n        // console.log(\"chartData\", chartData);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default DonutChart;\n","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\nvar toShowChartLabels = [\"Race for Votes\", \"Turnout\", \"Race for Seats\"];\nvar toShowCharts = [\"race for votes\", \"turnout\", \"race for seats\"];\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"Race for Votes\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {}, chartType = \"\";\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            chartType = toShowCharts[passInfo[2]];\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n            chartType = toShowCharts[passInfo[3]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            chartType = toShowCharts[passInfo[4]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            chartType = \"race for votes\";\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n\n        if (!chartType)\n            return;\n        \n        // console.log(\"handleNavBarSelection\", regionType, chartType);\n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType \n                && this.state.comp == chartType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName \n                && this.state.comp == chartType)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName\n                && this.state.comp == chartType)\n                return;\n        }\n\n        newState.comp = chartType;\n\n        // console.log(\"handleNavBarSelection\", newState);\n\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, newState);\n        // triggerCustomEvent(events.REGION_CHANGE, newState);\n        // triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                icon: '1',\n                label: 'National Assembly',\n                // to: '1',\n                content: toShowChartLabels.map((toshowchart, chartIdx) => {\n                    return {\n                        icon: `1-${chartIdx}`,\n                        label: toshowchart,\n                        to: `1-${chartIdx}`,\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Province Legislature',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        // to: `2-${i}`,\n                        content: toShowChartLabels.map((toshowchart, chartIdx) => {\n                            return {\n                                icon: `2-${i}-${chartIdx}`,\n                                label: toshowchart,\n                                to: `2-${i}-${chartIdx}`,\n                            }\n                        })\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            // {\n            //     icon: '',\n            //     label: 'Metros',\n            //     content: metrosData.map((metro, i) => {\n            //         return {\n            //             icon: `4-${i}`,\n            //             label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n            //             to: `4-${i}`,\n            //             // content: toShowCharts.map((toshowchart, chartIdx) => {\n            //             //     return {\n            //             //         icon: `4-${i}-${chartIdx}`,\n            //             //         label: toshowchart,\n            //             //         to: `4-${i}-${chartIdx}`,\n            //             //     }\n            //             // })\n            //         }\n            //     })\n            // }\n        ];\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatDonut from '../RaceForSeatDonut/piechart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getSpoiltData,\n    getTurnoutDataForOneEvent,\n    getProgressVotesCount,\n} from \"../../api\";\n\nimport {\n    getRegionName,\n    getRegionName2,\n    getRegionName3,\n    triggerCustomEvent,\n    fetchDataFromOBJ,\n    handleRegionChange,\n\n    parseSpoiltVotesData,\n    parseTurnoutDataForOneEvent,\n    parseProgressVotesCount\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\",\n            stylesheetFor: \"web\",\n            componentID: 5\n        }\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.refreshIntervalID = setInterval(() => {\n            self.fetchCurrentResultData();\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n\n        this.fetchCurrentResultData();\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.fetchCurrentResultData()\n    }\n\n    fetchCurrentResultData() {\n        console.log(\"fetchCurrentResultData start\");\n        var self = this;\n        var newProps = JSON.parse(JSON.stringify(this.state));\n        // newProps.eventDescription = \"2019_mock1\";\n        var dataLoaders = [\n            getSpoiltData(newProps), \n            getTurnoutDataForOneEvent(newProps),\n            getProgressVotesCount(newProps)\n        ];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var spoiltData = values[0];\n            var turnoutData = values[1];\n            var progVotesData = values[2];\n\n            console.log(\"spoiltData\", spoiltData);\n            console.log(\"turnoutData\", turnoutData);\n            console.log(\"progVotesData\", progVotesData);\n\n            var parsedSpoiltData = parseSpoiltVotesData(spoiltData, newProps);\n            var parsedTurnoutData = parseTurnoutDataForOneEvent(turnoutData, newProps);\n            var parsedProgVotesData = parseProgressVotesCount(progVotesData, newProps);\n\n            var newState = {            \n                currentTurnout: parsedTurnoutData[0].percVoterTurnout,\n                currentCountingProg: parsedProgVotesData[0].percent,\n                currentSpoiltVotes: parsedSpoiltData[1].percent\n            };\n\n            self.refs.currentTurnout.innerHTML = newState.currentTurnout + \"%\";\n            self.refs.currentCountingProg.innerHTML = newState.currentCountingProg + \"%\";\n            self.refs.currentSpoiltVotes.innerHTML = newState.currentSpoiltVotes + \"%\";\n\n            console.log(\"parsedSpoiltData\", parsedSpoiltData);\n            console.log(\"parsedTurnoutData\", parsedTurnoutData);\n            console.log(\"parsedProgVotesData\", parsedProgVotesData);\n\n        }).catch(error => console.error(error));\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'race for votes') {\n            imageLoadPromises = [\n                this.votesInstance1.exportAsPNGUri(), \n                this.votesInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'race for seats') {\n            imageLoadPromises = [\n                this.seatsInstance1.exportAsPNGUri(), \n                this.seatsInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'turnout') {\n            imageLoadPromises = [\n                this.turnoutInstance1.exportAsPNGUri(), \n                this.turnoutInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'counting progress') {\n            imageLoadPromises = [\n                this.progressInstance1.exportAsPNGUri(), \n                this.progressInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'spoilt votes') {\n            imageLoadPromises = [\n                this.spoiltInstance1.exportAsPNGUri(), \n                this.spoiltInstance2.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            imgs.file(\"image1.png\", values[0], {base64: true});\n            imgs.file(\"image2.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState);\n\n        var triggerState = JSON.parse(JSON.stringify(newState));\n        triggerState.componentID = -1000;\n\n        triggerCustomEvent(events.CHART_PREVIEW, triggerState);\n        triggerCustomEvent(events.MAP_PREVIEW, triggerState);\n    };\n\n    renderTurnoutProgressSpoilt() {\n        var currentTurnout = 0, currentCountingProg = 0, currentSpoiltVotes = 0;\n        return (\n            <div className={cn(\"current-progress\")}>\n                <div className={cn(\"current-turnout\")}>\n                    <div>Turnout</div>\n                    <div ref=\"currentTurnout\">{currentTurnout}%</div>\n                </div>\n                <div className={cn(\"current-counting-progress\")}>\n                    <div>Counting Progress</div>\n                    <div ref=\"currentCountingProg\">{currentCountingProg}%</div>\n                </div>\n                <div className={cn(\"current-spoilt-votes\")}>\n                    <div>Spoilt Votes</div>\n                    <div ref=\"currentSpoiltVotes\">{currentSpoiltVotes}%</div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            stylesheetFor,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n        } = this.state;\n        var self = this;\n        return (\n            <div className={className(\"quickresultswidget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {/* <div className={cn(\"row\") + \" \" + cn(\"component-transition-menu\")}>\n                    <div className={cn(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results \n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={cn(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div> */}\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        RACE FOR VOTES: <span className=\"regionName\">{getRegionName2(self.state)}</span>\n                                    </div>\n                                    {\n                                        this.renderTurnoutProgressSpoilt()\n                                    }\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart \n                                            ref={instance => { this.votesInstance1 = instance; }} \n                                            {...this.state} \n                                            componentID={-1000}/>\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.votesInstance2 = instance; }} \n                                            {...this.state} \n                                            componentID={-1000}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")+\" \"+className(\"race-for-seats\")}>\n                                        RACE FOR SEATS: <span className=\"regionName\">{getRegionName(self.state)}</span>(#SEATS)\n                                    </div>\n                                    {\n                                        this.renderTurnoutProgressSpoilt()\n                                    }\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatDonut \n                                            ref={instance => { this.seatsInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.seatsInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        RACE FOR VOTES: TURNOUT - {getRegionName3(self.state)}\n                                    </div>\n                                    {\n                                        this.renderTurnoutProgressSpoilt()\n                                    }\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart \n                                            ref={instance => { this.turnoutInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap \n                                            ref={instance => { this.turnoutInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        COUNTING PROGRESS: {getRegionName(self.state)}\n                                    </div>\n                                    {\n                                        this.renderTurnoutProgressSpoilt()\n                                    }\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart \n                                            ref={instance => { this.progressInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.progressInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        SPOILT VOTES: {getRegionName(self.state)}<br/>\n                                    </div>\n                                    {\n                                        this.renderTurnoutProgressSpoilt()\n                                    }\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart \n                                            ref={instance => { this.spoiltInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.spoiltInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 7\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      \n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 8\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"horseshoechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 16\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromPartyAbbr} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromPartyAbbr(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('class', className(config.CSS_PREFIX + \"grouprect\"))\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromPartyAbbr(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true,\n  viewBox: '45 0 655 340'\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 12\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromPartyAbbr} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => parseFloat(item.data[0].delta))) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => parseFloat(item.data[0].delta))) - 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromPartyAbbr(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromPartyAbbr(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n\n      svg.selectAll(\".xAxisLine\").remove();\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"currentColor\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 13\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      console.log(\"targetState\", targetState);\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 14\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 15\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","export {default as BarChart} from \"./BarChart/barchart\";\nexport {default as RaceForSeatsBarChart} from \"./RaceForSeatBarchart/barchart\";\nexport {default as SpoiltBarChart} from \"./SpoiltBarchart/barchart\";\nexport {default as Map} from \"./Map/map\";\nexport {default as TurnoutMap} from \"./TurnoutMap/map\";\nexport {default as TurnoutBarChart} from \"./TurnoutBarchart/barchart\";\nexport {default as BarchartWithNavMap} from \"./BarchartWithNavMap/barchartMap\";\nexport {default as QuickResultsWidget} from \"./QuickResultsWidget/quickResultsWidget\";\nexport {default as ProgVotesCountPiechart} from \"./ProgVotesCountPiechart/piechart\";\nexport {default as RaceForSeatsComparisonBarChart} from \"./SeatCompBarchart/barchart\";\nexport {default as SeatHorseShoeChart} from \"./SeatHorseShoeChart/horseshoe\";\nexport {default as VoteComparisonBarchart} from \"./VoteCompBarchart/barchart\";\n\nexport {default as TVSeatCompBarchart} from \"./TVSeatCompBarchart/barchart\";\nexport {default as TVSeatSwingBarchart} from \"./TVSeatSwingBarchart/barchart\";\nexport {default as TVVoteCompBarchart} from \"./TVVoteCompBarchart/barchart\";\nexport {default as TVVoteSwingBarchart} from \"./TVVoteSwingBarchart/barchart\";\n\nexport {default as SeatDonutChart} from \"./RaceForSeatDonut/piechart\";","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\",\n    // \"DOMAIN\": \"http://127.0.0.1:8080\",\n    \"CSS_PREFIX\": \"ELVIZ_\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst CHART_PREVIEW = \"chart-preview\";\nconst MAP_PREVIEW = \"map-preview\";\nconst QUICK_RESULTS_PREVIEW = \"quick-results-preview\"\nconst EXPORT_PNG = \"export-png\";\nconst EXPORT_SUPERWIDGET_PNG = \"export-superwidget-png\";\n\nexport default {\n    REGION_CHANGE,\n    CHART_PREVIEW,\n    MAP_PREVIEW,\n    QUICK_RESULTS_PREVIEW,\n    EXPORT_PNG\n};","import * as d3 from \"d3\";\nimport config from \"../config\";\n\nfunction calcPercent(a, b) {\n  if (b == 0) {\n    return 0;\n  } else {\n    return (a/b*100).toFixed(2);\n  }\n}\n\nexport function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n\n    results = results.slice(0, props.numParties);\n\n    console.log(\"data\", data);\n    console.log(\"results\", results)\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            validVotes: el[\"validVotes\"].toFixed(2),\n            percOfVotes: el[\"percOfVotes\"].toFixed(2),\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function parseVotesComparisonData(data, props) {\n  var results, edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else { //\"municipality-vd\"\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n\n  var partyfilter_edges = edges.map(edge => {\n    var nodeData = edge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"]\n      .filter(a => props.partyIecId\n        ? (a.node[\"party\"][\"iecId\"] == props.partyIecId) \n        : (a.node[\"party\"][\"abbreviation\"] == props.partyAbbr));\n    var result = results[0];\n    if (result) {\n      var el = result[\"node\"];\n      return {\n          name: nodeData[\"event\"][\"description\"],\n          percOfVotes: el[\"percOfVotes\"].toFixed(2),\n          partyInfo: el[\"party\"]\n      }\n    }\n    return {\n      name: nodeData[\"event\"][\"description\"],\n      percOfVotes: 0,\n      partyInfo: {\n        name: props.partyAbbr,\n        abbreviation: props.partyAbbr,\n      }\n    }\n  });\n  var results = partyfilter_edges.filter(edge => props.eventDescriptions.indexOf(edge.name) != -1).reverse();\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        percOfVotes: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n  return new_results;\n}\n\nexport function parseVotesComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseVotesComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseProgressVotesCount(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"progress votes count data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Completed\",\n      percent: calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdWithResultsCaptured\"]\n    }, {\n      name: \"Not Completed\",\n      percent: 100 - calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdCount\"] - nodeData[\"vdWithResultsCaptured\"]\n    }\n  ]\n}\n\n// export function parseMainPartyData(data, props) {\n//     if (!data)  return null;\n//     var locationToMainParty = {};\n//     var edges;\n//     var regionType = props.regionType;\n//     var sort_results = function(party_results) {\n//         party_results[\"edges\"] = party_results[\"edges\"].sort(function(a, b) {\n//             return b.node.percOfVotes - a.node.percOfVotes;\n//         })\n//         return party_results;\n//     }\n//     if (regionType === \"national\") {\n//         edges = data[\"data\"][\"allProvincialBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var provinceName = node[\"location\"][\"name\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[provinceName] = partyName;\n//         })\n//     } else if (regionType === \"province\") {\n//         edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var muniCode = node[\"location\"][\"code\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[muniCode] = partyName;\n//         })\n//     } else {// \"municipality\"\n//         edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var iecId = node[\"location\"][\"iecId\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[iecId] = partyName;\n//         })\n//     }\n//     return locationToMainParty;\n// }\n\nfunction getTopPartyNameFromNode(node) {\n  if (node && node[\"topParty\"] && node[\"topParty\"][\"party\"] && node[\"topParty\"][\"party\"][\"name\"])\n      return node[\"topParty\"][\"party\"][\"name\"];\n  return \"\";\n}\n\nexport function parseMainPartyData(data, props) {\n  if (!data)  return null;\n  var locationToMainParty = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"topPartiesByProvince\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          locationToMainParty[provinceName] = getTopPartyNameFromNode(node);\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"topPartiesByMunicipality\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          locationToMainParty[muniCode] = getTopPartyNameFromNode(node);\n      })\n  } else {// \"municipality\"\n      edges = data[\"data\"][\"topPartiesByVotingDistrict\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          locationToMainParty[iecId] = getTopPartyNameFromNode(node);\n      })\n  }\n  return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      partyInfo: node[\"party\"]\n    }\n  })\n  \n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return results.slice(0, props.numParties);\n}\n\nexport function parseSeatsComparisonData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"event\"][\"description\"],\n      partyInfo: node[\"party\"]\n    }\n  }).filter(result => props.eventDescriptions.indexOf(result.name) != -1)\n  .filter(result => \n    props.partyIecId\n    ? (result.partyInfo[\"iecId\"] == props.partyIecId)\n    : (result.partyInfo[\"abbreviation\"] == props.partyAbbr)\n  )\n\n  console.log(\"filter\", data, results, props.partyIecId);\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        seats: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n      // name: nodeData[\"event\"][\"description\"],\n      // percOfVotes: 0,\n      // partyInfo: {\n      //   name: props.partyAbbr,\n      //   abbreviation: props.partyAbbr,\n      // }\n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  console.log(\"new_results\", new_results);\n  return new_results;\n}\n\nexport function parseSeatsComparisonDataMultipleParties(data, props) {\n  console.log(\"parseSeatsComparisonDataMultipleParties\", data, props);\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    console.log(\"parseSeatsComparisonData\", data, newProps);\n    return {\n      partyAbbr,\n      data: parseSeatsComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseTurnoutData(data, props) {\n  if (!data)  return null;\n  var locationToTurnout = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[provinceName] = percVoterTurnout;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[muniCode] = percVoterTurnout;\n      })\n  } else {// \"municipality\" or \"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[iecId] = percVoterTurnout;\n      })\n  }\n  return locationToTurnout;\n}\n\nexport function parseTurnoutDataForAllEvents(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var eventType = node[\"event\"][\"eventType\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      eventType: eventType,\n      percVoterTurnout\n    }\n  }).filter(edge => edge.eventType.toLowerCase().indexOf(props.eventType) != -1)\n}\n\nexport function parseTurnoutDataForOneEvent(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      percVoterTurnout\n    }\n  })\n}\n\nexport function parseSpoiltVotesData(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"spoilt data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Valid\",\n      percent: calcPercent(nodeData[\"totalValidVotes\"], nodeData[\"totalVotesCast\"])\n    }, {\n      name: \"Spoilt\",\n      percent: calcPercent(nodeData[\"spoiltVotes\"], nodeData[\"totalVotesCast\"])\n    }\n  ]\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\" - \") != -1) {\n        muniName = muniName.split(\" - \")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.iecId;\n  }\n}\n\nexport function getRegionName2(state) {\n  if (state.regionType == \"national\")\n    return \"National Assembly\";\n  return getRegionName(state);\n}\n\nexport function getRegionName3(state) {\n  if (state.regionType == \"national\")\n    return \"NATIONAL\";\n  return getRegionName(state);\n}\n\n\n\nexport function getNationOrProvinceName(state) {\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  return state.provinceName;\n}\n\nexport function getNationOrProvinceName2(state) {\n  if (state.regionType == \"national\") {\n    return \"National Assembly\";\n  }\n  return state.provinceName;\n}\n\nexport function createTooltip(className) {\n  var tooltipClassName = className(config.CSS_PREFIX + \"tooltip\")\n  if (document.getElementsByClassName(tooltipClassName)[0]) {\n    return d3.select(`.${tooltipClassName}`);\n  } else {\n    return d3.select(\"body\").append(\"div\")\t\n      .attr(\"class\", tooltipClassName)\t\t\t\t\n      .style(\"opacity\", 0);\n  }\n}\n\n\n\nexport function fixMapLabelIntersect() {\n  var labelElements = document.getElementsByClassName(\"place-label\");\n  var regions = {};\n  var overlapCnt = {};\n  var i;\n\n  for (i = 0; i < labelElements.length; i ++) {\n      regions[i] = labelElements[i].getBoundingClientRect();\n  }\n\n  for (i = 0; i < labelElements.length; i ++) {\n      for (var j = 0; j < i; j ++) {\n          var rect1 = regions[i];\n          var rect2 = regions[j];\n          var overlap = !(rect1.right < rect2.left || \n              rect1.left > rect2.right || \n              rect1.bottom < rect2.top || \n              rect1.top > rect2.bottom);\n          if (overlap) {\n              overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n          }\n      }\n      if (overlapCnt[i] > 2) {\n          labelElements[i].setAttribute(\"opacity\", 0)\n      } else if (overlapCnt[i] > 0){\n          labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n      } else {\n\n      }\n  }\n}\n\nexport function triggerCustomEvent(eventName, eventParam) {\n  var event = new CustomEvent(eventName, { detail: eventParam });\n  document.dispatchEvent(event);\n}\n\nexport function formatPartyName(name) {\n  return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n}\n\nexport function getSubRegionName(properties, state) {\n  if (state.regionType === \"national\") {\n      return properties.SPROVINCE;\n  } else if (state.regionType === \"province\") {\n      return properties.smunicipal && properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n  } else {//municipality\n    return getMunicipalityiecId(properties);\n    // if (properties.Municipali) {\n    //   return properties.Municipali.split(\" - \")[1].split(\"[\")[0];\n    // }\n    // return properties.SMUNICIPAL && properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n  }\n}\n\nexport function getMunicipalityCode(properties) {\n  return properties.code || (properties.smunicipal && properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\"));\n}\n\nexport function getMunicipalityiecId(properties) {\n  return properties.VDNumber || properties.PKLVDNUMBE;\n}\n\nexport function getRegionFileName(state) {\n  var nationalMapFile = \"province_lo-res.geojson\";\n  function getProvinceFileName(provinceName) {\n      var provinceNameToFileMap = {\n          \"Limpopo\": \"lim_lo-res.geojson\",\n          \"Mpumalanga\": \"mp_lo-res.geojson\",\n          \"Gauteng\": \"gt_lo-res.geojson\",\n          \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n          \"North West\": \"nw_lo-res.geojson\",\n          \"Free State\": \"fs_lo-res.geojson\",\n          \"Eastern Cape\": \"ec_lo-res.geojson\",\n          \"Northern Cape\": \"nc_lo-res.geojson\",\n          \"Western Cape\": \"wc_lo-res.geojson\",\n      }\n      return provinceNameToFileMap[provinceName];\n  }\n  switch(state.regionType) {\n      case \"national\":\n          return nationalMapFile;\n      case \"province\":\n          return getProvinceFileName(state.provinceName);\n      case \"municipality\":\n          return state.muniCode + \".topojson\";//\".geojson\";\n      case \"municipality-vd\":\n          return \"vd-data/\" + state.muniCode + \"-\" + state.iecId + \".topojson\"; //\".geojson\";\n      default:\n          return null;\n  }\n}\n\nexport function loadScript(id, scriptURL, callback) {\n  if (document.getElementById(id))\n    return;\n  var script = document.createElement('script');\n  script.onload = function () {\n    if(callback) {\n      callback();\n    }\n  };\n  script.id = id;\n  script.src = scriptURL;\n\n  document.head.appendChild(script);\n}\n\nexport function loadCanvg() {\n  loadScript(\"canvgScript\", \"https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js\", function() {\n    console.log(\"canvgScript load finished\");\n  });\n}\n\nexport function loadJSZip() {\n  loadScript(\"jsZipScript\", \"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js\", function() {\n    console.log(\"loadJSZip load finished\");\n  });\n}\n\nexport function loadScriptsForEmbedMode() {\n  loadCanvg();\n  loadJSZip();\n}\n\n\nexport function handleRegionChange(event) {\n  var newState = JSON.parse(JSON.stringify(event.detail));\n  delete newState.componentID;\n  this.setState(newState)\n}\n\nexport function fetchDataFromOBJ(state, props) {\n  Object.keys(state).forEach(key => {\n    if (props[key]) {\n      state[key] = props[key];\n    }\n  })\n}\n\nexport function formatClassNameFromPartyAbbr(partyAbbr) {\n  return partyAbbr.replace(/[^a-zA-Z0-9]+/g, '');\n}\n\nexport function onPartyAbbrsChange(e) {\n    var options = e.target.options;\n    var values = [];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        values.push(options[i].value);\n      }\n    }\n    values = values.slice(0, 4);\n    this.setState({\n        partyAbbrs: values.map(value => value.split(\"\\x22\")[0]),\n        partyIecIds: values.map(value => value.split(\"\\x22\")[1]),\n    })\n}\n\nexport function nationalEventSelected(state) {\n  for (var i = 0; i < state.electionEvents.length; i ++) {\n    if (state.electionEvents[i].description == state.eventDescription) {\n      if (state.electionEvents[i].eventType.description.toLowerCase().indexOf(\"national\") != -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"],"sourceRoot":""}