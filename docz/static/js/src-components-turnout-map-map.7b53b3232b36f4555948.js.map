{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","event","rect","rendercanvas","canvg","refs","vizcontainer","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","e","canvas","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","self","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getTurnoutData","Promise","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","concat","legends","text","parseInt","getLegendXY","it","selectAll","data","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","error","console","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.3846a036.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = \"race-for-votes-map.png\";\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}