{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/VoteCompBarchart/barchart.css","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/VoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/VoteCompBarchart/barchart.mdx","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","barchart_partyColorsData","getProvincesData","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbr","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","svgToPng","refs","vizcontainer","childNodes","newState","detail","setState","d3barchart","react_default","a","createElement","getRegionName","ref","dataLoaders","getVotesDataForComparation","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","parseVotesComparationData","VoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","VoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container"],"mappings":"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","file":"static/js/src-components-vote-comp-barchart-barchart.3e7cb9cc.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__2TRxQ\",\"chart-title\":\"barchart_chart-title__2MbVK\",\"chart-body\":\"barchart_chart-body__1BFKS\",\"percentage-label\":\"barchart_percentage-label__9YaI6\",\"chart\":\"barchart_chart__2SxRk\",\"large\":\"barchart_large__9_dlZ\",\"y-axis-label\":\"barchart_y-axis-label__1hJJC\",\"y-label\":\"barchart_y-label__1N0OW\",\"annotation-line\":\"barchart_annotation-line__1vyoE\",\"tooltip\":\"barchart_tooltip__2xqX_\",\"grid\":\"barchart_grid__28BA-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataForComparation,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparationData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparation\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-votes-barchart.png\");\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparation(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparationData(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.name === thing.name\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparation Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes-comparation---bar-chart\"}}>{`Race for Votes Comparation - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};"],"sourceRoot":""}