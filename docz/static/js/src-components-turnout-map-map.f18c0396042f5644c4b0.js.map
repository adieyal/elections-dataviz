{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","region","loading-spinner","map-navbar","map-container","map","tooltip","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","handlePreviewEvent","bind","_assertThisInitialized","Component","container","drawGraph","draw","getContainer","document","events","event","newState","detail","setState","selectionData","CustomEvent","REGION_CHANGE","d3","refs","vizcontainer","loading","react_default","a","createElement","getRegionName","ref","react_loading_default","type","color","height","width","self","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","console","process","h","svg","dataLoaders","getTurnoutData","Promise","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityiecId","topojson","projection","path","concat","legends","text","parseInt","getLegendXY","it","selectAll","data","enter","append","attr","center","projectionCenter","polylabel","style","labelElements","regions","overlapCnt","length","j","rect1","rect2","bottom","regionName","pageX","smunicipal","w","fo","muniImuniCodeD","window","redrawChart","TurnoutMap_map","provincesData","mapEmbed_className","originClassName","bootstrapStyles","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","edge","error","e","value","MAP_PREVIEW","_this2","DOMAIN","_this$state","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.59b32f70.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"region\":\"map_region___dU79\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"map-navbar\":\"map_map-navbar__2OVpt\",\"map-container\":\"map_map-container__Nrswl\",\"map\":\"map_map__3W0yw\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  createTooltip\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.PKLVDNUMBE; \n                        }\n                    }\n                    tooltipDiv.html(regionName(self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKZ9VmN0TX4T04AEchASdah9DgSRLD6H5wmgmZJCiGZ-FVVABXtKDZnPIhAhyY05XgyREOQz4NxoDCsIEHCCDwgjKOo7JiLtDV2CDKVYLlBVzXaISHWAdhNB8eRxPlAABGAiBEAZUBQrppIDVBdFRY5TgAL2cAhEmxdhuHYYB1iiARnlQK52gABnYZMZiwdp9xrGZOxYWcXIAFi89gADYvJ89YwBAgAxH1oESFz-GcQ5EUdTB2AABSEfglg0n44H8xFoprWKaGcCATMudgAEZgt8-RwQM6gjIAQTmaz2EjOTyBsKB0HDdh5E5ayxB6mMZHYVFLJgbhgEPMyLOxeRt1rYB-ugIbggAMl28ZEnmShmi2wbhu4S75TAUIDJ7VB2nYAB-DZtvDSMxquM6dtQZqaykGRq3fMxYWEzAwDCKApg-8bJv-zqVxrRNRIIHA4syFJrwIdbazrPD2C3VdEzwqiaIJnG60kFG0YxrH1qkBGgbMb8QCYlCM3QzDsP2HjCIArQKBA_QGDI4SUaWOT1zQrMlLo9h-DNKVBNIyD2CMEI7HQZNlP4LXldFh11f8YchU0Fk5f4CJTbgagLXIKAIH0fXVbkqrMAAOVcVglk9jhZfdBWtQtfJMFQL3lZkqZdEgOcLZAHBPQTlDUBj53yP7SgkigVxAigHWQCFLOc4XNPhNmqy489PmzjgUuHRgVh0PzpOk4b9C681c0ABlKE7Ap88Vy0oF7wLChAEiDamOykdHAgOK47VolcXzcbPXLfjQRE4EXghXDMf24PjxPPVmCAO9s9Z_IEOAYHn_Yd-X9Yz3FZ5qE948V56M1aEsYQoYgIiv1m7H0kOEaAtdx4tVYK4I4XRX6oEcMPI4Nl-AAGIACc5BMGYOVtA2BMB4E3mFNORBwpupoKCJQpkkD9I3TulpHo2c4BwHfjASMwoIBOVYWNaeFgugEGwjNFa8AADaHCuE-hgAAXXYAAH1kXsfoEjjwkT-mYPB_YhB_AMvAB-3U15aM3ropeH0SJmHtv4Ow-NsCgXQHYKWmYp4tVxoZNEoQpTCkjAOSgdweFE1rAyOEXjBxwE_P4iwExbA4FRFkbqvDcYJIsCwCoHhYC-04dELSVwIZQBvp_RJuM240G1PAcg_QZj3SuPwAATK5Bq7BPb3T7JeLY918rhISXArSlgjq1X4GHJpUB2kzwKZojeOjWFVJAMM0ZuMiC3QgJM-W0yQD5NmfM0ijhMBTJmbMiwjtyAPh2dMkZtY1GnP2c0YJPi4BhgId03pfiLkJMibcmJtA7nwJ6fMbq3i7ifIefMEioy_qjIgFcv5tzvHaMRNwi-zzcavOibvD50KjGsN-SEnAaKJmSOBQU0FBTwU9UhTgDZizJFPL2REwkyKshkoWRimypLyWsPxYkwliTiXXP-cknOaSvYZPulS6lSL3n_j5akmA6SUiZJZMyrFkqBV_FlfddlCTOUvNpX4DAsBcoN0diMc8jcsw2SRTq9Aequh_BgEak1qMPCqEjK8sJM9zm4yGq4EYkZdC7zQBkMkISRWJKRZ6kYABxTIMw8A-pAq4f1AhA03Ndbjd1tYWLSx1FwfUbQaAw3iSG2lYbnW0rPI4Gg8aXQCA-ksMVKKYDvlGYeUIWMcABWNfoLuthQJRiKQQW5-p2rZQAPrZVFOeAAag0c8AB1Wt2rKhWoNbajtNAU1nOcem1CjiZ3QCgAAVVQBpW6BB83-Oba2roGlG6roIF21E6Rq19oHUO0d46p2zvnVEi1S6bV2v0OuiwaaLAZscdqLg-6ZjoCyGe55obMjeqRWWuNCaa0EiieKxtG79K4x_TAfVf7b2Rj7cGhJGiXQjHMrEmyfacCYD9VAdViLaU3wIFR2gkYKPsYbauYD0xdXSq9jeGBzgFytK0pGLp1BvkwCWDfWAUotIP1I7jcjtruNMdrNyqTqAZPWRQSAAZWl4j8BUwUrj9a4k6Zk1cazvT5Caa5Vcut9K7M_KuhZ1z9zpOPI6aM_h2FHMjRhLk7o2nvO6d6fp5ZOLESmfhdS9gnnaBxL8wUtztUMtrMS7FwTx4rjyfE9QB-OAw7HjS0BoLuNuUuY-Rl6LyX_z1f2uht59bsWGNxceBr6n2u5e4RVzpY5AsdKUguG-nArn1auvwcl5AAHxBeIkeLBbZmNdSwi9LEWbOTm2707L1L-uSIK2JxTxWl4dfGbCyRB29msuOzNU790Sv3Y_oNuZCytm1UK2d1AL3PvFluxq5U8tNuXJ6rVpre33M2UawCnzPz3u1ha5Dy7MK8vdA871-lR3ytg4SSjlj7X1tY8o-117PH8e4wC5xILfHVMwJhPa7qFGHB5AiEQIjz6cDjvDQ0XU7th32AABLtXduG88EtjhjnjVAK463RpBYvSeZJ_kCD9S5_awDWqMNjm45x7HtBtd8eQxW1DZm-HDc4scZM0SnslqiV0MAty_gmV9ZWjIWGgObosGeHufdZzOBmGgKtsH_NW_MFrO3CnT1Iqd7c4eAeUhe5Gv41cU4Mg9Qt0WVARkJjqUxwl6lP37qkPLMs1B9gACsdU6rhWqfwUbQWNGrabbYflgmVVypwwS7qkOgs0_MNGfHsYOAWOYawha4-WGSOjCAQidsUNVtM2tJHFhgDGCL4lxJABCJVnehUMP2mv2Zo_GGWMn5tJhM_jxz4X2HVgHgYEr4ptv6ljA3ad5P2_pJMAIahChlExj2yGymiDwD4BADqkbypx_2YwLwWnz2PE1VgMS2oGbHUiAKK1QAQNpTQNoCIEwN-2QJQL2Wn0vzINn1m1mAtAfyfwEBX2_2pVfxINP19k4B4H6S9joJoO7xMxAD2AQQdh2BwO_UXU72EwEEIPuhwEdQwAdzgCWE4MGRf0YJIMaWMyGRgJIKkF9mYJYIKVb30MO06y3he1mGuXR1hkMKMO30HzrDYNUJsNrG2BgESAWlyzbQ8A8GtQgG7yUkcKcPYIWk4MfxgQtFywtH4AAGoPCc5vCDU_CAinDqB7AhDtgRDbk8NfYJCpCtIZCnVXlFCC4TDqEk10dORV8tDAjZk5IPCytuhiDqiUDrCmiWCPDyVblCJIxyUrCkjWitsBFrdGAHCqj-jYCXC3DgByUGVNlix_DRixi38uBgjDMuCwjyVIiQAojpjyUvtGjFjkjBDYh0jgBzUxDsiRMns8jZDHxCjlk5sFsHYLJ8p2ByUKi-iDjEk9DPjqipiFkZiKVjxolyQXg59NjOQRE6opFgSni58RFTMRFXIZF9ifiWCdCvZvjUS9lRoPjAiUSDj0TZBcTqUcSFi398TtDJBP9dCPiAY4xQdYClJeR6d39poKDjwp9r9WE79qCYgCBYAX9gBn4ItuTIcKi6SiSe838z92T5or8L9KCQBE9R5g5g9UBl8QAKjdswAIDlSChxBHDGAUZ_dR5Dp5gVjio0B-AlIqAkEVjUEAB2J0603wGAThQgBaOqVyVyJSXEdACYT070pSQmKoiUzEgpM_J3CA13d3BNfgc_CfSRTkhU2_KgoiTUtaMMwbLM55FPPjMNSNWYGNWMqtJNXxLfMjRneTZoM1QkZvRnIzXsKAPCOKaAQvfgXLYdYeC0LoW5NISgM2AMGhDpOhX7WeF-LSVsgVW_bPXGUc-6WededHKcjHCw9FSlCsxLDRXHW-SgFc_GGyFoxLfgLtdUIUfgKZB2IgLsygHs-AU8GAAcm2IcoHY8kAfUGYFteIdwWVC8-4mYG8u8vsx8wc3ZEg_gcNMIUCMeKZFIAgQC3sh8p86gMClA_gAAaRGFcAAC0ADQgLRGk-CpltgTJUAEL7z-zQLVlHD-B3YNR8QZ14BRAkBllUARhyLgLkKXyaKQB0Ygh2BuM_z-BncOKkKqLXzqV-Bzx_BaBrd7BZhqEpkthRLKLnzULYDaL6KMhzB5L5ghLDNyAVKQK1LqKyTllGKH05KFL9KRhDLuzELVKULTLGST87Cdzf59zZgREdypEqtsNEs4ACx-pIxqy6U6tocG1NzqU4gJslCNCLzHC7DGyw5mzZgVy_LEkYrugOySiEqzK7CDErsYAVzuTQrxU0d1zjxtdEssr7iFl5t_InjlskBEqI9HsoAwAwr_xdjix2AojlkcArYuLlZYDwZIYCBEBWrBjzBUAADGNBt9iWSLANEboEhRR9gYBw1HyAApZ8lc7qaOThHAEMdqBod2Pq5ZXiKDJePkfg_q4U-BEq2fV1DpUKv3EeAoIPEPKMFPUZZFOaOfVXbOZqoo1JU4bYUzQbQazIXPF4CTX6gpOjPobvSMWpVyBGxJf62AOfHxSUJbF4uqF655DRCITOGIGYcDDgGyMpCUH-P-cmn1LkylMxZ5QyTOf8YeFIOfbxLeW5OgVgF4nm-APm1AVgYGYmxnMYGydBb0-so4fEGyAADllo6Q0S8BuEiGgkcjQG6hluVEeCNDIVgDSAwFVsZyUUIC1qcm6ir1chZtGRLIyGj1aXagSDnzgFYDHk5DuWvTYWqtrA0Q9rnGpqXydtmHmDkP4CDshvxzbRuGrRyvgAyEbnamKlaVFDlReP4CwH1DQAAE1c7zBjwxxTMsa2F-An8dgUghBbp0BF8kF2kQBUEwAW7W6Y7Es460Q58_0iEsAs6QB3J3J4z-rIwRgoiLbuIYEnIxp-r4zh6eo8Aoj1aOcra0BOQMaEkPhr9sh3bPbF89AaAXi3EG17aCkNF-zdrqATTM8bIo9BzIxVqoB1rwhNqdq9q2z_blrGdpr74l5r7kFZ475wgH4eVQk5bjg_6R4Mg7AbIREL7nz_7a1uZgHIHOwMhfKfcEl14iAaQ203boNd5_7QlBrNhUAH7bpftIxoEoBGRQk5JBtz637ztd5upqHaHESMH8cNFh44h7pf4gGphmUYEb4BGQG2HREoSyywHElMHRl5yGEzx9QMg0h0Ay9d0JgZ0bAOM4REQ10oq9kNFxE0BRRw0bwNt9DRQrhXIJK9lw0rhqkq8q8bHZkbwrGT8KTKyjgcGah0BRRup2ElFjHTGec1YSUMhdGCAZ72AHGq9QnIwvTXJwjwmANORJAEmMrPHXiIAfHw1_GjHUATGbwcBcn1YvFkm9H-qYm4mEmkmkIUm0mVaqiNFvHsgzGbIAnOEgmimzHSmdGAMLqqnSmam-m11Un0nXK2rihHIPBIwAASKY7J7IUUJQeZlp9AcNFZhZnxm8UaYoDJjx-RlkM8KcqAMvdGSIAR51ZByJ_RolZza59gCacKKvDe8PaaivZMdBB02vbUYiR4RR5R7INRvETRl4NhBJz8R4BWFIGZ6xuvJxuqZMRW7kGhJY-5zifYR5mycKdGiZ95tBYKKvRW9BapZMP5p4McJRxyIFzOYUdRvAUFjjGWyF266ZyMRqcKRWxQdBF5ka7fGrB5sQGyRx15gYwRNBKvZMG8VyBx8lgF6l1R2lgQelxlthZWll6FmZxqdBLlxF5FvlxLAVjF8ILF9gW20VxJOwglm8bUewGVuVylwFxVpBFVrRthB09G_W1lmF9lxQWvB0v18KYKFFjJ8HK541qYIV9gQli1obfFpuh0-wc8KvYKB0h17iJ14FjRt1yMHFjVwQH1xqRF8KP19BQmg16lI1riU14KXFqoq1pu9BZMc8dBTl9NqllRrNhlnN81r1zVyMOFlNxQapOvENpHKtzFqN5MXl-ttqtBdqcKc8bURWsl8ef5x1hVrt1V9lz1qFgtmZp0v1h0xqapapYNitvZCdk1qdut2AhtyvKvOKZMdqOKdtzNpV11sFyMZMXd71mZuqM90tk95Mct1F2wudpu7UZMOKcKewVdr1nTMvfZ2RgpQ58wM8S5xYTgWcs-7-650NgO82iK7qMq9rDLAjsN6bGbVY5QzU25rcxnHc7qdAS7OEGIe85wMdXUKdd2JNijl5B5myHh7vfh657yko1hThxkkLCbcLL5KLS6AzXLFbRwtD2efUeqx4pbL7HlDIdj0Jejn_NywcPTx2W5IEORBRP5Uz-8uAB4xqmE0E-Mi0ZZCEpEu5ckSUNhPkXgDCFIIo0zfj1NRw5pgHLKGyRRzTxq7T4sSMFj6zkUMzz-7fH-k1oT04ETygARkRHqzAKTn_MbULWyA22bKLxbZ4k5fQtTyL0iBq8rxIA5B8XTxL-AHDt_YznxGz25bKdCruCdbUd2fdfUG8c8IL_ylgjRRrnICLylsrpqqbuL1jrr5LxLVLwR9gYTvhrLsTqb_L8kvFwRNb5D_HarscE5s52UCc6gOLpYCANrzJtb_RMcTD27lb3Do4SABIMvJ7ggc7pV85ogS5tbt7y1tqz705pV47hhxnQch-OKWmvoeADJ7lR-5-2gLaygS-1AFcnAVQbAXUMAOfQanxYaujnfK6C0Qm4ryQIawczgOwPIPMWKI4agJIV4hZWuKo-B5h1wPvEnwcnAMABHroSMbnv7JeJYMXkrSgDwdQVpOAERUj-lXL6REH1PKU2ZWHpeeH6IRHmB0cTH58krIX3X3s0-gxxjoQOXsc2-23fsql3hzxb2yANjaqNhEREYJYPAKRSXph8X3eNX7csA5ju3x80AiYD6S7a3-6a5aPrSImxLA28H3beBfMPEFPrSMvQbIO52qUV2qASMOoeZ2UufHTFfYoWN3GOjExLX3eHXwY1rk_HAfQH6pv8OugR8DssA9un_TuhOnQa_F4kvwOeBUzSv2sPv92tESgFwl4nTIhAQEhJV8fiwSf4SvdF445vdC7yIK7j8Nv-OufLgF4tDm77DwzvZOwqZiLC0eZiAeQPZ9xlf9gNfkAdAQWsAtX6Ho4NbsvfXkRI8gUloBYAJqyyHNF0AJDuAIoVeAAKTqVRU1zK4OFHCgLVFAgAkNDYimQ4sYB7AFzs8zgHOUf8a3JAa5FQHoCXkmA5ZI4xwF4DXIBA5xoikQFmsq8ZAk_MANAH8BbaNA5gfQLYFMDbarAqouwKmSEtuBXA-AXsmIHRsWB-OJQOQMRSUD-AtbbgaIIkGzIpBtbQQbAWEHLJp2KgugWoNGRSDp2WgogYoJAA_tuBegwwUAKYE_tTBb-HQSeWFqQDzAlgmwSGiYF1QZBiWeQHt1mSDZTud6AhB3wAAaedSMHdwv5xtBEIiSITAJeZGA6oHrL3hdS9IXUr4N8BoHmggCSAXmoTWtv4JBTf8NuIQjAPrxz4l58-hfHAMXyZqpklSZQ9_hmQr5N8CGrgcNlxD_7P9m-egatD0Pb5yF2gKQN8Afy7rtA0Q7gOAMzxtBLAz-UQ7gBNEtgw04A2cDjPPT9xNDwhkQqJpDU1KDZjaHfTnrATbRzAO-pfVpD3zfyv9p8Q_eoeXUaEm1mh69MYdWnaB-kJgPkaJre177RBxhmwd0q-CWC1IBhh_doN5CWA_Drhfwt4YkC-FQjt8r_cHi8UiE3NFh0Qt5oIi35fd_usoS5i8EGrXM1eqaWNocPKGnCI6j4CYTYlGFVFJ-4Ir4T-1BHjC4RSwUdk33YGojYYBI9gbG0Gzcole4VeTj8nJ4GZ7O9XFTlUUqFPZqh8ETzoiAtDZxc4VwlAtX13iRha-rgevnrx6Et9-hFI84ZbBsQqiThMIufLcNWQxZs4CopUSXH2FmUkRIEYOG737oAcvIJo34Yf2WFTCZhJ_ChjH3QA8IGSThDRBEwDRjI4-KRPUWNycw9QWO_ZY8GiESCDUFO1HbKJnESApAnK93WAmGIAaFxLIxcAvvGMfKJiBAyYqgMQjQBZAwGxJCwN4kjEII9RmKAclgR9R6jiRP-BsVgXsB6jISMiC0DZAA4xjZkDbSYbnjWEPCMhVvHsc2Nnr7Dx4wYmwoVwmxyQ92Gnf-OmKSBZihydYnoM2OZQZjbRxYpCmWIrHCBF-1Y2gAryRKdi383Y37L2L6EtjGx7YvoXeO3wPjS8fYqErgOFYjjMR1ub0ROJgzz0vxmfOca52IhLijCHjEFM_yr5mjdYINAatO3Ugejrh5cB4ewItDuB-owofujgy7ACl7R-hQajYnIb0JrugY2yDBP0ICiFwnVcqlRwMzJU-COYozm1Xi4mcWutyTjqKG45nU-OHxFcWFiuSCiocwozHNR2U50d5BnE95txM668Tok4oqAI51PTOdXO_YjSXCQRJIkQcIkmTt0A3wEQ5u-NMyoBMjxLcVJzgfUPundgNB7ADQbKO1C7i6StJCJKEh5JADwlNSHDQyZZPG4kFSSvglDrGJCqMSuq8OSLCKOo5qT8ackk_NwyLEtIsY-vZXDQAfIXgrw6EO8KkRTIPD5RMARUUWMC7hTZkGiHTPr2AAOZkpjOX4BkGzgzB7ApqWyHVKaaM4IA5vbfMzx6gQBuodtTgHWHkhG9tewve8rAFnATAQcA0qIlEQ4mg94ECvCADIiE6pTcpbEERKtOylEJa6BQVIo7BoDigpQpidxquBPx9TIhg02aSNM1HajEKU0uCngFunzTFpCSK6RonUA3T5II07qb9LekYjqUVU1pHVG6jVTtpRQibkRylDVJwZEWBXuoChkkFDGjcAQM1O6g75JMoMsMICJGldBYZOAWAGACmDyI6JThAmQQDqhEy_8kbXbITInqWdyZNhSmdTOXomhGA9MggNUmJ4zAmZe41mbzMeZcyeZ7MogB-LBRXJGp6M2YO9NQJozmprUggJDO6jSzFZNASGS9HYQKzZgSslWf1UJpXA6oAE4KSgTgl3Meoas3WRrNWnCzqkcsgpMeLSnoRIZduAgO1HjoQAPAL9HGiVESmQiEJZyYyZNktk6yWpNsmRBNHRryS9kTszaf2ldnfUBAwuSwPqC7jdQ45BeLaTtKTkpy050SIQmwmsYeRdhR8HABewK7BzVsjhc2d7lkEVTcYjwGwF2GCAwIJQhtI4Lwy2izgmc7cfHNKJjyyj44faLuK4ESBghSJvfdoRqLGl18JpoSKGnqI-ht8zhkdAuN30nnQivRb_D_hMGZH98LRRREeWPInn7yj-zQpYKfyw5RCY5MQ63MUGPnjyBAt_YAPf0f5VFQpnoruuvwSD91xxxUNuYfU3mIjrus2QYI-TRl-iqJZDa-Q7KSS24S8hfVBDphflvzA5mNJCazGn4uELQHwvAC8WTDoLN6WEufODwtC415sFXSETgGRb8dP51w0BfPnAW-0oFlDWBRfFEBmVSa_8CmmwGhpTC4a13bkKIE4WBEkamQGPmjWEW8BRFThMur7LxpUL6oEs2sGpx0zck4FCSBiR1WiksTWKvBIZElKCmg9FJNk_TjgH4mCTeOo3IyeNjEk9QJJMUvTIpxiy5UjF_ROwkpLY5mdVJc3HybgO0neTiosJfgH5Lc6-VmZZsquY8ASnPFjFd86yQl3MU9c-uA3IbiN0Cl4ka5jhbheTUpr4BiABfdRbPgkmlz2AUyC6hh2ubzDS5BA6RfEvkX8BiZzFOYVHloz-Q0goQ0ue6P2EiKPijSkAFbBRFtL7U2KVwGkDzoBLqkyLC6h2T7qalVQsi8kj0MYXHob4-wVhQGNe5AzEkUeRBcUGQU387-D_IhYhO3moghAOCvBQTVOUT8SFP8qAOQr9lKLCaI4xwtoqYlkdiOLi0rrVy04Vcxog-HqdoPpoAJ8l_8wRWQ2kVLKjC4ilGlIpkWIqGl9ykABQv9nsBPWSKxkisrIb8B7YxxTZRJnYW3zqs4kqKeVX3wypu8mi6nBHhHG1yXkoK3hawH4Ww0Y-0K_pegGRqSLvSHK5FcIgUWUKUJmKmFRpTMogypJJHclV8qkkji1MZOLICOLk6AppJrEgxZKMCIk4dl4HKSVMlkkMCuxEnB7F4q64WKuOPHJNiJI-JlU9c9aA3AqqNz0rg5yqhHKqtcVFUNVThIIRpz-XRcLIOnJJUl21WJYOu3i-8hZzJmBrbOak_xS530nQkugxUyMD5z84BcFlVq-JVqpJXUoMsUyWJShL3E7kTsOi8qjuQNVv4KcVwE1SpLs5zdy12-FXlcBq6xB_liQHTtWv06ch61xQ-JTarYx2rGsKioDFXIJiSA6qvqiUZVy9X-iFGs3CdfNy2BNco1BnbNZfzarLqcAKS_roN2G42L4lDK0ZPKu4zmNWiua8dS2r9WJALQrAC-ZEv0JFr2qnynHEarezxKPspEJZI4opzdrqUjax9dFJV4_rL2i69AE2rnUXr6uC3DtUlyA0apslH82Ntyh3yOLKVgqVVPH21UrURwNkHPoMM77gBhQbpFIKgF1Cy9LhwC00dvPmVLAxgLnCFo4Vf4oSvSRC1_tcstH0aHRmCgESkEIAEKERlG7-QP0sSETqCvqIQLkgwmzJYoBoteVgEIAkBEAMgSTR3Tw1z5vZGtIcixswWHzlkWYi0JXQhoUbe-8mgvvwCzHsADNym6lDgEYX4qdghKoRcGve4Z9XVUqktTKpVUmyv6RwRrEsD7TqoPiR6yzIeQFkRVi1T6oUSqsUJvrawD6xxWWr3GVr_15Vb9YloWQNAVe2ocLQBrC6yY9xU3bLeVSm6wbgu8Sj4i6tiluqcqHq9xa0ThzTZ9FtHLzcFjsUhzsZkqn5fPnMkAqnNeyerd8vdXo4K5IUi6b2vJW2qYMg6-lWrw8ZvUxwJpT6mqVDw9CUVQNMef3R-AuhypzyUkmbXwRhp7AfgB0DZFP5PIm8FU3EBgFGBtouwt6e9D2n769kXRloroAdqO0EBgRvK9VH9HOSgwHQY1AAhRBmAkQWYbMUDJzAEa8w-INEfmEBF9TCxwIk8ESFqClwOJXQB8eiIIC1DnwvAIgC5bMHMhzQ7AccXHf2kmH4RkkBAQEMwkkCk78dMwMlGgA-DMJz4WE4nQHHjhXVSY2QZnRAgniqxDqscDnS3E9CC7z4z6YBJIFbj2o-dLUJHatjPAtJfst6BQquEKro5t4S8feJLqTinwI4otS3kVU10sMZuBAJckYmN0dDXUanEvvkwKmJkqqFZOwnTvJ2E7sQYiQJoIUKkyIyZbOj3Z0y90O7pETMu3fcNUQtRp87AEmPxByA2IjhjoDmFmGrkzxXE6IDxNWkhTZ5AkUYTPUFkhwnq9kYmLGEcmWRCARAHg44O3ilRUrKkRoeIHklHX9Qtg2waoINj7QlI4AZSABLXpqR1JgoDSAxewCV1tJCBa63VYNqMQV6H1_ACyrJR0rWVR96yRlA9kbyL7RkVxagCrquAiIpEo2XjJg3B3FJs0uaU9NnkDqMS-8dZDpIrpjxaQVdy82OvnjIZXyl470jRBvtQAq7mOS8Pye0P4BSI_J8QKACrv_1kpzC2QNILDAgMwBf9pScpCPqkTP8-1-uYAB_pV2K4Fq3tLuTGgyBCBkEE0NmrAGb4CA8DxGEg8KHXrfaD926fQOBnQCQYCGftCsnxk332oO9XeipJnx1RpBiM2eblP-F3jUtUY4jYnj3BGAZB5KN8SPnjywAE858bEwxWNAp5gzj8QgonF5g61qraO93MVBNo4yoG2DcB7vVkhhCDUp6Y4HAOIyWBnrqtQ2y0dPpACz7tKDgBfRgZ21VzBsuh_tTBgMO0GjDnB6gFcAEPmHhD8QRkCNGS6aoWDBTCKodp_JsJIqLRILdRlshnrgjQhyw2EZgAdSjBLGPQ2wim376Ne1AAjIal4O3N39zOWHLajZyohIgmudCDgEHQjox0k6adHOlon0ZZcVwfPW4abSnAW0KuWwGrg1z2piMWuKg6cnTwd9M8YeZzSdTOoHVqAMcY6gaFOruxwG5AovfoAfBLBJK-OVDV3nujON29_h444NiyyDYEt-OVLfjjQMy7Rsl-jDPWnAa9ABA5unRHogVRG7je0AWSqiPUjcj8CpWSRNFh3LhKB8bVYfHslHzhlEwVYKPTBG505BnAHBqYFtSrTd5KYVYbMmyXuHJkg9pC4UEQAtDV02g6ZConCYSSMBjxYgZ2VmAaDahKYtJk_IwDQCfkpgOS3pBAXYFz0zKspAkzfgeEzD960_RQ_MXvXWiYAwwQaBkAgL9QYEloR2vQSnUkEUi3BuUpjgmheGUD2xmgCXvSNnhMjNDbI-8TMohlEsOZaUnicKmCnuSwlYk6SZroUnKi2hWk7emZNFiqTiSRgCXgTJCm7TipEU2Jszgr471DHE0wtFOOd74DWkA9bjHVPxGMiNmz_YYZjPGHEzs4f8DcXkKUmPiq62ZPccaNdEwWcodEQWZDVQnGAPiBchMQWilmlI4jes_gTWivyWzUgGs1pDEC3KOUPZ9XpSRLzenKYgMXE2wH9PkF7hRJgQCSbJOhAXTQ53GDSa9N78rAUWKQCyYWK-mns45pMvKUJMOnpzop8TWGYCJNngAGWeM7WEzNpBkz1APfjJjiNZn8ichF1K6acL0MYtFgaM2ibyIRAxDEhykNIYjCyHCecVJsvFnJ64CVDB0PcdWYCPmAmzYFlKuIAUMdn4LC52ZJeepOdmWQiF4ojVrEC5Y0L90DC6MjgsLk8L-a8QPmuItdnGCUgQc0jitPb5s17WlVewEgtIX2J7AFrIaRtNB7AzDQkU7OfnO0laTHxjKKwnXNenaSfpgU3uaFNTmSTIZ8U-GZRlZH3CL67I3uOvOanYYOpu1cAAfWGmLD4jUaEpFIvUoKzxhH40vB4sHRcslusAzMDXI6Jein50cW1XIsMI6zRlkoiCaQLsAzzdRSRK2ZCtIFaL1ASy8sr3FYXFzjEJ7NFeHNxgkc5s1i1R3PV1cmq8WVQ_oRlL4mFL9pgjYeZEsqF4lS53OGIB9UQamqA-48NJcquyXtz8l4fsVeUsgRjzGZNSygTPMU44rBSXS1Gf0t5HvD-hpLSZdCMmnzLjzPcdZdIJ9AJLMAPRC1jeOLX_spETouYR6Llm9xVkusDhfMC-Wdiy-wK71f-J9WxAfxUiACVYTyBIrqAJK74L7OlbAiDFxK4aV3CSl9uGvGE_xYDOFWgzjppvfZozIYXWTx4ncxyQBtCWgbmwHYKVOVGg3DS7Jk1h8Qsjmk8VcNlvd4D5OBEWrk5g88paxsWgUbzFLUoFo0uLQq9yqQ_NQH6sWBBrqB4a7rlGtsIqbKSGm-hsCOmHBDRp4Gy4XQDTWPiFplgrtFQAeBioyoMWxLeB3gYOb3QGvVpFZOSANz0pT60Ofyu2nobwpx06VaRuhl1NEQcwOjfmgV1wgRt-MikTSK3nUApR21M-duKEgtS-NwqWpoICabZl_Beeq1Y8Du3wi_QByM1TGhrQ7bIwKQIbaitMX1bo5sfAVdavCXnTZV2AhVYXB0mY9mUGAA1dTusm_rE512_wHUg0QgQSdtEgAoevABigvptEzNCQgQF5mCx92PIC9Ax7m7MOzQOIAYtomkrVd-A49YCTDARgkO8wplNRg36s5BAO8E134DzM9TBAB8M1E1JoC9xhx2m85HYDzMV7XN36CVq2zj7p755iKgvZ3uJIHD8zHckfbS0fqV9IAVZide0tr6WCiuTu73bqCJqpTya6MLwHoJmBZEvAH-3_YECpNMYaas03lcYj-QHrytkcyPmjubZmLiSPMvvBBhYB04AOqGIiZmDImWazMJQKzCQjJwY4kgGQ7Du0Dw6wIIAUMcsc4QF7lkDd_SoQFuD3BHgKScgBaGyB9k2Q7wAYF6Fv1tQrQS8V3NAV-0oOwYf-cajnhjhfhcHYOmg2xC5gRsodDOmuHDqFjkP2BFZRns_JLzy40I4e1AM5YtB8lYAFZCqJaHEOAirgXgQaHo5inwokH-jvUrOFVJJyKyQofILXpzg2waGtAdVM0q-jxByAkYLgQEttpeRtcVsfx1AECfBOXOoTrAK6j-gGPaCjOVbG48hVXBPHmcF-uqjwXlLvhrkLyL49plWN1UETjFeqltLCgrgqCRWugC-adh1Upj50TVCNnqQinNwDIKqTxpBRomhT1cA7BdAWhuNhAextUj6czxhnoAhJjAPVTSywAw8EYBaGSgzQykmcear9BahJO1i5YRALgpgAeBtgLwYOKs4SDcFJh9m1ANPBkV7ODnRz6oMHD8AnARgVwNAKxgxXvPIoPgaZh0Osa_PFArkHAIQrMQEADNs5jAPXSqfsBUEcUR9rC70dmAtnoRHZzc8OeWgYzazugmYCucEA8FSA8ZzItBc11wXlT8vNC9hcwv4X-j-_Ns8QC7PxDtztFyc6gBnO8ALaDwFi_BAgvJQ2wMF3XRJfVPvSgru2vY4RcL5lTFZNbcs7Bo7AcnXACYEbO9IzPVw_kLsAUEMc-IrgHrJVzPDSe16ugawtgDABseEQKyuL1YFE_iaKupl3pMJ-ql1cmHMn3jo1-ngsflPVwZT4Vzq4CgFAFX4z85MTzJoAIOFyrygO44dcS2snPjxFX0png4TFsxGr6NGOjfJuZ4krl56gAGclTpX2wRZViti3euenoULALm76UwrTHRssZz4GJBwBg4GQcFCW9XCEvc0oG_MG61zepvhjwNdN5m_008Mc3jb4hBkCsZ9OY3uMLwIv06eZAWAeQK4J5GLfJuYVQoNALJTYcy6dHLoBt7IvkCg78Hz6Ih8BZIeCwD6BgcCK4hEjng-cAuIXKLnFznhyEWO-BHbA1PKwz3N4dqKKBFzvvLAb6No7Onvd0EFTIof28uhGAvu2oUEV9K0Y_Qzp73C-AcCB_11_apgaDpxDPF5z85Bcn7292sjfcfvRcoob91B_aNrJmjP76D_vCkfKA2Yp8fd2oEPfARj3IsF2OwE6hrPKAh09HfnFmBse7YDsJ2Ccnl3sBhcNwGYF2lQC7AMdyybjwkFvIDPtgQzkT9AUE_ZClGGkcsfJSb3BY440n7snECb0k2j06kYUM1UjipAAAjnnDjjV0iyFnwx-MqU8ux8V-gSTwxDF0nJkH6cIUnrlpqW6XPnOzIAqOZ61vogECDz8JC88EAJ0IgYxLvH1C-9J6aAUArxL8-egAvJUoL6wGi-heXQIj2SFUojYPwUvNPa5tATC8Ogghw-u_TLrmN2EnPWUsz4yHLG9RVwDXjIMs5SAWfigq4QwkAa_0tFygP5lCqciiOrguvNYUksI_ThBCkv_qpVnABq9tU6vqMVr019Wwrf2vnX7r_4iAMzezOtzaA3AEAE_BMA5A-ooNjiI-Fu8g2Sp30DSyLV_EI3meGN6AzvhJvwkabyUUt1zHtyn3r4-wHhKnJABnBcrCxRPKixzyD93GPwAu8JER9UyLuA0H1A2DfltgP8gANsOVVFKYPs8pQEboU4EqIABH_qGTAgcAlkaWmpnnDQQBEg7gAaSIip80_SIu-6il1tmKYACfRPkn1AW_B2R8L6OVhBz_B-4-Wf-PlqoT8R8k-4ZLncn1kCOBdwZcT-f79qFCAQBxDuSbYMPBOjM_9wrPiAF9g58S_kwDeHnxj66xY_CfQvvH3fYN_E-SfZP7-JnksAmR3AQQcwCIid8u-6A2vlH_r7F-c-Sf1pJe3z8x-C-cfVvq-yD8mri_bf_elzsJgtDZQ_ASo4UFhX--J_vy47rCt791---o__v4KIH9587lQ_QoCHzr9F95_DfsTFzlrQAJ0A5wIiYXJQHYcDgVfBAbPyrxt8k-WBJv4P2b5L8k9w_gJc35z-Chgya_eQasf96UbMJqxHf3LV37H-F_Tf12SP9j9L_C_y_1vv3xL-ChS-o94QeIN0BEQadd4sAC0NBHyD5B5_bPkf7v-N9yCV_GOAf2X5R8C-d_xP4KNrBc7WAACkibOP97WAlAMMCM-JwKEA3-evsWCL-q7I_59-q_iP6W-Ivtv6V-n_rH6Im2wI84jgIiD3Aq-dgJYD9AgHv6QQBufieS7-Bfr37F-fvogFb-Efnf7E-NeAEo3gw8G8DKM_3kQj9QLaJID6gyQIvDoyBQMQFQBH_tOzc-sAZQF5-1AW_6SIXflXj7-7ULKhhwPcif7s0BAOoC5C0EPyTfkAgez5CBMgcv5wBz_lQFh-SAbQHSB3_lHrs0GkMY4iIJSBgBCA2kOBg8uR_loF0B07DAFB-Ygev6D-xgcP7SBaAVuIz8WFC6Bp-jsLJRwA3so5DOBvgXoEeBFvkYE0BPgToHV-7APL7zA5_u7DbALaMHj_e8vl4BYUPLpECUAkQYkHRBWli_6b-kgWv7R-yYOFDj-VgH4BP4JkAKCOogAfUGuAjQdRCrSQ_iQFVBNQSUFFU7_uIFxBFQS4H14ASikFJ-R_v96XgDsIhD-ARQSgHVBD_u4GlBhgRv5D-AwaQHE-QbAEo5oM_FmLOgDfp7C46RAMVDogLwPMGbB1QeQGiBKwYMFrB3gRsE9BSQTmgsAlgVYHuwlkBcrCARABcFPBfQfz5SBqwV4HxBjwZz7ICjAQuCuAFoDeCQh_3jOgwI1EJ2C_BYISgIUBtwZ4Gv-uvqCES-4UA6Q7BlALKjZw2wOIZhwafiIDPAY4NAzogcAMiE4habGiH9BgIXcHAhwwTb6pstQeeDRo1IHKA5ohIcf5a0UqEJ5AGtIfqDsh_wSH5AhmIRX6bBqbPv6XgvhFYh46vcLAAsA_3pGgy8sANfDQYUACKGyh4of36Sh5QViFMhMoQ6RmB0EBgGhAXKhMA-g4yrzwiI7sCkBYU_QP2idB3gd0FE-qbG4FF-6IbEH3BIISaHR-qbGgHw8u8PkEaQ_3qGGuA4YSOC6hx7PqHwBZQesGBhnoQ6RJBMvrJRWAbwCF7H-N4H0BpA18MzxU6uoHgBKIMSOgCSA0lJZTmAWEE_j9o0iF0GCBKAamw9-fgg94HYQPqsSR-YAp-RRA2cLOB7wkPrWDQ-XhJd5w-YAtlDI-uvhAjb6PoYyGVBH5F-T9hv5A8GBh-oNlA_stQa7SBADoF3DhArLg7BTBNDMSGZIpEJIDyU4mnP6Nh2gVH7rhm4QmEGBt4b2HfkA4cmELhG4TKw7BDINsDxuqfiIjng05guCFB14eb53h9rAyEAhC4c-HLhg4QGHvhP7OaEYB1ACcDBBY4MjrscYAL8FgR3oU_6PBi4X2E_ksEayFi-YEX4HZMsAMkDoUvPKJjdYIiFF5QA2wIhDs4WER-HXBywfOGgR0EYRFvhoER-FJB8vieH_eVGBGAig1ACxE_srYexGQRnEUuHcRq4fBGuQ4UAErgYjVEnSKBwmB1SHA4kYpEPheEVxGvh8kbxE_seIdL6_AUAvqCBAhzv97C47pI3CDQIkFwBpA2kfSE3BHEQT74RL4SuFwRRkbXjKRC4FEB2A1gf5FzBIEe5EbhteLpFrh-kV5HERt4eFFyhBEXgBTSdPuoxP44nuJEAckUVBGyRBkd5FhRIHGYHmQbcFYBwAeAOIYpYJ_lwCYAzLvmEZROEfoF6ROUTFHGh8EfUgucVENGF-ANUKRBsBjEjJQZRbEXOHSR7kdFFERLUT5FJB1gIXa2AbZP96YUrgPqBJRhERlGSRQ0RKFPhTUWNHSh75OFFKRLnNqBHA21M4DmBlyvaH6g1oeoDuArgBlGohrkcNEkRo0TxH5RI7AErWAOcLzyHa4htCAiIbgI6gNh7oU2H8Ad4SOxZRMkQRG5RsUUDEbhp7DsFeA_EAAEOh42K37nBoUSRHQxSwWtEGhG0eDHNR20cDFmB-6EQCqBGAHT4SEO4UbbiRpLKDEjRm0U9FoxRvmgHpBkQG0F0-TMVECNBlMYNG4RUUbTGGRz0UkF5hpUd7I7A_QOgCQGIiILF4AwsdsCixTkajFxRRvq2G76w3h2FpYwPopTLIkFC_SzgU4TD5_AV3qD4gA4aJYBThHRGj6YxiYWL5ax0FHTFR-54OhT7oASueAZBAgAeF0AdPlWFiglQL8H2x-6NTFWxUFPX62xEFJYB7-HIUQCrU7sf94ToFwO7FOQKQL8HGxYcf7FR-1sUHF8xVsaHEwxNflwDQIfYCf6uEenGJHyxIcXv4Yx3MZUFpxOsRnGpxWcWYHy-N8KqGN-bpNVE7hCcSXFGxdcSnEQUgcdXF5RmccFCK0tQbyGTB9gEthzR6IAWFwAJwAIAzAicaHFDx3cUbG9xY8P3G1xg8fv4Z0GAKY5ukbvlvHoAO8WgDzxG8UvFVxq8ZDGdxg8WYGz6vYP0D2hN8WHB3xx8SuynxK8cHGXxitGgFUsrgBVBzgY8RZD_eF4bABG2fwAkD_R8Qd0FJxn8a_Hax58eNEE-21MLhmMLnP_HJAJ0OwDbUwAe4AugYQfmH_emCTqg4J4Qe3EAxN4fwCIJN4DAk2xNcfwCWAzgMLivRpUYEHdASjNPxp-_CBwjXRHcXQnC41pMrEcoqsZtjqx-lPNG4UNDARRLwhihJQjh8RPrHjhGFNhTuwpsRzzmxFceb6iJeFBIln-78eeCWADCS5y3wmwMSFoAdPsr4CAaUVHpjgQgD7F6JS8RoniJhFFIkXx6FIokjstQROh_-x4ElFYByvlypcqvwS4nuwbiXYlYUYifhSOJ78YEkjs-_oTEnAPUT9FUANwMQne8HcVEmZREEetEYUoSZokRJNCSABpJBMUQAmQbLsf6ExxSfxABJriYiwhJOFDkmSJkSVUloBQ3KECNBWFGlECI1kTAijwlSUEkNQNSWElaJfBGvEKJvSUkHngjQagBme7NPEkNAEyVMlQAJIW6EQJgMfklVJq0WokE-9ieEn1JeSWkl7RQnl7K2AvQPYi9wRkCIjpiDoM4CbAdwEbbgJPvisl7J_SXUnaJuya4kvRLnKED6gTCWAQpRipsQk9Jp7CIFSRmSfknZJDiTsnDJqyUEnZxuQPqBZm8SU364gOwACmnsTyeCkvJkKVEmks-IZQADSH5CdBXR0_sIAQA_QDagCAKKfVExBWyYMlOJ8CWL5YpaARlqUiVgUykd8sACilcxDUYGHUpuSZilvJzwQyAYALSXT7ZQIQRkAOQLwCZD_JqSfylop2yRinOJbyfsn6gGAT6B1hNgPEnyUgoBkBPOqACim3RwKVjFZJtSeilDJiqdCkmRDkf1CFQOQCIiigsQHgA2pKKS5GGplsVH48pEKeamksCUWViOokSJICjy6AIkB2c6fNgGdgwaTgwTAAKUb5ypNKQ0lBJdvi5zZC0GD-FwhrgPGjDAMANsDRplKb6EepCqXSnupricmBNJRAP2ibAjQVMGogVAH0Dt-MqQmmcpVKWCnypZqYWkjJpLEkG6gqqUtGIhvUY5CgJ7KfWkdpsabylep1QQEoZaT-A0Eu-2QaG7bAPiNGkGpFsY-HGpAyaOltpUKWewchQqdeCmJtdEEAApS_hklGpoKSaktptKdtFRJe_gEruwDXh0kOhd6eAFDpe_iOmepG6Velfx-QAOFkhx4EICJAh6Y2l5pzaXGmvJQSYSwBKhMZl4xAaoV0CJAEQCMB6pz6eslcplQfmmtpl6a4kyBN6bagxU_JMf7uwOGTJSDppCeomYZ5cShnqJwGeukYZQSZKwBKMANBCWo8RvEn7oaIFsCEAAKZKyvpBaTRkOMaAYvDqkfgJo5K-2EJKCZwnGYBluR9KVRlvpvGTUH0ZyvvxBp-kMMHiUh18NKkkZmya4m9Bx6W6mrpzyehnIB7aaMEuc-6In7UAWYsPBkhs4JnBcJmmfSnaZ5GU2lnpIGXylBJ4UGYHtQT-A140M-QNHHliAIugAApHmdxmGZJgQ5nuZSQXRQ2ZUQP97RZWYlEDBZyGc5lrpsmUZmbp4IaZk0MJMf977o2WSwDBZS6RsnSZLmdRnpZUSd8wQZRAEtHeyNPgM7yB9oR1Gzgk_gCnfMoWRenlZriQ6T7-mCRMl0-KqS0l3JOfg8ldZTmUBmlZaWeFlFpQSWaGvRmwOwA3g1DrEwJQRXMJjJAjfjQxJRoQOIatZuaVJnupMmTxmdZM2WgHC4Sou3hCRkQC4TEZyyWQmbp8Ybpkrpp6allHZU2e2lphOwQIh1h2YdP5fZuvE_itZyWeNkvZYWQkHTZ0ysPGxQw8JWkiI80RZG9gHQQCmLxj2Y8FoZHWW9mbpitPv6fJS0a8A1Q_3vamEBdgGtlI5Y2ftn6Zpqejlg57aSuw3pu8IiGkhDofTlpRdmbdmkZQSS_Eo53KYdmg5qOa4mfxASp8nZw2cDDnngpUaMBDZnfhFnTKkmfdEHZE2a9nU5mOc8ETA1AJdGZg_Wf5EiAKSfZng5itEDnk5z2QZlU5fORzn7J6QYuj2hFubqis59yXdlRJitEVkUZmyTzkm53Ka4llsOwZUBRxJ_t7lM-Q6WWztZ8adUgksASvNHK-GQc75CRu8FmbkpAeWTly5FOeenB5TbDenoA4hunn4ZmeZnkApTbEHmgZIeV_FFkLaAARYBeEKy7zIw8Lnmy5IKWjnxpX_rUHZCTocf72AXQICLFxuuSMkN5-eW5lf--_vNECUtPrlkiRbcT0l95Peealf-ZgRmGZ46FDPzlhc0fPm7wQWfWlT5E-e-mKJX_k0neySUfs4wAJkOIb_eDQFgAk8Y-SWnr5NGV_5JBZSQKCWhNDLllFJt-XhRn5Sse2H-InYWd6GxdFCKAMUTFLrGjhsPkrZf5M6MokbWqic7li-3-YWCz678e7AzoyYJVk1-hGrQBWBFobMBTCy-b8FwFCBUCnLpjwVAW_5qILAXwF3WV7ksAgQOpEuhNIR3HYF3WUvEEF7ADAV5JtBWYGig7OHQDEJBOewXi2tUTQUkFe2YnkgADBUwWQptBWgHoUZ4E9KkpjsEcCw5obrJRYFJBTXknpwhX_nMFJBc8Ghu8AOwBz5MefyEEhWFDfCKFCBQbmCFqhUQXqFSLLUEZ0_JCsA_RY4NnCWZkuQv6QF8Bcjl3RIKeYUtKF8dgVY5jCVhT9wQUdnCwZA6c4W3-BPr4UJ5nhfRSMFahaIVuF5oT_EQALhIoHQQkACkUkJbOREUJF9BTEUiFPhW4X8ZLwDbDq0CMV2j9QoEBplZFrhUizKFemUIV5FcRQUVIsSQRnQaQ5aRcDmB0AL3D_e2FEEDUhdaZ3lCFbhaYXRFP-bEUWF8RZ8z7-nsCqF0-E6OWJVFdueb7YFJLLkXjF-RRumrFiRfMgVAQkf1DmONUM_LigLoC4TGFeeVzmVBXhcQWfMaATPlHAlgGECKB4oGwDdF5xXUVPZ1xZYWtsYwVmlYUFoJYBBAUQEEEiIh2v0CogvhGHDnFTuTEFfFUxV8w3p8BQiU9wcQHnDVWWVuPH0-yIMCCSA6YhHH8I5xS6l4FgYXCUFFtbO4l6i08cKB8ydEZSUzxc8XwXkl6xdAVNFWxTOi1s-_pYDDwxIcf7pi6uJsDO40_JECKFHJcyWEF3hWyW1siRbYXEg9oehSahjEfSUilrkAIVjFLJZMVklrkEXkNeliANI2RCQIFEzomcA5BTC5YcqXXB_CRqiCJeyMImGxfFN0CCUQ4RYAyJY4UAVTIcUM4CgFqPixTo-EBVH72lAlPWjvxHpXXi1B8vvWHXgDfnPkt0jsIfGIZQxSGU6ZHhSekBljpZCmJl_ebjSbaDfvgFOguCREEdxGZUvGplQZXkmJl5ocAEz8bcr0UyUdgb8HllxZV0AOlpZemXOAdeIzFH-TcSUjlRVJbPH1lbZUGyNl_FGmUXxIZUPFe5-QMPCoAjPvaFTRHPDfDxl1Rf6Vtl7ha6lPZJZVkDBlK5ZyUz8tLOZpBRR_h7R7oYRZAF3ZY5VEUplTZYGWblZZSuVmBlgIFRARqQcf5N-NyJgWFld5UOXNlN5a2V1QAuTX7RA6gPUH1-cIQuDzpPwR-V_lHxY8EbltAFuV_lUWd-RsB2uYKhgJ_ZQhVfl15XBW3ldUJ7kucomP2giAWAaJinF8QOhWB5lxeb6wVpRKOVtloeftEQANWSBUSxY4LvmbAEFQmV0VF5fUXUV8Fankuc6QWOC9wjOS8UEAJkORWqll5cOUtltFbhVF53jgNK885mXQgN-AAIr_F6lbbnDZZ5XRXQVgYbxU4VPLAEqJ-gxrAAIxCxdkAnl3QSGU8smFSOUbpNlcqnuAhFf5DZB4ad4TexkFa2x2VMlQ5XOAtSMPGUAZnn4CppsOWXq5475ZxUBVPlT-W0VtSGYGOhWFPnjKZ5YtQVRVKpTFXYVrZbUhfxY4PkBRAMpsRX-AmcEsXaVVFf5ValmVTRV-VtSM8E_xLAZGEw02wEWH9ltVVVXvxg6OdQAVA4bdAN-TAc34RxQsEfEdxnVXwlv5gPmrFdhGsVJQyUzhrpQ0VQiSAB6xvhPIkgA54PYBelM4f97EllQZ7FzVC-pCk3g-6HFCMBoQC3TxAI4KglTBMlMkHIRHeUuX8AR1a-yUVBPntVWUelHknrVXpLUFapmALjowZ6aS3QWgLxS6CDFD1WtX2A31UvFvV8-h9WQpX1Z-Fx-Jpg4Aw03QGjzH-aUL-lvOnsT7GQ14EcmX1FMNS4Zw1F8QjVmBDQDyUw521FML80x5bjVekklYTWzV71dVXbRCNUXk_hjOYWR-AJwfBmLlyxa9V41elbtXM1sNazXpZCNVFlMZSmecnCQrtDKDZA9Na5CjFJ6UTXzVOiXjX7JzgLXRjydgPaloy7ABOhAGrhHNEkpxIcIAr5QxQjUwlvoWrUHVpNXjWWpwmPrFTCcIXuijAanlZUrJCNUSXFZdsaLXE14tRjkI1itGHltAsqNZFfkueEqUdxIddDUB16tZ9V416CGHX4UVEUQCxZsOW3LZAbQCMBK16CPHXVhgdRrUAcw8R4B-ApUcf4Pg4QIkBZ-sdZDUgxL1WL521JNRulfVMKXCkNemdXmEdOAgCMD0U9NailN1_tUXWJ18NQ3XT538DoVuki-UQCyog9YzVPZLdUHVK57dWgHtQBVWsI2A0eebYZAAIhxXg1a9YXVz6xdUnUAc5uR155AZUfaHZQ2QCwBe1d2e3U21hucvUl11SJalMx4njLzH-rtLEAP15vu3W-1fpTNWj19tW3UN1odQJVYAP2SIjtQ1UfGh5c9dQByK0x9ftWt1bNZDWk-SaagDQNivnnSsVhdvaGt5nYODT01IHKg0s1JdUb6MJmcIEGzlMCD-FmlSDTGnD1IDSfVj1DtYizk14noEFxARKVDB0AwEVbWYNi9Y8Gv1Z9SWljBoQKqmoAqgf96qVjIHQB1GCGWQ3C1ADQnVgNGDYixJB2Qq6Gpp-Da8CAJJ0AKDQIAOcw0q1TNaA3oNEtZg37JHUdnC758SYGnJAfFF0BkNz9YIXiN49YiyWp54LOBUAXgFMH-NMvEI2H1mDUA0xBXjZw1IsASm4AYBM0QfnH-0wQMBg1Atc3WYNKDaw1rVGjdY3B1kNWP5Ox-WSYlEpJ6OwBxQwCU3px5wjQ1C4FftWw1oNK9WI35N-_iRUNeblUGnsA5Pv-lINL6Vk1RN4DQ1CJFwCYFTxo_3r_VYUecAQX01X_hQ1i1JdcFB3FMCI7A0leYdSxah1JdM1qNr1Tk2NNgYV9V0ZAlZfVR5-pXnAiI5TeMoxILdPTVcZfTTs0l1KbMZXCQ5kBgnABueGSGXJUwAQm541zVs3N1dzWfWOMN6aAE-5XaF4CIN1TY4yzNp9d41V4yqd4k0AVmSIgKN1EE-kQtHjSCn9NWjVXiWp6FP3C_RdlovADOQafs5YBhMSihaVUuXbGQ12LVC0cN4DQs3DxS8OxyoFTLY7A3ZaTVS0MttLZo02NCzTEmP5RAKwBvA30TmilN7UJZDgomEfXV8t3Lbk2r19gAs3mhjqM76M5i2Sq0UtLhZy0zNtzVY27Nu1Qq0LNdOe9HieeFHFm7waURkE0MuNQs2_NI9ew08tGOe7CDo2Gbkgsg0EBGAABa2e81TA8oc76BAUaTQWDoY1SrHv5k1Z_lTIBBQ03_5siStVulyyLxybV4BbCVaUlDcwV2s8mS5yigTkinLngooM4ATo54F3BMmstQ6B0UMngG1DFvHIpG1NwDQ0U_5UbWm2KRMxe1DOt6FMLi6gDQEJEDgBQF4DZpNBem3cVnxSm1zNjbdsEuc6FC23TozgCNwmMaoUs3wAWBem22tmlPW2ptohem1JBN7pYAttgCfEDaIvhIu2KRFjUO2rtI7eu2KR-yRO0CSuoEJ66guoOGhdwYuMW3owlIOYm8Flbem3otKhcO3QtPhem04twuAABHDQBf7tQZIRDAtyVTeDVVtuIWKUNt57YgXsA-6EdXuwlgI7F0RsQBEB3xExak1lVERXaxtZWTZG1rtf7a5CkFpmfqDOAuoDeAGgE6Oh2II8AKPn9tZHYO34FP7XS3bRVbbNntR-oHoli421OeCOSSvt0DtQMCIe1mhcHSR1bFBHeIXvu54OeAztuTKCUwIj8Zl781eHZAUydknWe2kdH2Zm2CduoM4CWAubYp1p-A0A7A3JowOp2UttFAR3HtbHae2_t0nWR37JeieeC7qCPsLhdwd7o36dcfNeJ1ft9RcR06dznU6SxNDQHnTtQbncNxgd5yfCBwAP4eJ0RNvocF1OdnHQR2QNAlBF1i49gENyxdkaI7AnhTDR-1kdmTQTUnt-eFJ3pdrkOOU1-06H4yVR6DMx2rlO1SsXsdDrUrlVtfheO2nUHFuGjvuDQGYyw5bpBpALtzXax0kl7XXK34FdrLTnjt-HmB2i4DQMdEiIkGAUAUxzXaI2TdjnRx3pZXXWgE74bbeeDLdMGRqHQMwwAunNdy7XW2VdIXdV365r0c4Bi4dCe1Bvu7sD53piqIAFGlVNnUIWzd9ndt23daXXt2zdl7f13GdXcLqDZQhbT50CZbLQl0q-Ooc12BdFXZsBVdIPa5B4VAlJnA5Q2cIBXH-uLfxDoyrhIe0UV5XQ51A9u3Y612s9FewAOBqqFOV9VDDRRE4dpPRN1XFU3Xq0rFNPYkWyo4YA37whJBvoD3VHLbZ2Y9W3Rz07dHXTN2Y9fgcMAnhIJcLiKmIzQoXMd6CNd2pdVPZ10KtDAS5yYJLCcKC0sigRIXfksqAVn9thLDW3JtUvdN0klOvfv79dFoM4AXuAuJF3uwsXehR9AUdYu2Es7PW1029XPfh2Es0-S23tQ_XaKAe9YBKi3QdOvTAGWlqaNaUBCU1fpROGJHYtXLVBsVMgzoG1U6XnqW1b6UxBqfXd3pZ9gNlCWAASldXoJ81VYBWdu7T8i_wKjR3Gl9JsVk1F9wPRjnZ9dSIy1iVyRbaH-ZllRgBkVHcZ30RRrfUxTwdF8SP37-vYtOBtxgCS8DUh2ob8FT9S8W31a9jwSP1mBMIY5DSFmeLSWDQQ0OCjL9drNUlj9ure_Ej9aAW4CDQ7gH4ALZY8qBVGQjgDdW31pELnh_-x_X3qr94_ej0d9J_UkHOAzoRoEYA0_vEDHg-Zd01DFI_QD2VBa_dL2BhnfTCnqM3UXP2glFwGlXg1iA370E-cA7b2wDdrNin7RmQCkUPoOtOcnpp6Mp_1UxZ_fa14D5vogNX9KBVNJeAneviA_RTAxwWhu_UFQPXduA4H1i-iAwLFNlWUEbVgJ62UaV1MllFQMwD9Az_3F9f_TKz7Jo8lmaoD61OTHPkVAyj0b9cg-31K5nfVg11BQQElXQMGvsIDNAynSqEi9GnVH76DVvb6F8DF_XazUNLnLqBoy-OiAP0-DvkcDC44qe4B5An_Sw3k9CAzoPr9CA04NmB1fXIEAEFdWwGva_gDHVQD4Q9_3n9eSfoNX9avlNLQYcoBLEwI5YtqEwAVJBkMd8PoOwABDvAyEPwD-A1qW1BVEeqQvhtqYGm2AkaTrmYDdrEelBDsAxUN0DOA20P7-Pg8wgwAOpdZEtxC4G3FUwhrlqFOBw_b0PJDtA_wM2DbQxWUDDecF61KByw_f2QDrQ1qUS9sgykOQpnfYa3S-j5NSxqhxw3LGJDWpeUN7Dk_W0OdpVoeWkXibvrqD3D4ucKDWdmrTPq3DswxP0bpBw07UvAdhfcW49Y4JUWsBJOdMNalyXYbkODqQ20OZd6FNOVwAjOQiPBpUJRCODx3w7_16DdrLr3JBlaCkD5lDfqPIFAhI5_014mI_IPYjytfv65QRiCx7MuenOwmvO9I-TFkj2AwINdD8w58PK1W_RKBnVwkLPq9RYQEWGs9EIzc1thw3usCWlHXBroPwlLkh5GgM6kcyOs0_F94iozTFYmhuf3gD64wrXds3XDG6U9WnV51VZlXV_4TdU9wV2u8PhFYvk9WB-W3rW0wjkKc30V948VX0KUNfQhl193QA33Wjp5eb7N99ozPB6jAcbAnvxFCa6MAJ6CQQnYJjHXgkiIMY-qRxjBZUMUUJQY7qN1Ny8WGN5JPCYwnX1QQawlCA7CUJVPx3CfQnpjG0JmNnxOiQ7FOxLsW7HxJnsSJCeVVtQ7EVj6-JmN15n1Xon0ZU0cYnxJZiRYmFjoTaL1rVtid-AOjMQQZWQpnVV7k9V6kcPDqQcZVhFi47YxfC1tmLXt3OtAleNhut3uZ60P9JbT60OwfraxVYFQbQoBSj6wHYRliWo0vCqIO7shBgIuSLR7YA9HmQ4nuEEOnBGwmsNrBxwesMOQ5eU3kqPmAmQjABRe14iAztCUjKRggyDIFDAKERoCSmog54GLHOuM8BKrsW3xv8jkcq4BVrOKWhvFS1ac5MhMXgaE9_q7wv-lrogAABtD4JAGkcPD9ooBgd4BSvGM6pTY3ykpxuKZmJADXwZE5Aa30P-rrDUTtE0tUJAElr4RQADE3jrMTaEzeL-Cokm1oZWKPhiU9ahhLxMoTaE4JOUTwk7vD_6gBgkDoljxNJNMTNE83xyTrE26gjqe7PmrXqzQv4gaT_E4XjtCVE3pM0TBk1AAQTBQHLZogmHSZMQI0JCxMGSRRqSo9QO-I5OoTaQJyCGEhBv-C4GniF3wigyQO0L08MIIKAWQO-DvjbaJioIizUCQJMarg5GMWB_eEU2hN-Sx3tQj-CQfElPig8E_2gs4xU0JPryNU_ACA6AU0zIVTD8H5JWwtU4Dr_66qL2RtTvyIqaJAvUwhN-SB3v1PTGdU_ryDTCE9EgaglEpQzLwFmjwjO6pWMWDYo4TATwQT2hS5yuAG05gBbTSEDtNZebhtNNDTNkHNP9oBcn_UDsUjKVgtou3q1w9SdhNdObWLlqfwVTZ-ozgLgDU5gDlTggcjK7Y7zKd4PYC4H5JXwFXKJMZ9CBs4zUMXALtP3AIWH5IIz6AEjP_6zjDoynT14kEZQAkM9tNgAGMzRNYzI09kKxQeM5DMjT_-nvpuoCTi1AKjanGBPQQiXiNNQTEvGMjlkq2EhrtCY0CDO5Tc1OqjcMGXFtwszttiNNxIORoRxHAB3kLNEcHWpzO3IuExhNVkGoMOjvT3UKfxQziQOrOtTCE9njazuszNMTTck__rDTSU0bNtTJs2kABTC0yKBLTMfCtMeA93OtMVTx0-QA4ze0yECHT_4NjNEzWXnTgb0blCNOWzCE5MahTbFq5qdaChp6qJIB3hROuArk4OEwz4kyYSST_k7JM2zQWAd6C8woNJTBUp_NAb3cRU-FwwgaEz7MZMP3hxH_TMBk0oizQBaJOf5wMwzhHA2s2NP1TOGmrPvTnGMWBUzLUzNP_6gfIxwjTTKP2AjT7cwrwF2ps-5NIkgM9oGiT2s_pO2lzc7WCbc3SJQBizM3okDicHEWtJjzSU2yijYeZOxM9Qeik_6xzCSPHPaTic7pPJzHk0ZONUGc2ZOyzHSDnPM8-czGiFzaE8XMNkvVDRjlzFU5XOM4KvDXN-Sa805SiTxdjRNALrc-PN6zHczNBdz8C_N4VTfcxZATzg88CrOa2s6PNtzyC9bPwA-k7PP9IQM2gvNUjc4CErzFgOAu6YG85WhbzOXLlp7zOC3ihHzbE61qmSmVq2rQE6-nJMJzSc0vNiTnk5pCzgPkwQET2QBjJPPzck9nNyTucwIAfzDsxJhFz0QiXOF40BhXMlCU3KAt1zvDA3N-SU3FNNcMw8_3OXTiCyKChz_aD3MAziU-gvILmCw3LSz-8xZC4LcC8bNTzNs0QuNzpC7YvkL5U5QsZMNC7_CbzI09tIgazCyPOsLO2og4zwdhEEt0LrM0lPyjuXtKAgT-8zfCiYIXuzO7wME0Xg8zr-pbjvMeU-s7eaZczbP8Lt84ItAGmSwQDyUUTn_73Qtsy_M1gmE1HOKzTir0j4ocE2Ys5zXRNAbuWLc0lh_zZS_-CALhU1WQ-eN0nhMcTmhoRPgWxEwEiTLsOL3NcWUALlBGLqaNEq3Uskv4g3wIXjosPuREwpPTGoM7ss-eB2PUQ6ONi81PQzgBgAVyJDcwdjaz5M5QBXLtczcvkLIUxEbrA6wAbTvTds6ein8y8M7NF4BtIUuCIHgH5J7LpkwOIhAUKz54bLo6t8s1gb08gu3TiIPdPtLs1EQDPTtYhs76QjM2ktgTojCYjQTisyKj5LAfOCvW4xS10uM48SwIySzdKzLMyL6wK0uVaLYjhMRU-KPhOpicy8hYLLX5nwvXzAi-5N0Tay2nPxAT84FOsrpyG_N5zkoJ_MgTxGN_OGcai91AaLYy5thVz0kQcs0Lgi03N-U25OEy7TAgIyvLL1yzoymrAjP1PhmDK2Jw-UvyCavReZq_hwPeWGIpO8rMOFxM1aZmFfMQMOk2_wiT983NzSr5k1nP-I8qwouKrSi9dwqLgAuqv_zaQJovarwC7lp6r9cxAt-SUCyvPGrSENauCcQy5avOrslDavQLdq5mu0L2XCrzMLJaxkACMmmJ_KKTnCypPcLqprWD-rLk5UtirQi15OiL3aOIthrzS3HNyL78zGtfzUU2qu_zpc5qvFgRq11IgaGa3otZr_AIYvQLaWHmvkABaxGwHLVqy6tlrESmlj2rEbGEuHIQWU6v5r-626vDeHq9eNtUx61xDJLwE9ArjkIpCUr1oIqGpyBAUFOCiOw6ANVbckFOKRjcoFOLjzAWchp5Jk8NkJTzZ4FON1CgbwSk5z8Ecav5JQk4c1phXIoGzIYQbvkhBbQbVPC0RwbNkAhsgkmkrhv-SwU26gnLgiBTj4ohKAKIeaUc_yvcWq2A2xpQ-4Sx4ygsQIOF0b6wAxsaGWEz6t2GpGHYSlqWlrxs1g_G5FpMbXC5eoXzzunyMxAkANkAAb768rx3266PRviSjGxyvxS3Wleo3q8m21TfrYCMpv_rd9iFTk4Gm57abEF1EVogaEm39CErL6zTRZAv8IG4uWspBStXII9tlL0m_aPlKTmrVrkoAIY_BwwibXEggr24RfNrZz4IWy6YV8dGx4axLkW7nxkbYLUHYya-Gkpq9K_iDcKD8losFtMqY_Au55uVfCipoqSipirje9jo-PswrEP2jyOXEIo7ImvOio6MeiOqgAcmFZPsCZu67uhOJOhdtkAWcq2Gm4Wafbna4FuKQFcDoIOAFXjjOcyFPRoAVjO85ekC26opOi-QC071Qc7r47-oQzkRojO9UDgB7--uQ6Q5OxCPppmg2wJY7XbuEvlOrg_dYvy4KUaLdsSg8nk9voAFTkqzVOJPsmDqoTbrXQQupLmABV4oO6DsA7g7uXh1QYUF45cAULuQCI7kOxO7PyU7hAAzu0bH651bNHoLrvjqjp-OCerHjJ4ceMsFx6Fwunnx5AKpnnJDCetwGJ4SeZOzx5yeCnrcAOenno0CoAqnsZ4ae82X546et5Hp6bABnseBqeJnvpAaIQ6A0DDo-6Fm33uDDncAPAPDlgRwAAVbNtYAiQCZBPAUaHgAWe-uuYjgejCEdLrcrOETvDwJO6eirYcnvLg1GtO6J5oA2wL1C5A_QFcCS70u1m1LAjPBLiWAcUMKAKNdbvAA9G6ILJiukaDNfBXAvPuWigQloDJjxkUyOHRCE3eFrs2ehisFijQayILu1QrOCp5Ge6noqt-06wLtpAT4XquCu7Muw0Dp7lO5wrbu0jvg40eaXhaBBe0K7ciAQpDvjtMe7O6bvsele1p4c6_O7x5G7bO-F5CeInvTs97h8H3vM78u4PuyQHO1zu57mnnzvk7Au3nvC7Oe2LtI6HXpZ4c61ntGi2eu8GPDU7S3kV5ueLUGV6pLL62eA1LX3gdYrq4yzLNpmg3uYA2QN-83wP7sZtQDqoSGt-bv7-_KchAq0y5bLwWSs5xONaRE2Zi1elezgDrezXs8jreTapt7PI5AtUu00dS70AGubUF4ghzt6MOjsGP-1H4z2b-xmYbOlolDt3giAH5I8EgyMOgDgg8_JIHet8hVMn42agobrLCxDpgmYCxNrMFmZ3mZSwzStgsTxmuWNwdSB_Jifrli1ln2hzW0uOmbwWSRFhbxmDKubIeM93s8jPeGqMfOta3KC_vKT-gRfPUr5gEt5QHjXokAwHoyHAfmeUAGoeJISBwkA1LqBw0taQ83p2STI-9i_vn2H_BbPYHuB0Qf4HvhsUhnGcZi8SkHyUBQfsHhiogZ0HckwwdQBVRMwcGKrByQRhHjBFweOEPB_oR8HQ3iNqcHJRMId44-hDWk0A4h0kSSHHxAN4_7ch_BpZHLlDATKHtM6MhWHZyDEt1yzpagDY7weJID17GXll547HW1-ND7ne-btj7mOn3tLe0-1PDD7dO_btDHUnkvuKi9uyzvpk1O7Ptr7POw0SM7MnnbAr7aACLvGeYxxYf5wO-zruPK--3sdX4Ru8ftUOB-wSspLioxftjgSMw_D6g7CEAewTv04QfwWqskAev7fhjIdqoAB5GA743-0Qcp4_-zPBaHXxzocxzgq_zPW4hh9ActE5h5vsNHGY5thAG_k9CbUofaDgcBHgRvvZAn8FgvZpY0U23pRHSOBVO3yeCzNNOa9B6kfFg1lmjMYzQUn7OMnNhNrO9aWiu_yZqIh4EQZHP1mbKVH_JwsTnSVRDQtOax_AsRpHBXKlYLUd3nUcFIyJ8iubLmh1LIQnIB-fPQnEB0btGHbXqYcFIiJwgejIgAjt6SrUk5ItWLbevajYnvx1kh4n7x_dAX2-ODQvDoLhzfbAAbh1paEnm2MSd3GpJzATknJ-JSdDT2ajSdmU_p0FIMnWXkkTMnkZ0ycSzUh-Keaq3J04S8nFR2ZQKHwp7ASin2agmcoEkp99b5nJJLKc7aHSAqf0KLWkVzgnjSx0sw4sm5OpmYoXLf6fHVZyRshKyG9pKUbLRzlOwnkB_CcdI-p5YcdIRp4ZOhrZp_N4Wn-gFaeP7vh_if2nFek6eLWzp8diuHXx-4eWiBwpWtC4xYFMi32t_p6d7I93CGdv4FU9qqBnCE9Se-n-hGGesncZz_gfEeZ0YQpnQUv1YRn14lGeEzLJ4_aME8Zhmc_4WZ4wTF2Ep0meZnFmQL4fy0p_XKbYKh_Ufur7CxWcqnVZzoe2ThmxqeLePZ8Ye6niSP2cKnHY6icJAfaykBiLfk6OcYn6-pafeH8FtOd2ngR7n1OnRyMudVnU3EfYVry62RSC96AMOgPz9XJufbI9F44cAkexHocFIh59vhXnv55WtinIGj-f3ibi0GeMEwlyQSiX96iNNSH951UdGE0Z6-dpnX552dSnNRzKeQXcp4kilnTR_2bBizm2OSKM9C4qZmczx40uvH9-z8eP7TZ3xcznWkJ_tXIgJ1RfUACNKCcRz2h2qc0cYB1FSanJ4L2ewHxh_AcDniB2ljGnV2OnPEX45zQCTneB7aeOXP-3uezI3p4ljyX1KIpefiMl2efBnF5ywR5X6lg7DozMZ6yfvnlV-pdxn5WpyeJneR8mf3LsbZkewSAp9UedXYlyxdinDV7mdAX2-Eof6X2JIZcJIxl7Beyc8F3xc6HskuAeoXWp2FdmHEVxYfYXhnEAacXpp-W1jndxmRc4nzkKlf-H1p3TZznG5wucun8zO6ccRGV6MgHnxV4ljHnFJwVf1TRVzbPcHdJ1Gc3nb-HecDX6Ry1dXeT50kQvnhC0yfVXml_oTpnQp2Bcin4l9moAXClz9fb4jPaBddXYUhBcjXxZ6ocwXVk8qeAHCFwFdUW0Jw2cQAL8KPMv7LZ0hsBKXklDKxTRMgSG2X01xFRLAZN3fYFQCyCTfM0HSCFf1e6F4AJYXaWDYfCLMQP2sXKRF1teRg3VlifkXlSAdc6ge1w6eJYTp2xccX-m9xeXAvF21D8XcxIJe8Lr1yfilXiNzDfvKklwIfJHT13YAFmOVwpfvX8Sikcxaqlw-d_XbSPuqpn4Nzpco3g1-Beo36N3sirXZZ4SiEoODlR6177R2tw9HUe-3v9HS-4MeL7PHqMcCezHrbuj7MdxseT7invHfs72e6LurH0x9D6zHGe6vui7ex5vsHH2u3vv2e6d-F5H7zcAQ6cIpXjWDmXC5Pl4LwJiDfv2XvcoddOXz-18euXH-_8eeXaV8Cf-Ivlxhu43DN5oagH8y3NfvMcJzzd9ny10ieDnMV6nNxXUqwlc7XE51Lc2nrpz3fEHRJ1sZ3XuV9bewEe66Wsle0Nz1fZnfV7AT233tx7do3mFqNe4w419jdwXo9xrczX3E8FfzXoV7PfhXbXpFerXQ582QjnYt4lfwUm97ifb3Xl8QfOM85yUSLn-WOre54FVGb7XXBSLde63fp71QUnda66sRsJ-H-cLEcN_1dNXwF7ODI3ulwWe33PajQ_ynWN0qev39N-_f43-m4JdE37N91hd3zZ3faxqgStTdtQ7NLTdc0_l1JJM3Xx9-rs8pEBw8n0nN9_fc3Op7zfz3BpzUTneeFyIsEXA66LeMT83hLe7XR1_tdQPA9wScnXLF8OhK3G10tgIPMAMOgNAJZPcD725KNI8L2HEpbeH3J3owSEP9EsbdqXx97g82rUN1Q8P3Bl5ti-3Jl4SgswJUD-HJrg5O1vh34EPEi2lUyECDEgVQN4CdOv4OSALVzpRQ7QMcbfwAAuBT7si6we1_pRgd-VZk8wgWAD6AVPmAOSCUA48jkCT-PcoPCL45QCCBpPKpp_BUEVpIbHEO7doQLFPlIgiBmcf5NXJY65oPpQAAenXg0KOANz5rIusKuxTIkz1Xg4As2_M8XSgyvzwmUyz7bgAuxvgs9bP1sLbBx3uzzgCFPi-oHDmgzoqHDhwhsZM-241MvSGHPBYseJTP1Mvs-oUVz1KCKiH1NXHLPPMgC6rshzy7pRo-lMC-bPIx5XtTPPMsFBzPELzPC53TO_MdT79z9TKrPo_Yc8jHWx4Z6F3aLyduAuXzyACHHuu2i9wv1Mhs-IvxL6XfHH5dwC9zPALpS9Q-4zz8_Wg7z-FCzP3PgXv7woOu0-4AuOzE-t7vR7z74EnnNhVR-rm7QB3k1z-HTWkCgPIDyAQAA`} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}