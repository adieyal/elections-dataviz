{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.mdx","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","colorsData","partyColorByName","noXaxisByParty","edge","getFillColor","i","_typeof","name","partyName","length","getFillColorFromPartyName","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","destroy","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","selectionData","CustomEvent","REGION_CHANGE","loading","react_loading__WEBPACK_IMPORTED_MODULE_8___default","type","color","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","process","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityiecId","topojson","projection","path","concat","parties","availableCnt","party","b","legends","getLegendXY","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","j","rect1","rect2","bottom","regionName","smunicipal","w","fo","muniImuniCodeD","menu-widget","sidebar","main-component","provincesData","metrosData","getMetrosData","CustomLink","onClick","React","e","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","label","react_default","children","NavBar","_this2","activeLinkId","handleNavBarSelection","link","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","MAP_PREVIEW","content","icon","province","muni","metro","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","bootstrapStyles","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_possibleConstructorReturn","quickResultsWidget_getPrototypeOf","quickResultsWidget_assertThisInitialized","onResize","barchart","map","QuickResultsWidget_quickResultsWidget","quickResultsWidgetEmbed_className","originClassName","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","quickResultsWidgetEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","event1","BARCHART_PREVIEW","event2","DOMAIN","_this$state","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","onPreview","replace","QuickResultsWidget_quickResultsWidgetEmbed","MDXContent","QuickResultsWidget_quickResultsWidget_classCallCheck","QuickResultsWidget_quickResultsWidget_possibleConstructorReturn","QuickResultsWidget_quickResultsWidget_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode"],"mappings":"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","file":"static/js/src-components-quick-results-widget-quick-results-widget.cde8dbb9.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, colorsData) {\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  createTooltip\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            // if (self.state.regionType == \"province\") {\n            //    console.log(\"fetch muni Names and codes\", JSON.stringify(jsonDataFeatures.map(d => {\n            //         function getMunicipalityCode(properties) {\n            //             return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n            //         }\n            //         var newState = {\n            //             provinceName: self.state.provinceName,\n            //             muniName: d.properties.smunicipal,\n            //             muniCode: getMunicipalityCode(d.properties),\n            //         }\n            //         return newState;\n            //     })));\n            // }\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName() + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu-widget\":\"navbar_menu-widget__VPoXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"quickResultsWidget_tooltip__1X8PF\",\"sidebar\":\"quickResultsWidget_sidebar__190Zn\",\"main-component\":\"quickResultsWidget_main-component__1GrPu\"};","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n\n        var event = new CustomEvent(events.MAP_PREVIEW, { detail: newState });\n        document.dispatchEvent(event);\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        content: province.munis.map((muni, j) => {\n                            return {\n                                icon: `3-${i}-${j}`,\n                                label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                                to: `2-${i}`,\n                            }\n                        })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ]\n        \n        return (\n            <div className={className(\"menu-widget\")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport config from '../../config'\nimport BarChart from '../BarChart/barchart';\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || bootstrapStyles[originName] || originName;\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div className={className(\"row\")}>\n            <div className={className(\"col-md-4\")}>\n                <NavBar />\n            </div>\n            <div className={className(\"col-md-8\")}>\n                <div className={className(\"barchart-container\")}>\n                    <BarChart {...this.state} />\n                </div>\n                <div className={className(\"map-container\")}>\n                    <Map {...this.state}/>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event1 = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event1);\n\n        var event2 = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event2);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> QuickResults Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport QuickResultsWidget from \"./quickResultsWidget\"\nimport QuickResultsWidgetEmbed from \"./quickResultsWidgetEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-results-widget-v1\"}}>{`Quick Results Widget V1`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYAEVQlibZxQZKACDgAB1LgzzdE1-E9OABHIQEnWofQ4EkGC4IQ0IkNQ9Cx0kABHWCdgoqi0PQM9-FVVABXtaDGPg-BKOQ1iz3PIhAhyY05WwyRcPwz4NxoEiyKYgSWJogh6L45ihPU0TxI4u0NXYIMpUwuUFXNdpDIdYB2E0Hx5DM-UAAEYCIEQBlQAiuisgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ2SgAWTL2AANky7L1jAECADEfWgRJkv4ZxDkRR1MHYAAFIR-CWdyfjgPLESqmsapoZwIGCy52AARiKnL5HBfzqECgBBOYovYSNbPIGwoHQcN2HkTkorEbaYxkdhUQimBuGAQ9QvC7F5G3WtgD26BDuCAAyH7xkSeZKGaT6DqO7gIflMBQn8ntUHadgAH4Ni-8NI1Oq5Qe-1AlprKQZGrd8zFhIzMDAMIkO207uHO6M8Y2lca0TEyCBwWrMhSa8CDe2s62U_jEJ0tix3YLdV0TfntOo4WLzEvMxaZutJBZtmOa5t6pAZwmzG_EBZIIjNiNIrTVKFs9NPI03pbPACtAoED9AYbijJZpZbPXIis0cyT2H4M0pQMrjIOu574Cc6SGMtwXrbHD44DgQPnYdLwRFRTIZjC267B9_gU-QtFZl3VFAXjyQ87T2YcCINA44TkBOOsqZdEgOcffaHBPQ7gjUBb3yk6mG9XAEew_AdNuu8H4fR40jwh72ofX04_v2AAOVcVhJ6c9vPTXjeh--dfZ4Ef1l_1WYt67s-ZkkKIZn9Mxodhzyeigfw4DX49I2FCBEo_mBTtiorLoBA-jmButiAA2t_X-PoYAAF12AAB9EHsHLgXDOoc4BQP6DA48CDkF7BwWgP-nFcZmHIK_eO7BJZW2EiLbAoF0B2A9pmKYtlayrgCmiUIUphSRgHJQO4ADxa1gZHCfhg44CfhERYVgQ9roLmaNFCYthOK815iouAOBURZC2oA9RBj2CoFCEQLqC8IDwCuAAVhyoY9RMBWD6G1PAcg_QZhwyuPwAATCleaq9oieT7JeLYcM-oyPUV0Z41BLCAxmvwVAATexQDCYrOxAi_j-RgH_TxIAUl2N5kQGGEBsm-1ySAWx-SLCFK4o4TAOS8mVM4FsB89TynhNxnYiAzQJGCK0cY0x5j4DCNSYYzR2iCBZBwP0sxIoLF2GigIu4UyTEzJiPANRhiOmGK6dtRZWjImeRifMYZjSCS2HGZMg50TYlbT2WGGAUTUBHJgBsgxWyDE7J6Us9JaBER_xOY0sZOjaA4B-Zkv-tzJGgqEBkv5sDXnqPeeoz5dzqnFNgQCypQKJkgrRRChZUK8XwvaeElFhKim1P_jFcJGjCQXNxRS4skLelV0ZZgBFvMkW8zJSyix5AHyYvydiyZfKHzMqWaK9AHLaxctrDypZuJ0CFj-v2KFmwf6EEFXY4VILFWFgJSyvVeBpUGJ1f-dVKRCDiq0RawgJrjrhLGdQBCU1ujKLpc6-ArqcAeFUJGTR0jFZkMVvJT2OouD6jaDQdG1KRkWFxBgUYOB8rnkcTQAAMrYUCUY_Zeumn1M5WjPX5GmksHxKVA2cvWJwwirC0IJAAKqoHcjDAgMb9GGITScEY9z3KONTfoTNqJ0gCGjIIPNTJymFpwMW11laZXLV5rO6a7bwmrnkA3IBdBpyrrjZOMcoCLp7tjBwChb8_73TPfHP-Y6hAjH4JyV6NLawnpfue2Bl7KHv1gWOqgUALREHQBaIqD6n17rsYwXem8FanPxnGZ9iYrpXu_ceT977P78D_QBoDAAOUDPNTl1iQ1-i9H0SM_tznPaeFpdATLQGCEAj6COEZfZPEeC8YodxwGaxyMGWNKwJgh9Rr7kOkdExRkAt8aMgVcPRgQ-GhMQavpxjuPG-Msbg7IITmnmMvt3Fpvd86LC42DSTB0ZMKa8SjoJGOBBOK631qG1hSkTbRzoRpSOKk3O6TlugW2QFaOO3AsvV2MVHSGy9uHcd5pE7B2bj_KLXcu7xcKPXRuqCXwVwwVnKLaD05Fw0mcEieXK7V1QLXWLPEQ45ZziAT0nmBY2fc3pbIFW0tByqw44iiXO6ei64pSrRkO0WBErAKUnkB2KQqSNscPVfi_PgNqaIrgzDe3dNhXrkhZgQEDmYORRwwWIjgEtiZW0zxzdhYt5b6NN2P3GyycTn9oFoHsOR48grgGHpK9lyBz3UCvfQ_ApBKDwHwGwT_F7b2gcEL-wD69xKcbLWQ9Q1zTWfPiRhFgRhzDa2umG77ENq1uG8NHXsrVojQjiLJ_a_bCioBKMLfas1eihMLjcvoFppShAiAaZU_rOoXFuI8aUnxfi15wyCWN0JbTwO1iuU82JOSEkS-STL05h2smwNadN_JRLjza6E2iylBvZcWElSb050zBn3HYDYxdjS2f3dQJN5CVwIFwJJXu0bISJtpuQujIT3HNioEjHduGkZ0DLfJ5U2nju4Yu_mccZbED-CR4mfwOBKeQDxCgAnjPVdZiRmyGkM6MJhZZ_KK4iA7jPIZ_fPxunYBtFjjClkHacfffEROvazlnIPjRD2kXgQQgjg0yLKgOAlBYA4AyCPofI_ORGYdX5XmTmnERqjW2wVwbV-45oNqLgDaZhp5gLuqtK_azUBd84uAVea_UHY7OU_VL8fcu6f-CZCVY5yKgIybjlB01RgMh7BKR0YcBVBsBdQwAx1ldAlVdqZooLRZp2A_pFNawzV7lHlnkopop4lEkEl4DY1TkgUW8cVT9gB-cb879hcP8h4bYf9GQlh5dnkckNcC0NcSl-AUJ4BaABBzAQD5h-Bu92kYQoA4BuhX9Rk6VxCCBW9aB28_cqChdPIrhaCv9WYGDuhhC90kUd9L9UBxQsDYlH80gi9o92BacXQRg5C3UYpmDFcYRuM6Dv94hGQN1HVpDSC28rCbCl89CLBqAeoHELERgzCiDDFY8_dkDoorCHA8gIgiAXci8_ctEbw1pRR7AAAJdIywAAfS6lFHPAADUGhzwUI3ZjgxxZMoArhmdtC7FDwTETwWAhoB88Akj-dZpA1wlIj9AvEtpYj7B4jIgOiUicB9Q1oup8jCiSiyiKjMA6Majp1gUtCl9eZGiuYcAWi8oCA9pRi-i_CRFVwpwMgqZwiDFacQw1oGgV4toUscAribiad5FJCDE2cuYHwdc7FKDBdq84YvjDF7D5glhGkhMODYEASDE9cYBIT1EjdixYTuVmlFghMrdZl4BETawO8r8UiRD3VzkVjnijhegBALsFsTtXBmVLtjtlscBIAkIowXg3JS8mSiAplYEcDVV5twUMUIEUo4F7VPs-Cj1KkT1dMDEkxUwUdrMqJ2AWschnBqD2AABxEdfApWKsbTYjQHNDeHDDcAYUIgC0FIIQSnBTU3YTV-QIKAMQYJLmRobUJWK0hccU_JRgNAGYcIAnBvDRWJPgEAWgLHfgb0n0iwR7O6MjQHMdGqAQI02jIQeAxyNAgxckSUGAYYA6DIf0-eEUaTGgWTF0eTXJC0uxB_PwJ_e6N1c6Eg2Qsg9vK8DndAVQpw9QnATQk6WVFjdTN0_TV0iU7UvUiM8M6Mw04000mYc00MxgZ0m0l3J01wa0vst08QqXN9Qc3UlDU_fgGMuMkCBM0DEM0Miw1wiMn42_ZQ6gTsljMs9wNIe6J1Z3RQ34-_f7cstIH1P1ANMDI89RV4n80Qn3HE4iAvGYSMVk0vP8_8uXA9YUyMRgQROGdgbYGARIe6VkxyTQtC2gIgV6YAdCqQBCzyMQevKCxFEiqCq80UmSOPJc3mHTNAkTKHDcm9bc0ck0toCcxjb8n06chcl0ww5-bAqQGc2iwxRgFckJNczc5iiTHcvMtEKfA85Mi4k8-6IEmASi05G8is4AB8gS65eYEw_8X1DAf1QkJjZSuxWySyh3J888v4zyf_QAkYYA0AvvCArAKAmA_A-IB9dgAAQkQOQJVRstFMIpZEwrwJV3EFgKSQIpfNEtOU0o03CvMEipADYJADEA13irhkSsaXgpfOPN_zun4DRXIGr3iBeESHEHKsqqgGqtyqIpsqkAkqlHyvopLPOP40jHUoCtwJAFioIL8pCq6v7LYCkrEyhxHNjLHI4snNIt4sXLJMyX8WPGEr4ptNCuEzaqbiYsjMHJmt3JoH3K4sPNItkVUuAHBOPGSp9O0rvIoNLxrJsJ2hupmjUPoJPI7PYHypSqKvSvEGcDj3YC4yauoD-sI0gtIo1xpNOxVVhopJAp6Uuwgu2obyFPMEKsQuQtQuuphQW3ZNuuKsZHug1yJo0rEHxu5MRApvkHBtQEhobxOnRs2VZp3F2qZr00Ey6ruosGhrsV6oeUORuUhjKqKQqrygavChGp-m2sYp1IOs3KOrmrNK4q5olJEv1AlvquqrWpgA2sXPZrrF2smo_SVpYoNNmvjMUrOuNt5kwuAGhL5v4wetPOes8NrLbydqKRKU-pcJKp-o1rdNSpJtKrKTEGBtXLBskFSuDqsvtsMRJJWsRApJQP-mToJsySRrRS0VvkjDRTRrGv_MxrrFDtxvujRVZS4j_gwquqrudqpobt9tgXptjoSsTreXIouuXwutapovlt7LQJdoVvXIttkrYvHIWobyWpdJXhMUCCOCgO6mt0NpdJao9K9O2vCnmH9P6UXuDO2vDJkv1LkptsTPOob1TMRAzOnH9KsX4G2sdrRLWTgBdoMTdsrI9oJK8PkOABfrmWbM_y-sDsfVFg6qHq6tHukvHtPsnvmvVuUsYA8HCAiHMB3vDpQZuGoGDIfwap2HvI9VQCCL-BgB7RMsfC_LNtQ1ga3JAA8AIADEY3YAAGpSl2G2Hhzc5GGLQBwBQh4armHXoSGQipAsG0GIGeaNMByYGuGrajT2K1aLLi7EwRL5SOoDbJARKWqZGpqoz-A3JxIgRp6eLWjGbgBihxKlTZJ_SAASYAR4leeQL0XzFx8SW2cQVq6g4OqxoXMQOAYYEYGhbzGWOmC6jYk8b3LmO8B8Mdex94xspaRjTEljAWn0s86glQ0peJuyzJy83nHu9SnJex9SpJlJn0964p6my7Wugpi66Eqp52up0i-EupbJn2mpYsMpzuppflJs9pyVbplRxpAByxdp0Zt-5pqCo1K4MqFKFKcphvW1AgK4LxHxY27vLxvxuoLoa-0_SQaMXgeTMwRBXgE5s5gQTkJ4IgJYR-ri1qvKRmlqyBjTF5nsqRwxbukzYmLAKrCzQSaUrzNHGWeUr8JQPWPCA2BSZCY2GUs2WiBrKWdzWuALB2MCOrCIKfGIGYalUQRWIUfIYXBcyfX_WgVUUQCl1cQMy0KqlIJKHofQDIcl3gSlvF9Y2wVMpqTgVABql0C0DwKAU4bYZltl2sPKLsAoK4EqLAEVlluVxWcaFZuaLxUqYkOAC0cQ_oMAWVxWWeHYRRjAK4EYGwMl-V9loaV-LltAXlmAflwVnYBFLwAQacK4FKTKHV3mJ16cC0TIFgPIK4DKGVuVyl_FygNAXgi0fnG3H4F0WV0V3GbRLgGAI-WNBNqINAaTCLNhVbBzSFlLSQDy_zbQQLdF2nFLFnRWfgRx_gHJQgW4e4R4CoDwcgSNphU8Nkd4AYL0KXTydVtPdeKaR-xHPyMzKYf5ymFLMF5QRzPfGFtjaeMuKjBeIt-2PQdFkLLUColhV0NbLCaLAOdrZeIwEIOwdAZMKLM9wbB0UHbOdbOrRdvCaeNrJeYOYAdjEUXdqSOrT0edheaQZMI-HM0QdrdLKNnrSQLuKNq97NmsM8IokQK7CZfUCpc7BeRIRwQVgQOAFD2bLOo7Ck1bcDrubbaD8IvKLDmAeD2gOG1wHDggfS1AP-Qj2rJLT0cIaAOuTdWnRG5bM7XDmmxD1wG7ZaWnft8UGUeAPASwAUWw5MNKY92aeZlKW7GGJ3ah0_P7f5cI0um98HXBaHFBTThHYNET-RIDzibjtDjD4UGjiz-RLoCTgJhoPQAQH_BoR06KZT0z4k6eXUF8xPDtIDlg0pUUNM9gWqYUdgKj-ABpRINaLAWwdNTanJLqc8DI88FeSwNaZU88KL3USwc8ZwWLook8q4HIMfPzOEcgKA6L7D9YRIErkqiL2M6IK4TQ0vdrth9oAAUl8mDWR1_YdAYW3RxyzdjRrQn2JwiFJ0kXJzESjGpxEVpxXIZ00WlWZ2ij_ImesVhIyYvPpe8V8SKn8RVzlJ7ZwbV0BOFoMriUGp8tV1hMqdKSmfYAaee8u6hLZVu5e_N3e4BNlXlT6RWWt3MIwImetWWQGXRLgGlQB-6TuXUtB-kLIMwJFvmAh_Uth5EUB-hQE607_IwPeoh_eqx5GRx-hKR4JJR-hIh-hNJ4-Xh_JU6cwEp60RWOrogEpVp6-_p-RUZ95WRNZ_pX_ElQh8lV57f12ShSNXTq5KWWWaF_Z5l4NQVS4AmCZ2R8mWWYh-Wdh9EPEO6odpeOfXchYDAHKJN6cC6UyLxOnTPFYgmEyJgA1QIDvEVK6DoEmhXTWPQM191TV_xGilN66RQg16p61-d8tSmCD6t7AEyIl99_OXLPQFgAY6Mq2jGWT9T-u9fNvOMs_PMvW7pSz5gBEbIbnPxJtUqFgDL5GBdw_NMoDSL_OS6EOlcBGHfej-nVb8yA76fYobMtsEOJrBrSzYP3QEjVbV3REUeE4G6QwJl5VQwIV_G5GVn8cgXAN8kNn8uqOG38kDhNj4t7X4P4KVj5t5P5lQz7pXt4D6d5d7d9cSCFQC99Px953-WJR-V9e6P-lQ_-X8j5WoY-ZvePjPwP7-Fawy3RRNf1UQiIxkbfUImMjPCOB8ycmdGEsDNQ-8HOXQJzi5zc4ecFEBAZzrwR_yRgY0Y-P8ity2K99IwVA5ATJjQGcglgVAlYt3WMxLAxOMARzlJxk4-8ImNAZNF2BdxDps0o6KNjgEKLKkGguoFeLkSyJrQV4OXDAcX2r4wA0-b5f-NKn4GswU0fuEQSOmSLAU0iGRbIqKDyIFFiipRcotOhL618XcPvLtEml0GDos0Bg3NCWknTKCW-2QXvp3zLTzNh-o_aFuPyPwn4z86ieATQKQFjgUBdGQsugM_5ZAvm9uMMrO3rRQAm0LaaNOTiA4DFKIUALQacCaICCugfaGAMINcHxDxBkg6QbIPkGKDzwXgqvhgGz6PIjKfAooZsVKG_ByhegyoVGHEHGD5BZg6YpYLmI2DVBdgv3A4NUBJpuh_aPocOniHuDXUBaMZD33b6d8feFCCUAIGIEZBSB2AyTvsNc7xB3OgQxWLfyVR4B7-UfR_h7xf6upwhRvI4MH3N5bQz4EwKuGgEjA4ZFOHAzoSeC8DoBEgHwBqvoAd54ALQ6UKxBWmlSfJtBPqJwKCIoQWIaAkIusOwAADsWIqxGwNrBvCUIW0REcCJRHgj0RAfdgNCNhHSpacbwzIltEJGSBkwOAKxNKlLp_lCRsJekSIl0IpD90CAzvs8NrCz9ac-_AkUfwBIf8eRl_RyJX1PBjhIRtwwgPcOf6v9hOl_T5EB3xEf8gOWxHgkIESAaiDEs_XITETIYOBp4g_LRPQNQHxCmBP_M3tYPpFLBwy7_A_i9TrLAAZmjokPksGWZXB6R9RGVJul5gl91BefQwTQHJyWEyGNhLaPzn1GLFm-bPX-qfh8JkFkhF-CwLYK6CkM6-fuKMQQBjHyIMxuiaKImIWLVF4R3SbUeEj1HlAFKRo7YdPAGIWihR0QggLEILJRgHRC_APk0OF74BABBAV0VDh96ejvCcYzMeun5G2i4hvYw3vuhATCkz2zeKXNaPuRgAtEfwYKLRh7GXNZxIyY4tulOLCiLApdMJm6V0bm05GgHaeCYwgw3iaGcjIDhaBiAEBYA-GD6L5384fBp4zyRyDtDPAMcb0mAk6FcE6qwYroaBBzv6V3H7i5Mh9LqsfVoa_pqMpIpSl1QkBvMIMuE9RFmNXAIDIwiEwsmSFm5LioB9OGATDyW7yJWACHGjoAU7CnFoocHRiRSX1BfIpEtI-RP22YnThE8ECBidRwpICSMgApfkWbm6T-VyO4UazlhwpLmFLOIodDlPhs7iTR8o4AgKsjUmYc4AxowxPxMoAsSsOoKPIHgH4RWd1JWHTST7wgEWA5s1ccQsmgSAR5lsmkqREHjoCh5VO4eTQlImsp7pacIkwTltACl8lJJe6OSXpJs5p0Fk1k_SWnQIQRTZoApSpOEioEIDlS6cSyaRIyDkTekSwUKTRzJCJS4pUeWHn3jiC7FLJs-SLmPgChT5_w9UsQcPmFCL4EUEA7KblJIkMCyJcvbDkngmRlTVJCkmjspLM7Tx4p_YIeOIVq4Ul3JI0waT70vqQD5E3_cjuIWIHcScARqVaceSODa8EpFHHaXcgV72pPk_lOsbLjNFGJ2xVo_KQICWBGp_RI4scYDgOkNiaBQHCkqNPkk2SJpXU1bMtFHaVFyYALQbnZh1jgsZ2WbEiFBn3gJJWAR8FdsBDXYGBgswcULO7FnbHQos_sYDi-yqz6gxwtgUmcYi3iEyAMZMuANeA6Cbpl45bceJthSx9xg4N7RLAfBRlDxn2oHFIkRz6y4lD2r7VcOdjw6CcdcZ4UmQpRo7Mc72rHLbDMB2wgce4fk5-MOSM7vZtOMFMBJgj07EJYE-CQzkQkY7GdvOXJakjNPFkCcaOGoukWOCEA0c-OBAGWU7MWndE_IyOIYqiEiCZpUAuwYbhgDsAqxt2WYfHFwnRAk5zx10SnL2I2RwCiGr2OCDRJnT_Z8G2wBvpQ0L5HiLAq4PBnBDCKSFPkYyc6f4GcBvAKZoQU6KXKhQRBMQsACuR4CrlmFpUm_CQh4XOR3JzQbALIKTJ2jPorCgBGqVk1rksoIgmJXatkCrlJdrStROlHchnKwlgx5-VeedROKjpycl48JNAwvRlVaZ9Mi0Ly22C4N05cEQhucgLk7BuKVlMeUsixjhgryUEgicDJrDuEvZX6fxHvCOBBymE4WaFqv13yTco503bieYXm4zdekB0jbkuLeK5N9uOSUXMd3FxwEzugFJhuUyKalIhqvlD7vkie53Nymb3QhYbi-4W5Gkv3EhRaR7mOJ_Z2wTnO0F8h2IHJcqfnkskR6wKIhfvf8H1RV77Ic-zye1FeRx7vVzCtKcPiCiJ58LceNTBHMwtJRsK86LdbWWkwwI09pFdPT3NqhUEtDNc38qOugtTkl9EZAgAxU7iznWiLhu-Mfhvin7mEukkYfyoiKib6AYmj4doMjMA7xw3wYi9aUcGPnEjARAgp_lkDtL6Anwx8t8D3lrDHzwC5XeUJ4rnjeLolFgWJV0CgBbR2gN7TYGOH9CnJYleABzncWoAtwHiBoa4rcS67czUZRWPJY0kRGbBOwyaOYNuhHhfRIwx8g6SwukmOLnFY4MJbeHvDuLFWFodvvAEiAwAfFnCl4ewACXRRERIS2gAMrbTtBIlB03mLEq4CZKRlYyyfMeDqWVI0lC4TJdkqCCLwhMBSopQNTrZ3AHggIdAKgE0Bgi2g6AMAK_C6AfBIgW2dQK4CwBaMIAHgEiDspcp7KYAkgIqDgCxE4AUoJcIFSBFGUgqJl3w8rEVkDinIGlEoPzLMHmAYA2lB0DpWgG2BdKpJiffhduPZI8yBAgg9ABUKWE5odAGctYTopT56LJ4ZiuGFYtrBr4KRjaZtJvhjkWB1hXAvpIfF5nzDehLgulaOkwyMqp0mfVQSYvZWeROVqQmxegFCFt5t8_I4xevDZXYkQ8L-HovIliB4M34CYlsjbCxgrxiwWCfkmCMBxEkpKIgraCavTlvxtE5IF4E-HlAHTaclCLsZ_OijIYRBECYNVmhwCwBZwhYaEWlMdV5R44znGqFtH9Vw42enqlZRaCiUkrd--6IwsCTpzoKZpwAd-XYlpw0KYAdCsVNFEYWhjtk8PN-ImsoAQI0pnJdoLNDfDTLoKea2wlFTgJorGk5aytfErbUHLEU-vboCigbU9wm1LayGO0C8Qdq0mvC0pJlRSUFqncM0njhMggTxq4AjaiBF4jgRRTmF46ufrsinU1Rm1CCOdcmEXWiwD-hdWAI4mSQWll14tLiJLSqoy12spyXap5E3USyaOO6i9U2sPVwIOeWCXdfuuTBHq11g6wlVWvYDFBkwFoexlBunUHq4E8gVDddRA0QIYN8gYoEItPWTqE1GG2ddWqKh3rZ-x4WWUJjfWSYdaUtaqkO1_X6qZptG92cnnQ2XqwNcG8bLQoQ3xLigRUHDTxtA1YaiNIhduZ2ovG6yhFa6PdP-AHA_EIZSEQySpSOBljTWe6T5LwoGo4LCCaTbTbYWABYLSma6kudwtR43dOSJmmzQrmOTKVMaxGmTXpoEWi0BqmVXxRYBM0VsMaHm-YFcHUqLMxWEskpH-uoBI0Ekx4ITCWooXz9rN-m-6dYRR59Ul-1mqReaNS2TJRFzm-TdJrEITrukyW99bEF1rfqfNKW-MZt3y3drgtgWmEspSe6RbUASNd6qFqqTKKZorWnOt1s62vcyF66uGH1uZ5NaLSG6NaQz22gYFkt9mvqspQy0SLlN4WjkpDHs3vVFt_0MHtOPLHZabCHPf5PlpXGoAFN2Y9RL0SzDZa4ivsxIoWOqHngpBMguQdkQaHzEqi0AK4H5pXnqJER2xNovsWjG1rNNMIP3G2LGA-yEigO5COMUmKjDZi1g2yFWM-3VayCx0A6X9o5YA77t0w-1PZvg0BzENBO-hVKk7mpiva8hEzcPwMQniIwRwAVePkCgTB2c_mxpK1oUk5IAAxPYCsSzRZoZULxKxs2SOqS2XfFPBaTSbcpdAyUdtQNpnLJQUFSSUaA3giAy7ldjSJQEJkl1yppd8odXSxnl3ygU68AfXYRlF1XAt1rgZGijQWxLAIA1Mc6NroMQcjjarqq4MUC8Q4aIAhGgbXYkN3k0Yt42i6ubstmE1c61utFEsHUAO7ZNPpF3cMxYxu6kNKG-xt7pw3qAfdPTDZcl0G1cRDtsCD1dLTHQWgH0V6wvV6v4BZ5OQkU33fxlV1IbPdqezPQnvyTv1W9-IljG3pZoTbymTuzgLrsYVy6c97QN2ZQDgCm7TkIezjWPpzqF4C6jsygHbpj197eY8ei6knpE1e7m9F1Q3dPvz3Hhy9bafgCXsYxl6LWFekAFXpr3G169m-pvcUFr3GZlK3epKuEg9x7pwk28i0rvNvHTV95xiC0IqnYhnU4JeBSleICQYyzyZdAaEMTofAXy2eKPOA-gEcii7L0aLAgI5DoVhyCA90SHX7MJXONRKz8gxFmNMy_NSYXAyzF_Mnj2ZYZebWdiRCvg3xK4gEYthgadjYzN2YWHA_jNqyEzSOx7fwMcHPa1ZL2IsqrEIbsARAhQmgFkLVhkOUA5DqAGjOSKJnpZbIk0TALvCWC7w-Dd7amfkEwDIzdsHWIyMzIVmsySlP8UjkKCSAzkosdhiKJtVI6cyWOLBmYHzLMNDcBZLHTbFBwkMuwtQAkgoATK1BHyTJBUVLMTKGxiyxwZ8NAKsjmRSzZs5UrDikZ0mAaCOOMQWUrJVkxGbI6wLaTAASPEM0Of09YCBJz5_wKkiymAJYGEBIRq88svdorPY5iFTDtOeXApK2j8BOdAATnICDHBjgcLoznxvDChpwPRgapzqCBzHJ0dnA7Gkds7LQw8Gs6alrMNU1gdO-szY8bMIQQ4zZx4UhBbMt0uzjddsz2cjmUy_zRuACwBBNzTg8JQFZOThRArAVh9ED5Y2PS0QXKwBd4P8fAlcHJhFbyme3BytQEQVHcTuqC4JE7he6r7GtSue7gibC148tcf3UhTXQxNULTkrTb7ngs6TIlWknuBRVLxZQcLVFSWxrRj0a1nbOkiimRQtnx5CZCeq248MT3ZMvItFda8k0sgp6x61F3W7ntieOM8nptu034wKz0WAmOVgp6zVKf-MDsUg6paRYqZlMqm4Y9JqQkn0mF5iQiFfCYboqmFAiC-Q_V-URJ-n9SCpK0zhZEPb45TZgeU6089JWkWnCcaqyftkLtN0piJnY7sYwMHGsDwkiI5wRmn6FiCxiExKYhYIR2DjcxwRcvrjqPFBCw06QzIfyvJyIjxVtK0QUWK0TRn4dVg-M3qcTMFj9AKqosGqo1XyEhefpm_jEJdMJDMBKZxWAmfzHQ7JpWm3bbQATF-4kx1Ysnc3gp3piez_8Vs2GIVW6qh4Sq6gELW7XMD2NUeThbGJy06aGT20UrXd2irMNjNY5vROZsa3xbKkVm5bQ5uwLraxz552JB3vyQubCtBvdzd2s5L8BvNsevzbVuLqHmFzzWrk1cF620lA9cWyzYlrPNzarz6W7bZlq5N2arzeWr8wVp0IkaStNJsWoxo_UVbBGVWj87HsRP1bc1aPIPfxha1LmJkTJnkseAG1vcALZF6ElRaG00Wrd-J8ppNqEynmvjIKcC2uZ4U0mttiQyRTBcvPcXyLcKWLcXSW0cX_wH5_bdT2623m7E95nQtmsOmg7XQ12_A3dvCUPantdQ17UoLCzI6li32jHUEtZj_bapnZz48OdepU73TvMecQeIZ2l01xu1TcQ5x3FTQnphEy4WOBCOzhnAys1APaM4XOWWRrloVeSsFadgCgWYmnVujp1nE_yXCAkCzs_Nsbzu_2GyVzp5186BdQut5I6rSbqmATmp2vEhflGElP9uskUgVWfFDk_9kmWYIAfUiPjGkwAYwLhcMROLbAfxjU-qVQIt66KdVk-nQykyJKiyyjHui-i0N6Ks9tYcdrITjzZAzEEwf0rNHytTXfe7OQhuzjb0N5qAzYNyLOdQAIG05h1ogMdb2v8ZUJcjMa6KomtXXKk8dAqnoa4B717rFoQzafOTkENdKzKpU_ov1UWLNEtzbc32sQaDX-Miu4apDaoq7xnrlSFfUeUt3I0NcRdTa4RlLqQZ14U2jG_kgrrVNCaC5DwPqfwJJlYb_5N67FDu6UreGEsk_Sw3JrE3SbcMR6z3SvnbBTrOqwGxleBuEhQbmVQqZdkmt43QytkAPRyTZsY2kbot3mOTXD351C6FAua1Naxt6GVbeNgm83TG3k3ZbeNqm2AaPgAYikDN7W5zy6Ya2MbHNrm1OZ5voK-btgUG3VWY3fr-oRSR9Jbc2sI29b-SDphAH33_hz9R-kACfur1pTD9Y6K_fyV7o-2prUgeG57dDIv7Y7hGKW0eXjvrxvbSVeS6RTTsSlJAM1hOxTZ0y42T1vIbpdeImo3WGrUmD8V-PVrAAqjjyMCdwsfSdUkGw1tCfwCitRGNWgVwsgeVAMgAe7BQCAy3sYAsw_Lc4DBvdH4BDQ0AQhIsJh1nsgBOdOIrEYveWb3RFOKURyEam3vzNeMkNEg4RlfRD2EJLp4MtXf0aNXOKTGE-3hI-akGJz813vo6ZmDOm7RNp143-SomrdCQjqwzVfFqjQAe1GVCWbkUFY-t4ACopQ5PiYbA71EaxlkE3c8ggOlTn8Krcg_MA2zLs6DzXJ_FEWdWc171Bo_g-UxpWjy_ATNOqCFA1tSkDVIgJA8oDQObRMAOBxd0f2lJ9QnpKIK_FnArYkApSQUMw9YewPlDqJjKSAGVJhBQIqWHJCkAICiOcB4j-B5I_yT8AAA0iMFcAAAtSiKEAtDi5cFOSbYMFFQDKOYHaQDhxgu2r8BrVIofENwVRD0P4kIwSx2w5sfqO7E_AdmEEHYA2FXH4AOAB49UecO7HIAc8P4F4L8FZgk6HJFsFCfWOJHhJ_jPY41CbBhSAheJ9gvIBJP2HKTrh1wR4IZBYnghIR_wBGB5OoHKj5J2o9SeVI29pdUh5QHIezAd1XJ49RrqExwACwg-FgWlsa1VbV8lIbBSiaQDbVS6QD2YPg7XUjODer5iWTW0mfVXcHC2fBzegGe5auT6ypOqM7K2frpagjRACs5O2N4hx-J1hqUn_yyH6ncz-a1QcEgnOW9Uz_IWuqvIV3ac0MBIKKH2AwBVSlAAAFLwP8HxSnuD_DKUTEbiVz_gB4f7Z8gQAVz1B9QA2c_pPZdiOgb5ciMFAAraAe0YHlBxjptilrAtLnHtYnzGMgeAuBPheCeQA8FpLYn0HwKRhy0OdiwOMluhjpBEkoFjVOi6KIOZlmLJozMAPwcAg1ZoWgA0axbV4SJ44gV1ytWjNSI1lAFIGOgERHYtEdAVgOwSEAauZ8qAVgETGCkbSto_R-Zo6sD7sAcM5ro1UcC8DYMiAZ8BKGgFNfKdZ-MZWZQ8m3S2vJwLvJ14lC2g0jlLT09cSEjWhuS57rAVLH3nFUaaLt8iOAFG7BcLiqV2K7dGOkTfRvA80QNEGq5wEHCYAa0IaCElC49hSXIALAPqDQAABNKt-YGPBjgH0HL2AGOj1bbADWQGP9MKDCSr2wAfb_tw-mzc3BpVIAfMRMawDlu0oaUYMmw0jAjAWGOCQgP67QCnQ2Gh9RF7O7wAsN7XCRZdx-DZeg1kM2QDN1G_kr6A1h6ITQcpdpzWPgX1ATScSJZHKHfJPzv5wC7veoB8Hvq-ROmzKPQ8xJkR1idpNKNJH4AHxn18ZNMlCTb38DzSf1ALKgemJgHgQFFLJOOKYp40pSZ2pUkAz9JD7tiakbGmAy43BiSD4JPMkBMrJRHvD8h-JXnbeYTkmkK5KgBLTXAnkvvMzpDzYPIwAUzkEFNOQ3v2HH7maRFP5Jrq_VpwfAg0ZA9odbkc0kowh_KPXZUpcCQqUIjXUYfAZm65Y8lJQQRTD1yoPOfR4iLyJNPmHO8PihijHn8kOHuLh4BJsWe1tVnkC-euo8VT4a_0Mz-59cAV5lsGeLPDnkQ_-eDGwsOuHAmGezS3Pik5PKnj88gBM8_AQL9bmC8gBi8MXeL3SWFBRPB8aX9G8RbSOOfjwECNL1MmLAU1r1Zed8j8EwCfLBWfQe5xYBilrR7PAgQrzAGK_CxSvNXwPRV5K_Vf_wzN4IvgXufJ3GnpyZS7zGwfaT0HUABSezEiC6Sb0MUlk11SunLeMUx2w9N0Zsn3PmnBXxIH_GA2qS_4Ed2F6Xv5L7HtvmHd5xN9rBTfpZin47z-kWCcAIvJDtDiQmUpjHnz0ULZ5xbpPKUnzhFnAgZvGdvf43B2QS8cFx5whX6OAZwAUV1AlEV49gc8A1_UTreOT0Ue1lJ8oAyfVJHT9E3gnR8b8itZ6-c8D4hhealnu57avd_iNMav1akzAF8gyCv1wfCl6q4sjZ9zJPlnUAhNz-h7aJnb8QU74i-hHnfwNuzV-IiEjB8heAJEFIKDYfTo-15oZOkV9xdna0MLLt5n6fkq6DgefQyVX2Kw-9OecfcMaT49_CgQJ8TXTzvaevasH8DnmFjaw3np-uzGfRzyVKz-h4c-ruZzwX3D66iaP00RRbUCvAbT6gbwaP7amzdpyi8CPnvnX0z598G_BERvnidtUx-2ELfhyPH9b8SAQJJU9v1O5t-FI5-bvFpD3_j9w_Ch5vRABjhHiX3EOVLOfrX4X5vQvf7d6P2z9Mem_QBZvNkhv4t5_Q5_dnzurn2kar9CZacyhikrVAlArj1kbF7pN86gC_Pwg_zoTyC9AfgEIwnlaAthEUMpPTogVIKgAkeAn_4HnAOwHkDzAevqASQXPbYGUoweotvHZRIIhsd0kl_fQU_O_5tay2EsCABSNJQAeA6gCEhYIf3v-B2-E_svhCY8_stiL-0QP_6J4oAbSRgAf_jgLyuIOgIiQBanPMosi1jqTJ4Q0QHwh94kALIRPCECCMD-iqnqOBAu8DkpLiepntECWua4tY4rWlkn3j4B6Cj0gEBHKrgHqI7roP4EWLIAWD4gV3t24WkmbqG5Sg4bix51A9jHIzy4oGMUAHuvMFsTXYSARMgoBy_lIjKU-rrwT0uDeM0o4qj4K-bsBg7sXTJow7r-hfoBaKoE58D6JoG1gdgbm5z2ClMhQFo8uBMbOswBDZJuB7Ljm4ju9JA9zAehfnN6ygDHMEGg0oQWOhcABaNx7d-_vnJpnOxQPLhb6UmsXSjehGB4Eju6AOwTsB8AbP5sB0PFtDu4rAUcDrw1RL1b2AV2uwBVBiAcwHIB2ATA4xk2XpZLN-r3nl4sYtnh36JGZvp_CpB6PpOpC-HlF5QxSCBFSJdErfnLbW4FHpZLTBJvhYC1B0APUECCnpJR78uz-o77bU6wVaSwADQQQBHecPpMHQE0wQggsMLDCT5xaRruriLBk-CKC-ST8HOa0cqCHx7l-5gIcGbBpwXJK8-FwZGAeAnIAgjQivwdKYnBZwYCEH-XlK4Cgh7zg8GNIHvumheuGAAAAa1bmBTg-pdBAhgU3XHiJGAs0LCL-iVzopxXOxRjtIQAkgHiLsAx7EVBiecWmUH-KaIX_K_eUbvIEEAigZGDKBXdsPash6gXEHaBEyFR7s-RgYyybyRgWm6mU7QCkBvgUofYHtA1LnAA7k2UNtCpBpePwDKhr8PIQzu2kqiFpAGIViH26MLpS6UuFpLACGhTCFKEtKplLmgHsQoQkEyqb8E4ENWlod66MYjoYqFGoaoT4hehubu0DLMvoRWgKhAYVlBLAIYbYEJB7QIkBqhkYWYFOh4AIP4FoooYkAt-yti86rOY4DN7RBC3sMGn4Kwc_oHu7ocHLmB6bkqEMI8oVGGKh4YelDxh_GAUFPgsYUsD86QodSyphpeE14tebXmcGJA4XkJhCYs_J8gwB15ujxoWb5mkwf8jOkq6CsqrtuRjge0C_760dgJUBFg5QAWiAuzgDILjIM4M8BgARoroGuA-gWgHI05XI7qDhp_IYg1-XvtVSUovvuz6x6U4XeZc-hvkL5AgwOHLyZ-wvl75i-odpFL3IezHL5nMivsr6MYa6k-Fq--SBBF-KqOt8aThl4ZUgkW9OEOIdaF4YRhvc6frD68-dMl77lM0EZ9xjaVwNLI3hAMiz6YRmfkwJoR8ihaT4Ry4oegma4EQhHo6nUmhF3Uq_ttAjhfVOf7COJEVhat-cgbtTch2EHsxHyLhuaE_kwoUJyHhx4TgJChEoWATShlgQGQMINgRJGJhyGOW4iRM5KpFHkjYaxQ0AGrKsJTo_ALNAqsE7uJG6RiYcqE7kyQerJzm6AAAil2_GGWwShhUoIGeQ9gBKGrBfPOqGwOnGqCIYMIPqUhdQU-IkApAF3GkH5IiIC5y3IoUTOQR4fkY7IoiwgM6xoAWQFn4U2ctkIDuRD-BKHMoOUSHjRRvBPAFX02UegqeRLnFepUi0UKZHeRnPmc5ahmQBPg6hdDBSFlRTuBVG8EpodyD1wTkQ74yatkI8D8A2tE0YhRSQOFFMMPTEVFAeThvFF-Y1jv5GfKkxmlHUckUiVHEW7UXDCdRM0ZtF0u00Zcx1RhiHwEdREoVVEWg0UGyI9MpdI1HuAcAC1FjobUUoblReUWu5mhhnhsxx-cQVoGJhIIuW44AyYFYhuQOkaGTNudDNSyjK_kMMBFkTtlwAsqwMT6TcYDCK8FO4EeI5Gu63SJxGoWaFl9a0-mUdBRnO5EUL4I-ooEj43EqPodHGYyFhxGKIQ4vprU-AnH5Qy2z4QTEw-X4ThEp-UAGL5UipSGHbgaQdpHaS-70RTak-W_I8Ai-RzldHVWhMXD7OA-oA2grwDQPYANAXUGtDpoXMRL6n64dvzGV6gsX1Fl-LenkHUR7EbQI0x7PFxFoW4sby7g-fqptTLKieH0oXgDZIpB3gqapbRaRYkei7OR9nDnwBc1ngJ7yIPQgICvwMwCcF6IfsY0gJ-wgXYgeuYFFtDKcnAJiLSR7QVoiRqijsagJxNwZFHy4WCBAAVeM5HbHF-4GmeATGMMFEbJy-gOKBSgJHt06VsxdDHEQAccYZ4NxjAHZCtBegcnERqdAGnFNxrDCwyRRMcXP6NxdkJiIQAhnuoC9xkUTMpdAUoNETiBE-IXEUxKltPEEA_RNFDZxECOoCl-P5LTiBxwcVtD-UQtDPFhgLvJiLLxXiJ3FgAUwAQiSxR8bACXxv1PuhSg58Yu5XxKCDfEEAs0EiIOup8SEjnxMhh-Hvxn8f_HnQZ8V_EJE60SebdIu8bMCTxhiNAkhxNAIXFbQ8CVCG5xyMF_COIQcbMCoJ1wXNCcgVwLNCLxbNmzafIKCYgm5xD8V4iwJqSrbFOxyEIXHDma0MO4AqW_ly7DQvLhGFfRV_G5pQJmCcHE4JD8RWhMx2etaQFxucfv6FkmRJYD6g6aMmq0J7OIpAMJeLhkBSJMidoj4Mp-AszpQq7tc4dw_aknb7BtcT-Rd6TIcZ4mikgDYBdgwQEPASgRoJFw1Sn0LOCqWA2LIEchgkRG51Y_OElyJADGEKH9skYEnGoBskYHjyRjobaFKROxHgDwxpyHpEgARQVOiRJ_oSO4aRxkal56CrgD4kTWoYSO5JBU6CkEt-TMaXTFAXiRkkZA2QST5JJ0ZMmGpJyoeRznuFkSxhpyY6C2jiEgcbZFvBIeBqFMxLlnHg8hnOlkH36XCQYixJacJQDIUzVtcIFoyYEMnqIoMVUkJAFoNy4VUrtuwApQOADhgQJ6OkYFzmZVIMBuQPQu0koxXSWaxHkw4abGDOP3hbG8RflIpY_kQrtiyiu3GE1GEsdLtyAhsF1Iy6ZA4eKy7BsxtHMn8ASyRwl4J3kVN7y4N6NQnk-mMZcmg-O5hCmImLMUH68-xMaTEo-sfsLFUxJschFmxWMfTGXYjMZLEIpr4XD7sx5WlLTqxPMWfrpqAsafpieesUlSO-Ysdcl4x6QYejSxSKXLEKxSsSrFqx2seL4UpWsVSk6xNKelIfRBsdvSNGDyWwD4AxACx5gpaLqaHsAOSEi7xGnfs95L6byX8mEu3dlwLAcSwBHgsiiYnlBpA6ITomvm5kRqmisUFP8kBkgiCmFrihqa4BpA1btzFeIGyaaGZQKvicmd6QoTsmSYeyfsCHJ4eMckt6PSRuLFA_STnzZBMyd9H2BXgUIDjJRqAWhdEmqaHDzJ_6ICkrJuwS3rbUZyVikXJlPlckcxVsXRF8EUcYCgSp1eI8nKhtLnOYWpfyegBMu3yQEK_JFNtakZpgjJwnMsuQT6kh4MqnBCBpdLsGk_kuaU3js8xVsqb4EEKbclHkbNvcmVpUqdWnh4daa2kNpXyXS4_J7yaRRtp7CSslwiXqT6RP03sT97nO2Kd2reRq5jYRLA_ON5FA-tmlT5jOsKfMGGIOFsIlXc-Fos4MxDTv-RPcbKTA7IpyPqj6ipF1Pzjg6N2lDo46wFDULPa9QvpZI6H2kZb7mP2j-SY6rRBZYQZQOsbQsCaYpGC2Wcfhil0xK6jT4Qp14UWmkRBYUSlzIcKfjGHoiKTA7vhAvhRkwOJKYc7kpkvgBEy--zMBFPAoEZsnURF1C-mSx76ehakpTPqS7MpoehRY9a5yds5E-RFlNYYRrMUL7MZ9VFw52I-JkREM-pGXr4JRtGVIiqZC6BTYgZ6lsMSaW0aNpa1CL2goKwZlRIsRfaiGbxlGSpllsRY6aGVpbJmZiT6RYZI5jhljmDmZTEDR96jxFaZbvkeQkZImd77Ik94ZRlPplSM06MZWiCH5h-EflH4x-RCcbQXpaOpQ6q2SJkFnhZ1VBaCsA8SbcziZSEaOko8qEeJnUW0mQyiimcmT3TqZJ6bJZja-mR8jEmwHrxFp-imez4tZMdlBSXaXfIMQmZ0OlohQZullZmNCBlvBl2Z3FujqLxKGTsR7E6GcWLeRXege5XSI4eOl_ApVtQDWx8iEmrshKQGWF2hVtJHyoAuoBAEhI0SQ2GJh5kS9LcxO9jMmxJHaXND1hIMYmGJpfLs2kt6sScsxTJr2QjHqRjgaklSY59HXBxBNUEdlKRWAIQAkAiADIBXZjSYpGtuqDBFHbUsSSkmg24UfyySgFLo9kw5LHvwDhRqCDjkI5-Qb6moiOwAOm1pMWRD5zxF5o1mXIAPhTYZZWQFel-4CKOlmli-5llmFMOWVCmEWxWRjalZKEVyY9ZBSN1r_m1WbAH9aPTGigNA-JtqCS5eaZMjMWPTL9wjhkqD1l52dKQlqbmOKYRmfpVGb5oQWqFg-ng2RCfhn65Lvrr74p4mfNqm5H6Xik_qudquDG0RmSlpgZIxEtkjZj2hZkwZE2XBm2ZsEb2ZIZR5PNnY6bmRWaLxXmTZa-ZK2fAF3UmLgQBT2uLkFa9iRgVqlxJHLCS6pJMbJOhdKSISDobCffBxjRQ3HsMjtIwgY4I9oYZsnkRmt6BOi-BPgpsLTw_gnulBoIMiOwUG5mI86UwV8HQbTsDBvDKwsQLGpAywFsKPnwsssO4xFYqLBjJOwqAJ6QwcS6OEA2sX2kRAnG5WIYzZA74fjjEuGSVcACsQrAijisURlcD9GrIu6yrg8UIlCusqyS9lX5CrPCoeCBCYGwIoNrBaABic0DgBFQrqVYhYiCKCMCTG_LGaDbAh-aAWjKCQIAXAFIwOnDgFEoNsCAGkxgihdu5YOwCc6yYJgWOsOOR27SYmHFcCc6YAFYhEFRBY6yTGGQAQmqsU-Fsqc65AHQVkFAQQIA-s0Vv6zsA0rKQi5s-EFGwFsB_mjKi6DAMlajZlmQ0K9G46I8g0YGgoHDJWQwqYLmCMxFYKiF94gvB02ZZlIVE47AIWaxmChQNRSYKmvmKmGYMgtbdUQhf7k64MhTkRFmcxKuCaF8hWUSrYU7BCz4Q22DwVqAfBRwZYyVWLZAbQU-IKzlxkWLVizAPhSw6oi9SRobsAmRDcAzAdCvoZ7sgRQkAsOx8p_mRFQ7MvC2QznKTLuQAgOhySgmwDEVfscRVA5xAe0LaxoAx4JkWCM6WCkB0QGSrVgmkTptUXvijqSkWvsIRTQCfs1zt3AtwQ7D8yeFZ4MDTRANHO0XSQmQIiAWgMZBqxL-dcD0VDY7EqJLLYyHJEFDB0PEMX3sIxbazjFJUkOxgyjdmOCWAoCPsB_S2knsV8EBxcgHCgigQngrFnoCdoBpxZNsV9FQoNAA6gy2FcUyQjxUhDdFLoN3nSgdkTg79KGVgnjhCpdK0WswDEBkBGi-OGCVZFREdUXFAq4JIQ54CeJwqV4-3LyK5ytYHCVvy74OQZVYHvrpLjSQJdVYglOAFCUQlq4KSUwlUAJiW8wCJQkCIenCml5wA0NP17GasCEJiDefwPgRCYXbn0DPoHzmiUd5isNSVbJw7NMVjwvxdpIXGHsuETccWRp_5NBIiNDR4EsWhU4gANDkKB0OX6XnLZ4LXkN7S4OSOmgNA-oKiZladcG7jU2m2hM5qlzsJqX7gwmUxxWlhpfqCYFyBNCI5SS_qcTKkEAIkDuADcRAhelPpVxAe4bSMJmUoyzmqVGlLpUISKAFpVybhl6pd_49u0JPGWRlyYP0RulErqcSohEyLPBNB2oLBAuUYhNsCCswMMGV2l-JimXOlaZdGWxlsmfGU2llAEmXdalZZgXnsGZR6VHAlgMFDuAz_E0FdlPZXQBllZWmGWOlqZcmA1ljucyZsljpQ2VNltWS2XJgx3NCKDwFoF1B-AVpMKA6OTQWuXxAC5JuWuAQ5aGXFgC5SBjfgtZbIoqlJztaW0OjZSGXJlo5VWVWI3MU66UQXcU0GZElANkBDQ6IC8CHlFZQ-WYFD9GeWTlkmfWU3lc5eiiXl1DpGVFQrpRoV5AaUU0Gky8cGlF_lX3C2WwVE5eA51lM5eBV3lzZQBW_5z5eEDxA3QBAja0EyLAAWgZ8PkD5AaFWNoYVgusBXYVF5fE7UOs5fhXzlhFW2VWAeAJRCwIr8H2XDAwwIGUnAoQPRXm2mABhXjlzFZaVXlCZbaVlaDpfJUwVS5RoWuA2wH4AnATQYASwQdgJYD9AOZEqgSVI5SpXOlRUKeVKA55VOVQV15RqW3l5ZQRVmVAMXBU3gdXovRzgECBMZ7QJiJID6gyQEthBxBQCZXHlAFbzpYVclexV4VjlVxXOVViOmXsAa0CqYJITieRXNSBAOoDUhnwq_CvwIVVJVhVTFVZUgVolmxV2ViZZxWQVpVU6UAxPFZGhXgzUnmXboQgF5AH47bqRV5VVVZGVWIMlUVUsVNlVVUcVMVZVUtlViGpVjRYyTo4ug25RYi8EcACgwJQHVSNWWVMZcVUEOA1dFVKV05XFVPl0IqiHzAVFSvDbAJiMrI6VybKMAaV4Ue5CLVYVUBW9VkVWVWKV9pVtXQVzpWVBwV1gAuSuAwUAKC-oQlZ9XfVYkLnEQVplS9XJgb1RFVxluFfZUQVylaDUC63MXtXrlpFU0GXgDVLhD-A11c5V5WslZDXyVg1ZtW2V1VWVBqVkaGMnhRzoJ5VrwKcEQDflsEAQCY1cNctXWVoFVDXlVQ1bDURlr1TtUaFVvO5AJAZFSvARQoyZEAM1nNWDW3VK1X1Us1eNRtVPVhNZGVlQZUNzE3gC4K4AWgKtYJUQIKEEPBiQnYKLVE1ZUBDU4VMtdDUVVHNUTVYiz5Sq67l2wC5QJI25SIDPAY4BkC4QeQPrUK1G9jjXG1UVabXs1z1ZzVFQWInBXngH9tSBygkaCqawASFUPDSm4RTnju1-oIHXrWXtaxVgVvtQTWdVidViIJVl4BADCGkaMhAmSsACwBNBOUuAGwAWHJHhQACdYHWFVktfdUKVDlRnWVlgdbVUaVfFQ2kTAPoI6mUkECCvApAOjv0DIQQNRVUg1AdViI9V9dbjU-1bNc3UPlgdWpWL-EyO26RAI4BAhL1F1avXsANdViJM1q1ebX41ctZnWB13Ne6VZAnZW8ADFZFTeB9AaQFhwxkGkLqCFKP8DojoAkgFE7DowpHsWzwyEPAjA1oVWZUn1QhO_pvIAJEqV3cl5dw68Ou5QI4mlOpSTZ6lteKqX6gXUHA2509DhAjM1JVeGU8OJiDA0qmMNf7UoNcnHBXhui9FMDpo4QHxUNUKNb_i21ASFxCSAIBAmSoV_9flVXlxDb4hG1qdVaW4NfDreSCOftbZWcNCVfqAMg2wLSxblECOeCxkC4JQCi1Ijdw39VODdA38OBDWbVENXUHJy1VmldQDaVECF1AzVxkGTJcCCjVo0pQk9Vg1rVKjXg1qNgjXPUcN5jWNUQAWALADJAmjpSTA0HJhAjwcUANsCu1qIGY1yce9VLXYNvDao0CNhDcI3mN3NaiH0NTQa3h06aDEE0pQEtVY0c1fDfg32NR9Tg3mNStdCIH4UtPABvlXlfEA1QfQCk2G1Kdco3hNtjZE0aN0TXJyW1bpb8DuAGhYEDbAfpZkQaoz6jkCigNECk2e1d1dPUgAmTXY1RNpVcQ1863Mc4hQAUQHYAQIszfM1BNfOko3S1w0RE2wNDTZM1aNpkdzGiQu5XgCRqfpWhAEAs8AHIrNddek1ENmzeo1CNOzcmCzQPFWFBdYVgAEwuUvZuRWwxC4PNUpAKzZY371NzXU1bN9zbk2PNalQc2aVX1XQB-lGteTCBNbDQ83zQazWE0cNtzdk33ljjY83c11gIYy2AoDk0HaOrgPqBHNAjSs1pNgLcI3otEzWC386MzUcCbhPNfGm91-oJ3U_KCSCs1VNwzd7WjN1Lds1gtXiO9V-AuZSPAuU0IBAhuAvqH_Wj1ADcNFaNgrSi3WNtTfw0gtDjXK1plojV4BywmtSvCb8A4HTVBNazIq0ZNfLaC28N8rTxUNoRAJlUYAsLTHVs-1AIa0AtoTUq1otwLXc1qtozfK1qVh1ZEBfVfpb61RA31Ya0hN91WM31NZrVi1eI3NTfUBMKDDsD9AwsE0GxteAPG3bAibWkCGtt1SA2IoYDc-jKlOTvwAyOW_rOBwNHJXnX6lpSMqSWAaDUUhmlTQdc22VxbXI40tVpeeCaODaPs1HVAgNQ0wtKNdE7GQlQKLXttDaMa3-1zbV3GttV5dW2_5wdUQDfOfbT40XAMLYlB_NiLeGUztCrdU3rN0jrI6Tt_LVaWbtojVwByIfYORUoUDragCi1R7WO1Nte7aW0Ht07ZYC_5PFaiHiEJdRAj38mAFAAeV17c-1eIzrfdUTtD7ZG1Ftz7X8JW1kdd0D2AetBAiaO6IHfVwAJwAIAzAf7UVB_Ct7aVXAdqWKB3SO4HQlWhcGAIqzO85gBAiEdryg7BoAaHThhXNlLVh33tOHZ60ztOGDxXOOaDEPB51TQWx29g_QAeXrth7eB2AdIzdh1TtYHeh0k1GQK4DjQc4DB3hQTQcw2wAaDH8D811HaG3CdDHaJ0gAgLpkQ3g3MbJ3JAwMOwCAulAOWQugc1bfVNBxnaZ3wAvzaLXadN4Jh0btGnY-38AlgM4AMi0IpYDvNPZRoUL625cAjfwfHTK3sNrne53ANvInm2y4BbUE5Et-jr_hGOy2A9z5t8DSzZINOSJo66OK8LW1cQ9bZg10d4ZbF0GOCXZRWad54JYAedMILi221aAH6X5lAgOc2-dClMO3ldjnVaWFd8XcY5JdOTW12ZdgrXBVFE_FceBHNa9fmUNpDaaLUZdK8H12tdV5e12GOnXZp2TdgrQlVWtJwFxAJNVADcC_NeABN29dpkTN1aOOjnF3zdiXYt17dlrUQDBQC9GRVWtV3XLC7dU3U80HdIAHN3FduCrh1LdfiNCJR-oQN9U6O5zSAjvlQ8FEYPdgrWp08tr3Qt0udL3Xt3c154N9WoAdEM1LrdECA0AI9SPVAB21I9UNVj1n3RS0utHNZD2nd0PZ935N4RQCq2AvQDjgDtBjUZDOAmwHcBoM0rTj2ytMPY91ctU9RD1HdRXVD0fdvXYK3cxoQGI14AOjiohcdC8LZ38ds3fz3J13LTw2zd3PR13E9fPVN1rMgvfqBP4KPR-W4gOwKD1Gt27ai2Hdejjz3K9nrUt0AdVtWGwaFQoOTD21aVWGz9ApDCh5S9Wjvz1CdXPcb1K9JXST389alfLkWBUdaj2Cg26LAB694PfL1G9x3W91ddmLa72q93NWI2lxv3X6WGNztS1xD1wUJL3BdpVeb34991UT3e9KvWsxk9-oFC261KiCj0gEwfc6yjAV7S71s9xfc90F973Wb389zTcZCxAeAANA5AZHZ33d9evUM2c9EfS92K9J3YX2t9U3WmX7NRADFq-oKiJIBJcIInTJ4gOlZ2CJAy_RMCg91ZQb2utkfSb3j93XdL2T9PFc5yR4EjeL2yYwwDADbAW_e73D9zfTH1OVcfQB1qVVrchCbA31SjWogVAH0D019fUt2LlTfaP3R9Z3ZP3c1uoFC2ktutcm0ZAKQMp2h9__b10AxQA571j9LfYf3P9YNdzHy5s8LPDdlU1RAiAEcANsCCIW_Rz2NtOfcAO89E_V4iwV-zRgDFCtXaXFBAoPZhU79hPVQOm9GAw31EV0IivAMQgPX3UCD4lYgNTdv-SgNR91A9wNLdFlc-X5AAjg7XHghoqwPh9NTQr2oDIAz71iD3NVa0iSfpe6WJAEQCMB192fQV29dRUHn0jND_aAPRtCVbq1VO0ToH32DcQKiAIDpgz11Td8VRIP796A7H0N93VdzEKeKfHnwo9DaGiBbAhAKD3dV3g172-DT_f4NqVS2EFZ-A9_kcCLNoCJKBT4UQ6oM7t1g1oNeIb1YEP5lcsNuUUwysmn3mdC1aIMFDsvUP1qDe_bEOP9sVc_3w133WuXUA4UYKwO1s4FPhBdLPSF0N92NXL31DI_RoNSDfg0t1lQPFc16uADEL_j5ATQUURZF6qOgCg9UwzENoDTQ8NUeDBQ9zXWqPQ1EBNB-w5dV9Dw5az2TDlgx72SDXAxMO9ditdzENov-La1NBjw6XHY9ZwwMOTD5A_l1tdnAwf23DU3UHUPDRAKS0oMPpbyzJVvdQc2zgCFaD1B1Gw5oNF92ddzHGdCPX6Wl9v3cz0fDOfb13Z1CI-MPxDS3RPXcxuLewA3gCWE-X1QZPoPDJAn7b_hHNoQC5Rwjd_SMN5DSI2pWZEVpD1YJNkQMhRuD_QziOAjOQ4b2jD1w_8OEjuIwn0gIP9ZfVIV0o6gGzwcI5cP39fw3EPNDDfRB3Qi-oDVCCsn_XB06O-oF4Cz97w0eWfDvXRh3sD_tWyM0DNHer2ktrwNNBNB_TUZV2ANI6D00d-IzcMSjU3Sx3cxK8BMi61dvf6M-g5zacOmjgo66ksjuQ6qNbDhPeaNqVQvTlX-tX_YExYj4Y2YM-jwo7v2ijPg7GNWj5o1KPDAjyj2Uo9pMnM0iAO3dUM4Yyo6yMxjNgzhhk9h1dXy91TYy0Jhj_5Uf2up3wwT1WjdY_kP9GcFWfARgpY5UAwtoPQOOej4o-qNLd_RglVEt-ZUdXdlCTRMhP4zve4Odjs45ONqj2wxuM8VK8OgAuUB4wLVHjR4-ONRjIo9aPSDvXf0Yk1TpiYiUQa9VfB8VhSIKzjjWYxwNjDXo9OOZdRUI83YDs4C5TydXQC7yOtog7-O1DFAwV19jKvb-NzjW5W4ChDdOr-1gT2_cMPRjn41OM7jcfb-M8VZ9V1GaOYya_WEthExMirDKE-ePZjl4wCO_jr_SgxHNybDADBQgE6j1YA3_g900TW43mO2Vk3b-M6Dl3QKCaVBji8P8TRAEdW_47E8gMKAObZyiRdUjkBaqlDjoWBsdZbbqWcllbfY4oQ2Xa_5COeXT2O2Vik0448EmnSvAoQyYECNajwoM7WB9Z8BI2PMr9aLUmTZkxBM_DV5QZPsAyk9D2OTyI1qPRWgQKlU3gQ9XAAOTpk3iOWj-kxk7uTRk55MhTPFaKDxEdAL81Oj8U6gBZ9Ao-GVeTFExzVuTHk7h1eTalZo5ngqcY70WIaQwROf1wU2ZPvj_tdlNRTuUyFMJ9Y-mHAETK42RUR1OjuIQVTuIs901TLjtFPJgmo4O2fiKwBK1jgr8J0NpjHYxpP9Tzk3pOlVPU7qmetjk7aOedvTgWSeVszTYmJA8AxNPoVVpUtO0ds0-lMRTOU4tOmTvoz5OQAyFKlVnwl013EVTLHd1PHTtU6dP9TiQy8CT49rprWZoe0KBCpT2I-lNnTVU-FOOOkU71N1T_U9zWhc7kO_0XAPNdAAmSTQbo5BA6IAi3rjU09WOPTIMydPcDjk7ON-jpFR-1LDiQH9Ppje06ZObjYU3NNPTYMy9P9GbdYUgVAG3SL3O800EwXigLoMhQVTdM5jNKTz0zjPkzalXhOnElgGECpV4oGwDwzXM0DNUzWM3zN-DuM2T1xNOjhaCWAQQFEAEDI8P0CogedRy319CszzOGTNM_zPJg_Ru324zltcPJ9g2vnllyd_pciDAgkgCFHztwCFzOD9kE3tPUzC0_zMMh_XRKFIdwoDixLtLnP7ModwUz7MGzoM17PyzKEAyEJVlgIKy21ZFSFG1SwqgpQi1eszHMpQB0_dXzTxk5nNt1Q08SC91mjhXX-NyHah0ZzDIZlPVTns3nMMht4wxBvwDcd00JACzShBT48ULdH2TlcylCWV0kzKiyTGjhA2FtIAH47dAgTlqWlI5bVyWqltUEVyTzppRg3uzV5WPMBOZBJp1zz_OnBXZl4hNeCeVBE324WIxHVR319m8-DWUz4ZavMTzuHWfNzj3LjGyeVBlU6CVDa7WjOjzzgPzrZzIzVfPrz0PWfO1VJnWMk2JiM9E7NVotf_PPdP81kAbzH88TX4zxdbV1kMY4CHMVzb82fPSzl8x7xrz0C3_MfzA0zRXwzqAIGW91uLXW3iEJg2lNWlm8xaNoTIo1Au0AMC7NDLTVgGMnqSROYs0Sg2INtPgLeC1_M8t9C54Ket1CzxVedhZRn6B9H5b0ikTPC0wvVztlQIuMLOGLeMZVwrSU3cEfjenNoLeCxgtULWC9fNCLeC3sO7lybRWMDsKnafOGLkC3ou_zN8x_MDj3McDSF1EQAk3pAEjdXUWLs0BOMXzui_476L3A5vN4zBTRACgjJTSrUTAsAJsBEAMixTO0L2Ywou4Lni3uPIUEQO4C914swQDBQ0S3IulV8S7YueLt46SwNxlJO0OPwnlVBDKz5S-2O7TK83Ys6LK89Ys4LeS_0bc1a5U0SwAmtUsPZAO0wxVULdizWM7tuSwYueLJfe4CF1eUKv0giJNkO0eL_Rt2P3Vgy_4vOAouFbV0QfgOf1wd3OJNx61Fi6LhWLvizYsGLPiHuMD17AUnMCMQUzssWNey-PMHLiyz4gSdw9VEAZka9W4AksJM5NPvz9y9cvYLDC7gs-ICfVJ1vAZFezDuA2wA_U8L_y98t-LfgxMS3EPkwI4wwnlW5Wfl87ZR0UL_07w0KC4XSMia6IyOA3yTOSB_UxODgHE4qTCDWpNpdpSOeD2AWk7l3Lz_AESulOJK-U64dN4A2i1QytaEB9u8QCOD6d_bYFCAEiaOiukzV5Wyu1Qz3YytZOpK9D3UrinHBVV9mACnCl1mQFJ1gAFoOLMugf_W_OyrXDd4tXlkq2U6CL3AzqsJVblYyAOATUd0Cb-nza1BKDMhHKTROw7fYCKcfC8P0GrzK0at-DOqyf2Jzeo4C63RWroP7dLklaVXerEq9E5Mr2TqV3Orvc8-UaVqS8quuAfgDTVGDwqx8s6rdSwysRrUqyyuetOq3sPBDJQ7T0Og4bhJxkT2qzGv9LIo-6tRrMqzGtk9FchgAZJIcmwCnEjXG42EtEAAIC21wgOWuUL-q_Wvhrn9YavRrinO32DwnJbdFcdg_qMCZFwa2PU6rbsy5NZrw6x6ujrKUDhjcxBExiC91mRHg0T45c06uKceGHqsrrxK7Wu4dOq_0ZbrbQBaAeNRAIcNwdNidkBtAIwEespQ_RkOvnr0q5evOrAvVqMeAfgAExkVD4OECJAOjketbtsSxzU1rP63mt_rojYj14NybagwZAQBY46QbrqyMOwbua8at_ruExK7sAmjs7zETRACqaQb2S-GU4bnq_EOyrtA9zFrQTyzqE2Ay46hs9tzvFEv19dG5muRO2ayOt1rpkY2NVFFklI1dQ2QCwDzrrPXRtzLIzdRujrXiGbMkDAcuAFkV4brECSbAw3RtLrh02218ba6wJuupfo1gCyjECGtDftsmJgCQbJ69Bv-1cmwJt_j0Is5zGbuZdW5jgkS7mUQI9gL6xCsR6481frka3Bt4bTzXHMksk1SQtDwEjd3MVrwW_5s5rNG-qOyrmBf-P0N_kCy1YsdAPI1cbzq5gWxb_G7-tPNalZQ1Qtjyn6UwQz_L7LGDvmzxt2b-WwDH_jw9ef2ubrwPJ3AwAoHIiKjWW081Vr2YzVvwbTzWT0HNr8PRMo9i_ckB-OXQL5sybPLb1tBbZk_QMpAVAF4Ao1s4ItuZb0W2ZO5b-m7Vubr0Im4CaV-LUxNkVqNQMBar_awyvZb1m3UM7tM216vOrdA9CKXgbw6WOb44XIp3FFa42duROd2zNP3VN27Rt3bCVcDRIbEy8kAGDR6-IOnrvG6usXrfW7-NxrinatN-lamzo4ZKBk-DuUbum9DuBbt2_NCCzHHTACBzN9V_iV1Ac-DvVbemzDtBbAQ3wPCbS4y3MZK69WNM6IfbkevRDkO39sJbzq6NXcxIUQ6BhQRnSZ0T4DtXztTAVnRPis75O1ju4bOO1Yh7DolYu2ZowIhpuhrXO91swbFO9jv_bxISX3DdNAF0MQIMEGJAiD0W1YhTbbqxrvS7Wu__lbroRpK28cS2LywgiZ1cJM4oVSz0sDrxIdpu_bFu_FtYTX2xZWDjy2GsjWTQexYj8jGKwOsB7m25Tu3bFlSt0iTrAG8DitXplMBrQEUF0hgATq3HvR7mu5zsWVtVb6j4DvdeSNF7We7-M57lu3nuyDfAzmWgrQk33W17AcgY5l7ku9-uV7fuyvATEfo5vwsgQ4-ZtkjGScLtTAudd2WBAm_XrMTE2K6A2KlyXQSulIBkwFu5rUXSl2INF3Dkgo-tK0vPLrIAAvtxbxk_YApQhQ9CKigisVIlpczgEUTng6aI6TFrUwNarxF4-2_Mo-h-z9sjNu-3luLTB-60Orwa0F3uaOmRLqANACTXwyzgXgDf16zX-1hs7t7-1tuf7h-_lO_7pRM4Ax-ooMqSl1-OxctP7X-zxswHMe_EPP7ZUNzWvaWXIaCeb8QBkh51Dk1_tq7Nc446L7vu1lNf7ZPZo7pEuoLqDhFbB8qTpoCgjfsgrmrO8vVL9jkwcGz9B_vuH77ff_sAARw0DUVa0A7XkwViR9sR7Qh-IciHe-55MH75k-wANobK5lydtPjbEDTcnHWx1UHKUPCOQ7uB7nsd7mhyt36gW4TeAGgRRPocYcNnbAOmHoUzZvAzzOuoe5TmhzxXng-oOV0KCgLhlxAHHC4lVDw7hxjuuTGTqIcaHZhwgeFE54CgdoHZB3wRDwDEmmuCHO-5oc4HsRz4dwHuItzGFEK8LqDOABXKKApH25ftANUjPbX3uHNB14eZOH-zjOaHZPeV0BHMfoaWZE6aLlyftGfqmvuHZuyMOWH7e4wdmH7fc4ANA1bmtAdH0fnIcGN8IMQNu7Ia-lOaHXu2_v5HLR_LOaHO2wE7THCgvYBR-CxzlIWI9DVFufbz-1iKXb9KzvtbHsB60cbrg46USigSFSVOmHNC1dsijoxwwfVTB-8wssHQB_5TKk6RA0C6dcHRxuflmB5cf_HUB98f3HeB-qPP7500RumCch9kQNAzgC8OBWijqBNYHG69EfpOdBwUePHSi9zH-U_--eCYnyq-XUu1wwKQMQHG63kfEn2x_gf_HOLc4AKCbnWtBpEK8H0chRqIPM0CH7uyocYzFhwidWH4xw2NbrIJwVzpouoKly9HeZb6Wb8R1dAAfHwx9AcSnYx38cfrcFa1AZKXUK_DRAkAZ2tywQcShSmHXi54cyz3h6ydInB-4EvsArVZqaCs_kxFsdrJh4ycxLXx9mM_HYh3TNxrKpuGCeV2tcPj6AeJzCcfrhJ3ccsnDxzscfrY1cMApbZFZkQLwq07wRWnzJ3afxnbJxYNwVxnd0CRoCZB0OEtkdT3UsAVB_mdqH9p9YcWDCVSCcWgzgI9oyCMxyvALHmjn0D7rVZ14PincZ4id1n1OyqS_72XOkQdn7AcbswnFgz1X9z7AjPvL7c-8U5S7gi8vvTz6kyAAoQNKwvPCZdK9vtsdcR7h32AXUJYB6detIZ3ZOLC8YPydcTpedZHIpyABHnNbZDv7nJJ34ObnviIHsZLEABI2PrnS8YZV1ote-erNz5yU6vn8Q0BcJVnkdOAeV8nS8AozAF_X0QXz3S-e1nHNUBc8VKtQlDFTpxEu0HQh0F0iAXB-090gXy55p1AXalW4AHQ7gH4AD7tI2x2OgA7WJtcQE-PxWEXR3MhegXqF_7VAX3Nc4CD1n4quHkV8QMeCVDfYYhdEXjR6VUoXuZ-qPvnavdCKnN00ClOwD8nRcDQnyhxucH7-vTafhl0lwOdoXWlzxXagmQFdPDoLrgY2uAQ8O4tvzclzGd6Xkp9xdaXFF7QD81KU2PqLhErS5eRqXgLfiVjNl05ccXpF9D1yXMbR7ydQ7ayhRcdwoEdiZn4l1nOSXul5xcyXfu3JeKzefDBdkdKmyKDwObFwUOBXbe78e2V75w5u8VQQKL0u1xZcIDNAZB8XWRnGl8Vev7PLfZc6nRVwftT90IrqCYJFcBgDKrHZeEUZA6s27VxXqE76doXSV_peOXFjTxUXnSVZRBAbyba3z-Ah68Nd2X41w5etXFjRReFlkapHhygpTcPiJAVdWCp8XC4Dtc-g29cNc8bzV4VdSXB-_dtEb7gAQSCXi_bYDVwj-59vvnbAzpdWl112Rd3XCVU7zxwMAI3PvlzvN-0eVysK2uV17VXFcQ7311eW_XwV3dcALQNxko0jSFWPorktF2xfl7JFwVd_Xvc4LPsOX-KXXE3mbbDdXXa1y1e3Xvc-AOhASqAEwpRpHbqD037_Uzc43CVz9dU3N17pd3X46y8DDTQs0cBGnY4L9MqXbo7DcbHTV9zcE36HVutELcAHb2aOCt7rP-Xvczcd7nMt0jepN282tMvzq_QUAvzbF-FV43B5563vn8VTzszg7UGQ1s-_nWgB2AttyKDG3cJ9mOI3uHRbcYXEoFytGQ9F15Xe3D9ZHPG3M5wKUWAObXFm2yFJJvlilPxR0nAeC-pcYylP7gnczS4ujSXb7HO37tirnK9ytdDfK9I0Dtgq2t2i1Yq9GXwlmt0FeHnx56edyd55zecNGV52Qfo8Dd3eerHVpY-dl3isLccid0PfZ013Bnc0BWdj1zZ0WdECEPdp5Rt_X32dnd-nc6b07c524dbnRV1edIvT52j6_nWOCBdotUvcz370Nvs93l6x21dtfQL20o9RK4O0YAw7R2273_NNvtUTtG-V2BDVXQmhMD9XW02j6zXTbzfg5d3Pe-ODS78u4dsK3GsIr_k4KxuQx863dj1sKzffUov91Dv43nk13t8DPe-YB97qtbRdD7Z3FNB8U71xped7a0EITrA4d9VbT6KxjjCcFULGGgkQUMg-x6is-ewbz54EP-LKFDhh2gjKL-d_mAxRABsgf5X-T8AtcBQusCoFh-TL7CsneWYDMPuZHXYdyY0PCouULvIflT4pOqKUoqGEsiKpsy0KCgZARUY6m2srD9VDP5ocFcAvAVVOQDR3qjxxiZu4RIHFvKowG1z4tsdf5T9woy-Y-SPrMO8ol4HaF_kMhbrEGwqPOAIkCjKCXOqz6PNYMaxMkfdmmTr5sBbMCuPgT6E_xoJrLaytEiINE_pw5j2exgALbFY9WPHaDY-CsIwPY_5Ajj8480Arj49ciA-BEfL0YD8TazhE4QYsk7pXLF5w1goychQEF_Rp08bIbT7aw-ihCesA9PVoP4CjwmQFyzJgSwMmCuPc6TiyxQorASw1p9LMSxT4W_nGzrA4MbSz0s-0as-is--Vaw8s9GHazH5LaY175QkrGwVX5rLCcmKsBCWZHXQt0RMVasHrMTn6sppIaz5gST12kWAuz8Y_7PfLEfkOs6wF6wUFqyRc8nJQL0wW-sEAKwVv5vyXM9hsLnJGwpE6-bGywv4j-VgmkWyoFxZWqQF0CJAHBfQZyQjBpIA0PZ7EoUigbhYw8QQkhiewiGF7DJUFGbCHUZSuwrlcWbY7RpxxhFgUSsVj6Bhd8VGgEpUKJPSL0gOK-A70upxLAqVFIir86wFdKSvgqJK9hxGyLrbk-_lJK9uPzyPK9_iQXKLQhcYXM1xRcjEv2pbIsr3-JxcwT7PILgmr3DBaIZr4lybUohalzpcmXNly5cRRPlyFcRrzK8ySarw1wnkVr72wBPjXOatl5vxajFLizllo94QNXIxKvyT-jWAmv1r4G8nkzXFEDFi3VD69BvMACm_RAW0Nx6aEW8tVadc8oL1yxvCAWE-Ui0UFiI2uNYMdLsA5aBsghu7iQTl6wUbk26xunsTmrohvyrYBQE24iLCVvLTzMrVu3b3AC9v9q9FA-ICKLKVdLYAONKVBZLoyDluPifEX3oqSa3wZ4iDstxJuQai6aQ5J7lm57osSSpqasjiEW7zAUoKW4DA5bpW41udbq9xnKTbpnltuuBagU9uhBf259upObElju3gJO735eoXO4B8LDF2_BPY72OCmpiLgB_LMLDMO-gffbjISL44SPapA3SkZm5nuNABe6MgB0quC040z6K53EmZcy_Yssrp9IJyisLTg-ARAdohxAsAIPCmU-ImGB58m_qZQQIIHz2_wfY4MK_XC_YSPzkf8iMkBUft-KRX-yuwqYGzJTUWkDMfj4BAjLMSwLB_sffb_TXzoq4HIFI5hOVdmxJ1kYaTlu2oW3g-IdpSwyRgyzJIBeIMHyO9gfGkFQksMg7g0nuBan8pFBktnyEGxpDKi6FTocjFVz6Auj6JHWkrgSIiafzyTZFrvlT_IQWgZrj1EMf7YT6_xcdr9aQMfVkQwgQxe0N27A5sMfXbKfisKp_hJY6Ae_DJgOW5-g2PgCO8afVkYF_afNSc8n3RCzHqHa8r0RF_VomXxyH2fuX7Mn5f8cEu8hAwTyV8ufWn7GQ6flX23h6hbH6O8cfUwNZ9ToIYRZE4f8iEfDOA279dBNf2X-p9Of8QS58Y56nK25Dw8lAeKuBU7zN9Dwqs1jhzfc4Adl7vy3_F9rfQOR9KHUlGLmBY4230hKehZH-IpaICArm-hvv0sAFL23niWJLGUXm16KvJKqQl_iPwMN93gukhXk4rhiaWrlBdftF6nYO70lLLYl0vWpRezsgjQ6eMXnElxeCXtnh0lyXvF5Z4jJXXidqXnvD8-esXuniE_iXvj_Q8KXsT8ZenQTkVF4SbRmGPB_3wd6wIHXlV5lePXgmKde_XrV6HA0SobEGZbyCSoe-OYcP6ygo_oQ75hBSVVaB--3od45-Yvgi7V6F3h-EqaZMONLF-3XNr9cC40p3FRqO3aTwiIkv4P4KSPQSaF_kwP4m-g_I7-D9ocviiXKxIhnagXOyaFuAGCBpOfCmHoHvxSQQIfmD17RKrv0DAgwWnp_4DU2Dr7_UZwpAH_XYowc-jAlkfxMiuaZPtDSl0Z4FL-YcI_vmE6ZaHI2oU0S-tqbn45vxKVngRH9XiHfbaEOm8mX8CD-UAYP4kAQ_nahG-B6CqUqlsMGb8m-Gk0QA3-JvvryVSoxXStD_5IU3juTRAsv-mIYoselM4F6vKer__hEQM5SuU4hGATS-aZEBG8AHgGcwjA3Gfy8dJHSnx4lp5gJzERAR-HCAgE6_6dCi_kEZP5nOk_zpL5_lXIX_TqFNBB-KpHDHsCmvmb9m9toPf2H-DkWJUlqQMyIiFwA1oALIJEmmktJHzoU3jDemfyliFNCEULERGQdIjQAZ8CwAzqWigfJBbC8zC3i5PjVeIIhi0sQBmOwTwb8mbylenIgwBvymrcVUSo-UQCwA0AIXghxRSCjkVLogAMZAqMUM8ov1lQoIkgBPwjKwmAOrcGXwMQAkV6S2EFwAxX0YwTyVuiCzzAIq6WZccnArQ_eDcka4kd-IgASIkYCwAqALEBbiQkBdWFBE0gI48zyXkBfeEUB4eGUB1Uhzw-qWTQ5rx1SkYESAt5m4wcEAMkZUGcBMQB2A__2RiQaXYB1Vk4BWbz7-tf0_AIpWfsvHxB0R8ETws330BUuG5CvITvEQ8EFCkkWYBIoBYCDXwMQkQJnwCXC3wSH0XSrySQ-FgLpcVgKQ-iYWeybALb-1ViNE7eWYUzgMTCv2Qm-zgMzyDT3bSSaVtY7gKQ-7b2e-6iEyBoSWfQZ33HQDoT6BbXzrg132Vot3z8-suFiSt2UP-anAQB9GmqsTAOD-GKBYYuAHOaB4wD46MBM-g73b0QwJc-H2SWAqwMqARqHRgRgH6MkgEU4OdliS4QTtSigBNCY-Gz-lvxsk1v0Q-kwN9SLSX2SjiCpynSQV-m6XRUYVl6SAaGySbCR5cu6XWS60Tw-C6VMBS6WOeCMUKBc5g3S-6UaSmeRaBU6BwA_RmkQvwPLS0rhFcUqXxykYEr-FaRmANf2eBXCWtSd8V1S6oQNS_ZiNSMABNS7qXNSMILMCmeRkMdqSpBJ4BpBzqWhErqQg-HqTAiiIJ2Blz0xBwyTeB_qXCAXwLmBQoPyQoaRCQliiBBAKSaeSaXBBhIKrSUIPyBkoJiScIJDwCINABSINTS8oJBBz2T3SOoLIouwM8CIADKBobwcic_0qBkYGqBOwMmBdQJHEBaArQPjnCBhiGiBh2SbePIRwAKgQasR8CSB_iU--EyEuBiYWuBU6GeBpeAeBCQCt-qQUuBeQNrSfQM1BkYGKBDoJc-FoLjucwNfUNoPno5pwH-AbyH-XAOABuzjv-dnxc-9QKWA8AKtBS6mqs2vGhERohzBi9DzBq0CTeQAMXwxYJzsPriPgNfyiBB3wYQx305CcQJ9BfISPg1LADB12CDB8IS6BGQN7BWOE1c2QLE-diFkBNLmhBkwKTBKYMqQT2XFBVYPmBZziqBp0GpEIv0uBTQMH8jTwNBrQItA7QMmBnQPSB7oJnBMOlCS_QNHBK3xjSZoPW-CQLu-wHBeBG4JuyXwPVCVWlLoiwI_-KwJ9QRwI2BVzC8Qh4NNBI7nWekMRS-MMS7A6XyghI5AMiHgnLcpkV5BIYLTBW4P_BNoJdBB4L5Kt5i7BfYJiBYbjck8QL9BC8BUiXFA0CyQInBcYKRi5QOrBZzgCB3gICBI_0ghkwPjBIeEuBa4K-y34KwheSQlKmYNOQpdHrB13VHQbEKLB3MUuisuDyCSKHgEBokoAAnxmBS6SXEcgWvBgpWMwFD3ZeLhWwAFL1AgmMipeRkCkMtLzEM9L1BkfLym8xRgWkify--P9mm-RwBwENmArBXa1RA54GFge30chpuQR4TOUl4FPjvSMKXBs5OEgAWHAvArP2GkFP2x-VP1x-OeEHgD-zC8M-FC8kUi6kluUuSBuSdywUNchYUJLw8yix-_bBS8gXjw4edSgAcUMFYyEHzwjJWSh66FShBaVyyhzmLSkhBChbkOFguUO3UlP0EcMUISA1s0OcpUNTgFUKShjISDQjvnvU1uSZ8BWXiS5vyyh7kJyhEUN880UIC8CQCo4BQAPwacEMOvUPKhGXkqhg0MgiV0iah2UP_gkhCak0-Fakarlk8_bFv8MIEFA4UH8o_lE9SIyFecUBRfsOan68M0j2h00Pa88SFCqpfls8UsAGIxYED-VgVUkUsAzwH4RehWPxkM2kA3eJ4mjgcniBhVsCJ-oXihhW6Bhha8Stg2iA1APgLpcHwRBCdhGqs7wEF-VXGje1HG5iVugJh2jyJh8AG0I0MJswW0CchVEHUS6m1tBaniB4UPHZ8iDlLodMJh0cANDe_Xi7MohD-hmACzw_XiRh9UUPQrJX1wohCzwMUgKhqkwraSDVU8ZQQao6AFq4qhCgAWeB_wXAFq4GeHKYhMLAAKsMlhr5nJhesMNe8Xh1hb_xqgqsKlhaHAzw4plmyaL1n4YMish8nlr8iQEWk_bGZhwyCfCV0n7Yp0FP-RiDecZgCfCEnhHk0SAL8SxTk6m3HfkQcPkQjJU4g0cK8hx6R8hZ6UDhTEWW4GoFyInMMTw3HhikGcKtgnsKYiCwVUkucOjgCMLSAYXlhh4UGLhNmFLh6Xj5iGMO482MPzhmNjxhXXmU0RsNq4JMNbhkb2q4xsOo4ccILhMqHfAtET28RcMzh_cMRQKcJ8i_kMc0bqGxiYPljQtEUZKxIjyhOPwWhUABToxUPWhCUNjhk8O-IoXky8AgC6CmMLnMaXibh_sS00TKArEAv2LA48PPhEmRKqAsI-hw9kk80uFx-8kyiktERmUMUl-hv3nThmcJwyxYCthcMOjgdeFvhEcVh-nPyx8kXnCgUsBrhYXkikQsK-hQCO_Ub8OnKH8IHhBiDz8ocJdhhPlYqFXkr8u8M2QQ8KYiIsWK0euWhS6UIWwtuUXhoXmXhbUKihHULXh3UPqoW8P6hZcLARbxH3hTP0Hw3HlPhC8IwRtOX68_Px5-7KEIRMeB_cmvhiIgCO7sL8PlhWeGMY8Xg4RNnggRP8Ougf8KtgACMFhgMJgRVsFARy0E_hMEXb8J0h0RJcJC8ZcP88_JEQR-VVx-0sOp-w8yRhBiNSUsiOwRhflt8X3HwR-YSURveDER-MgGis_FGhEsWLINCLLhdCMih-ULsROeCWhs4BWhaIDWhOeD6hm0NC8XiKxIXCKy8zP14RwsDPh4CIvhnUCvhIiO5MXkAERMykT8RiGkRz8JDhTDFx-kqAcRRSMMRaHFURzwSUc_8P68yCMSAwMPi8nskcRbfnzCFcLaR8MLMRtcIQRn0OsRrSJS878OSRmCOcRTyDDhf7ht8Jfl6Rn3kKR9oKfCuMCfCpdCwR0yJdh48JM4XeVxKEpWKMLsLdhdkIokHaG9hy5j9hxiEehNYGDhuPhdhgP2uRMcKSR6wG-8lPkGko4QKR0knIRBaUChSSFtynCJCRrULCRq8K1CgiEQ84Pxp84Gh3hIyEZKB8KPhGSLSAviksIl8Mq8Ulhvhz6FlKsmUfhWeA2RYyLQR0Sls8lnhaRIKJmAukhS8tiNQRKpQIBGyimRVvnDhRfneoHiKe8YphxWJFFIR5PgIyq1T-R9iFoRgKLmhjCOJRYKMSAzCJtyiSPYRIiBhR3CMsk8KK2M4iJyRthD68aKNlwGvjG0WKJkRFSJS8CiKpRdSKZRthCJRNqRJR1sLsR5KKFheKOfQGyNpRsyKL8dvgWRcihNBb8gZSzvmEy9UO_U4qJ5Rs0PahKXhkMgqKiRKQBiRhlWA4kKKeR0KNSRh8PSRobz4R0NCRRuSJRRrcPxRxqmRIqqPKRM8yqRyJBFhyiL--4UEJRZSK9RhqJsRuaJNRlKOiU5qJmRukmL8yJEZRmaNtR3iLfk6wHWRNKJLRaHHMejsP2R8nn6KyECORy0nsh8bxkkPsJZSwpEuRgjweRP8jdR_bD5RBUISAbaJAIUAF6AOoV7YbCJX8Q6LpyOryThhFg2QYxhRhKKLzoheFy8bPxgiQiLyRqKNERfHyOA4hAGKjcVXAt6RnhQUV7UvyNxiYgMmKiaMM0PUDTR_mQz-Q0RdaIWVPRyEETR8uFwUpfiRQa-nUQX6Lq4IyED06-S0RGVHzRiXllhyaIBIMUkbU4GKfh5KPRKydnWAs_Ezh6MJeCDcMUAOMI7QH_FLoHgCzwwGJBh4ISIxkxTTR6_BIoHMLRhd0UZhWiTuQEzEDQOJSMgTsIo4xxR-A4QA7RHwS7RnyN6U5yIehg6JzUxaPYx-wHuROaihROamXUK6Ju4GyEvRF5jnhj6UkIS8N5RHqIiRdJSKh8QFYRoqIXR_yI6CaSJ4R4aMyR2HlLEyKIVRR6NlR98LWqiaJxRdiPGR6KNM82j2i4AgBExXpCkREGKq4TmJcxAaKFihynrRXmNwR_VXwRjmIQ4zmP2K4QCqk6wDZRcmM80uKSoRd6O5RAKPdRDCPHRUAGFRmmPiRG0MDRYqODRZcNhRYaKP-EaPsxcqOERh6I-R6aJf8XPDcxT8JsxuP01RcaIOwwWN4IXmMTRHmJCxXmI3eTkWExYWNOC1qIWQjWIyAXmIix9qL8RjqMtiLqJyxYcBUxyWLUxUAB9RfqLiR8UPnRtEgmxWiElRx8INURmMjRJmOjRZmLKxMPyOAJSL1RNWKzw1SMURRWP7A_WNCxJxVcxpSPcxl2PaxiiM6xfmO6xZaL6YQWLwgnmO6xQ2LjefaLP-z2Oux0MhUezaLjuxRi8xC_nOKCQEBK7sNtMpyJ7R_GOqsA6LXRjyOyxkmO8hUKEx4Xry-RAULNyt6MFQymKSx4SM6hJUIyx28KDRr6MfMKFjShnKPixFgHxxo6NUxROI3h6WMWx2mOWx5OLIR08PkxdUNd8NOM3RoSLHRM2LSxxOJZxWWJ0xviLJ80WLHCOhV4i40K5RtOJHRK8PmhNP1mxHkGiRWaH9RWmNFxbOJjstaOqsMKO5hBWM2xDkNux8qOvh5mJgi7uT1R_OBS8KJQhMlSM8hF2I-xbWO6xLWPux3WI6xJ4jOckhDAxziVHEIiFaxTWPdxmkPR0dJCeKAwlZ-50D68BehX-QBGHgblH38agCmCUKH5wGr36oswWxKFkL2RIONbR7xQIANkJFC0OJ4xKljehHkOeRR6VeR0mJnhsmMpxtUJvRw1F5xJeJmh9OOmxROM1xiULLhVUOGxEuJrx2OOpxgqEbxthGbxhOLXhTOOFxZUNJxHeO2h4uIpxWOKvRhaRtmfEXxwA-Kmxw-OVxQuLbxW0K6cbKMGiCLjGxgT0KyG1gHx_OIZxa8Lmx6uIWx4-KWxneJ-xKrwHxXwUJwE-CVcJ0LnsueIihF0Lcg7iESAN0Luhfv37RAcJrRF-CjRMAFehU0PLwwyMnQqHjGgEpRo-5ADE2eEHCUjcO6onyA8AnJBdBkhFLo2wPZx4b2qskYFcAZcCJCAQn_wIDhqAj4CoSpby2QuIXLuoGJxMIAEa4uSTgx2j30AmMHiAsBMYJ0aDBh9CIiAlFToJysJNhDAQ4JkUK4J8QFq41_wDRXzDdgIiB9xLUFzxzTE8-NAGYJ06LgJRUU0RwBKx-Q0DDYSEC1hpsJNxAMJtS3BMYkohLrw6JXf0zGPFKcd2RcRxlPwrAnqeEpUCAsji6QFiAn43WgLocliQJ3SGhICeMgIR_j5SflECo6eM4U6ihf8J3l5S3MVL0sanRKvGI8JQISFSZ_gv8AROFMQfG60Yvijs_6M9xh6E0UABN4xp6VrxYNlxx3VGuiIAFagVDUSqMoFiAgjiVemONoE-aV7xH6N5xOxhkyrFQqJ3aI4i1RLnx0uOCydRLxh3txiAkAGnkzhPZ4FPCaJWRNaJXOICR-WQPxnRLOcdhPY4vRKcJtWSqJKuVcJr0RP0VznZ44vEixneWBxanCZehIJI-g5ABQCIicyLimdi6HGmocjGmergTWi-RKli_wLDSQ4POJhIMFCSrzH-v2JEMnIVbcyIibc9n3hylLmNB6OSu-G3xBR2IL8-goP8-yIIVBDQKaJuMAoe3KhhYJimqUvMnoeq7AMhDACrgMBgmSGEHxwjAM_yI4iuA1rlYAxqHzkmCVseIwAtAXLHPIPhVceh8iAMY4EQAiAEAMybE6aloApJCQCNsBcEpyqAAeMZzRwKrz07c2L1qSNiTKeaLzRJABhpJKzHpJLlA8ATJI1YriB8K_oM5J4IAIAPogqgfjxZYz715JeBWFAtRGeSdSSFJ_j2pJ6kDpJDJKlJLwBlJCZB_aW31eAYkDMAXJPVJUaD5J-BXQKSnCU4-L0HyhL2HyzBlvgKLAYeKJPAg1LG6oqQwmKUuGReBSLTYTVmke3VBGU8jyj4ijwOgrjxHss4D7syiT34q4HmeRLEBUyz3XMMSh1SChPIAkYFhE3XGkhvjyXwMhlzJ-ZJSghZOpExZKmehINxYqZLH0CzyuASz1JY3JkueisHWeDVDpYmMC8iqL1AB3z25YH-X-eYj0xBp-TOe7BV7Jq4GueyrFVY9z01YXSCeeFgDtJpcSNYHz33S_ZOtYBzyHJDBRdYILyDYmIPBezBT9YNuBhebZLls8LwjYUbBDJqzzfkFD2cK9xDYMyJKCwRkJsgiVTsMvhTUMeRSnmb5OCKahmaKnhXCKkRWiKKxQKKCRUJUSRVuAf5KGwjQFQAGRWFA2RWKKn5MS835JowORRKKzaH2SWRU-KtOEmIDQFyIDaBP2ohRuUDbG7Y6CjgAouAvyWAESAwUCeAuUmqKphnIQ6hRBKoGW8K8RT8KbaHxwx8mmyAFNuAdCh2guQH6AVwBwpeFJP2SwHv8OXEsAzXDK2Sx21JjBFFeUHiuA1NliE-gBVmsSGDIOSGxU-DHwINFPqKquHxkJ0B1wRRU2AXFPSKGFPgpmwDE-3ehju3VCEp-FIaABlN_J5DwJeeRkkAaxTGKwoAmKAxX0hT5OXgVRRqKd7DqKH9gaKEyFSwGhhBKrxRSwnxSspHvjbRdsjle3VH6yShDtxyCT_E4JhfICKCukqVI5UIiGnSvGLVeW5hxiBbzOcxJVJKA8j3QFJVSAsJXCQaTBzwk6JYJ_FWteqYVyILuFyIiVJfIV5RyYTiGfIrNgLQ5BVa8TUCzwn1nu4uRAHAdeG10jJT70wsOLoSNifR8mGGYv6JfUoZBikTMSAsLejXOZViTsNlA1wy1LZKLeh_6J1ESAr6X5wr6S-eXVPWp_5GISNlBMSvNFMSfGUMQwpWrRnKAxSeVKxilCMyQcuLj-5gGKpjICyKpVLsQ5VN8p91N_I7JQnRS_inRM6PwIBkg1wuRGyQ_AHsYar3eoZTGgRiQCapfuBapp1MhMsNIoI8CjtxiNN6pd4EQAA1Pmpo1LQI41OUok1Ibw01Pu4z6LmpOfF8owzCWp21BWpP5DWpODGGYV1i2pjNJ2pP5D2paIAOprNCOpxtFtxL5FZoF1LZpz-mHoN1LZoe6EBpxmFisOuNQAt5OVkLlLTIblKYKJUi8p67GDgvlKiwAVLwAQVKaKxZFSKYVK5kEVOLIUVIr-Y4HzxxLSbBE-EFQCVPRp5gGigar0ypnkHSpMkhdpO2TSJpaQvRUCT_E-VPnh6BKJKahhJK31LJKZVNDplJRlpe91lwsUJJxV4j5wqNNapHiExpHtMRwxZEqQ9-NOQpNK6oLJWa09SKtgT6WzpP5FzpkNg1hvBOo4rNF1hWsMhsMUhpy3KCKCFNiZppFBZpHmU70cfkupNlHFpxdA2RT6SSCwzCbpbdOupE2j5KtsN5gUdLkhT1L9pL1L7x2BKKpwdJKpf5H-plVL3Q0NEKhNNE3hcdNZwidIdp7VKxpnVPsoL5CGY-SimR0NK1wmNPhpXJiSYz6EzpDuFC82uhLpV9HzpMMKRsRdKPID9P_IZdOrpUFCrphrxrpsnmOpnAAbp_GS5pzdJgxoSEhsotI2puQWUoPdKRsfdNDIA9P1ig9Nf0skNHpGJV5EXzEnpiby3Me-PepOakucTtL_ElzhhwRDKSJIRI1iGvy6c2VKDpaIlBKodN-phiCXpVJSqpz6Bzw6-M3pFpH5waNIPpydJAAHVP3wDtKPpjSA2R-RAgcMNL4ZwAAvpsmURpFyhPpxuHaY-JivpsuCq0r9MtwTKD7038ILpL9LvpjNOLAr6Vrp7CEIwxtEQZzNLAZZ1OMSrNE_pv9O_p7cOsZM6Q7pwzC7pDeFgZNlGMY_dJAZzjI6GTHGgZQ9JQZjTjQZJQAwZ1UJ4S20GepVOKdRmFllxvONeJX1PBKDDIMQTDKjpt9xjpi0NVxvqPPxUoC3h8dPyQXDKTpKhBTp2NMPp6jhEZLSHPpf4kGYYmWPpFSNyIYZ3QAuRCFx1VDkExYF3par0UZIWV5gKjJ0ZOdL0ZMDKmRvdNTRPjMfpwCJph2jLLhy1J6Zf9NUkADJMZPpDTsP9IrpYqTZpRnmZoEtOHpqDKUs0tKCZweK2QaGIP4WxMQoD3nDhcyBtpVAN2ZFuMKZiFEIZib1TpGyA_4GVIuZyqjOZv-NO0TzMIBU9PCZBVPCIayJoZJ4AXprzN5giTP-Z0dIsAtETXpsKA3p8UKvEBiNyZO9IKZ-9LyYadKBZHTLwxtSNfpXSPfpXSJOewzNlIKLPSYXTJBZtSLsQGLMJZyiKVhX9MCyP5HmZMXBrAmLKOi_9KRZPpHgZFLP_ITdNpZdiBbpDLOQZzLJWZNLJJZa8lpZWyFpZLjN5ZjLKAZ3LMIwrLL5ZMdi6RgrNqRsrNb0DLPlZBiGFKKyJIoH_CixvtOwZ09NqJAKG-Zc9NoZIdLiZuLISZEdIqpzDJFZBiGNZhiDYZXviyZnLKxI29J4Z-TIkZqdKEZBiJEZxulPp-uDKZibwRpQuloiurNRZ-LPFZRLPUZ9rJTIT9JGZ4bMMQaLKlZvMGJZ36X_paTgtZLLJAZbLOtZZjNZpBLPOp0bPERZLLsZ6bLlstjIWZ2bKgZpbP4wV1lzZYvxDZ-SGFZ5bJYwbjPrZErLTZcbNmUXjJbZFbKrZSrIVZKbPF-vbOrZ0ERVZJCLVZl4Q1ZoTPeZORNwZ8WPjhL_kMIlnlaZZDMFSPhM1iXTifCR0P_As4ROZ7yIlepDNqybti4gc7IxQtzIHhwJXnp9DKtZJrPBKkdPtZF7OtZqTJiAauNWhmTLjpIZGhZjrIRZu9NdZDSHdZJ9NqZ9TN4iTTLqQPrIDebTOnZJLNjZ_GATZnjIqRXzNbZZuAGZTbL8ZNbMQikbJxZVbN0xTJXQ5z6QmZiHIqYaHFvZxdI7ZF1A5Z_bLLZyHKQZ5HLG8r7NbZ3bKQ5MrOjZtHInhpHPQZzHOTs6rLOZOyNpxlkItprsmt8xzLip-OHtpTrJZAVzIDeNzJ9p20H8oqdPxEOVLeZWrI-ZAdOoZ-rN-Z57PCQgLJXpz6BzR0PHBRAnA6UcjM3wWRRRp-gG4ZH7LhZAjOE5adM6ZISPvpYbO7pUyLgZYrIbwMzP8ZxdCEJKuOo4hhNc5oKPw5NlCsZJbIqYxbOpZi1PpZkNiZZhHLEsUFBI5ZHK5ZSHJc5cXKlpdiHHpmDJCZW7K3ME4SU5_vzPZRrLU5prIBpLDNlwWnNfod4AaZ4UGyZfuhPpnrMcAraEM5zVLyZGNJdZDzPyYxkQtCFXLEZZ9IkZUjNYqSTCq0rOFoRNnM6gfeg2RTMUbZb9I8ZPpDdOKQG8ZPLJV0lT3c58AE85M3INRUzM2pSbJYwnNIi5R5Ci5szN85VVHLpQXIC5Ub17h-3Ji5NcVi5CXPO5yrK2Zj1JS5YTMnZ1yWiZKljRQh7KgRC7NqyrGRXZ0qHXZyrlVct3Ju4O7MTedFlnZDyH-QgpB-ZAgj-ZsuHU5iNlZM3nO05DXDSZ82KriaBBEZf7JK5yNMq5BnORptXNhZDXPhZ-3BkZXVBR5wPX_ZWmVEZAnC9ZlwGA5zYL9Zk82pR1TNR5AHPkZVPInwHPEpQSjNOQEXhJpfXLJptnNDIQ3JzSCHO25wzEK5fNJb0DNMhsznP4wW3Oi5nbMGZFHPi5t1MS57SDlpOzIVpTlOcKNxXCAGtMMhPlOqKOtNop_6GCpkFJsgxtPcMptPtw-zOfglf26xi0gE5xuNTpyVOuZjXJeZisHuZePLtxMnMQsfkN-5bRJxx9eMKpmXINZEPL-puXOXpCdBSZ68I0xY-NTgZXJjZ77IQUZnIFwFnPZ5-SBvpfOGDZajMwAGjLdxAON6ZMHIc5NlEl5ivNO5JfOL59_xY5XdGCZ3ePHZ8nJyJ6XPuhYPLoZ2XPDpV7LNZSTM7UNrI5idrM4Z8fLtxn7Od5QjN8x1TM9Z4jLhpf4hp519Nj0qjJGYvPOIsOfI4xxoKH56pCRsI3Kc5Y3IN07bI25J3IV5PbJ355fMCZLKKr5M-NS52rKnZv3yB5k3Kc8r3Mqq73N5in3MVc0-E3ZPvOeQ_3JA5_Wgv5IPMV-gfJU5zfMqQUPN9swNPc5y0IyZrvBfZW9OM5dXKSgifMgFg_NrZv7OJ5aPIp5uRAaApEnuAmNKe5wPNboeDJyZGfIlZOHPG5fTKZi1SLFp9NPn5AaTl5Z3LL5THMqQ7fLkhGxLdBlvJQcuxRt5ZxQEAFxRSIJzMFQdvwDe_tMUxGXPj-WXJ-pi9ND55rPD5lSFjp8ULSY0_MqQ79JYwIGSRsQtPAZ03Ln5TuMDxufN8ZpfIu51ArupV3O4S1fJP54TPr5D_2_54PNU5LfOhKbfPy54gvUx69OZx4-Nj5kyOqZo_MkZ4_Mvp7TNrAVnPgA_XJkeDeHkFNlEUF5jPl5hGADxA2KDx2_K0FfbKoFB_Mr5Q0Ju5E7JqJZ_JXMEiJVRonObBxDMM4u7Jv55DIpSg0K_5AgqD5Zgr_5Igvb5yTNOQnfPCyWTJ1yTiOH5bXO9ZHXNcF0jMqZ_GBEZTPIkZoHKEwEXmkFM_Kz5NlD8FIaQdpDjMWpZArFBFAs0FUQurZSvJ0IyXP0Fz_M803ON18UTPMIp7IKFv_PyQ__LEFA6nvZwAqfZoAshZefPwIyAqbIzPK0QFTOa50HIOFDPNJ5xuGOFrPIts6dMaQnQtwFmfJgAL9LB03SQGFJAqGFqgtCF6guUFlAoiF2gsmFNQNDux0EVp1IXUJTxW15nBiqw2tNqKBvMaKIVO8MjLzUM4VOsMiIvWAjAr-KshFzxtvP84dtJjhzvMd5YnOd5btMk50nP4FLvO958Qt95deNwUAfPyFP_KEFOXNb5eXI05EfO75WdN75bVOgFgjPcFFgDT5OArGZaBFkFhGAhFmhLsZLGDc5IhOicylClFu3PJZG_Pz5NlDC5kHPX5Ywt356ov35vWXUQSXKP5HONmFUuNepiIGwFywsZFYdJD5LIrD5hiFXpNgvBZdgpj54ApoAJnIT5uPPM5CLNgF5XKcF7XLH5vrLcF9wrsQngsw53TIG5ylDFFeeIlFhGClFBhJlFXnO4J8oojFVTOX5OaUc5PpCL5AIvGFWopvxkQp0Fh_NiFMwupFoxIiZIqL5hBDJ_-APM18JDPLFb3OyFgsWUspotMFqwotFFgtZF0POoUXUNtZYAuLoMLIs5_fPd5RTNp56iA9ZtQsp59Qt9FjQrOFzQv05bTHQFX3BT5GdM6sXQpkF-AvOFiFGG5x5Rb0aYt8xs4Cm5QvNDIYYoVFdelm50opccwvKPF8Yv854QozFEwvTFFfKIReork5PAtP5MuImJSwsb5hrKZFkPOKFz6GqpWwsfZsSOfZewq7FXIt4Z_DKT57ou8cMShPppTNHFAb1OFguUnF9PIQFjPOaZNwvaFFpEeFQouLoIosVFSYpb0xApl5LGH3FCYsjFR4ujFJ4tDIcovzZF4qCFe_JvFWYpzFwIpxW9AosAusGGgEjXfIyhjnyvpJAAHaGi6qpSBAxICqA3gDKSv4HJAK521KXV0pW_ADWSMkoaQqeAGFqpTkO-QD_AmOB9AYksqI5ICUheYAQqTiWpkAkpBAwkuhi1aEasC9lVKhbE0AckriSBO1PE_kDmQ9DnxwuaBiwqpQAAevzp1kjgBk6jrhc4Jlh0EEE4ZKl5K4kjJUckM5KrEGiCPJQUxHJVKAaZDEA6ZDAYgnK5Kf8tCoIpfqivHC5KWRGskmKgFLr_NQBVDLQz4pelKkpXgpIpcySk2CYY0pR5LIVMlLZomJFgpZ_EMpclLqZAmT5HKUhnJefE1kv5LXctnhkKSCV4pefEIVMRcApSBTqngHJwKZxRapayIPJZ5LOpUNLDKWhSyinBT4pZ_EIVB1LK2CABdaXRSXJfNAKpVNLVpetLDeQbTgpefFFOOFKipfuxLQNaBFpWVB3JcnV6BfIAHMAZLcAPeT4HFxKnydTZsKKmRflleU6jNA5zQKMo5gEIQFAPIB5AEAA`} __position={0} __code={'<QuickResultsWidget />\\n<QuickResultsWidgetEmbed />'} __scope={{props: this ? this.props : props,QuickResultsWidget,QuickResultsWidgetEmbed}}>\n    <QuickResultsWidget/>\n    <QuickResultsWidgetEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};"],"sourceRoot":""}