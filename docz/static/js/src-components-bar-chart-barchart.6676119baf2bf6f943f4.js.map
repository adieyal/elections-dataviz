{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","triggerCustomEvent","CHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.bac7abec.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}