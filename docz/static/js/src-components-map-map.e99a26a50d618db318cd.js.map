{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/Map/map.mdx","webpack:///./src/components/Map/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","partyColorsData","regionColor","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","event","rect","rendercanvas","ctx","canvg","refs","vizcontainer","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","e","canvas","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","self","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getMainParties","partyColorsLoader","getPartyColors","Promise","values","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getMainPartyName","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","edge","topojson","projection","path","concat","parties","availableCnt","party","b","legends","parseInt","getLegendXY","data","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","react_default","placeholder","onChange","onRegionTypeChange","province","key","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","Map_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-map-map.373d0a7e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        var ctx = rendercanvas.getContext(\"2d\");\n        ctx.fillStyle = \"blue\";\n        ctx.fillRect(0, 0, rect.width, rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = \"race-for-votes-map.png\";\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---map\"}}>{`Race for Votes - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the race for votes across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};"],"sourceRoot":""}