{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/VoteCompBarchart/barchart.css","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/VoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/VoteCompBarchart/barchart.mdx","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","barchart_partyColorsData","getProvincesData","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbr","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","newState","detail","setState","d3barchart","react_default","a","createElement","getRegionName","ref","dataLoaders","getVotesDataForComparation","partyColorsLoader","getPartyColors","values","votesData","error","console","data","parseVotesComparationData","VoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","VoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container"],"mappings":"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","file":"static/js/src-components-vote-comp-barchart-barchart.918f38de.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__2TRxQ\",\"chart-title\":\"barchart_chart-title__2MbVK\",\"chart-body\":\"barchart_chart-body__1BFKS\",\"percentage-label\":\"barchart_percentage-label__9YaI6\",\"chart\":\"barchart_chart__2SxRk\",\"large\":\"barchart_large__9_dlZ\",\"y-axis-label\":\"barchart_y-axis-label__1hJJC\",\"y-label\":\"barchart_y-label__1N0OW\",\"annotation-line\":\"barchart_annotation-line__1vyoE\",\"tooltip\":\"barchart_tooltip__2xqX_\",\"grid\":\"barchart_grid__28BA-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataForComparation,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparationData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparation\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-votes-barchart.png\");\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparation(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparationData(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.name === thing.name\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparation Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes-comparation---bar-chart\"}}>{`Race for Votes Comparation - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJAANREGB12gtD4IISQPBg8hSP4VVUAFe0oJguCYIvIhAhyRD2GQyRUPQz4NxoHD8NoIjKNIyRiOYkVzzY7IaLtDV2CDKU3RNBVzXaBSHWAdhNB8eRVLldoAAEYCIEQBlQDCuk0gNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ2CgAWSL2AANki6L1jAECADEfWgRJgv4ZxDkRR1MHYAAFIR-CWcyfjgOLESymscpoZwIGcy52AARiSmL5HBezqEcgBBOYvPYSMdKo6B0HDdh5E5LyxGmmMZHYVEPJgbhgEPVz3OxeRt1rYA5qgBbggAMmu8ZEnmShmguq7zG4d75TAUJ7J7VB2nYAB-DZ5vDSMVquF7wyGmspBkat3zMWFFMwMAwigKYwdW9aYYmlca0TZSCBwXLMhSa8CFO2s60k0j8y4CY-BANKQpC_hfBgCAUkIRmACYedZkB2C3VdExpliZPYoXKbrSRCeJ0nydOqRcfhsxvxAXiMIzbC8II0SSJY8ixJYgCtAoED9AYejFMJpYdPXLCswMzj-DNKV5LoyD2CMEI7HQZNDK4kB_Y962HW2zyXZAT0KINkUPjgOBQ694ApIIZ33WQz0xZFaRk1jqiWOThittYFJLEoKrZ0D_gKlYGALTgMuLX8C0ZlnD2tKmGB68Emvo89HBPR77Di8U3yazPYT4G1aJXFy4V1xg6JLJiiwzyqljEkcKBhTgNfRwIGrfjQRE4FnghXDMDOTSzyQh8kWYIDH7T1jigQ4Bgae4CXzJfov1wB8zzimeNQAAcj6JkqAb5IQHvfT04RoBJxALRMwrAYL9iEH8eyM855TQ3lg0-uDL5g1QagdBRx0Bz3FDKeAeBLACm6N5ZMYUfa9RZiFMhX0fqWR6FAfwcAIHHkjMKTmaAhEwBWhPCwXQCB9HMBHeAABtURgUJEAF12AAB8tF7H6GoyBtFoZoIwYXEUtEKH9i3jvPeACLEYK6LQuAeAGh6AEOgqADRtRTU4cNSxZiCC6hmL9Ow3lpEbBYpYB6PV-CiklN0BeRxv6OkFMvX6dV1iJDGlgWwAAZVwgQoBXH4FVc8op7DnjAZYMaABxc87BcK6ksOeZwGSayJFwvERkVwcjcDWugHAcJyC6jAN_A-HSukwESVEAgVwPGMixvM7oABqeUABSWyxj7L8MTuwHO3csCgXQHYB2mYpgT1XA5NEoQpTCkjAOSgdwpEiy2qEOE9zBxwE_C8iYtgcCoiyFNcJVMLDv3cmNDwHhyxBzGmA-wbSQW1hHjQbU8ByD9GCZZe47AlEvMRfwCBv0-yXi2CEvqABOSlCLEUgseEHY-2DyAQGJbAKUWKKVUpAAfGltZ-D9XYBNI4_MQpJXYISyyLLSWWWpTyiwdK-WisFewYVoqGWn2ZVAdgJK2XUBlbK_gfMBUDmVSzclYqV69k1dq9JXK8W0skEHQ1SrhVmrVfZDVWrWU2u5fqkA_N-XistZ6qVurbX41lfKv1IV-VuqZZKnVAYw2yt5VG3qZqwFjUsA0XUGbclatyeeewWac16p5ZG_1rrRS6lwg0OFDQxp5vPAWot2awGltrOon1VMuigNQFE-YxSQCoAtcOqA7bQWEJwRIwd472BEG-hAadQdZ3zroo4TAM6k00ogFsB8m6XnQ0RRAZoHzHlwEGVvCFULnnhqpr889ALaAXpFFkyFRxvIPLuM-8Fb7aKIsPSC4901P3np7ZZftkifJ2vvf8y-T6wPUAg1NEDYYYC9og3-kFAGqZAdPV-h5jKYASJvTymDj7_wEaIRI5DnzBmTsRBIzDVNsO1lwyh1di7IEkZpWRuD_4OPUY_bRgThiD0vLY8Jhd67IPApBbxrIOAOPSZo2exTUnixMdrCxiwEnVM7vIA-bjiL5NPv0w-FTX6zPoE0xYLZxnCQ4CRiKMacAqpgJqVNGDTmCAubczUnAHhVCRnvd829BI_ned8-5gAqv0TzDnIuuZi_0ALQWQs2fC-evwGBYAgMssxWcTDMv4EqLltD-XstpFSxgYLhJQv2b-dl9AsAao9x3SMc8vcpjeRg01lrXQ_gwA6116rj50urgA5czCZztRcH1G0GgmMLlhcsZ_KAzQeuEgyzBhargRi1b-WeRwNBXBoCjJyJYJnJEZccV0ZxrjaDuPiF4qan8CAPYyB4yMmM-lQbCxYNbYAcC7f24D08Y5juXzOwIMGSwwfkffP-pYVDL40Lu_Qxh9WQWHlCOTHA8VOv6FybYUCUZkUEHPeeAAGlVXUopLAAH0_OXYS1gBiUWalY6pjjvHBOuvE9ROkGH5Pz2inPDU1tDP7AAAlYV1JZ410rMA8vUAK2kLntYecnj50TknQvIwi5wDLsa9Omdi5reeAA6grrLSvWuDeG_oDXdnaz8UdjqLg0WZgo5gEtn5DmQcHfPUdkCp2XQw4u8VhHE3hpUzd2cy30AoDRdQOZb6BA_dhdwwEozIKAnA_gGiSgiRSF2oCVNVAoQEgZe005I8J4ujmXroTmgAvSfC665TmndPGfM-K4lvzGuLBa5oKhpvMAW8EDb_rw3YuJc5ql7L9z54bclZy8r8rqvKvXZeSPomjffgT_53r8PBvO9G9l6bqq5uGhW9X31mA9v2uT6H3wiUAgPtPagJGW7dDP8eK8Wd1jyRTZw1A51iwgEz0RVWwXA20yxuzHHkXYBdDGGPiIBpEjG4QTR_3gEoCgHriWC6HUFJVzypibnLkrlnH-TLl81nAgMjDB0cXPT-Gcl0Ch3Dw-BsEujAWLDgCURCk7R8iUCNG-mwL6AgFIJBTuzwPrkjHEP-XJBeCfEUDfCUV6nUVf1s1f2Wk0xdwsAH3czPydz-0RXIIrirhSH-VcHrmcBoNc1nCD1QzAGYK6jYLDwyE4Pmh4PKH4MENdniQtBygEAtFYAIjgAtALlIkGQ7hACALsipgfxV1QDV193J0kMsRQLckBW8nJwLyhygG2wczeyyNoEjEyL40Ry02AIsAfyfyG0nyMJoHSIwXKOyJhBG0wHyIy2z1IkqMRXz3KCLxL1f3L28hQIcFIkcJDxO2h1h2QKrygCWErwSCWHIB2UES40KL-WKL4zKKGxKMkRj3iNrGmPYPOxMKkMQIEHMH9n-QXFJUcKYJwBYLcOhz6KWheVXCnAyGmkkNkSQOjH-1rFjA4DWIEQkT2jBMTgkWjBAEiKLliJOjtSphBL4XBMgUhPWJhP4ACQtBiAIFgH4E5BOnOlIiCRCU4MiWiQMhmmAU31QBhKu2JM5CuFhjjGROBM2g5O7RgDAEZheND2hzZm5NdyxIxPOjFOERxNIgiKcESCJIMhFIsAkF3FkA5LZLVKBPeL0OOEyH21ePDzJE-WaKOEB3i1sAy0sVCNoHPjnlyUoE7B-O8injCIAUSV_hHTwy-UtIwRR1cHtMdI_imiUWtOIX9IdOnHUTISPRPQAEIwVt48DbE55JCLBLEEybEP4Azpx8ExxN4X1My4BS8gS_TsyMhz0Zg8g8B7lrEkysyIyMhtDqjaw0CaR8cEhIxSyGyP5OQcAJg6BMDRDfpIwlkvkdI7UrTXS8FvJRzfCMtQVazd4P4AFkNFzkzL5tFdFZz1DlRk07UwcQcalMgZhqyDSMgjSz0lhQzbTL4yQ1zlyUya9ey4gCAqIDcBAhB301oHI8D_wMhPz3zPzOQ4jVxDzjzTzBTDTMFLzjg547yCy6ybzXBUz2B_FSIVyP0YJP5v4PT_455Oy4LoKnlozt04yc8OTRjkChsJiWJIwzyBAliFjGKVi0ToTNiy8ojA8AkAF4L3JCyAE4itlvNjheS0ZGJYJSJaJ1ZNZ48dZp59YAkJImJSIJZshTYgI2DLZwIw5NRzQ7YUkBIpgYEg43ZRAUEu4ixUBIA5wo4H4H5dBrKX4pgvARBURjy3Ido7Ao4XKKc0RZhdxURARE5yIXw3LZhFM0AE5kFaIdKtojp4B-4Y5jZpJZIBkzhoqLKRdErB5h5O8nKLj14xxrVLJJ995VwCET4cEkKfUN57yyroFsr4FH4Zhn5zK7JYrZM0ROY0hYI8gIgiBJ9r5GqH5EEoAMq7ITEjhKMqqMLD5Y0wziyzAsDfpWKNjhFVE0B7BJSZMvirjzAfKwqZgPLsQVF9FNrtrNEdE4rPLTqxFkiLrNy9E7qtr0TjwjFhooS7B9lVKchsAjkTlptXRZMptUA3KbkIgYcQMUKGR3kob5yo8-MgURT7jyY90TKXxZ0qZydUU4B0UIBMVRorhcUgSeUCUR140yU01OUu1k0hYHUSl6MPVirRoOVyVMaaUFUjUhUWZRVA1R1g0E12bEVI1-VnUebqpGaKbpUt1aaU0nVjUXVzUiUrUvVpaabk1y0eYuaTUQpXVJaVaQ1E11bfV_VebyaDbBaZbZa6bHVo1VV9aBbvUlS5bo101M1W0G181C1i020rbZby1Xbqoq0a061Pam1vbW0hb2BO0RSEM-1olB1prEQo6k6iNIFB1LdC8MhzB7BZgmQ_aaURNjxN1jaqYlNiwS6RSrNK6SbawEyr1oV-BYV4Uw1kbVbqBSqiaY7a6LB4goB8yYh4Au67UWMdTZKUU5sFsM8UKYD1tzS4B4azxmbUBSqwYRS-zNhUBByeFqACLL4UKeVLF7iE1Sqpo_TcVg455-B1EL6-7Srr7FNZgDd0A0gsZsg0gL7yg8aCbE0NDnaAdYC7iCADiZpj7fpSqdCRTloPhog3z_zhQsYfzYBHMPy7l4GBBgLF68y6q16e72AN6BzlrLI97kKCrrbLE-6B6d1QlYLL5P6r6QAb7-BKGWJqHr6L7374AH6ogZhn7X7ftOGL6fhMBr73jZaWGRRqGpoJHB7z1IB0YowDtZwlhVBsA4dYCVo-l_7AMIwfB3pvIwdIAMBXE1BvsCBNG1pATrbaaiZh1jwvIPpfkqC7GoFrHEVgLtGxHab4cxwQHgAZHqGdD9U8HoGXy4HUGvzLK4BfyUGAL0GPHw0x7AaJ70AvcfcoCqjjiLAO6uscbv7foUiDcZ6MFHkyUci-yYIzwcBSmsV4arTJkaGlEoy7UgjppLEIAfElhNVvIanRocBYBZwJhdyOnGB2ACjOBlllkD7OAT1enQalEIB1E7ivVshpm0yGnBkqyREf6-DFnnjJlNDMmeVa8LAyNfHdjZMeVsa0UMUQk5kGmuIgTlojjVxqAkiINCmdqgSMj9jEawk46IMrh_xL4Aoxx9moBGR5B4azngHdjWjaAQLw1qA6j9svnSN9Eer7A-rIgGjDdjcr8b878EashEWqYO7QDnMksakimyG70MWMgsXUQcWutGiKccBqdacr93NV8EddDPjw1vijgMnoCMEQwxpa0poHLOYcAxXa06mMFLmaUUb9AHxS6kVcmbn8aQk1WZF6SIMlhaaRTU6JEdW50F0TWRTy7MBTWrNTX6631TWwGSrO9TWAmuGnn57YMsgSKRWjhegBB5rZrU6kKcB5HHtIwXgzIsZI2iAcAXGHHoLCNiM5y7V_jrjsZk0QTpYeUkxUwlJ4l2BEkGkwiDK0leFiIaKHQfr2BnB8n2AakhcR0ZYqwRTUTPqISJTXrfd-AgiiALQUghA3kFTs3abGB-FCkxASVyZGhvEpBx2FwR3M20BKyphtG71olGZaBDlhS8GeV23xT92pTwBhQ-22ChAx1ETHm3GQVyR4lhhLoMhGZcT6L-A13awt93A0g9omE1oYW_HlWaA0bgXKmwWllloTnrbhY8GNTF2aU23trMSu3YTe3-3B2Zhh232x2CkF3J8ZZ52oBYPM21tSUzX0Z8bYBVqO3D3u3j2BBT2QJz2iTllhSQBllqPYT50yPycLQX3L233awllv2NXcbbmsUIPraP3Cs9oYMcn9A8nRPJOqtAsasQskTd3abFXr3EUnXZPBJH7eGY2sZNOtOeU03zBIxGA5n2BtgYBEg9oY2DJBPgAHOxBnPaAiB5ApA5mxAvGTPmNfOtPxPZUpBiOpRCOQUYPnb4Ou3EO2Kj2UOB22h0PETwuc38OxAkirBok8PsOCPMPQuphqPYu1qaOUOz28CFSr2_PULJk9oAXqT-Psnkjt9pOHM3m9XokUjRsg9iTUvrbLOf6auIXdp-Bh1lbxAxuJUoAvOf6-vZaBuVrBP-BU7xBU6Zvfo5vR2rOluQAOMmU4ooAXh5SQAxA9v8b4gjv1vLJNvM3tvav-AzuDujuQj0BxBrSChjgSd-gpQrvqAbvgSeIwHNvIv1PjPk0cD0NsvYzvJRvzaiT2BboquTPou4vdpO3UfkOT3UOkuMP1PM30v5rzVjw53cv_uc2CvKOD3trMe6OeOGOKu-O8fyHavgBjXIEguTPFO0ef2o9zmsgZo2fi6YQKnQWiYwPiT2AyetvBudvxBnAwH8Gh5fvUApfk0wfqu676MwyEe7pg2AF9PT1CMjPGvr2zO6wrObO7PWete432ehvGQ9pU7bfjwSSneXHPPJBvOTfabnmmfZaOf-vAevVVeZY4ZnaA-LB1eeUIfwNsuPoHuF19uLv3J4fbpGuUeSvivsTaO-3Euh2UvvfEx0v9RE_zvDv3IieYASeJ3C-6wKeiv0eSuaf6OaBGPGeNeaUnOi6YAI-3Gufv2sY_2Lnu-gWReqnxeDIQ-c27vhvGY5eFeh4cBlep-aUo-Nf_XA28FEeN-tf9eONz0eHIwONje_e_OzeFveFLe9oOM1M6IJFHOWeb_u-SSn_zX2fl_a_jmAvqve_M2g_SUQ-IPaxr3zX6IoY-iGOPjD126l8nu7kF7qn2ujp9NoDfdjj2yx559kuvXWvlhwnYl86ISfcvskGkzV8F22A5duECR4d9aw7keYJuz-o7sqBeeBDo32z5ld6eF7CXp_zrr8JEQ97acIzHsBVRLAr7U_smi77qZMAv_CTs10_bc9B-RRPnqUWABWseowHUXuC0hacDRBEaQAaqU24gC324A-OvMATYJ98BZfZ7qwFe6xEdeSAtgJT2PBZ9IEzfbHvnywHaCUS6XYSB91mxuVYgUwMBLjkCACASBeXDwcCXIGrtwhxmDdvwC3ZmVKBjAlAdTzQG09yuHAxUtEJvY8CYAfAx9vwHJQAB2AABzMwQoAAVnKEiDGBVMJzlZikGy1--wAHnkP357Odd06AUfiC3H6TJwOiQqgVB2q5ADravfDPlRxSE59XBmAtTsjwJ5bxK-oQqXvlwV7JCkOqQlvkXgyH9CTOTne1lCgaE0omhLQhQbCzaF7DoUagnocNz6Er9EwM_B3q-xO7y8vUivJfp71m619QBbjN1nYER4_CDeCZE_jUJpTn8LetnR3lvCEaQJr6D_Wfqz0hHMM30bWEdDCNc4JkoRx4GER_yyH-da-BwkLkDyi56CouyA5gagMmEYDce17RgB4HCARBzANAkbnCTpGho9g91WINsFa5_JkWA2drN11U4OC0e5IjwAQETQrRVkLHdgKsmFGii24_QfyMdxWgnQUWUgWkTcD-5Eiw-6nMYVTzWEUi0OVItxjSJZEMjYhzI9UYmm2HSCtqHIrkeenJbs4qW_IurJkOq6rCMe_AEUWKKlFBxfR0oiYV6LlECgYIiopaJOwpZTAXM1UdzKqJNHA9iR2o0kTFxYHOD1hUww0dSPS7VtiBkgdLphyTGo8nBR7MyOxCBAZitOjAJqO4Fc7FBKxdbXiIzAAAkwAWVmAnkBehUqHY9iKbHEAhd8mgAkTlqzEDOJRgcSREIkhwpOh9kVjKgXvnBwXgrw-gO8A-FhLNiAO72dAENFiKmtZaXw6xtc0HE7MrgzYgAFLOAc0sGGcM8DAAl4Dx-TLFMSR3FuN6uA6IOM2JfE98o617QXjEhADNifxW4p8dYxH5vjlBb_F3l-LcYqDB0zYlQYBK4E6YOhME9oQZk3GQTrG5w5CecPgk4jawuIdABMCuBlCgJ1tTYJzEIBXA-YrMLIToT7G3MxAdQLoLe0RCRhJA0YXgAIF4BmAtEXE1ADxI4mcgngRAJYI8OJIhc4oKvTDgmOsbDCc20kmlNqWviIwIxIlVGFXnEppwfqX4JQBrDQhaxDKQkPWFOOSpkR4S8cdKhpQthgRo4uJfDhcXaiWh8g3UK4L1BwDlCzImGQ7i6AtBkSuYsyZAie3iCYYqAS5K4B4B4HbB3qdkSkiKDxIvAKO4SByRaBGAcw_JYUvAtZnWDxCW4h3FIEFB6D6AMgUUswDFMtBeB0AyQCeFskGQZBEQJ2NIBaDsmJSQIjceKlcBeAXdyAxU1AKVNLhzhwkh-AQGAF3gjA5ktgCAOFO6CxkdK7gAgN1NKn9MQOFxXyRRPYBJQWYkUeaYkBbg5JwiTU9YCMBsC0BG4zUHqD8BGDHktpjU3LhcUOmRsTp8SK4OdMulKS7I_sMAOQEbhlw-pFxQacNNGBjT8gk09gNNMgizT5p7gH4HBksiNSzskvMZnDMSlJ4LQjySUEdyuC-IawblSgDZyuAABiSlOSkwzYybOyU-mHgBcnEyi8pMqhM4hgiZAio4UJYMmHmkRA8CMQGYFBlECxRKA-QX6FcAKTRMIWtAVUKIDFlZS_qOUzmPlLqmPZRZvAcWdzOHy2Bb2jMtAF5IbjhTTgkUhWbrNijxQCgVwFKFgHlmKzsoIEFyTzFSjEhwin8foGAFNnrAKIOwPPhgCuB3SRZes5WU1H4RqzUAGsiIrvB2CYYvAAgacBjM2m6ylZ7AUOdOAtCZAWAeQK4BFBNlRyvZ_YSgGgEewWgRcT0rCI7O5nVSB2XAC4iFOFBXAB2tnIxNJT0nj0KcSlCSobH9hmSiYgEbQJpWsmxUfY_gY4AHCjghw2qHVdFBKFoAVx2Z-NYynfBGoxAxq-VHSIyKWj9xeZncF0CpKIYsg04dFSCueTpgES8ASwFaQQFWLbUlgczL5H9mAK4ZYyZ83PGfKBRQt1gromZtNGvk7NSpEGW-W_ICRIYoBY4hJAg2_gexbM6wK-WfJwBZJdp-SQpJ_IpIQK8kN0qAaUnKSVJqkdSBpE0haRAKPiNYUBW_ImTDcYFWKcBZ0mG5TR15W9dAH8T2rHAapaEEZN_D5Y1gAMuC2BSQsZDTJoghCvpvgvYWBTusIhHelvSWRUK5E6bJZD6PaAbJGFwC44vhMLDeRChLMTDIfKmjCpgp28gQMs1JRjQOytcMuESTHyH5Fq4aSxFTlcC7SRkzhMcFNEUWaZLEAATXMW2BLFb2VRZjNqEYIBw2QXkoWWDKejhudUIOIkAXAjTAlrsOSIwx9Y1dTS307yPRXxxzA6Aj4PRYUFiJ2p8cNwGHMtzuyfYYALmeYFKDiQ9gwlIALAPqDQD2Lyl5gY8GOAMWKJYSzs7YK7PQB08lyGSEAHjLABdLulRJdJdEDRCwkHcN4bwCUrChhQ2YqySMHIrwDLIzFFirpW9nFG-iJl00Q-cskcXzKrF5jALh8HWLZBYS5BOnnoBoCBLrkO-IEquEsRsyyOMwWbBwDiVmhR5wgG5XRW2pY5LlGCPRr3P-RxBYA0EGrF4zDCyDRQC2R8EojmXOKFlY4JYNMr_o1gPlRwZIN5FuK414gMAYnC6Bgi4NEUQKwrCCu-hgrD5SwDZZCq2UaFMMq4cggkvmA1Z-AqSwFf0qyUgA_KoNXtiUpZVwB-EpRfmPuFY6RhD5kgHmOsqcVwAXFY4QVZyGY5pK0lYWalUkthLxDelsqxlbCU-qBLyRQyfQK4Aan4ciSDKzJQqsyCsqT2JSoQLsQtDkoQo3IGVTiviHbNYF2SeBdApeQZKBlcQyWe4CojCgSl6BLsISViIUrw0VK2YDSuSUgB6VLqlVTiXWIlKfAIqpVTiqjXMqjVcANlVyiDgcquVvuEKLyp9EqKJR0qyopSrLhyraV4ahNSCldVMq1V6a_gMkHjU2rK1SajlWmpEnJr3AnK_nisohWiqoVUwKVUsCtUVqEVMcmCLYTnAGMS1Ia-VXSorVUwq1qqmNemuFEwQjlZxTibEQ1yWJY4lgP6uOtexTrElZaiNcqoNXRqBE6qgMSxElm8dMGI69BrusOQHrLC0649XOtrALq4hKa1tRmpTVZrYSyyKZeTIlUDr-AgGgVTzElW9LG18619WGsVUwaP1zaj1fZGGAbq21vq5rPnXeXhodsepMhUOWIbcVCKZch8vvQvlZ4yK6FFMrSyRQRNH1RMO1dKRYi0NXAnAOwFDJCDoJoABSf1YczM414YQY1boMZwfV_U-yf1WEkSRrwvJ0y95O8IJiEJRKdMszN-T8B7V3gB6iQG9AeiE2fxaN6zKanVVmqkakK8NNjMZq3669LNdDfgH6XYbMMEgVDLhoww4Yv0XNGhAzXXRs2uB6Gl8BzSAB-EBbOGyCJZkEXPCShqynDIEbTQzJ1kFNkCJRJwzjbFhneMATRDkXc0pbMAHwJMn0HhpaER6YmLJrWHIWHxcoSeTMiTEiBaaYSCZE1pwBQpm84tS5BLceCUT1bIEChcvrCT5CxFfCl1XRF4pRiFkFmayYbT4sQr9M6AKQCYM0zCw6kLAZWs8BVoSCZlOyKjFCrhjAXqaRVmmreNM1wyMinoRYJckhVMEgBKAHgYgu7EQ2mdqFpmgBEogGQuN5tyaI7dEhO2PbpyUA8he-vu2iLzA32khIsEa0FbJwD2xCnYhHp6aRNHJM3itsq11lqtRAWrc4IGQJlXEOUNLZtvhq15FtAihNIfDHk3KGNG2xrV5u21qbKAGmxIFpumZm8XtkCH0WzEHQ-iwFPCqZHwvtVELOdnZO9R6wXD6b1eZW3ttEDR3CIXGazCHYDuQJdafZShfgH1s5C-E-ylAe0ilNgiUgwYqGZib7j5C8APAXEkYE8CWDkLIwUATkDpDN5QA1dXuOELnU_iYxfeyaILmbzF1Hwt4MJDHVvCx2UA0tSy1nX6L2B4K2FXOujtEB53cKw9_Ow5kNGjnMZmyFgXANaDDx0VqNl8A3mVv51ebdWsupnW9RHoC7fWc6NAPqHMX2LgyOavqCzDe2AZVNFJCqXY1iD2LHVcAFHWHvPnGd0CqAcvVgHsVqEMt3yqIFgHT0sQeKhO4cpQp8gy6kCHOmPZQt3Iu6sMLyRIMDkiBp6e9fe-xThtMIlqCusJHALgAbW9kOVLwYhr2XQB9BPSLCK1TAw7K3E9tIgfqpGCwDF6QUVKg_chDX0n6-yKa8_bvUv3X7hyt-58n3U7LJh8ckC3khnm03pKYgOwIsmlB2UIHtgHCjPObun3W7qF8-yZOgf51L6vGRalbBgljg0NY446rRVKB0Xf46gzYldRuuJLFBL9-FYjfvUDWIoyDjmHJNPXgP_7hyOyq_X_GIagG-lZ6kAMdzN2Ebd6WB-HdQpLxWq8dOypNYfMCVDqgSsGHaMh2RmoymUKfdNb1AbjIH0lB-WQrvpBRcHCpEeDkqWrDVdBbt3_fBkmprVLAc9v2Bg_DwLWjqBADOFZQXsOK11P1pSwJdntkN4Mzeo-_w5KtwAUQMA0ysGIKvcWypl9PKII9MsCUxHKg8RzkEYHJSSB2EjhoI_IwvauHFgEhLGIjrW11lydEhQo7vQe6DAzIh-EI9IYoWbauZ6c2WiirAY9dtGQR3Q0dzUM4BihhzYzM8o5l3K_9HagA1vW5DizT-wOYA8Q2FRzHOjbjTQ7AFhIDH9DSwHAOSm-TzHrG1yiY2wHwDEBv8Z4EnRzLJ2g7ajb7DYzR1gBgAzKpRyA7kTihpAqcgekAJFF6WHGtODxhVY8kCUQHHMI2D4zAEr0WhlUIxlnT8awDSa1jru1Y2bIT00pqmW9Bo3kBgD7AWjginPb5H-NdHIDB-kLH0aTXbHJDfUUY3JnGP41JjZ-gQ2nIWNCHPSKx5kyZ0BP8BKTahg4xyRSPomk1VJzA9LrN4KGaTApxNeIdUPpqrVpNeFUCQoP76wGNByMHQZTFHtY4CpZg8DlYMZ7kKNhpNcUZBO3GLG5WpHUuRqMJNk0Ux0GjMexWypFjwh3eqIcCNCm8TROgk7HXkORhAhskGHLgeG6x6JThRlQ6lMIAemVqXp8I9QpUXQmS8fp4IVHtBrELJkwZ8HZKZBQTlSDMEBjeQdzN7rlTXqVU-qYYMIamDLBkhGweQocGaUO6v6uemwBKFCjjJi_TYdZMgGWYoZ8Q8KdaPRnZaYpyMHKehPlCMzhR-pT2x0PNRBjBhow4UdMO-5zDnBgs4ckbNuIddcGhVfQLu1NrxDLhwUQ0uvXbtN1hp8QwifTWhHRT1CyIwHuWSZG4j5MhIzzDHOnm3VzKlDV6vQ1BxMNfG180yqSlOT86ba3qFbPPPdm3zvZ_E2EYHM-nhz7AUc_yYC71nDklBgriWZwD0Gr1uYY8xWd1NVn9TLZyTSKdz21gzegZ3hRHozzkXfclCkMzYdbOAH2zSxl012b_OwlILnp6C7TUHOJmow1F4M-wBHMvnEmq4HbIXiEBIrJ9F-2jVSoXPFlE9TCmuehBFySBVGGgM2MBGOUGBwIVyJSOLklzG5l8U0cJb2h47b4PYul_Fr3kJaW5jLOgGUl4odwWXRoUwfUGNCqhm5zwFuWy1AJ4Zyi2sQ2Zy6DSmAABFaLA0HsAABpBnGLmcDRZcklgZwJ5e8t2WAAjqEA5Hxz4A6k8Io5fawiDdLHLHvEzncx2XvMbcGIrREKvd5TccVpBZbi8R1Je8pVqAeVZhoZB8JZ4Cq6krITCUUYYlMhnPgMtL55cq4Ky8ldvzW5Vwbljy9fi8uTWfUYViK9FdivxXErE1u_KuCKtcsak18bScoE1hPxVLujdSu3KsnaWIIJcFIKlc1RRwB2swPADdbxLaqRBQ8w7voEnnRwMIVlTmCIOUklxgAZ4eXtEGqqHxgbFON0ovCdBltqAn1z0JkERCBFhQjcEecgn-vjwXSNpABPqCWCY2wy7paG86dQC42xw5etAM5rgBw3JACNhuEERCJhERBwlQG2OEsDyJ9gE-y42zfCCQ2BANBiBolUkCA7cTIAdG9pCBtChoAOoOeFTaaiZz0YjNlSczaPhCBK5icScenipsPIUg9Nm0lQHTx_XV5JcZbUVXbor1O8GTM3msR3Sj50rGQEvLJltsCBGZ11qAMUFXCKs76neLzV_QU4laZFClqmG7aYXvghKa81o3NRwbcZLb71m24yCdszRVwjt52zdaDtUwPbTm1hglVE3ua4A6vYRjADX4uMRSBSKFMiPSR4My5fQfk0VoW1HFA7j8kO8NGErG3lblVM-AAgybpkte527yMTURTq9YemIpAEHGJzqghQ7NREaXb-Aojh7_AXJA0H1AT3oBdEZBETV8g_GteEifgIgDnvWxx7tqZe5xiHs72QA89_UMmGTC9RBL9bR5T8RqQQBEg7gDpkonvuP26I6idpSoO3tz2F7F93qPwCUDr2fx390-3vcoCf3wJ-dE-2fYvta1oTR5EeT8VyRjgCkbGpRNqAyspSxq2wXeE9A_sH2v7SAH--feTA8wAHigIB5vehFEPQHY98BwQ8gcgOYHF96-wg6yBHBLAzkdwEEHMBKJOH3DugPg95WEPoHv9i--Q8odt206x93e3Q4gd39qHojkh6KmhPQQLQVUPwOO2FAjA0HGj-IAUm0euAhHZgiANJiYdiOkoEj7JVI63s0PR7Qofe8I8Yd2OxH5Q6--XvRADM5wSiaXJQGyBNR0QLwYx4fbMcuOSHVQ78JI6TaKPZHDj-h044UcyPT7v9pKFfehMl98gw6HFPqHgCZOjH8j0x8WHMfn3UnVjjezY5ie0O4nBT2x0o-TBJQ4H7AEvpfAo5KJmnaKi0OXvyD5BgnIj4h_U7IeRPrH0TpJ_Y8eTxOTHtT_p0lADjQnrAVeSBPwhxTWBKAwwN-ycFCC9OJBUD6Z8mDKfAO7HYDmp5U5gdJQVHTT1wNsD8AnAcU9pDK3YEsDfd4IBErZ2uiKdhP6nljoZ-U5Gc7Oqn4z456M9_vlC0neyXeG8AyDePhlVEXHJIH1DJBZ4AgLySkFeeFORGHzkF_s6oejOjnDDxJ385gflDGnY0FIO4E_bZPfyBAdQBADhfRB-E_CVF6E7qdEusXFTnF3I7xdH2CXwL2Z009_LmRWnqKDAEICsizYmlaKxl-8-Zd7PvnBz6B7i4SdcvinyYcoec6qhJltgOjl0Diiqg7pHscAWkQFElfovmXXzwB8M6ownOFXkzk58C7cfQnkH8wWABaDATbBccLVW5zAC8A6OmlkQSgMa-5fn3KhrL350w-teH2pnyT8-2lFBfWBUHzkAUIFmWd-AKICbtiIswKdMv-nMbkN5a_ZfVPOXkbmB2lEaeOvNHaKnFJeEO6oR_AAb5VyW9zdTorXHLxV0W9_tpRzn82HGSkHGfVwlEECFykQACcZWCAdbj5x28bcMZm3Bb1t7a-jf2u-XLAAV607AQeRsZkQMd3U7SgRPzXPzvNwS_Dfd963aUa-zeAXCuALQZ7pZ0oktwwQ2InYTd9m7SiTvpHB7ltza6BfRvCh7jygKS_4Sau6AujkQM8DHDll0QcAR91G-TBpRChL7ot4e-cdKOkohQ0F-eBPLUg5Q82P990DacwRgZ0uPupB7PvIf_7sr7F2-5ncfvA3yHxp5eGZR2B5sFOB0rABYA4ojyV22AB_CoRQAiPC9mj3B-ncAvC3c75D7y_L1XPQgV-iYD6G1VoOwEKQHR_0ApwZvOXWbqN6J4E_5uhPs7z98h_Oe5QUHvr8yDigM-XwjPI4Xj_qD0-aeKP2nqj8U-Q8Lu2Hj2KwG8BBs4ebwfQHqqmo1CSBdQeAfRACnQCSAItgudNqzYogU50tmbqV8Q8c8AOP7C2mmgPaHSKOg4-oSslEH4Szgr4BdKmJPd5Ez3B0-oKqEvf37b2cUUT_dyA4y-459HOXwF385K8sJQXOi4IVMFyThA8AVeZ-5eFCCauV4dESQLnXPZoB8nqn2LyAGa_RobPNXzL_V9JeNeavVUFhI0_1AMhtgF3BT2g_PB0cFw_rmLya_4DTfBnu7uV8d_m_ZfFvwnpJ9N7E9XPqANzpRLq-sXihB6YASD3d9m80PavWXz9rl509NeVvIqa-7q6wCwBkgkVtjfL3sZKJ8IUAbYKhD6qffgfZrihxa6be3fLv_3pbz9-B8LvkHA3nFFkQjAihqAKPlhDu_R97vMfTX7Hw15u9A-WEJ76E7NgO7wAZtOKaCOtkOAU-Qoz7sj2y7p91ervAP-z3j5YTfv4HvwdwE08CDbBn70ucifXEuhKQuAaQPn7B8F-hufv9P674D-W-X3QXqKKAFEDsDoOFwZvin71FI9nfyPc3kXzj8Z-G-QL19mSPo7wADNn7ieAgLEe2DW_Tv1P871N719i-I3lT5r71F5duQR4VgZxClNoDZOuAmAKAIa5ReHemfUf77yfd-8Lew_R7iX_ymhPu-rnrgbqHRC5-wF_Ao7jPy77R9VfafDvv7wz4N-F-F31gEseNNaeRWdH-oT3_9-t9U-G_U7rH475b_i-c_K33qCz_YDagjgZ4vl0IE2_ZOpP6gMl9b4F92-hfTfvP7j8n-kPY3KbtjXBBSnQglEbgQLNF4m9HepvK3nmLb6D_2_dfY__XxP-O93-1vXgWSNe7ARC6BwI7inz5hs_C7xf98_RD3f9SHXl2iwiAalwwBn7YiHa9yfWvwl8eYGVy38dfHP1D89_CAJ5hznV1w30E3HFHwCogBN0AD6_DHxH9hfZv1f9w_W7zv8F3Tz2cRaRHYH6B3NLnyrJmA7YFYCNfZAP38eYHd0S8kcF5BS8i7WexAAakMIFAhUlNVgK8y7aWkHQakYQTy8U0cr2HslEYf1fcQHCQPCAZtbAJABzwSK2iw3fN1wEBuvL30rdq_fNgwBIPAwOixgA8QMkDdA53xodFAhp1Q8iAL6HMC4fC4DoA7qdP2v8_nVwPv97A7QKkC9AoILW8uAdBD7A2nWzgyB6RSDwiCQgxwJiJW_E-yCDeXZB0_hWPHxw5gU_YIX8DFXNTwyDkgnQNSC3_cQMsAkoYoVBcsPCt3sAjuHFEit0QbzxOABAGYESCqgmoNKCwg5wPSCugxpziQMAByQ5heHIYPQARgtAE6DqgwPw0DI3UIKcC0g_gFcDihXl0zomWYdH6A0HdYPpEYIZlGmDVgnoMWCKglYM7cMgVwHag5wBoIr4lEEb1gB6RP4ASAr_IoMm9Tgo4PKDaAv5xPFpcG8Gvtrg5IBO0TxVZ0hl4ANPxxQgQ7LBdADXLz0g9vgm8HeDpAioMStpca-0sB4_bhyacxwIQB1dZEURHG8Xgm_2RCEvA9GS8OSQeygcg4Hv1cAAALSrxQgF1zngSjMkMC0kRaextRB0SK2pDfaGQMPtV7SrwoDNAmhypDaQiFgZCWnPQPPBLAFEOhMYADv01c0AZ-wwcBAWI0xCi8GwKlD7A4ULpCxQ-ID0DOQsBHv9QXXCAWdjwT3xHB0HST0tDIPfUMNDNQnRxFD6QwlF1C-g_gBtDXfaE2gCTgCv3P8qAG4DT88Aa0K5D7_WYIFDI3LUNFCnQpkM-CQHN0KgCiAZyCCEcPaAITDZIQMINCs_bX2q8hQ-0O1DIwvUKDCi_dgGiwS-BNx0dYjORBxQCPMOQKA0w-_3ICafSgJjCcwiMMZD8w9MIXdzwBN1QBUrX8m9CGgLsJ7CoAFKXfteA10ILCh_UMMqdwwx0NbCXQkADdCZ_JX0CxcaPIEdBLA570UhnATYDuB6RZ4JMc1PBcLtCaQ3MNnClg-cKDD7_a-1CB1vPAB0dfkHFFvcRQNP1rDggzMMb9sw48JbDxQucJtDDUaE2vDCsb0N8dcQHYBfCQwhsMFCT7acJ1CowgvygiLwsT2EAOmDLyegyXCl0zl-gQbAEAXwtAMf9t_D8IdCYItsL5hznBoEFAklVpzIjQ1WABfD6w4P2gi8wn8IvCF3dbwJVQgQgOe89XDIH8gXgZyGfDRw88IND-Ao8MIjGIs8N_CZ_fUFL973Jxmftc6ciLDlRgVABfDN_PCIwDXQ5sJnDvw8SIvCpfNXyogGoHICURRQWIDwBDIl8K190ArMKgjNIoiKYiDQ0hzd8iAOxkCxfkSQHyQKpOAHQJCwJRA8jEgLyLxBaw0hxEiTw7SIqCbQlh2hMTGS522DXAU7GGAYAf3wEiIo3CLmCpw2yLEjwooMPqdr7aAIpxNgDiPPBUQPWxFAgouiKf8bIz8K0jnQnSIciF3XUFL9-_e90r8AoR4Jojko7KInCIIsMIyjTwrKIciZ_MiIohU3DEN8jeZbYEeQgo1SLSiknBiL6jowoUKDDUnN3wwBccXwJxQMHCMD3CQnSbxtDSnN8MbCCI0KJqj-o3AMacwEdKwrD-3S6M2cOog0IacQor8JOiFo-CPujO3TJ1JcdXSIAyBi8WsLOdHo6qNgjwAwSNwCF3aAPe42PLoESAIgEYGUi7o0GIBi7I2qP4DzoobDiBUQFdzRjq_dqICCYwoMJZcDoyCI0iqopGNOjyhXlxgBy9ZrFkFvQ6LDRAtgQgFrDyYxGMyiXoscINDVXa-1nhUAVAD8BsTI4AtDriSUDwImY8qPwjKo0SPmi4I9mJ5gY3a-xgAMHWSB1c0YFqlA8P4fiNxjFog0JzdCYnqJJjWY6WJBiS3XKI0dqAHt13gvo2cDwJ8Q_cN2igwht11j0o_WKljgYm0LSheXCFFcB0rCFnyAcUXCCdsyJdAFrD3YlmJdj8XPGO1iF3HgitiogIgLNiN9YOK6j6I3qLCi2Yo2Jn9osCFjgCcUTOIJUVPAkL-c3Y6aMnDZolOOejDYm0JQ9coogH79aRR-2Rc0IpRHd9ZwPIHzjbYm_0riH_GaMLiy4oGPDitYnmEKFGnIEK7Dn7KSPYjtovpxBih40ONTiK4oMMKFeXDvz2ROYeC0LZ4gfTWghkgHxwhZPfUIBSlawxeNnjy412IXjznaXHHZbANB1KgiAGzhxiC4iOMHixY9SPnDe44iMKEWIuREi83PbJy_jogNz0Pik4iqOJjJYueNPiDQmoPcccoXeA4iqQ_UC8AXItuJ2iO4oMO6DHY0uOdiwE_uNeieYYoUadrw_v1eBuoHFBMizEY5D2RXARIFrC8E4-L7ilXAeNWDr7MBEvh73LJ37cWE2IxtjkEwuNQTUokuJ7jMEk-OwSZY4oXOdrw-lzL9evEcQPj4Y0RNoTiI4oU_jhgVADX9MwMeMt8RAAMNkSgE8WJATjouhLDDUEmf1ddSsOT028csLhKnibQ0oXkT7InmHJRagyoHWjcPCMBHDNYnBIcTbE5GPJRGnKkIwc3XLh2J9L4QrGwj4YnxK8TTo8lF5cwEdABSlYknDxiS4kmRPcSZYqJIiS04m0PJRO3B61xwq8c0PL0TyXJN3hawrJPST54sBBmdQXVxAU8cPewC6ByJBILujKkspPASZnXxJ0ca2J-xzjSfAoLTC2klpOETBImZ15dnPH4kiscZILyaCJky-CDimk8R3QSBE0BKET6E16JmdznaLFpFPfL1xgBnIFKRxQGgLAHGc-k-pwGSVk9mJmcwY-MIFAJPCFhzirk2-LpDjkgQJJDhA5kNEDB0HghFB8QHYKXsS7Qr3ZCg4MBEtwyvBdD5D1A_hJAdPkwsB-S5woFOTAq49J2FBQPVp3E9ZgDtRmTIPOFJQ97AqFO-TC8PQKxS1vTsAmlOfJRBvAlPCDwEjCUnFI1A8U1EAJTLceFN5dRQPqjoAwQ4yNZTUADWIfiaHLFL4Tuoyp1xT2AGFLPCsU850iszwLx0wid0AWPGSwvTFMZTChZ-OsiCUWlOFT8U2FMVSWI3mQSpxk4JJw8sPHR0_gFU-FJ0SX4oVJFSKguFMgToTIpXBdifMcH4RzYyeO2dIUxlLQSrI98JPsLUjVNFT3UxpzRCdHD7gt9-EKGLaiXUt5xv9rU8COD8fU-lM1TkwRhPScLgiABs4-3cvUgA00woPbi_na1P5TY0tVMtS0461POdZsJjy8ACSNB2JwqIUCG5Sc0t1MTTlUr1NVSvk9VPjS_UxNIXc4kcyHyiLgPl2gAHSHFGpCggcDxr8UkkAGtSzUlVInTC031KtTGUnxKYS0VHIP9jEgOtO4SG08JIWTIU2dPbT505MCiT3HH0DyBr4qiBSkuoDIAtBxQF0Bs4TUtJO3TeU3dJeN90rJNYdb7DhzCA-3cUDYAB0u9KbTDo71KfSGUg9Jn9CfHRwtBd1MyFGi4IfoFRBmUYdDvTi4gVKSc4059OLSF0vSLhSihdgHtJflJpxgFk-beIkDUAYJQqBJAdVw8DZEO9Msi1I6dNQyGU9aSNCrDOADaDOZbwLcQWM4UA6CqUy3EYyaU1tKLTDYoFPWkA03eAA8vo18k2BnCIvA3ceMkTP4zoUudPQz1pMTzpdeZRuMitOPRH1YyFUlTIUy6UtDKEzeMkH2TT0rARA6YlfBIHN9LcPAn8gO1IL10yRUYkKS9Xk2unJCKvfgBJgggGtj4xfk1kOZQAUzzNaRlAiwBMcwU7uJAcvM7oAOI9A3KGcBp_UF2Qcova8G8dxkrpR3RJguGPHS4shLPsCosnzKyBYs-LONjoTcZIkkzY5Z1lA7gddKnicsh2M9SAMzzK6Bos3zLnC6sxCOGBNvLoCHTq_EV0g92svLOayCs2gCKzp_PAOXTFQobDHBOM9oP6zis_9KJiQAfLJiy2s-LJtSLnfIF3gSMxuI79QUz-CyyeUk-xyyPU2jObSlsobJWyzw47IDScZJMh7cNoiUGxBw0ubN6gaEh9KOyLs1rKuy1speLgAsHR5HuJKw4QB3CH3ASOOz804BPOzvMy7IqDjs7JKpcU3UlMzoEfWTOyy1shbMjdlsr7Nhy1sqOP0cufTROsIk8CNLRc_nY7KnSzsrHMKzVstNFBd5eJjwiAHUm9PiAXszxPeyms6HOxy04nLMXTWfCAFrjSUs9wmBYATYCIBWcmNMhyqckbJpzD06E1dcxwB0jYTv0ggGchWciHN0SoclrOpzvstNGyThZDpjY1TY7hG8cQrcDNNzLE11JocecjHMqcpcoCxxy00Bdw0c1o2AGvd_Y7xVZyKcxrM1zhs-3O5z4s8lEkjZpaJjihbnTsDXSjVWZLRy00JDOD87corP9Qf3VKz8Bl_JRGaDhAYK1By0c_1EGzOc7XJxz-YaJO29-yZWKdtKU7PJCh1cl-PjzVs_mDODlPKIHvZzQtwCFkasy3KOznAOvNzytc6XO-z-YFiIuCIXEzyNVtgIIjHTDsoLP7zu833L0C3LMBCPScvb6Chdd4MyEyzPvWFGcyhAsLBEC0vfgFC9HsHOjzo_MqewCz5AoOELQQUlewq9wU5DL-d987OgcAj8ucJvBosXKFPdQgLpXiARwf4IsDHIe0gwAkA8dJfzcoewPvz02XOnmAJQ-wHYRQXeSMwAXKSGLiiulK9NGCxwGwOgKZvdnP0Dq_B_IgK_cw2MLR2ERpxvBSFOpIxD8VRP3P9voj-GsV989AqILQCnAvAKn8s8MILK86-waAAPDiJPEO1OgGeyBItgqrzp0sAsPzICucLYLsk8xLQcjyVwD8Ah3GGIOz60mhwkLGCsL1EL8C4GLYKo46mKViNwh0B0VaEKPInz9AjAq9zFskQsfyxC1gowKZ_ZwAJVKEuwBMj64JJD7pbOJoIgABATV2EAjCpQpPs2C2PMhyLCvAqgL2EPSOghp7DtQfCk8UYHMgugegpCgaMiLOUKmC9QpCKQoYoWvtxkjEDQdpcOr1BodMgQowLihVQoPzLCjQsGS2Cs1FKy2gC0Ch8iAWOLTyYIIIA2cRgeIrZosCoIpYKKgwgsvD0nDwD8BnEHDwfBwgRIB0d6C18IazzClIrKKQiv8Kaduwur3YCbgDq1pTxiiXI1zOiqwu6LoC1ALfSR5dgEisOYKZKIBSXcYqEKzszYvKKzkkwpAtznMaEbyuVGwCCS6RDIDIkxcwotuKSi3Aq6K04nouMTrrKsg6TnvbIBYASctTz-Kvi5gq2LfinYswyJo1AAmjAgHFB0VYgMEsm8eixIohTkitQpmLxCnYoyK5crAB_ilEMaBT9TsTAHGLiijoumLgivEqj8qk1ACJKKIdgHsUxwUXOZLbghOW1l6Cy-0hLUiuksci5nIWS1c0HSwBghNvBzI-Lgo6kpxLaS6wqj9eXVxAG97INB3mwFGH4B5Lzi73MuKQinKIdd-vbLGpccUEK0ZA6AJllhieSm3KScdSgUoXcHsfIGX9WS14BxRHASACIB0ECiB5KzCyNxtL5S6DyciPfLwL8jC2LoDiKpSgIo2KaSn4oILoC-FJWiUgKgC8BK3WcETKDvcdMIL4UvktxK_Sgks6SrncaV2ScPKtwGBx83wr3zYyqksmKfSqMuhKYy_qFQ8s4hKDHip6QtnuCqIDIHoL9oqssqdfS7Yv6hGneXgWKw8iqRvtbOTsvWKX43sphL-oVTPuC_s07GRLDuHR01RcUzsq1Kpi2UujLNC6ArOdWHPYJgA2Mzz1BYuPLjM7KrSu_JrKrin0ugLyYphIBLAkyzM1QlEXKCdSAULpXoLmYmUtKK5Svss5joTdVwdA3IdgAhDQaL6MAqpgECvLzjCwgtVcsyn8unLKhJhPWdnE4nHKk0Sm_xgrvSnssvKQi8oUkizQmgAtilEE0rYhbo9MpvKIyycpwq6S8oT0jIrD7gv88EWeC8kKpL13NC8oueA_LMS2_JAcpymMrOdHE6GUBzcPISvviyykwoEq4KrcoqL7AM50adkwgUFYA3gM_3mx08AVA8hj0D70KK5KqStrLtys5zE9AsLhzYSbwLqHX9tKmZ10qrynstkrdyuXMvg_fOkKICHK9wDdcIWdArOdzy3iuorRUtyyYShdFkHL0IwJZy3iwKqYDo8uHQIDm0qUty03ysMUkLczUvY-0BTaU74q2LEqv5LkDQ0D5JboeQ1QLXssSwDK-S0q6ypQz7Afn1BdRQCK2lxmkUUGcBcIJtG8Q9CgITwJd4aKvHS4UCqv0ySqglPKqSssVDGg_KyK2lxdQBoGJ8BwAoC8Akojqr6qJyujNSqoS0qtzS-q8VMGrb8ZwBvAykDzBft9yqCvErOqidywLcUnqthS-qhdyXxqkQ0FuD4gbBH2CqUs6u6rFq3qv58Z_SKxNxdQXUHYARq3UBqRckWFCaqSYSkGVCYQ-6perHq_ktFS-quiulwAAI4aBOnMaC-jUYLsA7LQamD3Brsyq1PKqEUosJfyqkIwLh9_BPELbTSyjdN5TsaruMKqW0_sierTqhIvkr9Qc8RvADQXCAJqd4UEMhdMU7Grmqzs46tprIahIt5dzwfUClDYUE8UqQxqi3wFQYILmsFqMa-CqEzsa1arFxzwTatFBtqkb02DQiRQrJrvUpWvlrpK64s6qP46-zFwwEXUGcBaqtWu2qNHJPHxpzSnWqnjjarCpQyFqiGqxqEimfylDhazavntpcAtCBz5gBQtlrChSivmriq_mo9rChPSOcAGgVvW9r9QG8ERrnveEDgBNvEOu4qC0iOvdri07GtzLY61vThRiw5OqPId0Ab0lKZqhIsrLTs73L5qc6xWvSLag2_FFAk_VGsrqTspIqKqaa-uuBjOqvBMyLxWEGRqQTcBoF-C08jmHMh4AWWrezuy12uzrMa3OvSLeXYapNxEa2XAaBnAHOJapBmQAuMK-69csjc66heobrRE6-1jJhq88A3rIYjj3LJhgSaNBq5Eo6rdrj63uvKrFE1EOcBYURKzGgk6sBHqQNw1EDN828yNOWr0il2tzTn6hWtfr0i16uHrmkXJF1BSkAOvQcn7IXTddoAaerDreayBsNrD68qocTr7UqE1QqofhGiBiCdwv9MIfWWrZzZ6iBvnqoGwZM6rec2f1TTSXAkgqyyU8Uoh8Sa6hp5ra6nBr0rGG_BtUzSXcMG8dHw8MEaTK6-9Noad0-htwbBU_BrVdOsrVxw8qwinDvC26veqUaDawRqNrZKkF2vsgQ7oHmxz2DholT9HUlxYAuapKExcn6-Rr0a8G2xsadh6i0GcBxcHNELrk6yKz6A8imxoJjZGx9IcalqyFIMaRkwatqRV6poOiBuvfxrQDBA-Ktcy9yJKopD-AHYJOqeQzKrZCz8tJtyrmQ_Kv5CeKmh3SbI6tOMEFLAP4MaCTtPAqsAlIl0rzpami0oEjym-wJKae6wZMtxyqm3yPSVc1NJk8_YroEwAMAFnIEjOm6NEpqimk-zaaX6jpq6bGnewG8VlQyFxdKXgcD249IPMZpAtWmrOlKbDYzZt5cz3AKGlSfibwMugFoY9A2aumg-sqdpmhhuuLNm85zcBLodwD8AKE7eJ2C1wxyCqhfA0GgWdLmu2m2bNyxxpuaumhd2cBFPStIwBsneIGPBoQp23-beocBpAdbmhRqScxmuYp99y_AoJdKLgPat1rcmkKCACsClFuBa0W8qt2LWfTIDTTBcNAGViYIHj1GbyW65rRadm9pvubyWx5toAngrlN5kqIIJJCU2U3lq0Tx09Fq8rim1lpmb2WwloYDmsyqBIVuGm92FAz4R7H-bhI4lola7myN3RbQM2QWxbjIq7XiDomR2vbyCW2WMBbvy1Fr-cxmy-1RDNgIbHYc063B2aBrqlj13rxK61ombg_ElpCbim8qsFL2AXUGcKwqKFpft30r6u4j3APIH-bpSwJqmaNWy1uRa_W3lxqaSXKvAGKufQZv8ACikVqTbzWjJoqDrWx5qwcBmKhDlBOGj8kSBuPGAEkBwWgVuGa5QaNrFa42oFp9apm8quWjSsyGXq8jIjyNsBvI4VuMKxmrsprrFs71r0Ch2xp2lxcnGADMzKwvIIXACg2WDYByyKtv-aHo9Vpbbx29tsQjE4BcDeaKXXds1Qt4tduZarW-NtJarW9tvOcG2YUFfoX7HE1BY12ptrSbz21toJbbG6-11BJPfKOEB02JRC_aCJEcWFBjWkBsTaRUJFvFbN2ucKHawil4BWBQ2xByOASGscFrTlm49sZaRUTOshyx26DvbbcyyKxIy4ANhII7_IhDIw7qgvNt2bgYsZsMaHXMPBSA4W7x3yQCgRjv-a7G2NpfaoOs8Jo7GnGqCIQBUVP3iCcQtADsA2veILY6-G0dtfat2ioQOaJQD_MUgPmslPk6x8nhow7Py-QASaA7aOnWBmtbu2h1oEJuzDtBFQ-Byci8JCk7sMEY8HM7ZqPuzOgqa7Aq46Kg4AvfzP8i2J_ym4ywP_yvQyD2ALyHd2wc6cOs8PKbKmivmqaGmiuFhj6mkwUi6QO0nJAcWm78AC7Jm5YJSDEQtOLhDQugEOaAIQkEMY7wQ4EJ5jQQkGvHS4Q_zvDRO61LrKD0uw2ORDUQ9EO1czO7EJTqFcrYMg8iQpLoq6HOhYI-CCCwwOMC-gMwOcT98qwJ8L8W_QMMDyutOwc65orBOuLJQ6UJhA5Q3EG9ClQlUKa60y6Co1DOu6bpS6fcmHLTi58hfNJcl8rnxXyPAi2CmCBIufKm77Ovbr4re6vyrlyAq8wCCqyS_duarPUMyqiqB2_atiqFAdYASazeazqEAzNa-CUtJAUahwg1LU63NgtLK2C9hu5P2D7lM4YOBlcuEcO1-VyAb5rQh9ASMEAQY5bjFwwPABNjlNZMM3iSMDIIXTh0BWahXx7yIIwHYQ79CIAq0agR8Eg1MMaGFDsjbcO3fhsKKchB1CKKGjIZLEO7ByszdDwtRBzwdzTsUHEDrhMEhMVTA_FNMXDA_ELtSbktR4eRVkgAP4C8DYDkVOeD81cvJhkC0EgbnzarQtRzBzsU2RJlh1n5IwR_koBFbhsFteyXr17-GVjSN6AtShn1pze1ygfoQtG3uYw7e1Xvl6mEXywIzCBLXpeQdeqXvc0De2zUvp_NVzUc0oAPAViAy-P3opwA-63oEJdCO3p0hHgExwIFLBawRj63e6Xo97z6OzQYYTevum8FZwXwS6opQLPst7A-vPrrtWMOMlj73eyREVYkGP8giZYSQET9J2NGEEFB3IWMljJETMLDN5liAoheYTFFomLBZqHvsr6YAIRnec69QzSsQX0cUAZB0YGhnzsntZbi3h9-nK2vpHqY_sN64hR5HP75bSJV2oD-inFXI9-7K0P63NNIFC1NMMXsP6poX_rZZomEUG3psCAno8ApEM3neB87WhWGRRkEtmhNXAbLQoxapehTCJIGErQAGaGTAf-RDuFiWr0UMSvFR1M7b0mbIzebAcP5zdfO2KYjgPdrGJiwTfvRdt-y4ll1C7dOiE0L6BMm97_Mme27pZaDxC4Bv4IFigAL6fgfQBAFRhjtYUBuAZtIhBjgakHxB3gdi1fdKykoBZB0_pfRr6Gu385upZu156sKL-DCJcKSyA7s_SC8ieQLiUXvf6KcJYBC1MMSwch4FeoilAww-zDFD6HB8PqDgNe0dGj7w0ELTPob-pPuN7b6M3r7p_exhit6v-znpD6T0NXvj4IInwaxoc7fwcT77NFPtN7-6X3tCHs-8IdsHH5aIemhYhiPvMFYBUMVkwQtBPt80a-5Prr6EgdPoIFW-nPsiG8h6npn0i-w-xL64BKwWqEkUJIYqGvetIfr6LIRvq-5_BBoZyGc7TnuAI5NF9DDYMgBnD8HMtL_oN5otX7FkwMiFfunIYQdzQYH86JgemH3Ie_pf66BzABP6fjM_qsHQtK_o2HE-iIBmBDh6-h_6Lh1_oOGLhz_o81Q2SWyjA2NX7EQH87Dga3guBk_J4GE2FDHOEt1OXuf7_-14Y77w0UPuf6TSITShHn-nYYeGXkM3jzs2B6_sT7ycALR9stWaWkUGeUIZFQGZB9geW55BhmwkGOSTHRUG1Bs4Y0HGGYrW0689JAkVYXGPOROGAhnEbSG8Rn-mvoaaYkekGh6dgBzUXkGkZygnpBYk770BlkfTYEyWYZ8MQtD4YUZhcfXrWgUMO8V9tz0NSxGQ-Gf8Cl0QZbyAtAr7RHmS1xRkcGh55iRcFelRbaUD0GaC4-FVs4AdW0WxTBpwe4xLENfpl71gewdj5HBlDGV6QFGIbD71euHhd7VwL0ar6Ah1IZqGoAMYaWZ2-uvSp7hNe3sKGg4Z3tzxIxorGr7Ah73qc1MhhIDCGEx3PqTH8hh3sgFvzSPpnNMxivvj7PeqoaCHU-uocz6shtvpLGohlocL6-tR7kIz4BEW3DQsx5IcqHcxgYYSAG-lICb7vuAgHjGIh5RBhH_be3tjIsxq3RBohZQfoAprHJ0dQoS2PWyzBR-2wHH7gkRICn6Z-nkll15-yYeOJ1hzkY3JvILMZRHH-44jN47OyPheR2RoOHXB7giJQFHapfQAhh4gbHt_HFsLEeHGrBH3zwBDhn-FmBRFCJUEIQJkQfQBHAfW0YYLsH5BEB4gJCZoAORhWICGrBTCbMpCR13CnpsJ04bAm8QSCYgKYJ6wS06loO2DfG2B1VKmBPx0D2sEfx3Hqwma9MKGhMsenHtlkyia4dAn0AcCYonoJvoFgmliASYQn8J0RhpoIgFp3wmSJ3CcQmp6fkZeRdx_yXgn-APCZUnGGa-00mQAMiYmARJ4JDEnqJzvsS8tkOlF0GTOvnspiw8LTRMGhe40j-w6UHDDjI_SFaFn102C8bMBXJgTgwQg5EdArgybVAC0175WiD8md-3IasgHUDxSOBYhpwdQx3BiKdin_J00g1AGcTAYI18TBMkymLhm9Eimb2LeDynn-vgn4AQtS_swoX0EqZys3hy3qAGMDPszAGCp1KeTRIBpAZgGSRhKgQGOpwUYYVfJ1qawx3wQqbPGkCXKcwGUplfRin69AoZDH9GTwbDGWp2VAWH6xkcdjHY0DVBnHopkaZ6Glh8LUi0QB4ck4YlpvgeX7KoRYf1GNMAaeZ4pqcjwrx6B_gECmbUE3tED5tHaZL0EySCdewMpzAf4nMAf4bf7Sp0RkmnTpozRfRFNT6deHypnO3YYBCB8ZN7OBtIdemQZ2mienwMSgBCmtNDrXI8h9TrUL1ppr_mung-lobcG_R8Pqd6teHwfemthr_qHH-h2MebGDuLaYmGiZpVhztQ2YUAi03yc3WOmXJwacPozporGS187FGbEErO7Z3un_px6dOAeBi-jLFHx6mbind-l4dKnvpkUBqnD-v6Y371BlWYv6UJshEVm0p5WcSAIZ84dKm6p2GZemt-gGf0MXp6hzen-ZmlDRnEMDGfsnIRFQVxmvdUTAJmaUX3kKnkx4XUjQexqPv7HqZlaZzGYx4IagBxxycdGHWxxofgBRZkFCVH9p7mb7NeZieENmd-_OymhhZq6Z9mxZo4CsxJZ7WZABnZ3-gvorMVEYLnZUfYcSAvpgxh-mLhrWZtn65i4eBnhoLOeiVjZ02cBnap6Ga_7LZ-GdbmAtZGdZnk0cueCm3Zl9AWYOhT2fBnvZ6mb9nBp6GEKmbdGWd-gp58my3hJprZCM6eemyf0HMZreEcnbyd0YuIr5DydlHzAHyZrBLESeddnt5l9HCmfRjBGimd-hKYDGXBoMdmn3BhxigEvB50MkJw56Mdr6L6W4YptNNSmfGGmhsLBTnOZg6Z5n3NaZmvGhZrLRFmOSLuyF8S5i-nLnR5-2fB065xTT-Hb-mYC00AtRGbtmh7JgcRQH54-ZnmfxeefchGMA9EqIA57oFJmIBBXriGMx2jRAWUhsBdIXIFxIEZnCMhOYXoXkeBYEAuZ6siQX1cEi1QXc59BfznC5s1hAacF6WZfICRuWa37CFzxS9n7GY4dLmIFgEbSHKFjEV2HwdOhenn3IJRA9nnhk2e9n_0NhYL6g5qsf0NJF3odWnI5oReIG7wGOZGHbtYsdgXtOdmdTnZF9OeQWFFwWaUWqsDBdrp2mDoQ0Wy5jee0X-AKucfHVFvGaKwSF5lUeRyFsxdMWqFyxY5JrFp-dsWrMJhccX8Z5xcfldO6hTKXQpneZtHDbRSDK1bJ8Gws63R4XvCRL5mjS8mb5hYjsG35rxYjnBF9IfBtc6KAF6AuVLFHEXhl-KbmnEpwMbvmIRnK1iX4AZYbVGRemJYumkB2XtNJUbHxBV7gxv-fmnYecbnDGwsT-BBtklwBYyHL-1ZFyW46Z0KYH2FnyDaHnel5BuWjhgKSlnBAekleXpFUi2oVFWH5fqpEUd8dyXzF2QOybQ0QiYXIX0P3WwmR5xkZEtg7dYHWA6UbAYanDp4hkARwBi4j8nIBi-nBXL-hAdJXUbaublQHUZfTIGLhnAdRKhzMwfPRCBim1CxuetpftHP4TpaMHqAU-YJ6eln-cjBYyK-YGWrRhftWWaB0ZdAXqhqOcmWAJhZxCR5l1-cWWzl5Ze_mrxtZb_6Lpg_ifoVhtaDWHdlmmcunMAA5a2gjl7yCSMVNX-bJn_5hacuXJCcFbuXzaGqEeW_l0uZeWL2N5dcW-tL5euXLVj1YvovV6laOYQVlge-XUbGmihWHp-kdtmOGLrFxHNWPkapGwsc0ZRWdZ47homAMaBgVGcCSEd-wAB79HvAVB2-m4HnpkEdowwR9YGVHw2AAaxgNR4TnvE-mHUbAB819SQD1DRwS16hiDGlYh1Sp_5A1A8V3egJXuMYleoUPASlZBtyVkICnXshuvTpQ6V6hQmmWl6yaJ1bJ1m2uJ2bfCm6XnJ3pfcn-lufqGXVVsZlSWXZzdZ-AKBMJAfkpVk1YkXb1z-dowVlm1fLHuFgBcWm-FmVYEW5V1Po2n4gZmZCXk5sJYQW05_EwznMF41bzmzViDdunsFoxdwWz1iufczMl2uc8VapaeAEAL1_YGSWhkDDaw3wgB4atELAB-fw2CAbGaF9cZ9DYIhMNrmzmlWF5oZTHOF4wXJn0x6BeAWv14cZ8X0h0RbjH45mBcTnPFvaZA2IlsDaiX1eRRb2X4l1RZUFklvBbSH5ZmhZBR0yKjcexSNnDZU2MgUjcI3SlxDYrhSNuxe2dKNtCDw3aNp8gY3A5-mnaGLBDxbgWON-majmAlvwRb6-N4JYE3bNoTekXEFyJfkXxNyDeUXoNhJYwRi5-Dc0XZZ9JY6FQ1gWamoNNmja3Wr1oNfJHjN6ja03IlIjdPWtF89do3Z51CSM3yAEzbi26NhbTYX6l2XRI3TN1deM711_QdI2ebPm3Ntd1s9CJ6D18jXFXb5qKZZmH1pZa_nkp4VbTGLlqbgSHdphKj6GGxvMd43Cx-ddnH712zDLG-t-IauXEh2mZG21pqOb_Xxti3pVWmFWbbmmihjPpKHBt_Qjs3Rt0cbT7I-gDbc2ZtkmdOW7VuIeDnS-g7bvW6Z47djHHN5vunGXNqbcvHQsmsDN4lRige820WI2ZznJNlRaNnycZJe5GTe3keenzV3DeS3aN9TaS3VN2je03aeiNbCx3x8nDYm8t-HYK3pR3sjzWDVk1bS01dDXQZZtdXslbWvSME30AP5LteNHG7OyDXWVqDpYlt0Yb-AFWWVj0YwQsxhZYh11V7rbJnXB67a4WPB_rc16Ft0rVrGox79cbH0h87b4J5xxeSu3bV0XYu1eF2TEHHltrjZ9627TaY-3ExjscY2Rd5jYu07t_QxrHde9fu13xlvuh42FdoPuV2UxrseL7rN7aS6H-xqmC13vF23bHGhhiccCX3tibbbGv-x3eYVu-6Xb77VxmJnQYDlNnamB9xuwDMgjxk8YDVdqc8ePWmFKYcFnV-yPfhmSKZ8YC6MdhiZAASFLgHbRNVDiZ4mgJjPH0m5J-IDL2xBykbgnJJ2_paccKav1EYJsOieL2heEqHj2K9mvf_Hpl3ibx79J2W0lsFBiSZvHhx-vejnDBzvZQnzJirYPmidOkl7QYSBHHslw7QIEkDj0HdHQB0-mEm75c8XDG74cAKnbZhoTeHktGGdrzW74poc_YV0M8K_aDgVdHck76X18_cv2QAC-hWhb9ntfv3IHR_cgdutRXV_2iSR3YXHr5tRa5cvt-3vIwkpm7ffXHVshjN4SofYHxAxoGUFiBcveA9wxEDubY1309pAkQOfxfA5PRCDnbcrHihsRcl2YD3fcQRIAbICP3nBRA5P2KD6aCoOzl3bY6H3d6wVzxIB-TpiBmDw_cgcGCPjFv4uXb4wtAVlRA6sxLxzlYQhw7IGzeAkiOrUHB4g6hjhwKiC-coPJDwoZQOBt-g_DWxpzQ8kZNl5wGvxq0WtAqQjd_TQIODDnbYpmpHB7ZgPP0LQ82WvIyPp14iKTw4fRg5sA5f3BYa_f611CII9hI_9uciq53l4AEeBzd-Uln7qFDw4sPz0ZwH1BosMBAisGgKqE9pEeFI9kYcAdI8yPsj3I9yQIj1_cgPwj5_ciPIDvPpiOV9rlZM6zwPml1AA2cjwkOSWPQ64OnDng4dXjDwQ-oUMDrrwFQcDuICwUAMM3jIPyPHQcq2VqYeSyArjfGleUu2Jremg5xJekXFBIO8BeoMeckWON8aPVV8JBj_PRJMejUswmEDj6YWYN7DmntGn02boy9QGlOUgMVNzOzTYA_jSNT3Ml1Y-T1ErjvVTTkiTD9QnNLtacx2MRRrHC5795po7X3SbdxcTJMAPDH8Oo7ZI_MPCjoEEeokT1I_-Rg53w4KPqGHE8j6KjkI7f3VdJiRyFWJLiRwgUgNtT1VZj1fZWpIAMpVmAoFBcE_xP4KUEs6jgfDinZsIM-lOA1o0fE2OzIbCB2OJhPXWulCkU8e7m46GhmAAb1nfsGl-EGYHsAswa9b52IAEilaYI2Y5c4A6wMZly5eTvTi8chmPU8mYqFXtF2Yh9Hk62OKcBZiWYzwYZTzjZwG0X0BxQTk8hPgCbU46YrV4Zn1ObTkU-NOZtU046ZzT2jW1PLEdQF1Ooz0Zk1PdIKUSmZolxZalAr7byFlP7TvReTOCALWjTP6SPgnUBFNpWaVPZgKaFjIcCFM7DAGk_U_sNsz6bWeNHqZ2hrPXJJ4ymA1oGs55hKzvyQbP1OJs4Cxn9E0FGZ2ztXU5krqRs9JRXJW4fhkhzitP6oaTbbWcLlT6XWyYFz2YFVOyNxZimhizlU5oB7ToGBEQVz7c_XPNEVZB7XKZau1rtKNaaC3O1z-0_hlINEiwDPyYK06AYxoTJQmkdArYzBOqTdQ3_Qyx6853ONztaCtV1eR8-wh7Ti_aK6BAGqv1A80byFAvBIcC7QBw8aC_KPOVJler1kwb40X4sFYmed2k9bBRkUlDu0ZM6uqTEAZZsWAahZZycBrXJx8yH0G52aBrrArxqKRln6pcWLrAa0dITolOwikdon0A6LuUBlG68QU6JgWAKsUkz2Lp3GrkdJGSmoBrKY6zUBYezS1AgLrfxDkvV4sJFXB-AVsQ8yQAQgFuB7gR4AqAPAT6X8dTwNkHeABgL0FNtwiP0hYIRBIi9UkBrKVhSB9rXST4hkmeuXkpjJOOFMkTJH6iipLJeHu0pUAFdjIZ9gDWTzkXQKKUcxUqDE9kwxL1WTCkg5HWXDQ4oLsENl2AclDclI5cNH8hAoDGRFGa9XK692WpQCxckU5TTADlD5FyRwAGnRRMKFNMEYGFAWlUu0ucwpM0G2AcpSVaphmrsOWSljyDq4lAurvq8ylw0UjXxkL7FmVXBGlZpVaVy5dgE6VyhMAGWuELcNFjkMgFyWtk8CEuTxlyAfa80wNr4IgTkIAJOTWlcr6qU45B6LrDXV3CI4FkwarnWlShQZBiHBlVwdK4SgUgFyXKELriHqOsXLpS47kLrDqiNRWqygFdOnYfuFmAwbnjhjszKCyh0hpcG4BmAMVXYE-tobwsdhkESnyWRvXrFOEaBe9Joydtc6dssXko4DG93geOSLQbg0AY8FiLjuPxAwR3LBoAZxosKqrst9Lu4AeBrLw2jgAK0I_USBnIJ4HAobrFeTMBdLK21dAxiaigmgwbiG4zxZMLyW2AnpaiiRvbgVG5mhcgfoCuBmb1m6qqlgbEyatEkE0oyBqGK4DOUD5CUGnBsUde0hx9ACDOiQg9ZhjmBcBkdGFuHrUW8FgDIZaB9Q4gdspVuxgVxByd6bkm82AHTX3ltGyGXW7ZuGgX27hvwemS70kjrGmyRtgicFcBvzrBHqusbrfuHusTyJ60vhUlBG8luaAKmxcuDbZnd4QgbVGx5s-Vrehvluj5M2cG-j8Xe8GTD6O2tsiYJOwTswsJOwrkU7JJtlQ-6BVemWlVrFBnFk0XKcnwGceTnxHqABnAaADSe4FbuTovBhauMgO8EQAL6C0HuWGcAcFEY1-ELS-F87Z2j3E5dZWjdWmeENaZ4EyM-_0ImLu-81xk18uxM4DhIu1P4sm0_N1QmeKQVTpH79--vZe-APiC58dF5FTstMFxc7Gbae3rAUiDtjZIP02Eu67u47e2xeQ-71IAHvt8jkmHuR5KZZmWR0IslToGcadH4BmxMBQAlAlde4EBN77e5DWUJw-5ztj7op1B5tGe5cvvTeQFbHQb7reEfvwdx--Hxn76VFP4376EQ_vy1oR8AftGP-7fYAHtxiAeoGc8__QwHibGK3DOialaXlD5o98Ya7_CgbujVxi7k5BHlkB6Y35TUbnvUAE5ZfkzHn-i8YBNVcCp0KSObfuW3D8VaQecAbu-M50Hl23Af-7YuwSAR7_B5CQayaqenvZ7n-hPs1xJtd9tAJPRGnAaH_gB3vzaPe43UNCL4SPvWH5h-vZ_711c4lT-a-5M5b7xrlkeTOT-5RFhHt9mkftBYp6051Jp234f1WfQHqfucIx79tAuRrgOEpBeR5CYtBmlB8eIHibAL7oHhx6IU4H1w53NrHlahyIon8x910KTsmkuW21NbelOsaaZ8G4pnwx8PFfoWZ_iRYSDNB9oG0EpWsOQ6ewHrRckZZ4aeUUFp9znVnrZ_JOdnle5KNWNvXaAWECWXTcePHu1C8fMHnlDX4cH6IDwex70aEN4iEYh_TpSH4AHIfyPGJ6nuusGe5aeIn5oRufLIGJ6of4nkACyte0V5ZXH1OdJ6Z4T7pnmyeL73J5M58nrTkKeqn0R-q5Snl-7afT-Sp-q5qn69lqfEgJp74uaAVl4EfNniR414DhaA7kftGLp_94enxFD6fCtdFYXG1YRO_Qhk7gIjptryDO-CvLrRSBdtc7kW6gBnrIu89gAbJB7Lv1LzV8juW7DnbngCbVJCJsm7tY6bukDtXbiHnH9u4e04b9x5Qee7xFC-fXbQe8RQ-6VvvV5cX2Wnzs0nh--0Zod7l6Ff1OSGdVmz7n1604_Xxrj6mGbbQUBFWXxl605qX4N9pfX7gV_D5nacuZItIVyl5GEFH2ugg5QHsLD6fl9d5eGe-mUZ8IwHtju5PAPn3u5Qf-7t16wegSXXcZR9d4PYnunZxDdBfi6cF8hehfLcTtRsX5NEjfk0aN5xeA3pniDfv74AWdow39ZYjfGHmR-LB6n2N5tIY3-YUTe83ql_EfZ3vzg6eM39Tl75s3s-6TfjmAt9d1hXsNfrtEmSB-N2rzt-Tm2Ejh7csQZNkx4pIZNq6jAUn9xQmCPr7Oo_m0EHoHQdf63l18beMH5t98fW32obO3Wxrt9oWe3-al7fLgft7fkKH2tVrpy5qXArpQJOCW6H3GEizHfZUHOf9egaQN5afM30N7NnF37RmI_rGCd-q4E3txm95z374T3fWnud-0FRBwBXjeKRjd_Kef77Rio_rGU9-0YyxPF53fraLbJSAt7Y98vfkja975eSgFR_M2OFhvRGfqD13ZKG-xk46QJ3np18VZXX0V681BhmIGGGnNoPYt6EPkFGw-GgJCTQ-KSeoTCUsPnt8fD0ABnB42juHD43RHPohXw_PdhSSI_l3vBkY_raPh4o-uX_d5DfRPxDZzfAMCLfk_qPvub_6l3r_v_vV3zd5fRt3zEW0FeX_sH4_3WdN5_vvtrj5i_FPp5iZGQUUt9UfHLw14F7XAfUHNedlgx8ueovt6BD0KSCZ8shLHkVe6_qAd4jsfYRjT8retP1L1QPFWWt9js7bZ15pRjPu1HV5PX-D-RpYXsJ_5lwX_r8M7AvnlBHfaaej5I_Mv7h5S-X-3h5C-GXw7474ePuN47513or414E32vnL2shNj-vYU36L4Pf2nt9gOEj369jE_T-J75M4Xv32ZE-feRR-B-gSEz4FNy3kb5TMq3ohBcepv5B5m_PHiD-8eFv7B_zHnn9bdcobP7TlW_4Xjb6RfYbKOmw-SHv8Qhf0PqF4I-FJBh_S_naML4wkaP1L7fZ9vhj4u-NeK74E-bvwr6ThwhB76yEAfqgSB_rGN784_-XvL6--fvtxj--TOQX-vZhfqabK_Qfwt6U_awSH-1I_zp97G-X3kw53733zr_8-JZ797flf3nrUqP-tJXbRH7Xzu8dfkfz59R_vn1fgx_Tt2g-x-KcXH-Tn8f9r4RfNvnCVlpsP5D7J-yHyn8HeXP_357fpMZCQC-OSaXVZ-aUUj6kemfk75Z-zvvzgZ-_OZj-sZa-BX_EYOP73ny_1mQ7ib2uf-755_PvwT5M4pf2L4y3zAR-4k_AfqT9i_ZwOT8kekv8r4vfKviH_o3belXctfn3-E90_aNRH9t_47FH7tsm3kz9fHa6Mz4KBY55zc7eVv_QDhfvfwn42fm1rb9NY7Phz_J-wFZz8w_w_mv4Zx3Pzz_hOfP1D53-Tf7ZyHfa6WP9T_fX9n-r-m2R-6rmhPo791nmf0_jj_7_zAFZfyXxgRz-Kvtz86FEKNefj_wvvqV9xfkr8r3ir9O_jyh1ftKNMVjWArJnMcq7qTYbFtQxmvuEg_JkfQifh18wFJt9MMH5Mr5Jt9KiGvM9qIQDUphW9YfmN9bXmOtBpsP8wPtA8QUPN8kAY7MsAY7Ne6Jj923v-tlvqwC9vl791_j79cAdf8-1jt92AXt9U_l3Mwvl3NEVu_9k_nwDr2JG8ZASChpARwDmeEX9ePqICM_mX8FARn8t3lis1AdYxBfsoCeULI8TATShRfgYCeXlYDivloClfsoCAMMoCZfkwCjAa9xdAQx883g4CbAcr87AeD9fAdp0dpo4DHZuA9_ZqQDUptD9H3o48xvsQd3Aa49QPoZ9vAVTAWAf4CiVmoC7dnB8F_rEC8fkv81vpZAhAWv9ontShDZgH8teCh8EXgO9fnCICXASCg6ARIC6flkD4_sWBUgW4wF3h_8UgaO9JAYYCDvj_9EgWS8t3ix8GgfL9PAV0Dc_kCMaXuYCAgSMDUNhoDrvtUDvxDoD2gT4C5gUsDr2L0DoAYsDEPjX9mgUy9MnssDx3sMCtODJ8W_nsC_AScDJgUsCl5msCCLssCQgSvMwgVphNflECW7lZt9tpLtCpm-8F0CAhFND-9QDjUdzfu_sF1oNMB-v0xf3H38w-qfJL_vi56oJ8C0MMRgKASCJrfnW8EgYMD2AMkCTgeIDk0DP8LPm9tW-pGAquIbNycMv9BAav82vuv8_fmcD0tiOgj_jBAPPl593IGf9ygZCDScluJagbLQlAVMCLAKoDDgXF8MQVpwX_hsDTgeYDWgfICBQVcxOgRrwuQTd8eHlcCG_rl9RQdbRLASiD7ARyDBQSqDg-viC1QdcCvAUqCw1obMggYACTgbcDfZvcCFxouthoOsBK7iyAzwPQtZGJgD71LgDNzqY9cAb19YyCQCrfoDpevrA8aAR-tJvoiDpvqP97fuP9IPpP8SLCYtUjlAspHBboI_lPQnbAzhQngT9yfr78XHqEtaZkw9KoGfdy5s_83AbKDXGJAC3GHPsO9vSkmeGGD3II_dOfnd95gcADNAX0Dn5qy85fmn9G_sm88_hX88we38DQR38Owb09u_rhcHDjD9m7sgcnntW9dfnECbfowDwPkGC0fkCR1eCWDqGHeA6QSXgRSCUCpHDh908LGD4wSv9EwcICw_qjMkPqUCg_hT8KSBh9pdMjQkhmmC7jtL9ENvU96_g2C5QX5wjgY2D1gfmD0JvPsbSI7o0TLLQSwSy8Knv0Cs_hS9bwSU9mwbYCtOOWDQAWS8Fga2CVge2DTgUo8u_kVsBnr38vQc8CdfgiMOMF8DmdB-9Dfvi5iTgB8wjoWcRwUiC7frXQ0QT88RSDOD4AP4t_dnP8X9upxsPsf95wUzhSgfhM1wQIDfbPkDSQYUD9_tJ83PjSCT_q79vPoH8wXhf9DwVT8QsrZ9uIWHJeIXttCMgyDQJD8CQGlUDk0Euc0totss7Bk90wW-xMwY1x-QWm8tOJ-C13tKDwhAACeUIqCwAS2CoAZBDOwZZCuwU8xFJFnsFTH9cWqILZaNgq8VLlndlXjnc7rGq8NXnjdtXnDddXj9Z9XjWBLQeYBObAVsO7Ho97QQUDzHo6Cuvs6D7HnGQ3QUkcPQfFDIgZp9ngbQCh_n6CkfgGCgSMRCQUIt8uAeqgeAZkC2QSxDzHmxCdQC08FITT8TwfUC2fj0Cb7jFstNkzxnAdex6wR4D_wfm82_hZDFftBDqvt2CHgQhCtfs8CYgYigGAciCeUHlDputP9YPq79cQYv8aAESDWISSDKoe19yQRPNdwcuD9wRUD93NVDCPrT94AGeD4vlTA4dsjs8di1CeQW-xrwUMDOoU39ZPg-CoIY-CnoX1DmRv1C4IT38H3mCCkIfCcXHh8C6IGhDDFgb8-mKb9wDjhCAQfDRxoYRDk0FND8oX48XwbP9A9riDlIWy8CAEtDyoStDcgcT9RIcRtxIbSDT_hIgF7kvcEXqhDYQezxkwWzM6oW4x0_o_8VqPU9tIa38Cnk1CUdq_9zIVZCYIcmgQwVD86lgqZ9CCgCrQSzZaNrVsEgKvQIocN9UoaN90oT6D3Qfp94gVDC5vg78oPk78ZoW79c7LVDDofT8H_uF8p3iZwZ3mL82YbFomYedDWYS9DeoezDrIbUsPob2DxYdQCRoWxtMoW89ZYTlDJoQrCQwQVCMhlj95oXgxSfoJDg_sJDQ_tt8gvgdDVYepwE_kzwIvqfxdYVX9raKdDNNszDjYWbD9Ycp81fgNDLtp9DEIQODtPnQdqBrAdlMBhDgYUb9dEHJCuXNhDQjiroYRqmwsoSP9UHkRCXYRyRfnrNCpISrC8QdowlwYRgygX58-mBh8RJBdDD_pH88Plf9qfjt9joXesz3prD9xNrC_OJHCzIS0DDYZet3wT1DE4abCTYbe9CZpbD1PtbD-wda9eDm7tB_sZxIYU7DZUDDDpoeIw_duZ8A9pZ9PYb98e3vZ9UJIyCnPh0IYni3DcYZJC-DgyCO4SmZo_ngwlIV_9GgQ1CTOOHDquFPCgIZWCcdmdC54VHDnoYvCk4SvDjQVV95AA5CaXBPt0YC5CtKEq8HQCq9PIR7d1XoXcfIePAdXgLZy7v2MLQXzCQob4x49uFCdmLngcAVFC1nkDCUzAQCUoX19cAbY9yAYwj04VvD-jhLsRFDLDRwRND5YRODHftB9MQSEMSofwCcgQmDInjQjfoHtCagUHCzwWfckEQQBqwUcZnwYWD54cmgCwRdxi_hWCuIVsCswTI8HoVAil4UYii3nah4AWvCYHsNCM4fNtuEYg9HYdXDnYQIjFYUIih7oVD3UMVDrPgtDUYZjCgoBjCqoST8e3ttCQ_pUDB4TUD4vj_CqYKHDr2IojlEdbQCwQvsiwdexNETMCS_jTDeEHTDswTeDcwfHDl4cYi8kdAj2AOYiewevCvodYjkIV5o_oaTkYoZhCqkcb9P3r8C_3rCQwYTb0K4Q7DeEXLDHEU7YJ_nXC4Yfbt4PsjCVnuIiNwZIj2IeY91oboiqQQJC-3kJCiFF3CBkbWBsPn3DwXp_DZaN_C7_tbRqYRMjaYY1xroVG9DETuDm_vsijETygYkbMCkkaoiEkeoibGKoitEbEi2wZAjckQUiVPjZD4IWnCrERwjM4YQJd4a0ieEQRCD4Z0jk7M4ilYSfD4YdiCpxpfC3GISCfERVCfEeMiD_lSCb4Xuh34dqMH4duC0kfPc6Iaf9I_siipDtJgZEftDnaBEiVAWPCtkekitIYl9gEW4xTkakinwe3tLkW-xkkQIMzkV1Ccka9CE4ebDYERecFxggjJAFrYdbGigp6CgjO5F7AMEaj087o9ZsES9Z-xm9ZO7v5DHKEQiNHsRdYTq3YnRi6MqLJQiWvijCfEdUi-mAwixYUwipEZZBBvqwj9UewjTdja8pYUlDfkf6CHEfwiukcGD0fsrCIUaO8yoeE8_EWtDQkVTBdvh0DKYd_8C7NoxtJvrYmeIZMIJhcNKJqZMQfg8i2UTe83oRbDikZYingdYjRocwNrUdlDbUeOD7UZOCSIcrC1ts6jlpq6j1vpuDDUVjDN_oEifYQeDZkSJCY_nIiNYX_C3GIGiTlMGihJuRMw0aJNBmpGjHofkjrgSK8U4U7srYaUiPkS8Cs4bRpKkbnC6EQfwC4eOipDhIgS4aSdLflai7Ee0j_kcwDa4VODnfn0jRES6ihkcSCi0aMif6HCju3of8pkef9fYZWj_Yd3D4Ub9AZIcsiB4QHCCUXgwiUZyCmgWfcG0VcjD6M2ijJq2iTJu2juoVGiY0dGjnkXGjBoW8jE0YOiEjt8iF0SB8l0emiV0U4jXYc79XtuCjeAaVDt0ctDd0atCyQQEjD_oijOhDii9_heidwYf9MUXxD6QdiiZkfnD5IZ6jawLf9fUbTRNkWIJlJkGjr2CGjjJlRMO0SYjVfoBihptKN1YM1BNvFVhNANQAgrq5DwIOEhkNoOggQMSAqgN4BL0r-ByQPbl4VAZNyyDk0QACFAcAGpiBYAfA7NJR8xAojV8gH-AYQFgAfQPJiRKOSBi8HmBW4tXBTKHTxygCCAZMehpMVrtww8LpcYepoBqUNpjQ1AiA2GMPZgaACtzQLpcAAHrT-YYw4AUjw-oOzQyuQdABY8oR7GULF6oWuDWEBuCHKVuDtwVJRRY1yRJQULFhYrS5wkUKh-UZLiDoGVzhY8NRqvQLH9QULFxYq2h0qLyE4IsQIBYjs7sISrHFYim6UAWG6d3QLEdnTLEZhZrFCgTG5K3HG63AMrFuSLLHxYwLS9Yym5-3TYAWgWm5E3Y7jpYuq44AIrE5Y6zHWgMrFpQELGkebmHwImS52Y3AAA3QTGoAYTGoI9ezucW9jS5E-wLHY6TWYkNQAOBQDyAeQBAAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};"],"sourceRoot":""}