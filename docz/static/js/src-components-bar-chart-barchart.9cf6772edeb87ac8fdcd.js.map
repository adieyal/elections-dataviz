{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.13be3c7e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}