{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/turnout.js","webpack:///./src/api/spoilt.js","webpack:///./src/api/prog-votescount.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/mapEmbed.css","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/components/RaceForSeatDonut/piechart.css","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.css","webpack:///./src/components/SeatCompBarchart/barchartEmbed.css","webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css","webpack:///./src/components/SplitNatProv/barchartEmbed.css","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutMap/mapEmbed.css","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css","webpack:///./src/components/embedBase.js","webpack:///./src/components/BarChart/barchartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchartEmbed.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutBarchart/barchartEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/SeatCompBarchart/barchartEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/VoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.js","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.js","webpack:///./src/components/SplitNatProv/barchartEmbed.js","webpack:///./src/components/embed.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/Map/map.js","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/RaceForSeatDonut/piechart.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/SeatCompBarchart/barchart.js","webpack:///./src/components/SplitNatProv/d3groupbarchart.js","webpack:///./src/components/SplitNatProv/barchart.js","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/index.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsDataForComparison","options","query","gql","_templateObject","_templateObject2","provinceName","getSeatsData","eventDescription","_templateObject3","_templateObject4","getVotesDataForComparison","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","race_for_votes_templateObject3","race_for_votes_templateObject4","iecId","getVotesDataForAllEvents","_templateObject5","_templateObject6","_templateObject7","_templateObject8","getVotesDataM","_templateObject9","_templateObject10","_templateObject11","_templateObject12","getMainParties","_templateObject13","_templateObject14","_templateObject15","getTurnoutData","turnout_templateObject","turnout_templateObject2","turnout_templateObject3","getTurnoutDataForOneEvent","turnout_templateObject4","turnout_templateObject5","turnout_templateObject6","turnout_templateObject7","getTurnoutDataForAllEvents","turnout_templateObject8","turnout_templateObject9","turnout_templateObject10","turnout_templateObject11","getSpoiltData","spoilt_templateObject","spoilt_templateObject2","spoilt_templateObject3","spoilt_templateObject4","getProgressVotesCount","prog_votescount_templateObject","prog_votescount_templateObject2","prog_votescount_templateObject3","prog_votescount_templateObject4","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","getProvincesData","name","abbreviation","munis","muniName","getMetrosData","module","exports","ELVIZ_percentage-label","ELVIZ_tooltip","ELVIZ_grouprect","ELVIZ_barchart","ELVIZ_stylesheet-tv","ELVIZ_chart-title","ELVIZ_chart-body","ELVIZ_groupbarchart","ELVIZ_deltabarchart","embedcode","barchart-map","ELVIZ_map-title","ELVIZ_loading-spinner","map-widget","legend","ELVIZ_stylesheet-web","ELVIZ_stylesheet-none","ELVIZ_menu-widget","piechart","ELVIZ_component-transition-menu","label","active","quickresultswidget","quick-results-title","race-for-seats","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","ELVIZ_current-progress","ELVIZ_current-turnout","ELVIZ_current-counting-progress","ELVIZ_current-spoilt-votes","donutchart","multievent-container","horseshoechart","multiparties-container","EmbedBase","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","loadScriptsForEmbedMode","Component","react_default","a","createElement","provincesData","className","originClassName","bootstrapStyles","styles","BarChartEmbed","barchartEmbed_classCallCheck","barchartEmbed_possibleConstructorReturn","barchartEmbed_getPrototypeOf","state","elementId","regionType","numParties","electionEvents","stylesheetFor","componentID","self","data","error","console","e","setState","value","newState","triggerCustomEvent","events","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","bind","key","description","onRegionTypeChange","nationalEventSelected","province","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_barchartEmbed","barchartEmbed_className","RaceForSeatBarchart_barchartEmbed_classCallCheck","RaceForSeatBarchart_barchartEmbed_possibleConstructorReturn","RaceForSeatBarchart_barchartEmbed_getPrototypeOf","disabled","components_RaceForSeatBarchart_barchartEmbed","SpoiltBarchart_barchartEmbed_className","SpoiltBarchart_barchartEmbed_classCallCheck","SpoiltBarchart_barchartEmbed_possibleConstructorReturn","SpoiltBarchart_barchartEmbed_getPrototypeOf","components_SpoiltBarchart_barchartEmbed","mapEmbed_className","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","disableNavigation","loadCanvg","MAP_PREVIEW","checked","Map_mapEmbed","TurnoutMap_mapEmbed_className","TurnoutMap_mapEmbed_classCallCheck","TurnoutMap_mapEmbed_possibleConstructorReturn","TurnoutMap_mapEmbed_getPrototypeOf","components_TurnoutMap_mapEmbed","TurnoutBarchart_barchartEmbed_className","TurnoutBarchart_barchartEmbed_classCallCheck","TurnoutBarchart_barchartEmbed_possibleConstructorReturn","TurnoutBarchart_barchartEmbed_getPrototypeOf","eventType","components_TurnoutBarchart_barchartEmbed","barchartMapEmbed_className","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","JSON","EXPORT_SUPERWIDGET_PNG","BarchartWithNavMap_barchartMapEmbed","quickResultsWidgetEmbed_className","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","electionYear","nationalEventDescription","provincialEventDescription","eventDescriptionsSplitNatProv","electionYearsSplitNatProv","electionYears","year","exec","values","i","l","length","selected","yearFilter","nationalFilter","provincialFilter","QUICK_RESULTS_PREVIEW","onEventYearChange","onNatEventDescriptionChange","onProvEventDescriptionChange","multiple","onEventYearSplitNatProvChange","QuickResultsWidget_quickResultsWidgetEmbed","piechartEmbed_className","PieChartEmbed","piechartEmbed_classCallCheck","piechartEmbed_possibleConstructorReturn","piechartEmbed_getPrototypeOf","ProgVotesCountPiechart_piechartEmbed","SeatCompBarchart_barchartEmbed_className","SeatCompBarchart_barchartEmbed_classCallCheck","SeatCompBarchart_barchartEmbed_possibleConstructorReturn","SeatCompBarchart_barchartEmbed_getPrototypeOf","eventDescriptions","partyAbbr","partyIecId","allParties","Object","api","then","edge","filter","thing","index","t","catch","party","components_SeatCompBarchart_barchartEmbed","horseshoeEmbed_className","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","SeatHorseShoeChart_horseshoeEmbed","VoteCompBarchart_barchartEmbed_className","VoteCompBarchart_barchartEmbed_classCallCheck","VoteCompBarchart_barchartEmbed_possibleConstructorReturn","VoteCompBarchart_barchartEmbed_getPrototypeOf","components_VoteCompBarchart_barchartEmbed","TVSeatCompBarchart_barchartEmbed_className","TVSeatCompBarchart_barchartEmbed_classCallCheck","TVSeatCompBarchart_barchartEmbed_possibleConstructorReturn","TVSeatCompBarchart_barchartEmbed_getPrototypeOf","partyAbbrs","partyIecIds","partyIdx","onPartyAbbrsChange","formatPartyName","components_TVSeatCompBarchart_barchartEmbed","TVSeatSwingBarchart_barchartEmbed_className","TVSeatSwingBarchart_barchartEmbed_classCallCheck","TVSeatSwingBarchart_barchartEmbed_possibleConstructorReturn","TVSeatSwingBarchart_barchartEmbed_getPrototypeOf","event","components_TVSeatSwingBarchart_barchartEmbed","TVVoteCompBarchart_barchartEmbed_className","TVVoteCompBarchart_barchartEmbed_classCallCheck","TVVoteCompBarchart_barchartEmbed_possibleConstructorReturn","TVVoteCompBarchart_barchartEmbed_getPrototypeOf","components_TVVoteCompBarchart_barchartEmbed","TVVoteSwingBarchart_barchartEmbed_className","TVVoteSwingBarchart_barchartEmbed_classCallCheck","TVVoteSwingBarchart_barchartEmbed_possibleConstructorReturn","TVVoteSwingBarchart_barchartEmbed_getPrototypeOf","components_TVVoteSwingBarchart_barchartEmbed","RaceForSeatDonut_piechartEmbed_className","RaceForSeatDonut_piechartEmbed_classCallCheck","RaceForSeatDonut_piechartEmbed_possibleConstructorReturn","RaceForSeatDonut_piechartEmbed_getPrototypeOf","components_RaceForSeatDonut_piechartEmbed","SplitNatProv_barchartEmbed_className","SplitNatProv_barchartEmbed_classCallCheck","SplitNatProv_barchartEmbed_possibleConstructorReturn","SplitNatProv_barchartEmbed_getPrototypeOf","numPartiesSplitNatProv","components_SplitNatProv_barchartEmbed","__webpack_require__","d","__webpack_exports__","Chart","container","width","height","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","draw","chartData","colorsData","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getFillColor","noXaxisByParty","_typeof","minMaxY","dynamicYAxisFromValues","maxValue","parseFloat","customizeDynamicMaxValue","bars","getTooltipText","pageX","Number","barTexts","showLegend","parties","_ref","partyInfo","legends","xydata","parseInt","getLegendXY","destroy","barchart_partyColorsData","barchart_className","originName","cn","chartOptions","maxVal","Math","BarChart","comp","fetchDataFromOBJ","chart","refreshIntervalID","exportAsPNG","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","getContainer","setInterval","document","clearInterval","detail","targetState","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","ref","dataLoaders","partyColorsLoader","votesData","partyColorsData","parseVotesData","fetchLocationTrackFromVDdata","needUpdate","REGION_CHANGE","BarChart_barchart","RaceForSeatBarchart_barchart_partyColorsData","seats","RaceForSeatBarchart_barchart_className","barchart_cn","barchart_classCallCheck","barchart_getPrototypeOf","barchart_assertThisInitialized","getNationOrProvinceName2","barchart_chartOptions","seatsData","parseSeatsData","RaceForSeatBarchart_barchart","percent","SpoiltBarchart_barchart_className","SpoiltBarchart_barchart_cn","SpoiltBarchart_barchart_classCallCheck","SpoiltBarchart_barchart_possibleConstructorReturn","SpoiltBarchart_barchart_getPrototypeOf","SpoiltBarchart_barchart_assertThisInitialized","SpoiltBarchart_barchart_chartOptions","spoiltData","parseSpoiltVotesData","Valid","Spoilt","SpoiltBarchart_barchart","map_partyColorsData","regionColor","map_className","map_cn","Map","map_classCallCheck","map_getPrototypeOf","map_assertThisInitialized","drawGraph","selectAll","remove","prevProps","prevState","rect","rendercanvas","window","ignoreDimensions","scaleWidth","scaleHeight","canvg","canvas","filename","lnk","createEvent","fireEvent","loading","react_loading_default","color","fullRouteGeoJsonFile","getRegionFileName","h","geoJsonLoader","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","getMunicipalityiecId","topojson","projection","path","availableCnt","b","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","undefinedText","mainPartyName","subRegionName","tooltipText","smunicipal","appendSpan","foDiv","regionName","addSub","appendLink","setRegionType","fo","alert","currentRegionName","setTimeout","Map_map","TurnoutMap_map_className","TurnoutMap_map_cn","TurnoutMap_map_classCallCheck","TurnoutMap_map_getPrototypeOf","TurnoutMap_map_assertThisInitialized","all","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it","turnoutData","TurnoutMap_map","percVoterTurnout","TurnoutBarchart_barchart_className","TurnoutBarchart_barchart_cn","TurnoutBarchart_barchart_classCallCheck","TurnoutBarchart_barchart_possibleConstructorReturn","TurnoutBarchart_barchart_getPrototypeOf","TurnoutBarchart_barchart_assertThisInitialized","TurnoutBarchart_barchart_chartOptions","parseTurnoutDataForAllEvents","TurnoutBarchart_barchart","barchartMap_className","BarchartWithNavMap","barchartMap_classCallCheck","barchartMap_getPrototypeOf","barchartMap_assertThisInitialized","zip","JSZip","imgs","base64","content","saveAs","assign","instance","barchartInstance","mapInstance","BarchartWithNavMap_barchartMap","d3piechart_Chart","margin","variable","category","floatFormat","colour","radius","pie","arc","totalSvg","transformX","labelSvg","toolTip","selection","tip","toolTipHTML","arcTween","_current","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","piechart_cn","PieChart","piechart_classCallCheck","piechart_getPrototypeOf","piechart_assertThisInitialized","piechart_chartOptions","progressVotesData","parseProgressVotesCount","Completed","Not Completed","ProgVotesCountPiechart_piechart","piechart_partyColorsData","viewBox","RaceForSeatDonut_piechart_className","RaceForSeatDonut_piechart_cn","DonutChart","RaceForSeatDonut_piechart_classCallCheck","RaceForSeatDonut_piechart_getPrototypeOf","RaceForSeatDonut_piechart_assertThisInitialized","getNationOrProvinceName","RaceForSeatDonut_piechart_chartOptions","components_RaceForSeatDonut_piechart","VoteCompBarchart_barchart_partyColorsData","VoteCompBarchart_barchart_className","VoteCompBarchart_barchart_cn","VoteCompBarchart_barchart_classCallCheck","VoteCompBarchart_barchart_getPrototypeOf","VoteCompBarchart_barchart_assertThisInitialized","VoteCompBarchart_barchart_chartOptions","parseVotesComparisonData","VoteCompBarchart_barchart","SeatCompBarchart_barchart_partyColorsData","SeatCompBarchart_barchart_className","SeatCompBarchart_barchart_cn","SeatCompBarchart_barchart_classCallCheck","SeatCompBarchart_barchart_getPrototypeOf","SeatCompBarchart_barchart_assertThisInitialized","SeatCompBarchart_barchart_chartOptions","parseSeatsComparisonData","SeatCompBarchart_barchart","d3groupbarchart_Chart","XaxisOffset","groupChartData","groupSvgs","groupSvg","formatClassNameFromString","_loop","subX","_ref2","SplitNatProv_barchart_partyColorsData","SplitNatProv_barchart_className","SplitNatProv_barchart_cn","topLabel","usedValue","SplitNatProv_barchart_classCallCheck","SplitNatProv_barchart_getPrototypeOf","SplitNatProv_barchart_assertThisInitialized","SplitNatProv_barchart_chartOptions","parseVotesDataForAllEvents","SplitNatProv_barchart","cssPrefix","metrosData","CustomLink","navbar_classCallCheck","navbar_possibleConstructorReturn","navbar_getPrototypeOf","navbar_assertThisInitialized","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","activeLinkId","handleNavBarSelection","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","SEATS_ELECTEDS_EVENT","icon","metro","join","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","quickResultsWidget_cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","currentTurnout","currentCountingProg","currentSpoiltVotes","quickResultsWidget_assertThisInitialized","fetchCurrentResultData","newProps","progVotesData","parsedSpoiltData","parsedTurnoutData","parseTurnoutDataForOneEvent","parsedProgVotesData","parsedVotesData","voteItem","parsedSeatsData","seatItem","zipfileName","imageLoadPromises","_toConsumableArray","barchartInstances","map","element","idx","triggerState","_this$state2","getRegionName2","getRegionName3","_this$state3","mapState","_this3","_this$state4","Array","onShowVDResult","vdInput","renderQuickResultsTitle","renderTurnoutProgressSpoilt","renderMyVDEnterForm","renderBarchart","renderMap","QuickResultsWidget_quickResultsWidget","d3horseshoe_Chart","mainSvg","originChartData","totalSeats","rows","poslist","J","R","angle","Totals","PI","onMouseMove","onMouseOut","Counter","partySvg","pythonConvertedCode","horseshoe_partyColorsData","horseshoe_className","horseshoe_cn","HorseShoeChart","horseshoe_classCallCheck","horseshoe_getPrototypeOf","horseshoe_assertThisInitialized","horseshoe_chartOptions","SeatHorseShoeChart_horseshoe","TVVoteCompBarchart_d3groupbarchart_Chart","bandwidth","YaxisOffset","barAxisTextSvg","barAxisTexts","TVSeatCompBarchart_barchart_partyColorsData","TVSeatCompBarchart_barchart_className","TVSeatCompBarchart_barchart_cn","TVSeatCompBarchart_barchart_classCallCheck","TVSeatCompBarchart_barchart_getPrototypeOf","TVSeatCompBarchart_barchart_assertThisInitialized","TVSeatCompBarchart_barchart_chartOptions","desc","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","d3deltabarchart_Chart","newGroupChartData","_objectSpread","delta","deltaData","barTextYDelta","axisThick","TVSeatSwingBarchart_barchart_partyColorsData","TVSeatSwingBarchart_barchart_className","TVSeatSwingBarchart_barchart_cn","TVSeatSwingBarchart_barchart_classCallCheck","TVSeatSwingBarchart_barchart_getPrototypeOf","TVSeatSwingBarchart_barchart_assertThisInitialized","TVSeatSwingBarchart_barchart_chartOptions","years","TVSeatSwingBarchart_barchart","TVVoteCompBarchart_barchart_partyColorsData","TVVoteCompBarchart_barchart_className","TVVoteCompBarchart_barchart_cn","TVVoteCompBarchart_barchart_classCallCheck","TVVoteCompBarchart_barchart_getPrototypeOf","TVVoteCompBarchart_barchart_assertThisInitialized","TVVoteCompBarchart_barchart_chartOptions","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","TVVoteSwingBarchart_barchart_partyColorsData","TVVoteSwingBarchart_barchart_className","TVVoteSwingBarchart_barchart_cn","TVVoteSwingBarchart_barchart_classCallCheck","TVVoteSwingBarchart_barchart_getPrototypeOf","TVVoteSwingBarchart_barchart_assertThisInitialized","TVVoteSwingBarchart_barchart_chartOptions","TVVoteSwingBarchart_barchart","CSS_PREFIX","calcPercent","toFixed","results","edges","shortenedNatProv","nodeData","partyResults","longEventDescription","node","el","validVotes","edge1","edge2","edge1Year","edge2Year","firstEdge","locationResult","result","partyfilter_edges","reverse","new_results","available","totalCount","count","getTopPartyNameFromNode","beautifiedMuniName","tooltipClassName","labelElements","regions","overlapCnt","rect1","rect2","bottom","eventName","eventParam","CustomEvent","toUpperCase","PKLVDNUMBE","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","loadScript","id","scriptURL","callback","script","str"],"mappings":"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","file":"static/js/src-components-quickresults~src-components-race-for-seats~src-components-race-for-votes~src-componen~3364f670.b7b64ea8.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\n// var API_URI = \"https://elections2019.xyz/graphql\";\nvar API_URI = \"https://eds.elections.sabc.co.za/graphql\";\n\n\nconst client = new ApolloClient({\n    link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n    cache: new InMemoryCache()\n  })\n\nexport {\n    API_URI,\n    client\n}","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getSeatsDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            party_Event_Description_Icontains:\"national\",\n            orderBy:[\"-national_pr\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  } else { //  if (options.regionType == \"province\")\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            province:\"${options.provinceName}\", \n            orderBy:[\"-regional\"]\n          ) {\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  }\n}\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(\n              event:\"${eventDescription}\", \n              orderBy:[\"-national_pr\"]\n            ) {\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else { //  if (options.regionType == \"province\")\n      eventDescription = eventDescription.replace(\"National\", \"Provincial\");\n      eventDescription = eventDescription.replace(\"NATIONAL\", \"PROVINCIAL\");\n      eventDescription = eventDescription.replace(\"national\", \"provincial\");\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(\n              province:\"${options.provinceName}\", \n              event:\"${eventDescription}\", \n              orderBy:[\"-regional\"]\n            ) {\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getVotesDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots{\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          province:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          province:\"${options.provinceName}\", \n          municipalCode: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                      iecId\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n          iecId:\"${options.iecId}\", \n        ) {\n          edges{\n            node{\n              event {\n                description\n              }\n              location {\n                iecId\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getVotesDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            province:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            province:\"${options.provinceName}\", \n            municipalCode: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            iecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                location {\n                  iecId\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\", \n            municipalCode: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event:\"${eventDescription}\",\n            iecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                location {\n                  iecId\n                  ward {\n                    municipality {\n                      code\n                      province {\n                        name\n                      }\n                    }\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByProvince(event:\"${eventDescription}\") {\n            edges {\n              node {\n                location{\n                  id\n                  name\n                }\n                totalVotesCast\n                topParty{\n                  validVotes\n                  percOfVotes\n                  party {\n                      id\n                      name\n                      abbreviation\n                      iecId\n                  }\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByMunicipality(\n            event:\"${eventDescription}\", \n            province:\"${options.provinceName}\") {\n            \n            edges {\n              node {\n                location{\n                    code\n                    name\n                    longName\n                }\n                totalVotesCast\n                topParty{\n                  party {               \n                    name\n                    abbreviation\n                    iecId\n                  }\n                  validVotes\n                  percOfVotes\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { //if (options.regionType == \"municipality\") {\n        return client.query({\n          query: gql`\n          {\n            topPartiesByVotingDistrict(\n              event:\"${eventDescription}\", \n              province:\"${options.provinceName}\",\n              municipalCode: \"${options.muniCode}\"\n            ) {\n              \n              edges {\n                node {\n                  location{\n                    iecId\n                  }\n                  topParty{\n                    party{\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n\n\n  export function getTurnoutData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                percVoterTurnout\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                percVoterTurnout\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { // municipality or municipality-vd\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n              event:\"${eventDescription}\",\n              municipalCode:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n  export function getTurnoutDataForOneEvent(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\"\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n              event:\"${eventDescription}\"\n              province:\"${options.provinceName}\", \n              municipalCode: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              event:\"${eventDescription}\"\n              iecId:\"${options.iecId}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n\n  export function getTurnoutDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n              province:\"${options.provinceName}\", \n              municipalCode: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              iecId:\"${options.iecId}\" \n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getSpoiltData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                    id\n                    name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                event:\"${eventDescription}\",\n                province:\"${options.provinceName}\", \n                municipalCode: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    code\n                    name\n                    longName\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              event:\"${eventDescription}\",\n              iecId:\"${options.iecId}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n  ","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getProgressVotesCount(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\", \n            municipalCode: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event:\"${eventDescription}\",\n            iecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport {getSeatsData, getSeatsDataForComparison} from \"./race-for-seats\"\nexport {getVotesDataM, getVotesDataForAllEvents, getVotesDataForComparison, getMainParties} from \"./race-for-votes\"\nexport {getTurnoutData, getTurnoutDataForOneEvent, getTurnoutDataForAllEvents} from \"./turnout\"\nexport {getSpoiltData} from \"./spoilt\"\nexport {getProgressVotesCount} from \"./prog-votescount\"\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n        eventType {\n          description\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            abbreviation\n            colour\n            iecId\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getProvincesData() {\n  var provincesData = [\n      {\n          \"name\": \"Limpopo\",\n          \"abbreviation\": \"LIM\",\n          \"munis\": [{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM331 - Greater Giyani [Giyani]\",\"muniCode\":\"LIM331\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM332 - Greater Letaba [Duiwelskloof]\",\"muniCode\":\"LIM332\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM333 - Greater Tzaneen [Tzaneen]\",\"muniCode\":\"LIM333\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM334 - Ba-Phalaborwa [Phalaborwa]\",\"muniCode\":\"LIM334\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM335 - Maruleng [Hoedspruit]\",\"muniCode\":\"LIM335\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM341 - Musina [Messina]\",\"muniCode\":\"LIM341\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM342 - Mutale [Mutale-Masisi]\",\"muniCode\":\"LIM342\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM343 - Thulamela [Thohoyandou]\",\"muniCode\":\"LIM343\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM344 - Makhado [Louis Trichardt]\",\"muniCode\":\"LIM344\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM351 - Blouberg [Bochum/My Darling]\",\"muniCode\":\"LIM351\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM352 - Aganang [Moletji/Matlala]\",\"muniCode\":\"LIM352\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM353 - Molemole [Dendron/Dikgale]\",\"muniCode\":\"LIM353\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM354 - Polokwane [Pietersburg]\",\"muniCode\":\"LIM354\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM355 - Lepele-Nkumpi [Lebowakgomo]\",\"muniCode\":\"LIM355\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM361 - Thabazimbi [Thabazimbi]\",\"muniCode\":\"LIM361\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM362 - Lephalale [Ellisras]\",\"muniCode\":\"LIM362\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM364 - Mookgopong [Naboomspruit]\",\"muniCode\":\"LIM364\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM365 - Modimolle [Nylstroom]\",\"muniCode\":\"LIM365\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM366 - Bela-Bela [Warmbad]\",\"muniCode\":\"LIM366\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM367 - Mogalakwena [Potgietersrus]\",\"muniCode\":\"LIM367\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM471 - Ephraim Mogale [Marble Hall]\",\"muniCode\":\"LIM471\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM472 - Elias Motsoaledi [Groblersdal]\",\"muniCode\":\"LIM472\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM473 - Makhuduthamaga [Ngwaritsi]\",\"muniCode\":\"LIM473\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM474 - Fetakgomo [Fetakgomo ]\",\"muniCode\":\"LIM474\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM475 - Greater Tubatse [Burgersfort/Ohrigstad/Eastern Tubatse]\",\"muniCode\":\"LIM475\"}]\n      },\n      {\n          \"name\": \"Mpumalanga\",\n          \"abbreviation\": \"MP\",\n          \"munis\": [{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP301 - Albert Luthuli [Elukwatini/Carolina]\",\"muniCode\":\"MP301\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP302 - Msukaligwa [Ermelo]\",\"muniCode\":\"MP302\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP303 - Mkhondo [Piet Retief]\",\"muniCode\":\"MP303\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP304 - Pixley Ka Seme [Volksrust]\",\"muniCode\":\"MP304\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP305 - Lekwa [Standerton]\",\"muniCode\":\"MP305\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP306 - Dipaleseng [Balfour]\",\"muniCode\":\"MP306\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP307 - Govan Mbeki [Highveld Ridge]\",\"muniCode\":\"MP307\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP311 - Delmas [Delmas]\",\"muniCode\":\"MP311\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP312 - Emalahleni [Witbank]\",\"muniCode\":\"MP312\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP313 - Steve Tshwete [Middelburg]\",\"muniCode\":\"MP313\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP314 - Emakhazeni [Belfast]\",\"muniCode\":\"MP314\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP315 - Thembisile [KwaMhlanga]\",\"muniCode\":\"MP315\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP316 - Dr JS Moroka [Mdutjana]\",\"muniCode\":\"MP316\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP321 - Thaba Chweu [Sabie]\",\"muniCode\":\"MP321\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP322 - Mbombela [Nelspruit]\",\"muniCode\":\"MP322\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP323 - Umjindi [Barberton]\",\"muniCode\":\"MP323\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP324 - Nkomazi [Nkomazi]\",\"muniCode\":\"MP324\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP325 - Bushbuckridge [Bushbuckridge]\",\"muniCode\":\"MP325\"}]\n      },\n      {\n          \"name\": \"Gauteng\",\n          \"abbreviation\": \"GT\",\n          \"munis\": [{\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT421 - Emfuleni [Vereeniging]\",\"muniCode\":\"GT421\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT422 - Midvaal [Meyerton]\",\"muniCode\":\"GT422\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT423 - Lesedi [Heidelberg]\",\"muniCode\":\"GT423\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT481 - Mogale City [Krugersdorp]\",\"muniCode\":\"GT481\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT482 - Randfontein [Randfontein]\",\"muniCode\":\"GT482\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT483 - Westonaria [Westonaria]\",\"muniCode\":\"GT483\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT484 - Merafong City [Carletonville]\",\"muniCode\":\"GT484\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"}]\n      },\n      {\n          \"name\": \"KwaZulu-Natal\",\n          \"abbreviation\": \"KZN\",\n          \"munis\": [{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN211 - Vulamehlo [Dududu]\",\"muniCode\":\"KZN211\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN212 - Umdoni [Scottburgh]\",\"muniCode\":\"KZN212\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN213 - Umzumbe [Umzumbe]\",\"muniCode\":\"KZN213\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN214 - UMuziwabantu [Harding]\",\"muniCode\":\"KZN214\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN215 - Ezinqoleni [Izinqolweni]\",\"muniCode\":\"KZN215\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN216 - Hibiscus Coast [Port Shepstone]\",\"muniCode\":\"KZN216\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN221 - uMshwathi [Wartburg]\",\"muniCode\":\"KZN221\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN222 - uMngeni [Howick]\",\"muniCode\":\"KZN222\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN223 - Mooi Mpofana [Mooirivier]\",\"muniCode\":\"KZN223\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN224 - Impendle [Impendle]\",\"muniCode\":\"KZN224\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN225 - Msunduzi [Pietermaritzburg]\",\"muniCode\":\"KZN225\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN226 - Mkhambathini [Camperdown]\",\"muniCode\":\"KZN226\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN227 - Richmond [Richmond]\",\"muniCode\":\"KZN227\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN232 - Emnambithi/Ladysmith [Ladysmith]\",\"muniCode\":\"KZN232\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN233 - Indaka [Waaihoek]\",\"muniCode\":\"KZN233\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN234 - Umtshezi [Estcourt]\",\"muniCode\":\"KZN234\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN235 - Okhahlamba [Bergville]\",\"muniCode\":\"KZN235\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN236 - Imbabazane [Loskop]\",\"muniCode\":\"KZN236\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN241 - Endumeni [Dundee]\",\"muniCode\":\"KZN241\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN242 - Nqutu [Nqutu]\",\"muniCode\":\"KZN242\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN244 - Msinga [Pomeroy]\",\"muniCode\":\"KZN244\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN245 - Umvoti [Greytown]\",\"muniCode\":\"KZN245\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN252 - Newcastle [Newcastle]\",\"muniCode\":\"KZN252\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN253 - eMadlangeni [Utrecht]\",\"muniCode\":\"KZN253\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN254 - Dannhauser [Durnacol]\",\"muniCode\":\"KZN254\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN261 - eDumbe [Paulpietersburg]\",\"muniCode\":\"KZN261\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN262 - UPhongolo [Pongola]\",\"muniCode\":\"KZN262\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN263 - Abaqulusi [Vryheid]\",\"muniCode\":\"KZN263\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN265 - Nongoma [Nongoma]\",\"muniCode\":\"KZN265\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN266 - Ulundi [Ulundi]\",\"muniCode\":\"KZN266\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN271 - Umhlabuyalingana [Emangusi]\",\"muniCode\":\"KZN271\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN272 - Jozini [Mkuze]\",\"muniCode\":\"KZN272\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN273 - The Big 5 False Bay [Hluhluwe]\",\"muniCode\":\"KZN273\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN274 - Hlabisa [Somkele]\",\"muniCode\":\"KZN274\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN275 - Mtubatuba [Mtubatuba]\",\"muniCode\":\"KZN275\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN281 - Mfolozi [KwaMbonambi]\",\"muniCode\":\"KZN281\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN282 - uMhlathuze [Richards Bay]\",\"muniCode\":\"KZN282\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN283 - Ntambana [Ntambana]\",\"muniCode\":\"KZN283\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN284 - uMlalazi [Eshowe]\",\"muniCode\":\"KZN284\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN285 - Mthonjaneni [Melmoth]\",\"muniCode\":\"KZN285\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN286 - Nkandla [Nkandla]\",\"muniCode\":\"KZN286\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN291 - Mandeni [Mandeni]\",\"muniCode\":\"KZN291\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN292 - KwaDukuza [Stanger]\",\"muniCode\":\"KZN292\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN293 - Ndwedwe [Ndwedwe]\",\"muniCode\":\"KZN293\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN294 - Maphumulo [Maphumulo]\",\"muniCode\":\"KZN294\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN431 - Ingwe [Creighton]\",\"muniCode\":\"KZN431\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN432 - Kwa Sani [Underberg]\",\"muniCode\":\"KZN432\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN433 - Greater Kokstad [Kokstad]\",\"muniCode\":\"KZN433\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN434 - Ubuhlebezwe [Ixopo]\",\"muniCode\":\"KZN434\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN435 - Umzimkhulu [Umzimkulu]\",\"muniCode\":\"KZN435\"}]\n      },\n      {\n          \"name\": \"North West\",\n          \"abbreviation\": \"NW\",\n          \"munis\": [{\"provinceName\":\"North West\",\"muniName\":\"NW371 - Moretele [Makapanstad]\",\"muniCode\":\"NW371\"},{\"provinceName\":\"North West\",\"muniName\":\"NW372 - Madibeng [Brits]\",\"muniCode\":\"NW372\"},{\"provinceName\":\"North West\",\"muniName\":\"NW373 - Rustenburg [Rustenburg]\",\"muniCode\":\"NW373\"},{\"provinceName\":\"North West\",\"muniName\":\"NW374 - Kgetlengrivier [Koster]\",\"muniCode\":\"NW374\"},{\"provinceName\":\"North West\",\"muniName\":\"NW375 - Moses Kotane [Mogwase]\",\"muniCode\":\"NW375\"},{\"provinceName\":\"North West\",\"muniName\":\"NW381 - Ratlou [Setlagole]\",\"muniCode\":\"NW381\"},{\"provinceName\":\"North West\",\"muniName\":\"NW382 - Tswaing [Delareyville]\",\"muniCode\":\"NW382\"},{\"provinceName\":\"North West\",\"muniName\":\"NW383 - Mafikeng [Mafikeng]\",\"muniCode\":\"NW383\"},{\"provinceName\":\"North West\",\"muniName\":\"NW384 - Ditsobotla [Lichtenburg]\",\"muniCode\":\"NW384\"},{\"provinceName\":\"North West\",\"muniName\":\"NW385 - Ramotshere Moiloa [Zeerust]\",\"muniCode\":\"NW385\"},{\"provinceName\":\"North West\",\"muniName\":\"NW392 - Naledi [Vryburg]\",\"muniCode\":\"NW392\"},{\"provinceName\":\"North West\",\"muniName\":\"NW393 - Mamusa [Schweizer-Reneke]\",\"muniCode\":\"NW393\"},{\"provinceName\":\"North West\",\"muniName\":\"NW394 - Greater Taung [Reivilo]\",\"muniCode\":\"NW394\"},{\"provinceName\":\"North West\",\"muniName\":\"NW396 - Lekwa-Teemane [Christiana]\",\"muniCode\":\"NW396\"},{\"provinceName\":\"North West\",\"muniName\":\"NW397 - NW397 Local Municipality [Ganyesa/Pomfret]\",\"muniCode\":\"NW397\"},{\"provinceName\":\"North West\",\"muniName\":\"NW401 - Ventersdorp [Ventersdorp]\",\"muniCode\":\"NW401\"},{\"provinceName\":\"North West\",\"muniName\":\"NW402 - Tlokwe [Potchefstroom]\",\"muniCode\":\"NW402\"},{\"provinceName\":\"North West\",\"muniName\":\"NW403 - Matlosana [Klerksdorp]\",\"muniCode\":\"NW403\"},{\"provinceName\":\"North West\",\"muniName\":\"NW404 - Maquassi Hills [Wolmaransstad]\",\"muniCode\":\"NW404\"}]\n      },\n      {\n          \"name\": \"Free State\",\n          \"abbreviation\": \"FS\",\n          \"munis\": [{\"provinceName\":\"Free State\",\"muniName\":\"FS161 - Letsemeng [Koffiefontein]\",\"muniCode\":\"FS161\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS162 - Kopanong [Trompsburg]\",\"muniCode\":\"FS162\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS163 - Mohokare [Zastron]\",\"muniCode\":\"FS163\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS164 - Naledi [Dewetsdorp]\",\"muniCode\":\"FS164\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS181 - Masilonyana [Theunissen]\",\"muniCode\":\"FS181\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS182 - Tokologo [Dealesville]\",\"muniCode\":\"FS182\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS183 - Tswelopele [Hoopstad]\",\"muniCode\":\"FS183\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS184 - Matjhabeng [Welkom]\",\"muniCode\":\"FS184\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS185 - Nala [Bothaville]\",\"muniCode\":\"FS185\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS191 - Setsoto [Senekal]\",\"muniCode\":\"FS191\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS192 - Dihlabeng [Bethlehem]\",\"muniCode\":\"FS192\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS193 - Nketoana [Reitz]\",\"muniCode\":\"FS193\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS194 - Maluti a Phofung [Qwa-Qwa]\",\"muniCode\":\"FS194\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS195 - Phumelela [Vrede]\",\"muniCode\":\"FS195\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS196 - Mantsopa [Ladybrand]\",\"muniCode\":\"FS196\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS201 - Moqhaka [Kroonstad]\",\"muniCode\":\"FS201\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS203 - Ngwathe [Parys]\",\"muniCode\":\"FS203\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS204 - Metsimaholo [Sasolburg]\",\"muniCode\":\"FS204\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS205 - Mafube [Frankfort]\",\"muniCode\":\"FS205\"},{\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"}]\n      },\n      {\n          \"name\": \"Eastern Cape\",\n          \"abbreviation\": \"EC\",\n          \"munis\": [{\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC101 - Camdeboo [Graaff-Reinet]\",\"muniCode\":\"EC101\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC102 - Blue Crane Route [Somerset East]\",\"muniCode\":\"EC102\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC103 - Ikwezi [Jansenville]\",\"muniCode\":\"EC103\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC104 - Makana [Grahamstown]\",\"muniCode\":\"EC104\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC105 - Ndlambe [Port Alfred]\",\"muniCode\":\"EC105\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC106 - Sundays River Valley [Kirkwood]\",\"muniCode\":\"EC106\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC107 - Baviaans [Willowmore]\",\"muniCode\":\"EC107\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC108 - Kouga [Humansdorp]\",\"muniCode\":\"EC108\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC109 - Kou-Kamma [Kareedouw]\",\"muniCode\":\"EC109\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC121 - Mbhashe [Idutywa]\",\"muniCode\":\"EC121\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC122 - Mnquma [Butterworth]\",\"muniCode\":\"EC122\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC123 - Great Kei [Komga]\",\"muniCode\":\"EC123\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC124 - Amahlathi [Stutterheim]\",\"muniCode\":\"EC124\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC126 - Ngqushwa [Peddie]\",\"muniCode\":\"EC126\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC127 - Nkonkobe [Alice]\",\"muniCode\":\"EC127\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC128 - Nxuba [Adelaide]\",\"muniCode\":\"EC128\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC131 - Inxuba Yethemba [Cradock]\",\"muniCode\":\"EC131\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC132 - Tsolwana [Tarkastad]\",\"muniCode\":\"EC132\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC133 - Inkwanca [Molteno]\",\"muniCode\":\"EC133\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC134 - Lukhanji [Queenstown]\",\"muniCode\":\"EC134\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC135 - Intsika Yethu [Cofimvaba]\",\"muniCode\":\"EC135\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC136 - Emalahleni [Lady Frere]\",\"muniCode\":\"EC136\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC137 - Engcobo [Engcobo]\",\"muniCode\":\"EC137\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC138 - Sakhisizwe [Elliot]\",\"muniCode\":\"EC138\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC141 - Elundini [Mount Fletcher]\",\"muniCode\":\"EC141\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC142 - Senqu [Lady Grey]\",\"muniCode\":\"EC142\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC143 - Maletswai [Aliwal North]\",\"muniCode\":\"EC143\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC144 - Gariep [Burgersdorp]\",\"muniCode\":\"EC144\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC153 - Ngquza Hill [Flagstaff]\",\"muniCode\":\"EC153\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC154 - Port St Johns [Port St Johns]\",\"muniCode\":\"EC154\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC155 - Nyandeni [Libode]\",\"muniCode\":\"EC155\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC156 - Mhlontlo [Qumbu]\",\"muniCode\":\"EC156\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC157 - King Sabata Dalindyebo [Umtata]\",\"muniCode\":\"EC157\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC441 - Matatiele [Matatiele]\",\"muniCode\":\"EC441\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC442 - Umzimvubu [Mount Ayliff]\",\"muniCode\":\"EC442\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC443 - Mbizana [Bizana]\",\"muniCode\":\"EC443\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC444 - Ntabankulu [Ntabankulu]\",\"muniCode\":\"EC444\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}]\n      },\n      {\n          \"name\": \"Northern Cape\",\n          \"abbreviation\": \"NC\",\n          \"munis\": [{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC061 - RICHTERSVELD [Port Nolloth]\",\"muniCode\":\"NC061\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC062 - NAMA KHOI [Springbok]\",\"muniCode\":\"NC062\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC064 - KAMIESBERG [Garies]\",\"muniCode\":\"NC064\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC065 - HANTAM [Calvinia]\",\"muniCode\":\"NC065\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC066 - KAROO HOOGLAND [Fraserburg]\",\"muniCode\":\"NC066\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC067 - KHâI-MA [Pofadder]\",\"muniCode\":\"NC067\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC071 - UBUNTU [Victoria West]\",\"muniCode\":\"NC071\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC072 - UMSOBOMVU [Colesberg]\",\"muniCode\":\"NC072\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC073 - EMTHANJENI [De Aar]\",\"muniCode\":\"NC073\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC074 - KAREEBERG [Carnarvon]\",\"muniCode\":\"NC074\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC075 - RENOSTERBERG [Phillipstown]\",\"muniCode\":\"NC075\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC076 - THEMBELIHLE [Hopetown]\",\"muniCode\":\"NC076\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC077 - SIYATHEMBA [Prieska]\",\"muniCode\":\"NC077\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC078 - SIYANCUMA [Griekwastad]\",\"muniCode\":\"NC078\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC081 - MIER [Mier]\",\"muniCode\":\"NC081\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC082 - KAI !GARIB [Keimoes]\",\"muniCode\":\"NC082\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC083 - KHARA HAIS [Upington]\",\"muniCode\":\"NC083\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC084 - !KHEIS [Groblershoop]\",\"muniCode\":\"NC084\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC085 - TSANTSABANE [Postmasburg]\",\"muniCode\":\"NC085\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC086 - KGATELOPELE [Danielskuil]\",\"muniCode\":\"NC086\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC091 - Sol Plaatje [Kimberley]\",\"muniCode\":\"NC091\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC092 - Dikgatlong [Barkley West]\",\"muniCode\":\"NC092\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC093 - Magareng [Warrenton]\",\"muniCode\":\"NC093\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC094 - Phokwane [Hartswater]\",\"muniCode\":\"NC094\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC451 - Joe Morolong [Kgalagadi]\",\"muniCode\":\"NC451\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC452 - GA-SEGONYANA [Kuruman]\",\"muniCode\":\"NC452\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC453 - GAMAGARA [Kathu]\",\"muniCode\":\"NC453\"}]\n      },\n      {\n          \"name\": \"Western Cape\",\n          \"abbreviation\": \"WC\",\n          \"munis\": [{\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC011 - Matzikama [Vredendal]\",\"muniCode\":\"WC011\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC012 - Cederberg [Citrusdal]\",\"muniCode\":\"WC012\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC013 - Bergrivier [Velddrif]\",\"muniCode\":\"WC013\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC014 - Saldanha Bay [West Coast Peninsula]\",\"muniCode\":\"WC014\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC015 - Swartland [Malmesbury]\",\"muniCode\":\"WC015\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC022 - Witzenberg [Ceres]\",\"muniCode\":\"WC022\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC023 - Drakenstein [Paarl]\",\"muniCode\":\"WC023\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC024 - Stellenbosch [Stellenbosch]\",\"muniCode\":\"WC024\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC025 - Breede Valley [Worcester]\",\"muniCode\":\"WC025\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC026 - Langeberg [Robertson]\",\"muniCode\":\"WC026\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC031 - Theewaterskloof [Caledon]\",\"muniCode\":\"WC031\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC032 - Overstrand [Greater Hermanus]\",\"muniCode\":\"WC032\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC033 - Cape Agulhas [Bredasdorp]\",\"muniCode\":\"WC033\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC034 - Swellendam [Barrydale/Swellendam ]\",\"muniCode\":\"WC034\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC041 - Kannaland [Ladismith]\",\"muniCode\":\"WC041\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC042 - Hessequa [Heidelberg/Riversdale]\",\"muniCode\":\"WC042\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC043 - Mossel Bay [Mossel Bay]\",\"muniCode\":\"WC043\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC044 - George [George]\",\"muniCode\":\"WC044\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC045 - Oudtshoorn [Oudtshoorn]\",\"muniCode\":\"WC045\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC047 - Bitou [Greater Plettenberg Bay]\",\"muniCode\":\"WC047\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC048 - Knysna [Knysna]\",\"muniCode\":\"WC048\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC051 - Laingsburg [Laingsburg]\",\"muniCode\":\"WC051\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC052 - Prince Albert [Prins Albert]\",\"muniCode\":\"WC052\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC053 - Beaufort West [Beaufort West]\",\"muniCode\":\"WC053\"}]\n      }\n  ]\n  return provincesData;\n}\n\nexport function getMetrosData() {\n  var metrosData = [\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},\n    {\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},\n    {\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},\n    {\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"},\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}\n  ]\n  return metrosData;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\",\"ELVIZ_grouprect\":\"barchart_ELVIZ_grouprect__3r-aC\",\"ELVIZ_barchart\":\"barchart_ELVIZ_barchart__2NZ_A\",\"ELVIZ_stylesheet-tv\":\"barchart_ELVIZ_stylesheet-tv__1BK01\",\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_chart-body\":\"barchart_ELVIZ_chart-body__Zewz3\",\"ELVIZ_groupbarchart\":\"barchart_ELVIZ_groupbarchart__3A7Qi\",\"ELVIZ_deltabarchart\":\"barchart_ELVIZ_deltabarchart__1KKc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__tgFvS\",\"barchart-map\":\"barchartMap_barchart-map__1q5Ah\",\"ELVIZ_stylesheet-tv\":\"barchartMap_ELVIZ_stylesheet-tv__2Oynn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"map-widget\":\"map_map-widget__2RFiV\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\",\"ELVIZ_stylesheet-web\":\"map_ELVIZ_stylesheet-web__QqAjU\",\"ELVIZ_stylesheet-none\":\"map_ELVIZ_stylesheet-none__3Bxph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__1KFQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\",\"piechart\":\"piechart_piechart__1_rKy\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__1l-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__1UVX7\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__1faC8\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"quickresultswidget\":\"quickResultsWidget_quickresultswidget__1za_y\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__284h0\",\"quick-results-title\":\"quickResultsWidget_quick-results-title__l1vy0\",\"race-for-seats\":\"quickResultsWidget_race-for-seats__2jA3-\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__1QzTz\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3beRX\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3OaTN\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__1_krp\",\"ELVIZ_current-progress\":\"quickResultsWidget_ELVIZ_current-progress__2hsjC\",\"ELVIZ_current-turnout\":\"quickResultsWidget_ELVIZ_current-turnout__3BLN5\",\"ELVIZ_current-counting-progress\":\"quickResultsWidget_ELVIZ_current-counting-progress__3GJGf\",\"ELVIZ_current-spoilt-votes\":\"quickResultsWidget_ELVIZ_current-spoilt-votes__2nH8V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__1v6iW\",\"ELVIZ_tooltip\":\"piechart_ELVIZ_tooltip__nq19G\",\"donutchart\":\"piechart_donutchart__2UxpS\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__23IoW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__2O9dV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__29vdd\",\"multievent-container\":\"barchartEmbed_multievent-container__1G-dC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__3KEZl\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__2bLlY\",\"horseshoechart\":\"horseshoe_horseshoechart__2Js34\",\"ELVIZ_stylesheet-tv\":\"horseshoe_ELVIZ_stylesheet-tv__1-bHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__38M9g\",\"multievent-container\":\"barchartEmbed_multievent-container__2OlKA\",\"multiparties-container\":\"barchartEmbed_multiparties-container__3Xu9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3Hovq\",\"multievent-container\":\"barchartEmbed_multievent-container__2y7nI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3iHSi\",\"multievent-container\":\"barchartEmbed_multievent-container__3dDi0\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2Ln06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};","import React, { Component } from \"react\";\n\nimport {\n    loadScriptsForEmbedMode\n} from \"../utils\";\n\nexport default class EmbedBase extends Component {\n    constructor(props) {\n        super(props);\n        loadScriptsForEmbedMode();\n    }\n\n    render () {\n        return (\n            <div></div>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 1\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 6\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForSeatsBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 9\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    loadCanvg\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();        \n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,  \n            stylesheetFor,    \n            eventDescription,      \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    loadCanvg,\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,       \n            stylesheetFor,     \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 10\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 2\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var newState = JSON.parse(JSON.stringify(this.state));\n        newState.componentID = -1000;\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionYear: 2014,\n\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n            eventDescriptionsSplitNatProv: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            electionYearsSplitNatProv: [2009, 2014],\n\n            electionEvents: [],\n            electionYears: [],\n            componentID: 5\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"];\n                var electionYears = [];\n                electionEvents.forEach((item) => {\n                    var eventDescription = item.description;\n                    var year = /(19|20)\\d{2}/g.exec(eventDescription)[0];\n                    item.year = year;\n                    if (electionYears.indexOf(year) == -1) {\n                        electionYears.push(year);\n                    }\n                })\n                self.setState({electionEvents, electionYears});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onNatEventDescriptionChange(e) {\n        this.setState({nationalEventDescription: e.target.value, eventDescription: e.target.value });\n    }\n\n    onProvEventDescriptionChange(e) {\n        this.setState({provincialEventDescription: e.target.value });\n    }\n\n    onEventYearSplitNatProvChange(e) {\n        var {electionEvents} = this.state;\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        var yearFilter = electionEvents.filter(item => values.indexOf(item.year) != -1);\n        this.setState({\n            electionYearsSplitNatProv: values,\n            eventDescriptionsSplitNatProv: yearFilter.map(item => item.description)\n        });\n        // console.log(\"yearFilter.map(item => item.description)\", yearFilter.map(item => item.description));\n    }\n\n    onEventYearChange(e) {\n        var electionYear = e.target.value;\n        var nationalEventDescription, provincialEventDescription;\n        var {\n            electionEvents\n        } = this.state;\n\n        var yearFilter = electionEvents.filter(item => item.year == electionYear);\n        var nationalFilter = yearFilter.filter(item => item.eventType.description == \"National Election\");\n        var provincialFilter = yearFilter.filter(item => item.eventType.description != \"National Election\");\n\n\n        if (nationalFilter.length) {\n            nationalEventDescription = nationalFilter[0].description;\n        } else {\n            nationalEventDescription = yearFilter[0].description;\n        }\n        if (provincialFilter.length) {\n            provincialEventDescription = provincialFilter[0].description;\n        } else {\n            provincialEventDescription = yearFilter[0].description;\n        }\n\n        this.setState({\n            electionYear, \n            nationalEventDescription, \n            provincialEventDescription,\n            eventDescription: nationalEventDescription\n         });\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            nationalEventDescription,\n            provincialEventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents,\n            electionYears,\n            electionYear,\n            electionYearsSplitNatProv\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Election Year </label>\n                  <select className={className(\"form-control\")} \n                     value={electionYear}\n                     onChange={this.onEventYearChange.bind(this)}>\n                        {\n                            electionYears.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>National Event </label>\n                  <select className={className(\"form-control\")} \n                     value={nationalEventDescription}\n                     onChange={this.onNatEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.year == electionYear)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Provincial Event </label>\n                  <select className={className(\"form-control\")} \n                     value={provincialEventDescription}\n                     onChange={this.onProvEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.year == electionYear)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Election Year For Split (Nat/Prov)</label>\n                  <select multiple className={className(\"form-control\")} \n                     value={electionYearsSplitNatProv}\n                     onChange={this.onEventYearSplitNatProvChange.bind(this)}>\n                        {\n                            electionYears.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 4\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showProgVotesPiechart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 7\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties\n                // .filter(party => party.event.description == )\n                .filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`                 \n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatsComparisonBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 8\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatHorseShoeChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 16\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showVoteComparisonBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 12\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 13\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 14\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 15\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 17\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatDonutChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            numPartiesSplitNatProv: 3,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 18\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents,\n            allParties,\n            numPartiesSplitNatProv\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numPartiesSplitNatProv}\n                    onChange={e => this.setState({numPartiesSplitNatProv: e.target.value})} />\n              </div>\n\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSplitNatProvChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","export {default as BarChartEmbed} from \"./BarChart/barchartEmbed\";\nexport {default as RaceForSeatsBarChartEmbed} from \"./RaceForSeatBarchart/barchartEmbed\";\nexport {default as SpoiltBarChartEmbed} from \"./SpoiltBarchart/barchartEmbed\";\nexport {default as MapEmbed} from \"./Map/mapEmbed\";\nexport {default as TurnoutMapEmbed} from \"./TurnoutMap/mapEmbed\";\nexport {default as TurnoutBarChartEmbed} from \"./TurnoutBarchart/barchartEmbed\";\nexport {default as BarchartWithNavMapEmbed} from \"./BarchartWithNavMap/barchartMapEmbed\";\nexport {default as QuickResultsWidgetEmbed} from \"./QuickResultsWidget/quickResultsWidgetEmbed\";\nexport {default as ProgVotesCountPiechartEmbed} from \"./ProgVotesCountPiechart/piechartEmbed\";\nexport {default as RaceForSeatsComparisonBarChartEmbed} from \"./SeatCompBarchart/barchartEmbed\";\nexport {default as SeatHorseShoeChartEmbed} from \"./SeatHorseShoeChart/horseshoeEmbed\";\nexport {default as VoteComparisonBarchartEmbed} from \"./VoteCompBarchart/barchartEmbed\";\n\nexport {default as TVSeatCompBarchartEmbed} from \"./TVSeatCompBarchart/barchartEmbed\";\nexport {default as TVSeatSwingBarchartEmbed} from \"./TVSeatSwingBarchart/barchartEmbed\";\nexport {default as TVVoteCompBarchartEmbed} from \"./TVVoteCompBarchart/barchartEmbed\";\nexport {default as TVVoteSwingBarchartEmbed} from \"./TVVoteSwingBarchart/barchartEmbed\";\n\nexport {default as SeatDonutChartEmbed} from \"./RaceForSeatDonut/piechartEmbed\";\nexport {default as SplitNatProvEmbed} from \"./SplitNatProv/barchartEmbed\";","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset+(options.showLegend? 50: 0)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        barSvg.selectAll('rect').remove();\n        barTextSvg.selectAll('text').remove();\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n      var partyAbbrByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        if (colorsData && colorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          colorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        var maxValue = d3.max(chartData, function(d) { return parseFloat(options.yValue(d)); });\n        if (options.customizeDynamicMaxValue) {\n          minMaxY[1] = options.customizeDynamicMaxValue(maxValue);\n        } else {\n          minMaxY[1] = maxValue + 1;\n        }\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n        \n        if (options.showLegend) {\n          var parties = [];\n          var partyIecIds = [];\n          chartData.forEach(({partyInfo}) => {\n            var party = partyInfo.name;\n            if (partyIecIds.indexOf(partyInfo.iecId) == -1 && partyInfo.iecId) {\n                parties.push(party);\n                partyIecIds.push(partyInfo.iecId);\n            }\n          })\n          console.log(\"parties\", parties, chartData);\n          \n          function getLegendXY(i) {\n            \n            var xydata = [XaxisOffset + (i%5)*100, height + 30 + parseInt(i/5) * 40];\n            if (parties.length < 6) {\n              xydata[0] += 100 * ( 6 - parties.length) / 2;\n            }\n            return xydata;\n          }\n          svg.selectAll(`.${className(\"legend\")}`).remove();\n          var legends = svg.selectAll(`.${className(\"legend\")}`)\n              .data(parties)\n              .enter()\n              .append('g')\n              .attr(\"class\", className(\"legend\"))\n              .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n          legends\n              .append(\"rect\")\n              .attr('width', 10)\n              .attr('height', 10)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr(\"fill\", (party, i) => {\n                  return getFillColorFromPartyName(party);\n              })\n          legends.append('text')\n              .attr('x', 30)\n              .attr('y', 10)\n              .style('font-size', '12px')\n              .text(party => partyAbbrByName[party])\n        }\n        \n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange,\n  triggerCustomEvent,\n  fetchLocationTrackFromVDdata\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  dynamicYAxisFromValues: true,\n  customizeDynamicMaxValue: (maxVal) => Math.min(100, maxVal * 1.5),\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        comp: \"votes-default\",\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 1\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n\n        if (props.comp == \"votes-myvd\") {\n          var newState;\n          if (chartData) {\n            newState = fetchLocationTrackFromVDdata(data);\n          } else {\n            newState = {iecId: \"\"}\n          }\n          var needUpdate = false;\n          Object.keys(newState).forEach(key => {\n            if (props[key] != newState[key]) {\n              needUpdate = true;\n            }\n          })\n          if (needUpdate) {\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n          }\n        }\n       \n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName2,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 6\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName2(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n        \n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName2(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 9\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            disableNavigation: false,\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    // componentWillReceiveProps(newProps) {\n    //     var newState = JSON.parse(JSON.stringify(this.state));\n    //     fetchDataFromOBJ(newState, newProps);\n    //     this.setState(newState);\n    // }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        if (!this.state.disableNavigation) {\n            var newState = event.detail;\n            this.setState(newState)\n        }\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        // var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n        var dataLoaders = [mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        geoJsonLoader.then(function(value) {\n            var geoJsonData = value;\n            Promise.all(dataLoaders).then(function(values){ \n                var locationToMainParty = parseMainPartyData(values[0], props);\n                partyColorsData = partyColorsData || values[1];  \n    \n                var partyColorByName = {};\n                var partyAbbrByName = {};\n                if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                  partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.name] = edge.node.colour;\n                    partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n                  })\n                }            \n    \n                function getFillColorFromPartyName(partyName) {\n                  if (!partyName)\n                    return regionColor;\n                  return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n                }\n    \n                function getMainPartyName(d, i) {\n                    var partyName;\n                    var regionType = self.state.regionType;\n                    if (regionType === \"national\") {\n                        var provinceName = d.properties.SPROVINCE;\n                        partyName = locationToMainParty[provinceName];\n                    } else if (regionType === \"province\") {\n                        var muniCode = getMunicipalityCode(d.properties);\n                        partyName = locationToMainParty[muniCode];\n                    } else if (regionType === \"municipality\"){// \"municipality\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        partyName = locationToMainParty[iecId];\n                    } else {// \"municipality-vd\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        partyName = locationToMainParty[iecId];\n                    }\n                    return partyName;\n                }\n                function getMainPartyColorFromRegion(d, i) {\n                    var partyName = getMainPartyName(d, i);\n                    var partyColor = getFillColorFromPartyName(partyName);\n                    return partyColor;\n                }\n    \n                var jsonDataFeatures;\n                if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                    var regionType = self.state.regionType\n                    if (regionType == \"municipality\") {\n                        if (!geoJsonData.objects[self.state.muniCode])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                    } else { // \"municipality-vd\"\n                        if (!geoJsonData.objects[self.state.iecId])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                    }\n                }\n    \n                jsonDataFeatures = geoJsonData.features;\n    \n                var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n                var path = d3.geoPath().projection(projection);\n    \n                // fill region with regionColor\n                svg.selectAll(`.${className(\"region\")}`)\n                    .data(jsonDataFeatures)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", className(\"region\"))\n                    .attr(\"stroke\", regionBorderColor)\n                    .attr(\"fill\", getMainPartyColorFromRegion)\n                    .attr(\"id\", function(d, i) {\n                        return `region-${i}`;\n                    })\n                    .attr(\"d\", path);\n                \n                var parties = [];\n                var availableCnt = [];\n                jsonDataFeatures.forEach((d, i) => {\n                    var party = getMainPartyName(d, i);\n                    if (parties.indexOf(party) == -1) {\n                        parties.push(party);\n                        availableCnt.push(1);\n                    } else {\n                        availableCnt[parties.indexOf(party)] ++;\n                    }\n                })\n    \n                parties.sort(function(a, b){\n                    return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n                })\n    \n                function getLegendXY(i) {\n                    return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n                }\n                var legends = svg.selectAll(`.${className(\"legend\")}`)\n                    .data(parties)\n                    .enter()\n                    .append('g')\n                    .attr(\"class\", className(\"legend\"))\n                    .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n                legends\n                    .append(\"rect\")\n                    .attr('width', 20)\n                    .attr('height', 20)\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr(\"fill\", (party, i) => {\n                        return getFillColorFromPartyName(party);\n                    })\n                legends.append('text')\n                    .attr('x', 30)\n                    .attr('y', 16)\n                    .text(party => partyAbbrByName[party])\n                \n                if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                    svg.selectAll(\".place-label\")\n                        .data(jsonDataFeatures)\n                    .enter().append(\"text\")\n                        .attr(\"class\", \"place-label\")\n                        .attr(\"font-size\", \"12px\")\n                        .attr(\"transform\", function(d) { \n                            var center, projectionCenter;\n                            if (d.geometry.type === \"Polygon\") {\n                                center = polylabel(d.geometry.coordinates);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 12;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            } else { //\"MultiPolygon\"\n                                center = polylabel(d.geometry.coordinates[0]);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 5;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            }\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .text(d => getSubRegionName(d.properties, self.state))\n                }\n    \n                if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                    fixMapLabelIntersect();\n                }\n    \n                //hidden area for catching events\n                svg.selectAll(\".eventLayer\")\n                    .data(jsonDataFeatures)\n                .enter()\n                    .append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"eventLayer\")\n                    .attr(\"id\", function(d, i) {\n                        return `eventLayer-${i}`;\n                    })\n                    .attr(\"fill\", \"transparent\")\n                    .on(\"mouseover\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 3)\n                            .style(\"fill-opacity\", 0.8);\n                    })\n                    .on(\"mousemove\", function(d, i) {\t\n                        // if (self.state.regionType === \"municipality\") return;\n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 1);\n    \n                        var undefinedText;\n                        if (self.state.regionType === \"province\") {\n                            undefinedText = \"New municipality - no previous results available\"\n                        } else {\n                            undefinedText = \"New voting district - no previous results available\"\n                        }\n                        var mainPartyName = getMainPartyName(d, i);\n                        var subRegionName = getSubRegionName(d.properties, self.state);\n                        var tooltipText = (typeof mainPartyName !== \"undefined\")? \n                                    (subRegionName + \" : \" + mainPartyName) : undefinedText;\n    \n                        tooltipDiv.html(tooltipText)\t\n                            .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                            .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                    })\n                    .on(\"mouseout\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 1)\n                            .style(\"fill-opacity\", 1);\n                        \n                        if (self.state.regionType === \"municipality\") return;\n    \n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                    })\n                    .on(\"click\", function(d, i) {                  \n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                        \n                        var regionType = self.state.regionType;\n                        var newState, event;\n                        if (regionType === \"national\") {\n                            newState = {\n                                regionType: \"province\",\n                                provinceName: d.properties.SPROVINCE\n                            }\n                        } else if (regionType === \"province\") {\n                            newState = {\n                                regionType: \"municipality\", \n                                provinceName: self.state.provinceName,\n                                muniName: d.properties.smunicipal,\n                                muniCode: getMunicipalityCode(d.properties),\n                            }\n                        } else if (regionType === \"municipality\"){ // \"municipality\"\n                            var newState = {\n                                regionType: \"municipality-vd\", \n                                provinceName: self.state.provinceName,\n                                muniName: self.state.muniName,\n                                muniCode: self.state.muniCode,\n                                iecId: getMunicipalityiecId(d.properties),\n                            }\n                        } else { // \"municipality-vd\"\n                            return;\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        if (self.state.disableNavigation) {\n                            return;\n                        }\n                        self.setState(newState);\n                    })\n                if (!self.state.disableNavigation) {\n                    var fo = svg.append(\"foreignObject\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", 10)\n                        .attr(\"width\", 500)\n                        .attr(\"height\", 30)\n                        .attr(\"class\", \"map-controls\")\n                    \n                    function setRegionType(regionType) {\n                        var newState;\n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        newState.regionType = regionType;\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    }\n    \n                    function appendSpan(foDiv, regionName, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"span\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"default\")\n                            .html(regionName);\n                    }\n    \n                    function appendLink(foDiv, regionName, regionType, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"a\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"pointer\")\n                            .html(regionName)\n                            .on(\"click\", function() {\n                                setRegionType(regionType);\n                            });\n                    }\n                    \n                    var foDiv = fo.append(\"xhtml:div\");\n                    var regionType = self.state.regionType;\n                    if (regionType == \"national\") {\n                        appendSpan(foDiv, \"South Africa\", false);\n                    } else {\n                        appendLink(foDiv, \"South Africa\", \"national\", false);\n                        if (regionType == \"province\") {\n                            appendSpan(foDiv, self.state.provinceName, true);\n                        } else {\n                            appendLink(foDiv, self.state.provinceName, \"province\", true);\n                            if (regionType == \"municipality\") {\n                                appendSpan(foDiv, self.state.muniCode, true);\n                            } else {\n                                appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                appendSpan(foDiv, self.state.iecId, true);\n                            }\n                        }\n                    }\n                }\n                self.getLoadingSpinner()\n                    .style(\"display\", \"none\");\n            }).catch(error => {\n                console.error(error);\n                alert(`failed to get data from server`);\n            })\n        }).catch(error => {\n            console.error(error);\n\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            \n            if (self.state.disableNavigation) {\n                return;\n            }\n\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                if (regionType == \"national\" || regionType == \"province\") {\n                    alert(`Can't get map data for ${currentRegionName}`); \n                } else {\n                    alert(`${currentRegionName} has been disestablished`); \n                }\n            }, 300);    \n        })\n\n        // Promise.all(dataLoaders).then(function(values){ \n        //     var geoJsonData = values[0];\n        //     var locationToMainParty = parseMainPartyData(values[1], props);\n        //     partyColorsData = partyColorsData || values[2];  \n\n        //     var partyColorByName = {};\n        //     var partyAbbrByName = {};\n        //     if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        //       partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n        //         partyColorByName[edge.node.name] = edge.node.colour;\n        //         partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n        //       })\n        //     }            \n\n        //     function getFillColorFromPartyName(partyName) {\n        //       if (!partyName)\n        //         return regionColor;\n        //       return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n        //     }\n\n        //     function getMainPartyName(d, i) {\n        //         var partyName;\n        //         var regionType = self.state.regionType;\n        //         if (regionType === \"national\") {\n        //             var provinceName = d.properties.SPROVINCE;\n        //             partyName = locationToMainParty[provinceName];\n        //         } else if (regionType === \"province\") {\n        //             var muniCode = getMunicipalityCode(d.properties);\n        //             partyName = locationToMainParty[muniCode];\n        //         } else if (regionType === \"municipality\"){// \"municipality\"\n        //             var iecId = getMunicipalityiecId(d.properties);\n        //             partyName = locationToMainParty[iecId];\n        //         } else {// \"municipality-vd\"\n        //             var iecId = getMunicipalityiecId(d.properties);\n        //             partyName = locationToMainParty[iecId];\n        //         }\n        //         return partyName;\n        //     }\n        //     function getMainPartyColorFromRegion(d, i) {\n        //         var partyName = getMainPartyName(d, i);\n        //         var partyColor = getFillColorFromPartyName(partyName);\n        //         return partyColor;\n        //     }\n\n        //     var jsonDataFeatures;\n        //     if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n        //         var regionType = self.state.regionType\n        //         if (regionType == \"municipality\") {\n        //             if (!geoJsonData.objects[self.state.muniCode])\n        //                 return;\n        //             geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n        //         } else { // \"municipality-vd\"\n        //             if (!geoJsonData.objects[self.state.iecId])\n        //                 return;\n        //             geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n        //         }\n        //     }\n\n        //     jsonDataFeatures = geoJsonData.features;\n\n        //     var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n        //     var path = d3.geoPath().projection(projection);\n\n        //     // fill region with regionColor\n        //     svg.selectAll(`.${className(\"region\")}`)\n        //         .data(jsonDataFeatures)\n        //         .enter()\n        //         .append(\"path\")\n        //         .attr(\"class\", className(\"region\"))\n        //         .attr(\"stroke\", regionBorderColor)\n        //         .attr(\"fill\", getMainPartyColorFromRegion)\n        //         .attr(\"id\", function(d, i) {\n        //             return `region-${i}`;\n        //         })\n        //         .attr(\"d\", path);\n            \n        //     var parties = [];\n        //     var availableCnt = [];\n        //     jsonDataFeatures.forEach((d, i) => {\n        //         var party = getMainPartyName(d, i);\n        //         if (parties.indexOf(party) == -1) {\n        //             parties.push(party);\n        //             availableCnt.push(1);\n        //         } else {\n        //             availableCnt[parties.indexOf(party)] ++;\n        //         }\n        //     })\n\n        //     parties.sort(function(a, b){\n        //         return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n        //     })\n\n        //     function getLegendXY(i) {\n        //         return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n        //     }\n        //     var legends = svg.selectAll(`.${className(\"legend\")}`)\n        //         .data(parties)\n        //         .enter()\n        //         .append('g')\n        //         .attr(\"class\", className(\"legend\"))\n        //         .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n        //     legends\n        //         .append(\"rect\")\n        //         .attr('width', 20)\n        //         .attr('height', 20)\n        //         .attr('x', 0)\n        //         .attr('y', 0)\n        //         .attr(\"fill\", (party, i) => {\n        //             return getFillColorFromPartyName(party);\n        //         })\n        //     legends.append('text')\n        //         .attr('x', 30)\n        //         .attr('y', 16)\n        //         .text(party => partyAbbrByName[party])\n            \n        //     if (self.state.regionType.indexOf(\"municipality\") == -1) {\n        //         svg.selectAll(\".place-label\")\n        //             .data(jsonDataFeatures)\n        //         .enter().append(\"text\")\n        //             .attr(\"class\", \"place-label\")\n        //             .attr(\"font-size\", \"12px\")\n        //             .attr(\"transform\", function(d) { \n        //                 var center, projectionCenter;\n        //                 if (d.geometry.type === \"Polygon\") {\n        //                     center = polylabel(d.geometry.coordinates);\n        //                     projectionCenter = projection(center);\n        //                     projectionCenter[1] -= 12;\n        //                     return \"translate(\" + projectionCenter + \")\"; \n        //                 } else { //\"MultiPolygon\"\n        //                     center = polylabel(d.geometry.coordinates[0]);\n        //                     projectionCenter = projection(center);\n        //                     projectionCenter[1] -= 5;\n        //                     return \"translate(\" + projectionCenter + \")\"; \n        //                 }\n        //             })\n        //             .attr(\"dy\", \".35em\")\n        //             .style(\"text-anchor\", \"middle\")\n        //             .text(d => getSubRegionName(d.properties, self.state))\n        //     }\n\n        //     if (self.state.regionType.indexOf(\"municipality\") == -1) {\n        //         fixMapLabelIntersect();\n        //     }\n\n        //     //hidden area for catching events\n        //     svg.selectAll(\".eventLayer\")\n        //         .data(jsonDataFeatures)\n        //     .enter()\n        //         .append(\"path\")\n        //         .attr(\"d\", path)\n        //         .attr(\"class\", \"eventLayer\")\n        //         .attr(\"id\", function(d, i) {\n        //             return `eventLayer-${i}`;\n        //         })\n        //         .attr(\"fill\", \"transparent\")\n        //         .on(\"mouseover\", function(d, i) {\n        //             d3.select(`#region-${i}`)\n        //                 .attr(\"stroke-width\", 3)\n        //                 .style(\"fill-opacity\", 0.8);\n        //         })\n        //         .on(\"mousemove\", function(d, i) {\t\n        //             // if (self.state.regionType === \"municipality\") return;\n        //             tooltipDiv.transition()\t\t\n        //                 .duration(200)\t\t\n        //                 .style(\"opacity\", 1);\n\n        //             var undefinedText;\n        //             if (self.state.regionType === \"province\") {\n        //                 undefinedText = \"New municipality - no previous results available\"\n        //             } else {\n        //                 undefinedText = \"New voting district - no previous results available\"\n        //             }\n        //             var mainPartyName = getMainPartyName(d, i);\n        //             var subRegionName = getSubRegionName(d.properties, self.state);\n        //             var tooltipText = (typeof mainPartyName !== \"undefined\")? \n        //                         (subRegionName + \" : \" + mainPartyName) : undefinedText;\n\n        //             tooltipDiv.html(tooltipText)\t\n        //                 .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n        //                 .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n        //         })\n        //         .on(\"mouseout\", function(d, i) {\n        //             d3.select(`#region-${i}`)\n        //                 .attr(\"stroke-width\", 1)\n        //                 .style(\"fill-opacity\", 1);\n                    \n        //             if (self.state.regionType === \"municipality\") return;\n\n        //             tooltipDiv.transition()\t\t\n        //                 .duration(200)\t\t\n        //                 .style(\"opacity\", 0);\t\n        //         })\n        //         .on(\"click\", function(d, i) {                  \n        //             tooltipDiv.transition()\t\t\n        //                 .duration(200)\t\t\n        //                 .style(\"opacity\", 0);\t\n                    \n        //             var regionType = self.state.regionType;\n        //             var newState, event;\n        //             if (regionType === \"national\") {\n        //                 newState = {\n        //                     regionType: \"province\",\n        //                     provinceName: d.properties.SPROVINCE\n        //                 }\n        //             } else if (regionType === \"province\") {\n        //                 newState = {\n        //                     regionType: \"municipality\", \n        //                     provinceName: self.state.provinceName,\n        //                     muniName: d.properties.smunicipal,\n        //                     muniCode: getMunicipalityCode(d.properties),\n        //                 }\n        //             } else if (regionType === \"municipality\"){ // \"municipality\"\n        //                 var newState = {\n        //                     regionType: \"municipality-vd\", \n        //                     provinceName: self.state.provinceName,\n        //                     muniName: self.state.muniName,\n        //                     muniCode: self.state.muniCode,\n        //                     iecId: getMunicipalityiecId(d.properties),\n        //                 }\n        //             } else { // \"municipality-vd\"\n        //                 return;\n        //             }\n        //             triggerCustomEvent(events.REGION_CHANGE, newState);\n        //             if (self.state.disableNavigation) {\n        //                 return;\n        //             }\n        //             self.setState(newState);\n        //         })\n        //     if (!self.state.disableNavigation) {\n        //         var fo = svg.append(\"foreignObject\")\n        //             .attr(\"x\", 0)\n        //             .attr(\"y\", 10)\n        //             .attr(\"width\", 500)\n        //             .attr(\"height\", 30)\n        //             .attr(\"class\", \"map-controls\")\n                \n        //         function setRegionType(regionType) {\n        //             var newState;\n        //             var newState = {\n        //                 regionType: self.state.regionType, \n        //                 provinceName: self.state.provinceName,\n        //                 muniName: self.state.muniName,\n        //                 muniCode: self.state.muniCode,\n        //                 iecId: self.state.iecId,\n        //             }\n        //             newState.regionType = regionType;\n        //             triggerCustomEvent(events.REGION_CHANGE, newState);\n        //             self.setState(newState);\n        //         }\n\n        //         function appendSpan(foDiv, regionName, addSub) {\n        //             if (addSub) foDiv.append(\"span\").html(\" > \");\n        //             foDiv.append(\"span\")\n        //                 .style(\"height\", \"30px\")\n        //                 .style(\"cursor\", \"default\")\n        //                 .html(regionName);\n        //         }\n\n        //         function appendLink(foDiv, regionName, regionType, addSub) {\n        //             if (addSub) foDiv.append(\"span\").html(\" > \");\n        //             foDiv.append(\"a\")\n        //                 .style(\"height\", \"30px\")\n        //                 .style(\"cursor\", \"pointer\")\n        //                 .html(regionName)\n        //                 .on(\"click\", function() {\n        //                     setRegionType(regionType);\n        //                 });\n        //         }\n                \n        //         var foDiv = fo.append(\"xhtml:div\");\n        //         var regionType = self.state.regionType;\n        //         if (regionType == \"national\") {\n        //             appendSpan(foDiv, \"South Africa\", false);\n        //         } else {\n        //             appendLink(foDiv, \"South Africa\", \"national\", false);\n        //             if (regionType == \"province\") {\n        //                 appendSpan(foDiv, self.state.provinceName, true);\n        //             } else {\n        //                 appendLink(foDiv, self.state.provinceName, \"province\", true);\n        //                 if (regionType == \"municipality\") {\n        //                     appendSpan(foDiv, self.state.muniCode, true);\n        //                 } else {\n        //                     appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n        //                     appendSpan(foDiv, self.state.iecId, true);\n        //                 }\n        //             }\n        //         }\n        //     }\n        //     self.getLoadingSpinner()\n        //         .style(\"display\", \"none\");\n        // }).catch(error => {\n        //     console.error(error);\n\n        //     self.getLoadingSpinner()\n        //         .style(\"display\", \"none\");\n            \n        //     if (self.state.disableNavigation) {\n        //         return;\n        //     }\n\n        //     var currentRegionName = getRegionName(this.state);\n        //     var regionType = self.state.regionType;\n        //     var newState, event;\n\n        //     var newState = {\n        //         regionType: self.state.regionType, \n        //         provinceName: self.state.provinceName,\n        //         muniName: self.state.muniName,\n        //         muniCode: self.state.muniCode,\n        //         iecId: self.state.iecId,\n        //     }\n            \n        //     if (regionType === \"province\") {\n        //         newState.regionType = \"national\";\n        //     } else if (regionType === \"municipality\") {\n        //         newState.regionType = \"province\";\n        //     } else if (regionType === \"municipality-vd\") {\n        //         newState.regionType = \"municipality\";\n        //     }\n\n        //     triggerCustomEvent(events.REGION_CHANGE, newState);\n        //     self.setState(newState);\n        //     setTimeout(() => {\n        //         alert(`${currentRegionName} has been disestablished`); \n        //     }, 300);    \n        // })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            if (!window.canvg) {\n                return reject(\"canvg module not available\");\n            }\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        // var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n        var dataLoaders = [turnoutDataLoader];\n\n        geoJsonLoader.then(function(value) {\n            var geoJsonData = value;\n            Promise.all(dataLoaders).then(function(values){ \n                var locationToTurnout = parseTurnoutData(values[0], props);      \n    \n                function getMergedColorWithWhite(percent) {\n                    var originRGB = {\n                        R: 0,\n                        G: 255,\n                        B: 0\n                    }\n                    var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                    var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                    var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                    return `rgb(${mixedR},${mixedG},${mixedB})`;\n                }\n                function getFillColorFromTurnout(turnout) {\n                  if (turnout > 65)\n                    return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n                  if (turnout >= 60)\n                    return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n                  if (turnout >= 55)\n                    return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n                  if (turnout >= 50)\n                    return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n                  if (turnout >= 45)\n                    return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n                  if (turnout >= 40)\n                    return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n                  if (turnout >= 35)\n                    return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n                  if (turnout >= 30)\n                    return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n                  return \"#D3F6C3\";//regionColor;\n                }\n    \n                function getTurnout(d, i) {\n                    var turnout;\n                    var regionType = self.state.regionType;\n                    if (regionType === \"national\") {\n                        var provinceName = d.properties.SPROVINCE;\n                        turnout = locationToTurnout[provinceName];\n                    } else if (regionType === \"province\") {\n                        var muniCode = getMunicipalityCode(d.properties);\n                        turnout = locationToTurnout[muniCode];\n                    } else if (regionType === \"municipality\"){// \"municipality\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        turnout = locationToTurnout[iecId];\n                    } else {// \"municipality-vd\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        turnout = locationToTurnout[iecId];\n                    }\n                    return turnout;\n                }\n                function getFillColorFromRegion(d, i) {\n                    var turnout = getTurnout(d, i);\n                    var fillColor = getFillColorFromTurnout(turnout);\n                    return fillColor;\n                }\n                var jsonDataFeatures;\n                if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                    var regionType = self.state.regionType\n                    if (regionType == \"municipality\") {\n                        if (!geoJsonData.objects[self.state.muniCode])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                    } else { // \"municipality-vd\"\n                        if (!geoJsonData.objects[self.state.iecId])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                    }\n                }\n    \n                jsonDataFeatures = geoJsonData.features;\n    \n                var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n                var path = d3.geoPath().projection(projection);\n    \n                // fill region with regionColor\n                svg.selectAll(`.${className(\"region\")}`)\n                    .data(jsonDataFeatures)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", className(\"region\"))\n                    .attr(\"stroke\", regionBorderColor)\n                    .attr(\"fill\", getFillColorFromRegion)\n                    .attr(\"id\", function(d, i) {\n                        return `region-${i}`;\n                    })\n                    .attr(\"d\", path);\n                \n                var turnoutColors = [{\n                    text: \"More than 65%\",\n                    turnout: 66\n                },{\n                    text: \"60% - 65%\",\n                    turnout: 60\n                },{\n                    text: \"55% - 60%\",\n                    turnout: 55\n                },{\n                    text: \"50% - 55%\",\n                    turnout: 50\n                },{\n                    text: \"45% - 50%\",\n                    turnout: 45\n                },{\n                    text: \"40% - 45%\",\n                    turnout: 40\n                },{\n                    text: \"35% - 40%\",\n                    turnout: 35\n                },{\n                    text: \"30% - 35%\",\n                    turnout: 30\n                },{\n                    text: \"Less than 30%\",\n                    turnout: 15\n                }];\n                \n                function getLegendXY(i) {\n                    return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n                }\n                var legends = svg.selectAll(`.${className(\"legend\")}`)\n                    .data(turnoutColors)\n                    .enter()\n                    .append('g')\n                    .attr(\"class\", className(\"legend\"))\n                    .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n                legends\n                    .append(\"rect\")\n                    .attr('width', 20)\n                    .attr('height', 20)\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr(\"fill\", (it) => {\n                        return getFillColorFromTurnout(it.turnout);\n                    })\n                legends.append('text')\n                    .attr('x', 30)\n                    .attr('y', 16)\n                    .text(it => it.text)\n                \n                if (self.state.regionType !== \"municipality\") {\n                    svg.selectAll(\".place-label\")\n                        .data(jsonDataFeatures)\n                    .enter().append(\"text\")\n                        .attr(\"class\", \"place-label\")\n                        .attr(\"font-size\", \"12px\")\n                        .attr(\"transform\", function(d) { \n                            var center, projectionCenter;\n                            if (d.geometry.type === \"Polygon\") {\n                                center = polylabel(d.geometry.coordinates);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 12;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            } else { //\"MultiPolygon\"\n                                center = polylabel(d.geometry.coordinates[0]);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 5;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            }\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .text(d => getSubRegionName(d.properties, self.state))\n                }\n    \n                if (self.state.regionType !== \"municipality\") {\n                    fixMapLabelIntersect();\n                }\n    \n                //hidden area for catching events\n                svg.selectAll(\".eventLayer\")\n                    .data(jsonDataFeatures)\n                .enter()\n                    .append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"eventLayer\")\n                    .attr(\"id\", function(d, i) {\n                        return `eventLayer-${i}`;\n                    })\n                    .attr(\"fill\", \"transparent\")\n                    .on(\"mouseover\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 3)\n                            .style(\"fill-opacity\", 0.8);\n                    })\n                    .on(\"mousemove\", function(d, i) {\n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 1);\n                        \n                        var undefinedText;\n                        if (self.state.eventDescription.indexOf(\"2019\") == -1) {\n                            if (self.state.regionType === \"province\") {\n                                undefinedText = \"New municipality - no previous results available\"\n                            } else {\n                                undefinedText = \"New voting district - no previous results available\"\n                            }\n                        } else {\n                            undefinedText = \"votes not counted yet\";\n                        }\n    \n                        var turnoutData = getTurnout(d, i);\n                        var subRegionName = getSubRegionName(d.properties, self.state);\n                        var tooltipText = (typeof turnoutData !== \"undefined\")? \n                                    (subRegionName + \" : \" + turnoutData + \"%\") : undefinedText;\n    \n                        tooltipDiv.html(tooltipText)\t\n                            .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                            .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                    })\n                    .on(\"mouseout\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 1)\n                            .style(\"fill-opacity\", 1);\n                        \n                        if (self.state.regionType === \"municipality\") return;\n    \n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                    })\n                    .on(\"click\", function(d, i) {\n                        if (self.state.disableNavigation) {\n                            return;\n                        }\n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                        \n                        var regionType = self.state.regionType;\n                        var newState;\n                        if (regionType === \"national\") {\n                            newState = {\n                                regionType: \"province\",\n                                provinceName: d.properties.SPROVINCE\n                            }\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n                            self.setState(newState);\n                        } else if (regionType === \"province\") {\n                            newState = {\n                                regionType: \"municipality\", \n                                provinceName: self.state.provinceName,\n                                muniName: d.properties.smunicipal,\n                                muniCode: getMunicipalityCode(d.properties),\n                            }\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n                            self.setState(newState);\n                        } else { // \"municipality\"\n                            var newState = {\n                                regionType: \"municipality-vd\", \n                                provinceName: self.state.provinceName,\n                                muniName: self.state.muniName,\n                                muniCode: self.state.muniCode,\n                                iecId: getMunicipalityiecId(d.properties),\n                            }\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n    \n                            self.setState(newState);\n                        }\n                    })\n                    if (!self.state.disableNavigation) {\n                        var fo = svg.append(\"foreignObject\")\n                            .attr(\"x\", 0)\n                            .attr(\"y\", 10)\n                            .attr(\"width\", 500)\n                            .attr(\"height\", 30)\n                            .attr(\"class\", \"map-controls\")\n                        \n                        function setRegionType(regionType) {\n                            var newState;\n                            var newState = {\n                                regionType: self.state.regionType, \n                                provinceName: self.state.provinceName,\n                                muniName: self.state.muniName,\n                                muniCode: self.state.muniCode,\n                                iecId: self.state.iecId,\n                            }\n                            newState.regionType = regionType;\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n                            self.setState(newState);\n                        }\n        \n                        function appendSpan(foDiv, regionName, addSub) {\n                            if (addSub) foDiv.append(\"span\").html(\" > \");\n                            foDiv.append(\"span\")\n                                .style(\"height\", \"30px\")\n                                .style(\"cursor\", \"default\")\n                                .html(regionName);\n                        }\n        \n                        function appendLink(foDiv, regionName, regionType, addSub) {\n                            if (addSub) foDiv.append(\"span\").html(\" > \");\n                            foDiv.append(\"a\")\n                                .style(\"height\", \"30px\")\n                                .style(\"cursor\", \"pointer\")\n                                .html(regionName)\n                                .on(\"click\", function() {\n                                    setRegionType(regionType);\n                                });\n                        }\n                        \n                        var foDiv = fo.append(\"xhtml:div\");\n                        var regionType = self.state.regionType;\n                        if (regionType == \"national\") {\n                            appendSpan(foDiv, \"South Africa\", false);\n                        } else {\n                            appendLink(foDiv, \"South Africa\", \"national\", false);\n                            if (regionType == \"province\") {\n                                appendSpan(foDiv, self.state.provinceName, true);\n                            } else {\n                                appendLink(foDiv, self.state.provinceName, \"province\", true);\n                                if (regionType == \"municipality\") {\n                                    appendSpan(foDiv, self.state.muniCode, true);\n                                } else {\n                                    appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                    appendSpan(foDiv, self.state.iecId, true);\n                                }\n                            }\n                        }\n                        // foDiv\n                        //     .append(\"button\")\n                        //     .attr(\"class\", \"go-back\")\n                        //     .style(\"height\", \"30px\")\n                        //     .style(\"color\", \"black\")\n                        //     .html(\"go back\")\n                        //     .on(\"click\", function() {\n                        //         var regionType = self.state.regionType;\n                        //         var newState, event;\n            \n                        //         var newState = {\n                        //             regionType: self.state.regionType, \n                        //             provinceName: self.state.provinceName,\n                        //             muniName: self.state.muniName,\n                        //             muniCode: self.state.muniCode,\n                        //             iecId: self.state.iecId,\n                        //         }\n                                \n                        //         if (regionType === \"province\") {\n                        //             newState.regionType = \"national\";\n                        //         } else if (regionType === \"municipality\") {\n                        //             newState.regionType = \"province\";\n                        //         } else if (regionType === \"municipality-vd\") {\n                        //             newState.regionType = \"municipality\";\n                        //         }\n            \n                        //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                        //         self.setState(newState);\n                        //     });\n                    }\n                self.getLoadingSpinner()\n                    .style(\"display\", \"none\");\n            }).catch(error => {\n                console.error(error);\n                alert(`failed to get data from server`);\n            })\n        }).catch(error => {\n            console.error(error);       \n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                if (regionType == \"national\" || regionType == \"province\") {\n                    alert(`Can't get map data for ${currentRegionName}`); \n                } else {\n                    alert(`${currentRegionName} has been disestablished`); \n                }\n            }, 300);    \n        })\n\n        // Promise.all(dataLoaders).then(function(values){ \n        //     var geoJsonData = values[0];\n        //     var locationToTurnout = parseTurnoutData(values[1], props);      \n\n        //     function getMergedColorWithWhite(percent) {\n        //         var originRGB = {\n        //             R: 0,\n        //             G: 255,\n        //             B: 0\n        //         }\n        //         var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n        //         var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n        //         var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n        //         return `rgb(${mixedR},${mixedG},${mixedB})`;\n        //     }\n        //     function getFillColorFromTurnout(turnout) {\n        //       if (turnout > 65)\n        //         return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n        //       if (turnout >= 60)\n        //         return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n        //       if (turnout >= 55)\n        //         return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n        //       if (turnout >= 50)\n        //         return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n        //       if (turnout >= 45)\n        //         return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n        //       if (turnout >= 40)\n        //         return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n        //       if (turnout >= 35)\n        //         return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n        //       if (turnout >= 30)\n        //         return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n        //       return \"#D3F6C3\";//regionColor;\n        //     }\n\n        //     function getTurnout(d, i) {\n        //         var turnout;\n        //         var regionType = self.state.regionType;\n        //         if (regionType === \"national\") {\n        //             var provinceName = d.properties.SPROVINCE;\n        //             turnout = locationToTurnout[provinceName];\n        //         } else if (regionType === \"province\") {\n        //             var muniCode = getMunicipalityCode(d.properties);\n        //             turnout = locationToTurnout[muniCode];\n        //         } else if (regionType === \"municipality\"){// \"municipality\"\n        //             var iecId = getMunicipalityiecId(d.properties);\n        //             turnout = locationToTurnout[iecId];\n        //         } else {// \"municipality-vd\"\n        //             var iecId = getMunicipalityiecId(d.properties);\n        //             turnout = locationToTurnout[iecId];\n        //         }\n        //         return turnout;\n        //     }\n        //     function getFillColorFromRegion(d, i) {\n        //         var turnout = getTurnout(d, i);\n        //         var fillColor = getFillColorFromTurnout(turnout);\n        //         return fillColor;\n        //     }\n        //     var jsonDataFeatures;\n        //     if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n        //         var regionType = self.state.regionType\n        //         if (regionType == \"municipality\") {\n        //             if (!geoJsonData.objects[self.state.muniCode])\n        //                 return;\n        //             geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n        //         } else { // \"municipality-vd\"\n        //             if (!geoJsonData.objects[self.state.iecId])\n        //                 return;\n        //             geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n        //         }\n        //     }\n\n        //     jsonDataFeatures = geoJsonData.features;\n\n        //     var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n        //     var path = d3.geoPath().projection(projection);\n\n        //     // fill region with regionColor\n        //     svg.selectAll(`.${className(\"region\")}`)\n        //         .data(jsonDataFeatures)\n        //         .enter()\n        //         .append(\"path\")\n        //         .attr(\"class\", className(\"region\"))\n        //         .attr(\"stroke\", regionBorderColor)\n        //         .attr(\"fill\", getFillColorFromRegion)\n        //         .attr(\"id\", function(d, i) {\n        //             return `region-${i}`;\n        //         })\n        //         .attr(\"d\", path);\n            \n        //     var turnoutColors = [{\n        //         text: \"More than 65%\",\n        //         turnout: 66\n        //     },{\n        //         text: \"60% - 65%\",\n        //         turnout: 60\n        //     },{\n        //         text: \"55% - 60%\",\n        //         turnout: 55\n        //     },{\n        //         text: \"50% - 55%\",\n        //         turnout: 50\n        //     },{\n        //         text: \"45% - 50%\",\n        //         turnout: 45\n        //     },{\n        //         text: \"40% - 45%\",\n        //         turnout: 40\n        //     },{\n        //         text: \"35% - 40%\",\n        //         turnout: 35\n        //     },{\n        //         text: \"30% - 35%\",\n        //         turnout: 30\n        //     },{\n        //         text: \"Less than 30%\",\n        //         turnout: 15\n        //     }];\n            \n        //     function getLegendXY(i) {\n        //         return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n        //     }\n        //     var legends = svg.selectAll(`.${className(\"legend\")}`)\n        //         .data(turnoutColors)\n        //         .enter()\n        //         .append('g')\n        //         .attr(\"class\", className(\"legend\"))\n        //         .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n        //     legends\n        //         .append(\"rect\")\n        //         .attr('width', 20)\n        //         .attr('height', 20)\n        //         .attr('x', 0)\n        //         .attr('y', 0)\n        //         .attr(\"fill\", (it) => {\n        //             return getFillColorFromTurnout(it.turnout);\n        //         })\n        //     legends.append('text')\n        //         .attr('x', 30)\n        //         .attr('y', 16)\n        //         .text(it => it.text)\n            \n        //     if (self.state.regionType !== \"municipality\") {\n        //         svg.selectAll(\".place-label\")\n        //             .data(jsonDataFeatures)\n        //         .enter().append(\"text\")\n        //             .attr(\"class\", \"place-label\")\n        //             .attr(\"font-size\", \"12px\")\n        //             .attr(\"transform\", function(d) { \n        //                 var center, projectionCenter;\n        //                 if (d.geometry.type === \"Polygon\") {\n        //                     center = polylabel(d.geometry.coordinates);\n        //                     projectionCenter = projection(center);\n        //                     projectionCenter[1] -= 12;\n        //                     return \"translate(\" + projectionCenter + \")\"; \n        //                 } else { //\"MultiPolygon\"\n        //                     center = polylabel(d.geometry.coordinates[0]);\n        //                     projectionCenter = projection(center);\n        //                     projectionCenter[1] -= 5;\n        //                     return \"translate(\" + projectionCenter + \")\"; \n        //                 }\n        //             })\n        //             .attr(\"dy\", \".35em\")\n        //             .style(\"text-anchor\", \"middle\")\n        //             .text(d => getSubRegionName(d.properties, self.state))\n        //     }\n\n        //     if (self.state.regionType !== \"municipality\") {\n        //         fixMapLabelIntersect();\n        //     }\n\n        //     //hidden area for catching events\n        //     svg.selectAll(\".eventLayer\")\n        //         .data(jsonDataFeatures)\n        //     .enter()\n        //         .append(\"path\")\n        //         .attr(\"d\", path)\n        //         .attr(\"class\", \"eventLayer\")\n        //         .attr(\"id\", function(d, i) {\n        //             return `eventLayer-${i}`;\n        //         })\n        //         .attr(\"fill\", \"transparent\")\n        //         .on(\"mouseover\", function(d, i) {\n        //             d3.select(`#region-${i}`)\n        //                 .attr(\"stroke-width\", 3)\n        //                 .style(\"fill-opacity\", 0.8);\n        //         })\n        //         .on(\"mousemove\", function(d, i) {\n        //             tooltipDiv.transition()\t\t\n        //                 .duration(200)\t\t\n        //                 .style(\"opacity\", 1);\n                    \n        //             var undefinedText;\n        //             if (self.state.eventDescription.indexOf(\"2019\") == -1) {\n        //                 if (self.state.regionType === \"province\") {\n        //                     undefinedText = \"New municipality - no previous results available\"\n        //                 } else {\n        //                     undefinedText = \"New voting district - no previous results available\"\n        //                 }\n        //             } else {\n        //                 undefinedText = \"votes not counted yet\";\n        //             }\n\n        //             var turnoutData = getTurnout(d, i);\n        //             var subRegionName = getSubRegionName(d.properties, self.state);\n        //             var tooltipText = (typeof turnoutData !== \"undefined\")? \n        //                         (subRegionName + \" : \" + turnoutData + \"%\") : undefinedText;\n\n        //             tooltipDiv.html(tooltipText)\t\n        //                 .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n        //                 .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n        //         })\n        //         .on(\"mouseout\", function(d, i) {\n        //             d3.select(`#region-${i}`)\n        //                 .attr(\"stroke-width\", 1)\n        //                 .style(\"fill-opacity\", 1);\n                    \n        //             if (self.state.regionType === \"municipality\") return;\n\n        //             tooltipDiv.transition()\t\t\n        //                 .duration(200)\t\t\n        //                 .style(\"opacity\", 0);\t\n        //         })\n        //         .on(\"click\", function(d, i) {\n        //             if (self.state.disableNavigation) {\n        //                 return;\n        //             }\n        //             tooltipDiv.transition()\t\t\n        //                 .duration(200)\t\t\n        //                 .style(\"opacity\", 0);\t\n                    \n        //             var regionType = self.state.regionType;\n        //             var newState;\n        //             if (regionType === \"national\") {\n        //                 newState = {\n        //                     regionType: \"province\",\n        //                     provinceName: d.properties.SPROVINCE\n        //                 }\n        //                 triggerCustomEvent(events.REGION_CHANGE, newState);\n        //                 self.setState(newState);\n        //             } else if (regionType === \"province\") {\n        //                 newState = {\n        //                     regionType: \"municipality\", \n        //                     provinceName: self.state.provinceName,\n        //                     muniName: d.properties.smunicipal,\n        //                     muniCode: getMunicipalityCode(d.properties),\n        //                 }\n        //                 triggerCustomEvent(events.REGION_CHANGE, newState);\n        //                 self.setState(newState);\n        //             } else { // \"municipality\"\n        //                 var newState = {\n        //                     regionType: \"municipality-vd\", \n        //                     provinceName: self.state.provinceName,\n        //                     muniName: self.state.muniName,\n        //                     muniCode: self.state.muniCode,\n        //                     iecId: getMunicipalityiecId(d.properties),\n        //                 }\n        //                 triggerCustomEvent(events.REGION_CHANGE, newState);\n\n        //                 self.setState(newState);\n        //             }\n        //         })\n        //         if (!self.state.disableNavigation) {\n        //             var fo = svg.append(\"foreignObject\")\n        //                 .attr(\"x\", 0)\n        //                 .attr(\"y\", 10)\n        //                 .attr(\"width\", 500)\n        //                 .attr(\"height\", 30)\n        //                 .attr(\"class\", \"map-controls\")\n                    \n        //             function setRegionType(regionType) {\n        //                 var newState;\n        //                 var newState = {\n        //                     regionType: self.state.regionType, \n        //                     provinceName: self.state.provinceName,\n        //                     muniName: self.state.muniName,\n        //                     muniCode: self.state.muniCode,\n        //                     iecId: self.state.iecId,\n        //                 }\n        //                 newState.regionType = regionType;\n        //                 triggerCustomEvent(events.REGION_CHANGE, newState);\n        //                 self.setState(newState);\n        //             }\n    \n        //             function appendSpan(foDiv, regionName, addSub) {\n        //                 if (addSub) foDiv.append(\"span\").html(\" > \");\n        //                 foDiv.append(\"span\")\n        //                     .style(\"height\", \"30px\")\n        //                     .style(\"cursor\", \"default\")\n        //                     .html(regionName);\n        //             }\n    \n        //             function appendLink(foDiv, regionName, regionType, addSub) {\n        //                 if (addSub) foDiv.append(\"span\").html(\" > \");\n        //                 foDiv.append(\"a\")\n        //                     .style(\"height\", \"30px\")\n        //                     .style(\"cursor\", \"pointer\")\n        //                     .html(regionName)\n        //                     .on(\"click\", function() {\n        //                         setRegionType(regionType);\n        //                     });\n        //             }\n                    \n        //             var foDiv = fo.append(\"xhtml:div\");\n        //             var regionType = self.state.regionType;\n        //             if (regionType == \"national\") {\n        //                 appendSpan(foDiv, \"South Africa\", false);\n        //             } else {\n        //                 appendLink(foDiv, \"South Africa\", \"national\", false);\n        //                 if (regionType == \"province\") {\n        //                     appendSpan(foDiv, self.state.provinceName, true);\n        //                 } else {\n        //                     appendLink(foDiv, self.state.provinceName, \"province\", true);\n        //                     if (regionType == \"municipality\") {\n        //                         appendSpan(foDiv, self.state.muniCode, true);\n        //                     } else {\n        //                         appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n        //                         appendSpan(foDiv, self.state.iecId, true);\n        //                     }\n        //                 }\n        //             }\n        //             // foDiv\n        //             //     .append(\"button\")\n        //             //     .attr(\"class\", \"go-back\")\n        //             //     .style(\"height\", \"30px\")\n        //             //     .style(\"color\", \"black\")\n        //             //     .html(\"go back\")\n        //             //     .on(\"click\", function() {\n        //             //         var regionType = self.state.regionType;\n        //             //         var newState, event;\n        \n        //             //         var newState = {\n        //             //             regionType: self.state.regionType, \n        //             //             provinceName: self.state.provinceName,\n        //             //             muniName: self.state.muniName,\n        //             //             muniCode: self.state.muniCode,\n        //             //             iecId: self.state.iecId,\n        //             //         }\n                            \n        //             //         if (regionType === \"province\") {\n        //             //             newState.regionType = \"national\";\n        //             //         } else if (regionType === \"municipality\") {\n        //             //             newState.regionType = \"province\";\n        //             //         } else if (regionType === \"municipality-vd\") {\n        //             //             newState.regionType = \"municipality\";\n        //             //         }\n        \n        //             //         triggerCustomEvent(events.REGION_CHANGE, newState);\n        //             //         self.setState(newState);\n        //             //     });\n        //         }\n        //     self.getLoadingSpinner()\n        //         .style(\"display\", \"none\");\n        // }).catch(error => {\n        //     console.error(error);       \n        //     self.getLoadingSpinner()\n        //         .style(\"display\", \"none\");\n        //     var currentRegionName = getRegionName(this.state);\n        //     var regionType = self.state.regionType;\n        //     var newState, event;\n\n        //     var newState = {\n        //         regionType: self.state.regionType, \n        //         provinceName: self.state.provinceName,\n        //         muniName: self.state.muniName,\n        //         muniCode: self.state.muniCode,\n        //         iecId: self.state.iecId,\n        //     }\n            \n        //     if (regionType === \"province\") {\n        //         newState.regionType = \"national\";\n        //     } else if (regionType === \"municipality\") {\n        //         newState.regionType = \"province\";\n        //     } else if (regionType === \"municipality-vd\") {\n        //         newState.regionType = \"municipality\";\n        //     }\n\n        //     triggerCustomEvent(events.REGION_CHANGE, newState);\n        //     self.setState(newState);\n        //     setTimeout(() => {\n        //         if (regionType == \"national\" || regionType == \"province\") {\n        //             alert(`Can't get map data for ${currentRegionName}`); \n        //         } else {\n        //             alert(`${currentRegionName} has been disestablished`); \n        //         }\n        //     }, 300);    \n        // })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 10\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n    \n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 2\n        }      \n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n      const {\n        stylesheetFor\n      } = this.state;\n\n        return (\n        <div ref=\"superwidget\" className={className(\"barchart-map\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = options.variable,\n        category = options.category,\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n\n        \n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var totalSvg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom)))\n        .classed(\"svg-content\", true);\n    \n    \n    var transformX = height / 2, transformY = height / 2;\n    if (options.chartType === 'Progress on Votes Count') {\n    } else {\n        transformX = width / 2;\n    }\n    var svg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + transformX + ',' + transformY + ')');\n    \n    var labelSvg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + height * 6 / 5 + ',' + height / 2 + ')');\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n\n        if (options.chartType === 'Progress on Votes Count') {\n            colorsData = colorsDataP;\n        } else {\n            var partyColorByName = {};\n\n            var partyColorsData = colorsDataP;\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.abbreviation] = edge.node.colour;\n                })\n            }\n            colorsData = partyColorByName;\n        }\n        \n        data = value;\n\n        if (options.chartType === 'Progress on Votes Count') {\n            labelSvg.selectAll('text').remove();\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', -15)\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle')\n                .text('Completed' + ': ' + data[0][\"percent\"] + '%');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .text('Captured Votes' + ': ' + data[0][\"count\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 15)\n                .text('Total' + ': ' + data[0][\"totalCount\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n        }\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        if (options.chartType === 'Progress on Votes Count') {\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n        } else { //'Race for Seats Donut chart'\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Seats' + ': ' + data.data[\"seats\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Party' + ': ' + data.data[\"name\"] + '</tspan>';\n        }\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count',\n  variable: 'percent',\n  category: 'name'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 4\n      }     \n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"piechart\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"../ProgVotesCountPiechart/d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Donut Chart',\n  variable: 'seats',\n  category: 'name',\n  viewBox: '170 0 360 320'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass DonutChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 17\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-donutchart-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"donutchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default DonutChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  showLegend: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 16\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 7\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      \n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 250;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 50;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n\n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n    svg.selectAll(\".topLabel\").remove();\n    svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n    if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n    } else {\n        errorText.text(\"\");\n    }\n    var partyColorByName = {};\n    var partyAbbrByName = {};\n    if (colorsData && colorsData[\"data\"][\"allParties\"][\"edges\"]) {\n      colorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n        partyColorByName[edge.node.name] = edge.node.colour;\n        partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n      })\n    }   \n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.eventDescription));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = Math.min(100, d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) * 1.5);\n      }\n      y.domain(minMaxY);\n\n      var availableParties = \n \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(4)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n\n      svg.selectAll(`.bar-group`).remove();\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.eventDescription)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.eventDescription) + x.bandwidth()*1/20}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var eventDescription = groupChartData[i].eventDescription;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*9/10])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(eventDescription)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n\n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n          \n          var parties = [];\n          var partyIecIds = [];\n          groupChartData.forEach(({data: chartData}) => {\n            chartData.forEach(({partyInfo}) => {\n              var party = partyInfo.name;\n              if (partyIecIds.indexOf(partyInfo.iecId) == -1) {\n                  parties.push(party);\n                  partyIecIds.push(partyInfo.iecId);\n              }\n            })\n          })\n          \n          function getLegendXY(i) {\n              return [XaxisOffset + (i%5)*100, height + 30 + parseInt(i/5) * 40];\n          }\n          svg.selectAll(`.${className(\"legend\")}`).remove();\n          var legends = svg.selectAll(`.${className(\"legend\")}`)\n              .data(parties)\n              .enter()\n              .append('g')\n              .attr(\"class\", className(\"legend\"))\n              .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n          legends\n              .append(\"rect\")\n              .attr('width', 10)\n              .attr('height', 10)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr(\"fill\", (party, i) => {\n                  return getFillColorFromPartyName(party);\n              })\n          legends.append('text')\n              .attr('x', 30)\n              .attr('y', 10)\n              .style('font-size', '12px')\n              .text(party => partyAbbrByName[party])\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../SplitNatProv/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForAllEvents,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: false\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numPartiesSplitNatProv: 3,\n        eventDescriptionsSplitNatProv: [\n          // \"National Elections 1999\",\n          // \"Provincial Elections 1999\",\n          // \"14 Apr 2004 National Election\",\n          // \"14 Apr 2004 Provincial Election\",\n          \"22 Apr 2009 National Election\",\n          \"22 Apr 2009 Provincial Election\",\n          \"2014 National Election\",\n          \"2014 Provincial Election\",\n          // \"2019 NATIONAL ELECTION\",\n          // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"province\",\n        provinceName: \"Western Cape\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 18\n      }\n\n      console.log(\"SplitNatProv state and props\", this.state, props)\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForAllEvents(props);\n      var dataLoaders = [votesDataLoader];\n\n      chartOptions.topLabel = `${getRegionName(props)} Race for Votes - Split (Nat/Prov)`;\n      if (this.state.componentID == -1000) {\n        chartOptions.topLabel = ``;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesDataForAllEvents(data, props);\n        // console.log(\"SplitNatProvProps\", props);\n        // console.log(\"SplitNatProvData\", data);\n        // console.log(\"SplitNatProvParsed\", chartData);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"Race for Votes\",\n            activeLinkId: ''\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        console.log(\"handleNavBarSelection\");\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var eventDescription, regionType, selectionData = {}, chartType = \"\";\n        var activeLinkId = passInfo.slice(1, passInfo.length).join('-');\n\n        if (passInfo[1] == '1') {\n            eventDescription = this.state.nationalEventDescription;\n            regionType = \"national\";\n            if (passInfo[2] == '1') {\n                switch (passInfo[3]) {\n                    case '1':\n                        chartType = \"votes-default\";\n                        break;\n                    case '2':\n                        chartType = \"votes-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"votes-CSIR\";\n                        break;\n                    case '4':\n                        chartType = \"votes-progress\";\n                        break;\n                    case '5':\n                        chartType = \"votes-turnout\";\n                        break;\n                    case '6':\n                        chartType = \"votes-myvd\";\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[2] == '2') {\n                switch (passInfo[3]) {\n                    case '1':\n                        chartType = \"seats-default\";\n                        break;\n                    case '2':\n                        chartType = \"seats-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"seats-electeds\";\n                        break;\n                    case '4':\n                        chartType = \"seats-women\";\n                        break;\n                    case '5':\n                        chartType = \"seats-age\";\n                        break;\n                    default:\n                        return;\n                }\n            } else {\n                return;\n            }\n        } else if (passInfo[1] == '2') {\n            eventDescription = this.state.provincialEventDescription;\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n            if (passInfo[3] == '1') {\n                switch (passInfo[4]) {\n                    case '1':\n                        chartType = \"votes-default\"; // done\n                        break;\n                    case '2':\n                        chartType = \"votes-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"votes-progress\"; // done\n                        break;\n                    case '4':\n                        chartType = \"votes-turnout\";// done\n                        break;\n                    case '5':\n                        chartType = \"votes-split\";\n                        break;\n                    case '6':\n                        chartType = \"votes-CSIR\";\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[3] == '2') {\n                switch (passInfo[4]) {\n                    case '1':\n                        chartType = \"seats-default\"; // done\n                        break;\n                    case '2':\n                        chartType = \"seats-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"seats-electeds\";\n                        break;\n                    case '4':\n                        chartType = \"seats-women\";\n                        break;\n                    case '5':\n                        chartType = \"seats-age\";\n                        break;\n                    default:\n                        return;\n                }\n            } else {\n                return;\n            }\n        } else if (passInfo[1] == '3') { // metros\n            eventDescription = this.state.nationalEventDescription;\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            chartType = \"votes-default\";\n        } else {\n            return;\n        }\n\n        if (!chartType)\n            return;\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            // if (this.state.regionType == newState.regionType \n            //     && this.state.comp == chartType)\n            //     return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            // if (this.state.regionType == newState.regionType \n            //     && this.state.provinceName == newState.provinceName \n            //     && this.state.comp == chartType)\n            //     return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            // if (this.state.regionType == newState.regionType \n            //     && this.state.provinceName == newState.provinceName\n            //     && this.state.muniName == newState.muniName\n            //     && this.state.comp == chartType)\n            //     return;\n        }\n        newState.eventDescription = eventDescription;\n        newState.comp = chartType;\n\n        if (newState.comp == \"votes-myvd\") {\n            newState.regionType = \"municipality-vd\";\n            newState.iecId = \"\";\n        }\n\n        if (newState.comp == \"seats-electeds\" || newState.comp == \"seats-women\" || newState.comp == \"seats-age\") {\n            triggerCustomEvent(events.SEATS_ELECTEDS_EVENT, newState);\n            return;\n        }\n\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, newState);\n        // triggerCustomEvent(events.REGION_CHANGE, newState);\n        // triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                label: 'National Assembly',\n                content: [\n                    {\n                        label: \"Race for votes\",\n                        content: [\n                            {\n                                icon: `1-1-1`,\n                                label: `National assembly`,\n                                to: `1-1-1`,\n                            },\n                            {\n                                icon: `1-1-2`,\n                                label: `Comparisons`,\n                                to: `1-1-2`,\n                            },\n                            // {\n                            //     icon: `1-1-3`,\n                            //     label: `CSIR Predictions`,\n                            //     to: `1-1-3`,\n                            // },\n                            {\n                                icon: `1-1-4`,\n                                label: `Counting progress`,\n                                to: `1-1-4`,\n                            },\n                            {\n                                icon: `1-1-5`,\n                                label: `Turnout`,\n                                to: `1-1-5`,\n                            },\n                            {\n                                icon: `1-1-6`,\n                                label: `My voting District`,\n                                to: `1-1-6`,\n                            },\n                            {\n                                label: `Metros`,\n                                content: metrosData.map((metro, i) => {\n                                    return {\n                                        icon: `3-${i}`,\n                                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                                        to: `3-${i}`,\n                                    }\n                                })\n                            }\n                        ]\n                    },\n                    {\n                        label: \"Race for seats\",\n                        content: [\n                            {\n                                icon: `1-2-1`,\n                                label: `National assembly`,\n                                to: `1-2-1`\n                            },\n                            {\n                                icon: `1-2-2`,\n                                label: `Comparisons`,\n                                to: `1-2-2`,\n                            },\n                            {\n                                icon: `1-2-3`,\n                                label: `Electeds`,\n                                to: `1-2-3`,\n                            },\n                            // {\n                            //     icon: `1-2-4`,\n                            //     label: `Women`,\n                            //     to: `1-2-4`,\n                            // },\n                            // {\n                            //     icon: `1-2-5`,\n                            //     label: `Age`,\n                            //     to: `1-2-5`,\n                            // }\n                        ]\n                    }\n                ]\n            },\n            {\n                label: 'Provincial Legislature',\n                content: provincesData.map((province, i) => {\n                    return {\n                        label: province.name,\n                        content: [\n                            {\n                                label: \"Race for votes\",\n                                content: [\n                                    {\n                                        icon: `2-${i}-1-1`,\n                                        label: `Provincial legislature`,\n                                        to: `2-${i}-1-1`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-2`,\n                                        label: `Comparisons`,\n                                        to: `2-${i}-1-2`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-3`,\n                                        label: `Counting progress`,\n                                        to: `2-${i}-1-3`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-4`,\n                                        label: `Turnout`,\n                                        to: `2-${i}-1-4`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-5`,\n                                        label: `Split (Nat/Prov)`,\n                                        to: `2-${i}-1-5`,\n                                    },\n                                    // {\n                                    //     icon: `2-${i}-1-6`,\n                                    //     label: `CSIR Predictions`,\n                                    //     to: `2-${i}-1-6`,\n                                    // },\n                                ]\n                            },\n                            {\n                                label: \"Race for seats\",\n                                content: [\n                                    {\n                                        icon: `2-${i}-2-1`,\n                                        label: `Provincial legislature`,\n                                        to: `2-${i}-2-1`,\n                                    },\n                                    {\n                                        icon: `2-${i}-2-2`,\n                                        label: `Comparisons`,\n                                        to: `2-${i}-2-2`,\n                                    },\n                                    {\n                                        icon: `2-${i}-2-3`,\n                                        label: `Electeds`,\n                                        to: `2-${i}-2-3`,\n                                    },\n                                    // {\n                                    //     icon: `2-${i}-2-4`,\n                                    //     label: `Women`,\n                                    //     to: `2-${i}-2-4`,\n                                    // },\n                                    // {\n                                    //     icon: `2-${i}-2-5`,\n                                    //     label: `Age`,\n                                    //     to: `2-${i}-2-5`,\n                                    // }\n                                ]\n                            }\n                        ]\n                    }\n                })\n            },\n            // {\n            //     icon: '',\n            //     label: 'Metros',\n                // content: metrosData.map((metro, i) => {\n                //     return {\n                //         icon: `4-${i}`,\n                //         label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                //         to: `4-${i}`,\n                //         // content: toShowCharts.map((toshowchart, chartIdx) => {\n                //         //     return {\n                //         //         icon: `4-${i}-${chartIdx}`,\n                //         //         label: toshowchart,\n                //         //         to: `4-${i}-${chartIdx}`,\n                //         //     }\n                //         // })\n                //     }\n                // })\n            // }\n        ];\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatDonut from '../RaceForSeatDonut/piechart';\nimport VoteCompBarchart from '../VoteCompBarchart/barchart';\nimport SeatCompBarchart from '../SeatCompBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\nimport SplitNatProvChart from '../SplitNatProv/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getSpoiltData,\n    getTurnoutDataForOneEvent,\n    getProgressVotesCount,\n    getVotesDataM,\n    getSeatsData\n} from \"../../api\";\n\nimport {\n    getRegionName,\n    getRegionName2,\n    getRegionName3,\n    triggerCustomEvent,\n    fetchDataFromOBJ,\n    handleRegionChange,\n\n    parseSpoiltVotesData,\n    parseTurnoutDataForOneEvent,\n    parseProgressVotesCount,\n    parseVotesData,\n    parseSeatsData,\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"65010035\", // regionIecId\n            comp: \"votes-default\",\n            stylesheetFor: \"web\",\n            componentID: 5,\n\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n            partyIecIds: [null, null, null, null],        \n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            eventDescriptionsSplitNatProv: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            currentTurnout: 0,\n            currentCountingProg: 0,\n            currentSpoiltVotes: 0\n        }\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.refreshIntervalID = setInterval(() => {\n            self.fetchCurrentResultData();\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n\n        document.addEventListener(events.SEATS_ELECTEDS_EVENT, this.handleSeatsElectedsEvent); // \"seats-electeds-event\"\n\n        this.fetchCurrentResultData();\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      this.fetchCurrentResultData()\n    }\n\n    handleSeatsElectedsEvent(event) {\n    }\n\n    fetchCurrentResultData() {\n        var self = this;\n        var newProps = JSON.parse(JSON.stringify(this.state));\n        var {comp, iecId} = this.state;\n\n        function dataLoadCallback(values) {\n            var spoiltData = values[0];\n            var turnoutData = values[1];\n            var progVotesData = values[2];\n\n            var parsedSpoiltData = parseSpoiltVotesData(spoiltData, newProps);\n            var parsedTurnoutData = parseTurnoutDataForOneEvent(turnoutData, newProps);\n            var parsedProgVotesData = parseProgressVotesCount(progVotesData, newProps);\n\n            var newState;\n            if (parsedTurnoutData[0] && parsedProgVotesData[0] && parsedSpoiltData[1]) {\n                newState = {            \n                    currentTurnout: parsedTurnoutData[0].percVoterTurnout,\n                    currentCountingProg: parsedProgVotesData[0].percent,\n                    currentSpoiltVotes: parsedSpoiltData[1].percent\n                };\n            } else {\n                newState = {            \n                    currentTurnout: 0,\n                    currentCountingProg: 0,\n                    currentSpoiltVotes: 0\n                };\n            }\n\n            if (comp == 'votes-comparisons') {\n                var votesData = values[3];\n                var parsedVotesData = parseVotesData(votesData, newProps);\n                newState.partyAbbrs = parsedVotesData.map(voteItem => voteItem.name);\n                newState.partyIecIds = parsedVotesData.map(voteItem => voteItem.iecId);\n            } else if (comp == 'seats-comparisons') {\n                var seatsData = values[3];\n                var parsedSeatsData = parseSeatsData(seatsData, newProps);\n                newState.partyAbbrs = parsedSeatsData.map(seatItem => seatItem.name);\n                newState.partyIecIds = parsedSeatsData.map(seatItem => seatItem.iecId);\n            }\n\n            if (newState.partyIecIds && newState.partyIecIds.join(\" \") != self.state.partyIecIds.join(\" \")) {\n                self.setState(newState);\n            } else {\n                if (self.refs.currentTurnout && self.refs.currentCountingProg && self.refs.currentSpoiltVotes) {\n                    self.refs.currentTurnout.innerHTML = newState.currentTurnout + \"%\";\n                    self.refs.currentCountingProg.innerHTML = newState.currentCountingProg + \"%\";\n                    self.refs.currentSpoiltVotes.innerHTML = newState.currentSpoiltVotes + \"%\";\n                }\n            }\n        }\n\n        if (newProps.regionType == \"municipality-vd\" && (!iecId || !iecId.length)) {\n            self.refs.currentTurnout.innerHTML = \"0%\";\n            self.refs.currentCountingProg.innerHTML = \"0%\";\n            self.refs.currentSpoiltVotes.innerHTML = \"0%\";\n            return;\n        }\n\n        // newProps.eventDescription = \"2019_mock1\";\n        var dataLoaders = [\n            getSpoiltData(newProps), \n            getTurnoutDataForOneEvent(newProps),\n            getProgressVotesCount(newProps),\n        ];\n\n        if (comp == 'votes-comparisons') {\n            dataLoaders.push(getVotesDataM(newProps));\n        }\n        if (comp == 'seats-comparisons') {\n            dataLoaders.push(getSeatsData(newProps));\n        }\n\n        Promise.all(dataLoaders)\n            .then(dataLoadCallback)\n            .catch(error => console.error(\"catched error\", error));\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'votes-comparisons' || comp == 'seats-comparisons') {\n            imageLoadPromises = [\n                ...this.barchartInstances.map(instance => instance.exportAsPNGUri()),\n                this.mapInstance.exportAsPNGUri()\n            ];\n        } else {\n            imageLoadPromises = [\n                this.barchartInstance.exportAsPNGUri(), \n                this.mapInstance.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            values.forEach((element, idx) => {\n                imgs.file(`image${idx+1}.png`, element, {base64: true});\n            });\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        if (newState.regionType == \"national\" && this.state.comp == \"votes-split\") {\n            newState.regionType = \"province\";\n            newState.provinceName = this.state.provinceName || \"Western Cape\";\n        }\n        this.setState(newState);\n\n        var triggerState = JSON.parse(JSON.stringify(newState));\n        triggerState.componentID = -1000;\n\n        triggerCustomEvent(events.CHART_PREVIEW, triggerState);\n        triggerCustomEvent(events.MAP_PREVIEW, triggerState);\n    };\n\n    renderTurnoutProgressSpoilt() {\n        var {\n            currentTurnout,\n            currentCountingProg,\n            currentSpoiltVotes,\n        } = this.state;\n\n        return (\n            <div className={cn(\"current-progress\")}>\n                <div className={cn(\"current-turnout\")}>\n                    <div>Turnout</div>\n                    <div ref=\"currentTurnout\">{currentTurnout}%</div>\n                </div>\n                <div className={cn(\"current-counting-progress\")}>\n                    <div>Counting Progress</div>\n                    <div ref=\"currentCountingProg\">{currentCountingProg}%</div>\n                </div>\n                <div className={cn(\"current-spoilt-votes\")}>\n                    <div>Spoilt Votes</div>\n                    <div ref=\"currentSpoiltVotes\">{currentSpoiltVotes}%</div>\n                </div>\n            </div>\n        )\n    }\n\n    renderQuickResultsTitle() {\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        if (comp == 'votes-default') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    RACE FOR VOTES: <span className=\"regionName\">{getRegionName2(self.state)}</span>\n                </div>\n            );\n        }\n        if (comp == 'seats-default') {\n            return (\n                <div className={className(\"quick-results-title\")+\" \"+className(\"race-for-seats\")}>\n                    RACE FOR SEATS: <span className=\"regionName\">{getRegionName(self.state)}</span>(#SEATS)\n                </div>\n            );\n        }\n        if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    RACE FOR VOTES: TURNOUT - {getRegionName3(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-progress') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    COUNTING PROGRESS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-comparisons') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    VOTES COMPARISONS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'seats-comparisons') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    SEATS COMPARISONS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-myvd') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    My Voting District {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-split') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    {getRegionName(self.state)} Race for Votes - Split (Nat/Prov)\n                </div>\n                \n            )\n        }\n        return null;\n    }\n\n    renderMap() {\n        var {\n            comp,\n            iecId,\n            muniCode\n        } = this.state;\n        var mapState = JSON.parse(JSON.stringify(this.state));\n        if (comp == 'votes-myvd') {\n            if (iecId && iecId.length && muniCode && muniCode.length) {\n                mapState.disableNavigation = true;\n                return (\n                    <div className={className(\"map-container\")}>\n                        <Map \n                            ref={instance => { this.mapInstance = instance; }} \n                            key={comp}\n                            {...mapState}\n                            componentID={-1000}\n                        />\n                    </div>\n                );\n            }\n            return null;\n        }\n        if (comp == 'votes-split') {\n            mapState.disableNavigation = true;\n            mapState.regionType = \"national\";\n            return (\n                <div className={className(\"map-container\")}>\n                    <Map \n                        ref={instance => { this.mapInstance = instance; }} \n                        key={comp}\n                        {...mapState}\n                        componentID={-1000}\n                    />\n                </div>\n            ); \n        } else if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"map-container\")}>\n                    <TurnoutMap \n                        ref={instance => { this.mapInstance = instance; }} \n                        key={comp}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        } else {\n            return (\n                <div className={className(\"map-container\")}>\n                    <Map \n                        ref={instance => { this.mapInstance = instance; }} \n                        key={comp}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n    }\n\n    renderBarchart() {\n        var {\n            comp,\n            partyIecIds,\n            partyAbbrs,\n            iecId\n        } = this.state;\n        if (comp == 'votes-default' || (comp == 'votes-myvd' && iecId && iecId.length)) {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <BarChart \n                        key={comp}\n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state} \n                        componentID={-1000}/>\n                </div>\n            );\n        }\n        if (comp == 'seats-default') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <RaceForSeatDonut \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <TurnoutBarchart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-progress') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <ProgressVotesPieChart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-comparisons') {\n            var {numParties} = this.state;\n            this.barchartInstances = new Array(numParties);\n            return (\n                <div className={className(\"barchart-container\")}>\n                    {\n                        partyIecIds.map((partyIecId, partyIdx) => {\n                            return <VoteCompBarchart \n                                ref={instance => { this.barchartInstances[partyIdx] = instance; }} \n                                key={partyIdx}\n                                {...this.state}\n                                partyAbbr={partyAbbrs[partyIdx]}\n                                partyIecId={partyIecId}\n                                componentID={-1000}\n                            />\n                        })\n                    }\n                </div>\n            );\n        }\n        if (comp == 'seats-comparisons') {\n            this.barchartInstances = new Array(numParties);\n            return (\n                <div className={className(\"barchart-container\")}>\n                    {\n                        partyIecIds.map((partyIecId, partyIdx) => {\n                            return <SeatCompBarchart \n                                ref={instance => { this.barchartInstances[partyIdx] = instance; }} \n                                key={partyIdx}\n                                {...this.state}\n                                partyAbbr={partyAbbrs[partyIdx]}\n                                partyIecId={partyIecId}\n                                componentID={-1000}\n                            />\n                        })\n                    }\n                </div>\n            );\n        }\n        if (comp == 'votes-split') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <SplitNatProvChart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000}\n                    />\n                </div>\n                \n            )\n        }\n        return null;\n    }\n\n    renderMyVDEnterForm() {\n        var {comp} = this.state;\n        if (comp != 'votes-myvd') {\n            return null;\n        }\n        return (\n            <div className=\"voting-district-enter-form\">\n                <input ref=\"vdInput\" type=\"text\" placeholder=\"65010035 or 86550385\"/>\n                <button onClick={this.onShowVDResult.bind(this)}> Show Result</button>\n            </div>\n        )\n    }\n\n    onShowVDResult() {\n        if (this.refs.vdInput.value.length == 0) {\n            alert(\"please enter valid vd number\");\n            return;\n        }\n        var newState = {\n            regionType: \"municipality-vd\",\n            iecId: this.refs.vdInput.value,\n            muniCode: \"\"\n        }\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n    }\n\n    render() {\n        var {\n            stylesheetFor,\n        } = this.state;\n        return (\n            <div className={className(\"quickresultswidget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar {...this.state}/>\n                    </div>\n                    <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                        {this.renderQuickResultsTitle()}\n                        {this.renderTurnoutProgressSpoilt()}\n                        {this.renderMyVDEnterForm()}\n                        {this.renderBarchart()}\n                        {this.renderMap()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 8\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"horseshoechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('class', className(config.CSS_PREFIX + \"grouprect\"))\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true,\n  viewBox: '45 0 655 340'\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 12\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => parseFloat(item.data[0].delta))) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => parseFloat(item.data[0].delta))) - 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n\n      svg.selectAll(\".xAxisLine\").remove();\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"currentColor\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 13\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 14\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 15\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","export {default as BarChart} from \"./BarChart/barchart\";\nexport {default as RaceForSeatsBarChart} from \"./RaceForSeatBarchart/barchart\";\nexport {default as SpoiltBarChart} from \"./SpoiltBarchart/barchart\";\nexport {default as Map} from \"./Map/map\";\nexport {default as TurnoutMap} from \"./TurnoutMap/map\";\nexport {default as TurnoutBarChart} from \"./TurnoutBarchart/barchart\";\nexport {default as BarchartWithNavMap} from \"./BarchartWithNavMap/barchartMap\";\nexport {default as QuickResultsWidget} from \"./QuickResultsWidget/quickResultsWidget\";\nexport {default as ProgVotesCountPiechart} from \"./ProgVotesCountPiechart/piechart\";\nexport {default as RaceForSeatsComparisonBarChart} from \"./SeatCompBarchart/barchart\";\nexport {default as SeatHorseShoeChart} from \"./SeatHorseShoeChart/horseshoe\";\nexport {default as VoteComparisonBarchart} from \"./VoteCompBarchart/barchart\";\n\nexport {default as TVSeatCompBarchart} from \"./TVSeatCompBarchart/barchart\";\nexport {default as TVSeatSwingBarchart} from \"./TVSeatSwingBarchart/barchart\";\nexport {default as TVVoteCompBarchart} from \"./TVVoteCompBarchart/barchart\";\nexport {default as TVVoteSwingBarchart} from \"./TVVoteSwingBarchart/barchart\";\n\nexport {default as SeatDonutChart} from \"./RaceForSeatDonut/piechart\";\nexport {default as SplitNatProv} from \"./SplitNatProv/barchart\";","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\",\n    // \"DOMAIN\": \"http://127.0.0.1:8080\",\n    \"CSS_PREFIX\": \"ELVIZ_\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst CHART_PREVIEW = \"chart-preview\";\nconst SEATS_ELECTEDS_EVENT = \"seats-electeds-event\";\nconst MAP_PREVIEW = \"map-preview\";\nconst QUICK_RESULTS_PREVIEW = \"quick-results-preview\"\nconst EXPORT_PNG = \"export-png\";\nconst EXPORT_SUPERWIDGET_PNG = \"export-superwidget-png\";\n\nexport default {\n    REGION_CHANGE,\n    CHART_PREVIEW,\n    SEATS_ELECTEDS_EVENT,\n    MAP_PREVIEW,\n    QUICK_RESULTS_PREVIEW,\n    EXPORT_PNG,\n    EXPORT_SUPERWIDGET_PNG,\n};","import * as d3 from \"d3\";\nimport config from \"../config\";\n\nfunction calcPercent(a, b) {\n  if (b == 0) {\n    return 0;\n  } else {\n    return (a/b*100).toFixed(2);\n  }\n}\n\nexport function getShortenedEventDescription(event) {\n  var year = /(19|20)\\d{2}/g.exec(event[\"description\"])[0];\n  var shortenedNatProv = (event[\"eventType\"][\"description\"] == \"National Election\"? \"Nat\": \"Prov\");\n  return `${year} ${shortenedNatProv}`;\n}\n\nexport function parseVotesDataForAllEvents(data, props) {\n    var results, edges;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      edges = data[\"data\"][\"allBallots\"].edges;\n    } else if (regionType == \"province\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n    } else if (regionType == \"municipality\") {\n      edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n    } else { //\"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n    }\n\n    console.log(\"props\", props)\n    return edges.map(edge => {\n      var nodeData = edge[\"node\"];\n\n      var eventDescription = getShortenedEventDescription(nodeData[\"event\"]); //nodeData[\"event\"][\"description\"];\n      var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n      results = partyResults[\"edges\"];\n      results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n      results = results.slice(0, props.numPartiesSplitNatProv);\n\n      return {\n        longEventDescription: nodeData[\"event\"][\"description\"],\n        eventDescription,\n        data: results.map(function(node) {\n          var el = node[\"node\"];\n          return {\n              name: el[\"party\"][\"abbreviation\"],\n              iecId: el[\"party\"][\"iecId\"],\n              validVotes: el[\"validVotes\"].toFixed(2),\n              percOfVotes: el[\"percOfVotes\"].toFixed(2),\n              partyInfo: el[\"party\"]\n          }\n        })\n      }\n    }).filter(edge => props.eventDescriptionsSplitNatProv.indexOf(edge.longEventDescription) != -1)\n    .sort(function(edge1, edge2) {\n      var edge1Year = parseInt(/(19|20)\\d{2}/g.exec(edge1.eventDescription)[0]);\n      var edge2Year = parseInt(/(19|20)\\d{2}/g.exec(edge2.eventDescription)[0]);\n      if (edge1Year == edge2Year) {\n        if (edge1.eventDescription > edge2.eventDescription) {\n          return 1;\n        }\n        return -1;\n      }\n      return edge1Year - edge2Year;\n    })\n}\n \nexport function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            iecId: el[\"party\"][\"iecId\"],\n            validVotes: el[\"validVotes\"].toFixed(2),\n            percOfVotes: el[\"percOfVotes\"].toFixed(2),\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function fetchLocationTrackFromVDdata(data) {\n  var firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  var nodeData = firstEdge[\"node\"];\n  var locationResult = nodeData[\"location\"];\n  var newState = {\n    regionType: \"municipality-vd\",\n    iecId: locationResult[\"iecId\"],\n    muniCode: locationResult[\"ward\"][\"municipality\"][\"code\"],\n    provinceName: locationResult[\"ward\"][\"municipality\"][\"province\"][\"name\"],\n  };     \n  return newState;      \n}\n\nexport function parseVotesComparisonData(data, props) {\n  var results, edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else { //\"municipality-vd\"\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n\n  var partyfilter_edges = edges.map(edge => {\n    var nodeData = edge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"]\n      .filter(a => props.partyIecId\n        ? (a.node[\"party\"][\"iecId\"] == props.partyIecId) \n        : (a.node[\"party\"][\"abbreviation\"] == props.partyAbbr));\n    var result = results[0];\n    if (result) {\n      var el = result[\"node\"];\n      return {\n          name: nodeData[\"event\"][\"description\"],\n          percOfVotes: el[\"percOfVotes\"].toFixed(2),\n          partyInfo: el[\"party\"]\n      }\n    }\n    return {\n      name: nodeData[\"event\"][\"description\"],\n      percOfVotes: 0,\n      partyInfo: {\n        name: props.partyAbbr,\n        abbreviation: props.partyAbbr,\n      }\n    }\n  });\n  var results = partyfilter_edges.filter(edge => props.eventDescriptions.indexOf(edge.name) != -1).reverse();\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        percOfVotes: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n  return new_results;\n}\n\nexport function parseVotesComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseVotesComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseProgressVotesCount(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"progress votes count data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Completed\",\n      percent: calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdWithResultsCaptured\"]\n    }, {\n      name: \"Not Completed\",\n      percent: 100 - calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdCount\"] - nodeData[\"vdWithResultsCaptured\"]\n    }\n  ]\n}\n\n// export function parseMainPartyData(data, props) {\n//     if (!data)  return null;\n//     var locationToMainParty = {};\n//     var edges;\n//     var regionType = props.regionType;\n//     var sort_results = function(party_results) {\n//         party_results[\"edges\"] = party_results[\"edges\"].sort(function(a, b) {\n//             return b.node.percOfVotes - a.node.percOfVotes;\n//         })\n//         return party_results;\n//     }\n//     if (regionType === \"national\") {\n//         edges = data[\"data\"][\"allProvincialBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var provinceName = node[\"location\"][\"name\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[provinceName] = partyName;\n//         })\n//     } else if (regionType === \"province\") {\n//         edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var muniCode = node[\"location\"][\"code\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[muniCode] = partyName;\n//         })\n//     } else {// \"municipality\"\n//         edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var iecId = node[\"location\"][\"iecId\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[iecId] = partyName;\n//         })\n//     }\n//     return locationToMainParty;\n// }\n\nfunction getTopPartyNameFromNode(node) {\n  if (node && node[\"topParty\"] && node[\"topParty\"][\"party\"] && node[\"topParty\"][\"party\"][\"name\"])\n      return node[\"topParty\"][\"party\"][\"name\"];\n  return \"\";\n}\n\nexport function parseMainPartyData(data, props) {\n  if (!data)  return null;\n  var locationToMainParty = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"topPartiesByProvince\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          locationToMainParty[provinceName] = getTopPartyNameFromNode(node);\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"topPartiesByMunicipality\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          locationToMainParty[muniCode] = getTopPartyNameFromNode(node);\n      })\n  } else {// \"municipality\"\n      edges = data[\"data\"][\"topPartiesByVotingDistrict\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          locationToMainParty[iecId] = getTopPartyNameFromNode(node);\n      })\n  }\n  return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      iecId: node[\"party\"][\"iecId\"],\n      partyInfo: node[\"party\"],\n    }\n  })\n  \n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return results.slice(0, props.numParties);\n}\n\nexport function parseSeatsComparisonData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"event\"][\"description\"],\n      partyInfo: node[\"party\"]\n    }\n  }).filter(result => props.eventDescriptions.indexOf(result.name) != -1)\n  .filter(result => \n    props.partyIecId\n    ? (result.partyInfo[\"iecId\"] == props.partyIecId)\n    : (result.partyInfo[\"abbreviation\"] == props.partyAbbr)\n  )\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        seats: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n      // name: nodeData[\"event\"][\"description\"],\n      // percOfVotes: 0,\n      // partyInfo: {\n      //   name: props.partyAbbr,\n      //   abbreviation: props.partyAbbr,\n      // }\n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return new_results;\n}\n\nexport function parseSeatsComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseSeatsComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseTurnoutData(data, props) {\n  if (!data)  return null;\n  var locationToTurnout = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[provinceName] = percVoterTurnout;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[muniCode] = percVoterTurnout;\n      })\n  } else {// \"municipality\" or \"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[iecId] = percVoterTurnout;\n      })\n  }\n  return locationToTurnout;\n}\n\nexport function parseTurnoutDataForAllEvents(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var eventType = node[\"event\"][\"eventType\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      eventType: eventType,\n      percVoterTurnout\n    }\n  }).filter(edge => edge.eventType.toLowerCase().indexOf(props.eventType) != -1)\n  .sort(function(edge1, edge2) {\n    var edge1Year = parseInt(/(19|20)\\d{2}/g.exec(edge1.name)[0]);\n    var edge2Year = parseInt(/(19|20)\\d{2}/g.exec(edge2.name)[0]);\n    return edge1Year - edge2Year;\n  })\n}\n\nexport function parseTurnoutDataForOneEvent(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      percVoterTurnout\n    }\n  })\n}\n\nexport function parseSpoiltVotesData(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"spoilt data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Valid\",\n      percent: calcPercent(nodeData[\"totalValidVotes\"], nodeData[\"totalVotesCast\"])\n    }, {\n      name: \"Spoilt\",\n      percent: calcPercent(nodeData[\"spoiltVotes\"], nodeData[\"totalVotesCast\"])\n    }\n  ]\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\" - \") != -1) {\n        muniName = muniName.split(\" - \")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.iecId;\n  }\n}\n\nexport function getRegionName2(state) {\n  if (state.regionType == \"national\")\n    return \"National Assembly\";\n  return getRegionName(state);\n}\n\nexport function getRegionName3(state) {\n  if (state.regionType == \"national\")\n    return \"NATIONAL\";\n  return getRegionName(state);\n}\n\n\n\nexport function getNationOrProvinceName(state) {\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  return state.provinceName;\n}\n\nexport function getNationOrProvinceName2(state) {\n  if (state.regionType == \"national\") {\n    return \"National Assembly\";\n  }\n  return state.provinceName;\n}\n\nexport function createTooltip(className) {\n  var tooltipClassName = className(config.CSS_PREFIX + \"tooltip\")\n  if (document.getElementsByClassName(tooltipClassName)[0]) {\n    return d3.select(`.${tooltipClassName}`);\n  } else {\n    return d3.select(\"body\").append(\"div\")\t\n      .attr(\"class\", tooltipClassName)\t\t\t\t\n      .style(\"opacity\", 0);\n  }\n}\n\n\n\nexport function fixMapLabelIntersect() {\n  var labelElements = document.getElementsByClassName(\"place-label\");\n  var regions = {};\n  var overlapCnt = {};\n  var i;\n\n  for (i = 0; i < labelElements.length; i ++) {\n      regions[i] = labelElements[i].getBoundingClientRect();\n  }\n\n  for (i = 0; i < labelElements.length; i ++) {\n      for (var j = 0; j < i; j ++) {\n          var rect1 = regions[i];\n          var rect2 = regions[j];\n          var overlap = !(rect1.right < rect2.left || \n              rect1.left > rect2.right || \n              rect1.bottom < rect2.top || \n              rect1.top > rect2.bottom);\n          if (overlap) {\n              overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n          }\n      }\n      if (overlapCnt[i] > 2) {\n          labelElements[i].setAttribute(\"opacity\", 0)\n      } else if (overlapCnt[i] > 0){\n          labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n      } else {\n\n      }\n  }\n}\n\nexport function triggerCustomEvent(eventName, eventParam) {\n  var event = new CustomEvent(eventName, { detail: eventParam });\n  document.dispatchEvent(event);\n}\n\nexport function formatPartyName(name) {\n  return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n}\n\nexport function getSubRegionName(properties, state) {\n  if (state.regionType === \"national\") {\n      return properties.SPROVINCE;\n  } else if (state.regionType === \"province\") {\n      return properties.smunicipal && properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n  } else {//municipality\n    return getMunicipalityiecId(properties);\n    // if (properties.Municipali) {\n    //   return properties.Municipali.split(\" - \")[1].split(\"[\")[0];\n    // }\n    // return properties.SMUNICIPAL && properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n  }\n}\n\nexport function getMunicipalityCode(properties) {\n  return properties.code || (properties.smunicipal && properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\"));\n}\n\nexport function getMunicipalityiecId(properties) {\n  return properties.VDNumber || properties.PKLVDNUMBE;\n}\n\nexport function getRegionFileName(state) {\n  var nationalMapFile = \"province_lo-res.geojson\";\n  function getProvinceFileName(provinceName) {\n      var provinceNameToFileMap = {\n          \"Limpopo\": \"lim_lo-res.geojson\",\n          \"Mpumalanga\": \"mp_lo-res.geojson\",\n          \"Gauteng\": \"gt_lo-res.geojson\",\n          \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n          \"North West\": \"nw_lo-res.geojson\",\n          \"Free State\": \"fs_lo-res.geojson\",\n          \"Eastern Cape\": \"ec_lo-res.geojson\",\n          \"Northern Cape\": \"nc_lo-res.geojson\",\n          \"Western Cape\": \"wc_lo-res.geojson\",\n      }\n      return provinceNameToFileMap[provinceName];\n  }\n  switch(state.regionType) {\n      case \"national\":\n          return nationalMapFile;\n      case \"province\":\n          return getProvinceFileName(state.provinceName);\n      case \"municipality\":\n          return state.muniCode + \".topojson\";//\".geojson\";\n      case \"municipality-vd\":\n          return \"vd-data/\" + state.muniCode + \"-\" + state.iecId + \".topojson\"; //\".geojson\";\n      default:\n          return null;\n  }\n}\n\nexport function loadScript(id, scriptURL, callback) {\n  if (document.getElementById(id))\n    return;\n  var script = document.createElement('script');\n  script.onload = function () {\n    if(callback) {\n      callback();\n    }\n  };\n  script.id = id;\n  script.src = scriptURL;\n\n  document.head.appendChild(script);\n}\n\nexport function loadCanvg() {\n  loadScript(\"canvgScript\", \"https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js\", function() {\n    console.log(\"canvgScript load finished\");\n  });\n}\n\nexport function loadJSZip() {\n  loadScript(\"jsZipScript\", \"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js\", function() {\n    console.log(\"loadJSZip load finished\");\n  });\n}\n\nexport function loadScriptsForEmbedMode() {\n  loadCanvg();\n  loadJSZip();\n}\n\n\nexport function handleRegionChange(event) {\n  var newState = JSON.parse(JSON.stringify(event.detail));\n  delete newState.componentID;\n  this.setState(newState)\n}\n\nexport function fetchDataFromOBJ(state, props) {\n  Object.keys(state).forEach(key => {\n    if (props[key]) {\n      state[key] = props[key];\n    }\n  })\n}\n\nexport function formatClassNameFromString(str) {\n  return \"formedClass_\" + str.replace(/[^a-zA-Z0-9]+/g, '');\n}\n\nexport function onPartyAbbrsChange(e) {\n    var options = e.target.options;\n    var values = [];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        values.push(options[i].value);\n      }\n    }\n    values = values.slice(0, 4);\n    this.setState({\n        partyAbbrs: values.map(value => value.split(\"\\x22\")[0]),\n        partyIecIds: values.map(value => value.split(\"\\x22\")[1]),\n    })\n}\n\nexport function nationalEventSelected(state) {\n  for (var i = 0; i < state.electionEvents.length; i ++) {\n    if (state.electionEvents[i].description == state.eventDescription) {\n      if (state.electionEvents[i].eventType.description.toLowerCase().indexOf(\"national\") != -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"],"sourceRoot":""}