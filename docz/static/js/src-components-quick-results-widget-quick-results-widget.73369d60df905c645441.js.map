{"version":3,"sources":["webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.mdx","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.css","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.css","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js"],"names":["module","exports","menu-widget","chart-title","Chart","container","width","height","className","options","data","margin","category","floatFormat","d3","colorsData","colour","key","Math","radius","pie","d","arc","svg","path","errorText","toolTip","selection","tip","toolTipHTML","arcTween","i","this","_current","t","destroy","draw","value","colorsDataP","updatePath","data0","data1","m","length","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","chart","chartOptions","chartType","piechart_className","originName","styles","refreshIntervalID","PieChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getRegionName","react_default","a","createElement","ref","dataLoaders","getProgressVotesCount","values","progressVotesData","error","console","chartData","parseProgressVotesCount","parseInt","Completed","Not Completed","__webpack_exports__","tooltip","submenu","label","active","stylesheet-tv","barchart-container","provincesData","getProvincesData","metrosData","getMetrosData","CustomLink","_possibleConstructorReturn","onClick","React","e","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","_this2","activeLinkId","handleNavBarSelection","link","config","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","concat","triggerCustomEvent","REGION_CHANGE","MAP_PREVIEW","content","icon","map","province","name","metro","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","bootstrapStyles","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","comp","stylesheetFor","quickResultsWidget_assertThisInitialized","zipfileName","imageLoadPromises","votesInstance1","votesInstance2","seatsInstance1","seatsInstance2","turnoutInstance1","turnoutInstance2","progressInstance1","progressInstance2","spoiltInstance1","spoiltInstance2","zip","jszip_lib_default","imgs","base64","type","saveAs","_this$state","barchart","Object","assign","instance","Map_map","RaceForSeatBarchart_barchart","TurnoutBarchart_barchart","piechart","SpoiltBarchart_barchart","QuickResultsWidget_quickResultsWidget","quickResultsWidgetEmbed_className","originClassName","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","elementId","electionEvents","getElectionEvents","edge","QUICK_RESULTS_PREVIEW","EXPORT_SUPERWIDGET_PNG","DOMAIN","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","onRegionTypeChange","muni","onPreview","onExportAsPNG","replace","QuickResultsWidget_quickResultsWidgetEmbed","MDXContent","QuickResultsWidget_quickResultsWidget_classCallCheck","QuickResultsWidget_quickResultsWidget_possibleConstructorReturn","QuickResultsWidget_quickResultsWidget_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","chart-label","chart-body","percentage-label","large","y-axis-label","y-label","annotation-line","grid","partyColorsData","yAxisLabel","dynamicYAxisFromValues","yValue","seats","yValueFormat","BarChart","getNationOrProvinceName","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","getSeatsData","partyColorsLoader","getPartyColors","seatsData","parseSeatsData","noXaxisByParty","percent","getSpoiltData","spoiltData","parseSpoiltVotesData","Valid","Spoilt","percVoterTurnout","eventType","getTurnoutDataForAllEvents","turnoutData","parseTurnoutDataForAllEvents","map-title","loading-spinner","Map","disableNavigation","drawGraph","selectAll","remove","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","canvas","filename","lnk","createEvent","fireEvent","loading","react_loading__WEBPACK_IMPORTED_MODULE_9___default","color","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","getTurnoutData","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","legends","text","getLegendXY","it","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","smunicipal","w","fo","muniImuniCodeD"],"mappings":"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","file":"static/js/src-components-quick-results-widget-quick-results-widget.855c6e2b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu-widget\":\"navbar_menu-widget__VPoXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-title\":\"piechart_chart-title__3WNCY\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = 'percent',\n        category = 'name',\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom))\n        .classed(\"svg-content\", true)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n        colorsData = colorsDataP;\n        data = value;\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        var tip = '';\n        tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n        tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      return (\n          <div className=\"piechart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"quickResultsWidget_tooltip__1X8PF\",\"submenu\":\"quickResultsWidget_submenu__Wzs5x\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"stylesheet-tv\":\"quickResultsWidget_stylesheet-tv__2EzNt\",\"barchart-container\":\"quickResultsWidget_barchart-container__32mow\"};","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {};\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n        \n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                to: '1',\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        to: `2-${i}`,\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                    }\n                })\n            }\n        ]\n        \n        return (\n            <div className={className(\"menu-widget\")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatBarChart from '../RaceForSeatBarchart/barchart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport JSZip from \"jszip\";\nimport {saveAs} from \"file-saver\";\nimport {\n    getRegionName\n} from \"../../utils\";\n\n\nfunction className(originName) {\n    return styles[originName] || bootstrapStyles[originName] || originName;\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\",\n            stylesheetFor: \"tv\"\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = this.handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      if (newState.regionType != \"municipality-vd\")\n        this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'race for votes') {\n            imageLoadPromises = [\n                this.votesInstance1.exportAsPNGUri(), \n                this.votesInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'race for seats') {\n            imageLoadPromises = [\n                this.seatsInstance1.exportAsPNGUri(), \n                this.seatsInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'turnout') {\n            imageLoadPromises = [\n                this.turnoutInstance1.exportAsPNGUri(), \n                this.turnoutInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'counting progress') {\n            imageLoadPromises = [\n                this.progressInstance1.exportAsPNGUri(), \n                this.progressInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'spoilt votes') {\n            imageLoadPromises = [\n                this.spoiltInstance1.exportAsPNGUri(), \n                this.spoiltInstance2.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            console.log(\"exporting ...\");\n            var zip = new JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            imgs.file(\"image1.png\", values[0], {base64: true});\n            imgs.file(\"image2.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n                console.log(\"exporting ended successfully\");\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    };\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            stylesheetFor,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            comp\n        } = this.state;\n        return (\n            <div className={className(`stylesheet-${stylesheetFor}`)}>\n                <div className={className(\"row\") + \" \" + className(\"submenu\")}>\n                    <div className={className(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results for \n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={className(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={className(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div>\n                <div className={className(\"row\")}>\n                    <div className={className(\"col-md-4\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart \n                                            ref={instance => { this.votesInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.votesInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatBarChart \n                                            ref={instance => { this.seatsInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.seatsInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart \n                                            ref={instance => { this.turnoutInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap \n                                            ref={instance => { this.turnoutInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart \n                                            ref={instance => { this.progressInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.progressInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={className(\"col-md-8\")}>\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart \n                                            ref={instance => { this.spoiltInstance1 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.spoiltInstance2 = instance; }} \n                                            {...this.state} />\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport QuickResultsWidget from \"./quickResultsWidget\"\nimport QuickResultsWidgetEmbed from \"./quickResultsWidgetEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-results-widget-v1\"}}>{`Quick Results Widget V1`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<QuickResultsWidget />\\n<QuickResultsWidgetEmbed />'} __scope={{props: this ? this.props : props,QuickResultsWidget,QuickResultsWidgetEmbed}}>\n    <QuickResultsWidget/>\n    <QuickResultsWidgetEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n        \n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3yxxz\",\"chart-title\":\"barchart_chart-title__3RHv6\",\"chart-body\":\"barchart_chart-body__3x1qF\",\"percentage-label\":\"barchart_percentage-label__zQdUV\",\"chart\":\"barchart_chart__1_lSr\",\"large\":\"barchart_large__cgVCh\",\"y-axis-label\":\"barchart_y-axis-label__3UnAe\",\"y-label\":\"barchart_y-label__1I4tN\",\"annotation-line\":\"barchart_annotation-line__bj9Mi\",\"tooltip\":\"barchart_tooltip__2BaaR\",\"grid\":\"barchart_grid__2TlS8\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__1j4ev\",\"chart-title\":\"barchart_chart-title__1Jyfd\",\"chart-body\":\"barchart_chart-body__1kYVj\",\"percentage-label\":\"barchart_percentage-label___T79M\",\"chart\":\"barchart_chart__39bxI\",\"large\":\"barchart_large__2FPoB\",\"y-axis-label\":\"barchart_y-axis-label__2jJOX\",\"y-label\":\"barchart_y-label__1JqpW\",\"annotation-line\":\"barchart_annotation-line__2ve98\",\"tooltip\":\"barchart_tooltip__2MpDn\",\"grid\":\"barchart_grid__2s8E-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}