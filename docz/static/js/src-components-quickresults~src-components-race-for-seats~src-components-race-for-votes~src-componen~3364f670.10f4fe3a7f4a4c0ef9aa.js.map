{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/turnout.js","webpack:///./src/api/spoilt.js","webpack:///./src/api/prog-votescount.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/mapEmbed.css","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/components/RaceForSeatDonut/piechart.css","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.css","webpack:///./src/components/SeatCompBarchart/barchartEmbed.css","webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutMap/mapEmbed.css","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css","webpack:///./src/components/embedBase.js","webpack:///./src/components/BarChart/barchartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchartEmbed.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutBarchart/barchartEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/SeatCompBarchart/barchartEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/VoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.js","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.js","webpack:///./src/components/embed.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/Map/map.js","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/RaceForSeatDonut/piechart.js","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/SeatCompBarchart/barchart.js","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/index.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsDataForComparison","options","query","gql","_templateObject","_templateObject2","provinceName","getSeatsData","eventDescription","_templateObject3","_templateObject4","getVotesDataForComparison","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","race_for_votes_templateObject3","race_for_votes_templateObject4","iecId","getVotesDataM","_templateObject5","_templateObject6","_templateObject7","_templateObject8","getMainParties","_templateObject9","_templateObject10","_templateObject11","getTurnoutData","turnout_templateObject","turnout_templateObject2","muniRegName","turnout_templateObject3","getTurnoutDataForAllEvents","turnout_templateObject4","turnout_templateObject5","turnout_templateObject6","turnout_templateObject7","getSpoiltData","spoilt_templateObject","spoilt_templateObject2","spoilt_templateObject3","spoilt_templateObject4","getProgressVotesCount","prog_votescount_templateObject","prog_votescount_templateObject2","prog_votescount_templateObject3","prog_votescount_templateObject4","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","getProvincesData","name","abbreviation","munis","muniName","getMetrosData","module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","ELVIZ_grouprect","barchart","ELVIZ_stylesheet-tv","embedcode","barchart-map","ELVIZ_map-title","ELVIZ_loading-spinner","map-widget","legend","ELVIZ_stylesheet-web","ELVIZ_stylesheet-none","ELVIZ_menu-widget","piechart","ELVIZ_component-transition-menu","label","active","quickresultswidget","quick-results-title","race-for-seats","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","donutchart","multievent-container","horseshoechart","multiparties-container","EmbedBase","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","loadScriptsForEmbedMode","Component","react_default","a","createElement","provincesData","className","originClassName","bootstrapStyles","styles","BarChartEmbed","barchartEmbed_classCallCheck","barchartEmbed_possibleConstructorReturn","barchartEmbed_getPrototypeOf","state","elementId","regionType","numParties","electionEvents","stylesheetFor","componentID","self","data","edge","error","console","e","setState","value","newState","triggerCustomEvent","events","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","bind","key","onRegionTypeChange","province","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_barchartEmbed","barchartEmbed_className","RaceForSeatBarchart_barchartEmbed_classCallCheck","RaceForSeatBarchart_barchartEmbed_possibleConstructorReturn","RaceForSeatBarchart_barchartEmbed_getPrototypeOf","disabled","components_RaceForSeatBarchart_barchartEmbed","SpoiltBarchart_barchartEmbed_className","SpoiltBarchart_barchartEmbed_classCallCheck","SpoiltBarchart_barchartEmbed_possibleConstructorReturn","SpoiltBarchart_barchartEmbed_getPrototypeOf","components_SpoiltBarchart_barchartEmbed","mapEmbed_className","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","disableNavigation","loadCanvg","MAP_PREVIEW","checked","Map_mapEmbed","TurnoutMap_mapEmbed_className","TurnoutMap_mapEmbed_classCallCheck","TurnoutMap_mapEmbed_possibleConstructorReturn","TurnoutMap_mapEmbed_getPrototypeOf","components_TurnoutMap_mapEmbed","TurnoutBarchart_barchartEmbed_className","TurnoutBarchart_barchartEmbed_classCallCheck","TurnoutBarchart_barchartEmbed_possibleConstructorReturn","TurnoutBarchart_barchartEmbed_getPrototypeOf","eventType","components_TurnoutBarchart_barchartEmbed","barchartMapEmbed_className","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","JSON","EXPORT_SUPERWIDGET_PNG","BarchartWithNavMap_barchartMapEmbed","quickResultsWidgetEmbed_className","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","QUICK_RESULTS_PREVIEW","QuickResultsWidget_quickResultsWidgetEmbed","piechartEmbed_className","PieChartEmbed","piechartEmbed_classCallCheck","piechartEmbed_possibleConstructorReturn","piechartEmbed_getPrototypeOf","ProgVotesCountPiechart_piechartEmbed","SeatCompBarchart_barchartEmbed_className","SeatCompBarchart_barchartEmbed_classCallCheck","SeatCompBarchart_barchartEmbed_possibleConstructorReturn","SeatCompBarchart_barchartEmbed_getPrototypeOf","eventDescriptions","partyAbbr","partyIecId","allParties","Object","api","then","filter","thing","index","t","catch","values","i","l","length","selected","multiple","party","components_SeatCompBarchart_barchartEmbed","horseshoeEmbed_className","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","SeatHorseShoeChart_horseshoeEmbed","VoteCompBarchart_barchartEmbed_className","VoteCompBarchart_barchartEmbed_classCallCheck","VoteCompBarchart_barchartEmbed_possibleConstructorReturn","VoteCompBarchart_barchartEmbed_getPrototypeOf","components_VoteCompBarchart_barchartEmbed","TVSeatCompBarchart_barchartEmbed_className","TVSeatCompBarchart_barchartEmbed_classCallCheck","TVSeatCompBarchart_barchartEmbed_possibleConstructorReturn","TVSeatCompBarchart_barchartEmbed_getPrototypeOf","partyAbbrs","partyIecIds","partyIdx","onPartyAbbrsChange","formatPartyName","components_TVSeatCompBarchart_barchartEmbed","TVSeatSwingBarchart_barchartEmbed_className","TVSeatSwingBarchart_barchartEmbed_classCallCheck","TVSeatSwingBarchart_barchartEmbed_possibleConstructorReturn","TVSeatSwingBarchart_barchartEmbed_getPrototypeOf","event","components_TVSeatSwingBarchart_barchartEmbed","TVVoteCompBarchart_barchartEmbed_className","TVVoteCompBarchart_barchartEmbed_classCallCheck","TVVoteCompBarchart_barchartEmbed_possibleConstructorReturn","TVVoteCompBarchart_barchartEmbed_getPrototypeOf","components_TVVoteCompBarchart_barchartEmbed","TVVoteSwingBarchart_barchartEmbed_className","TVVoteSwingBarchart_barchartEmbed_classCallCheck","TVVoteSwingBarchart_barchartEmbed_possibleConstructorReturn","TVVoteSwingBarchart_barchartEmbed_getPrototypeOf","components_TVVoteSwingBarchart_barchartEmbed","RaceForSeatDonut_piechartEmbed_className","RaceForSeatDonut_piechartEmbed_classCallCheck","RaceForSeatDonut_piechartEmbed_possibleConstructorReturn","RaceForSeatDonut_piechartEmbed_getPrototypeOf","components_RaceForSeatDonut_piechartEmbed","__webpack_require__","d","__webpack_exports__","Chart","container","width","height","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","minMaxY","dynamicYAxisFromValues","maxValue","customizeDynamicMaxValue","bars","getFillColor","getTooltipText","pageX","Number","barTexts","_typeof","partyName","getFillColorFromPartyName","destroy","barchart_partyColorsData","barchart_className","originName","cn","chartOptions","maxVal","Math","BarChart","_assertThisInitialized","fetchDataFromOBJ","chart","refreshIntervalID","exportAsPNG","exportAsPNGUri","handleRegionChange","handlePreviewEvent","getContainer","setInterval","document","clearInterval","detail","targetState","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","ref","dataLoaders","partyColorsLoader","votesData","parseVotesData","BarChart_barchart","RaceForSeatBarchart_barchart_partyColorsData","seats","RaceForSeatBarchart_barchart_className","barchart_cn","barchart_classCallCheck","barchart_getPrototypeOf","barchart_assertThisInitialized","getNationOrProvinceName2","barchart_chartOptions","seatsData","parseSeatsData","RaceForSeatBarchart_barchart","percent","SpoiltBarchart_barchart_className","SpoiltBarchart_barchart_cn","SpoiltBarchart_barchart_classCallCheck","SpoiltBarchart_barchart_possibleConstructorReturn","SpoiltBarchart_barchart_getPrototypeOf","SpoiltBarchart_barchart_assertThisInitialized","SpoiltBarchart_barchart_chartOptions","spoiltData","parseSpoiltVotesData","Valid","Spoilt","SpoiltBarchart_barchart","map_partyColorsData","regionColor","map_className","map_cn","Map","map_classCallCheck","map_getPrototypeOf","map_assertThisInitialized","drawGraph","selectAll","remove","prevProps","prevState","rect","rendercanvas","window","ignoreDimensions","scaleWidth","scaleHeight","canvg","canvas","filename","lnk","createEvent","fireEvent","loading","react_loading_default","color","fullRouteGeoJsonFile","getRegionFileName","h","all","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","getMunicipalityiecId","topojson","projection","path","parties","availableCnt","b","legends","parseInt","getLegendXY","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","undefinedText","mainPartyName","subRegionName","tooltipText","REGION_CHANGE","smunicipal","appendSpan","foDiv","regionName","addSub","appendLink","setRegionType","fo","currentRegionName","setTimeout","alert","Map_map","TurnoutMap_map_className","TurnoutMap_map_cn","TurnoutMap_map_classCallCheck","TurnoutMap_map_getPrototypeOf","TurnoutMap_map_assertThisInitialized","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it","turnoutData","TurnoutMap_map","percVoterTurnout","TurnoutBarchart_barchart_className","TurnoutBarchart_barchart_cn","TurnoutBarchart_barchart_classCallCheck","TurnoutBarchart_barchart_possibleConstructorReturn","TurnoutBarchart_barchart_getPrototypeOf","TurnoutBarchart_barchart_assertThisInitialized","TurnoutBarchart_barchart_chartOptions","parseTurnoutDataForAllEvents","TurnoutBarchart_barchart","barchartMap_className","BarchartWithNavMap","barchartMap_classCallCheck","barchartMap_getPrototypeOf","barchartMap_assertThisInitialized","zip","JSZip","imgs","base64","content","saveAs","assign","instance","barchartInstance","mapInstance","BarchartWithNavMap_barchartMap","d3piechart_Chart","margin","variable","category","floatFormat","colour","radius","pie","arc","totalSvg","transformX","labelSvg","toolTip","selection","on","tip","toolTipHTML","arcTween","_current","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","piechart_cn","PieChart","piechart_classCallCheck","piechart_getPrototypeOf","piechart_assertThisInitialized","piechart_chartOptions","progressVotesData","parseProgressVotesCount","Completed","Not Completed","ProgVotesCountPiechart_piechart","piechart_partyColorsData","viewBox","RaceForSeatDonut_piechart_className","RaceForSeatDonut_piechart_cn","DonutChart","RaceForSeatDonut_piechart_classCallCheck","RaceForSeatDonut_piechart_getPrototypeOf","RaceForSeatDonut_piechart_assertThisInitialized","getNationOrProvinceName","RaceForSeatDonut_piechart_chartOptions","components_RaceForSeatDonut_piechart","cssPrefix","metrosData","toShowChartLabels","toShowCharts","CustomLink","navbar_classCallCheck","navbar_possibleConstructorReturn","navbar_getPrototypeOf","navbar_assertThisInitialized","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","comp","activeLinkId","handleNavBarSelection","navbar","addEventListener","removeEventListener","classList","iconClass","passInfo","lastClass","selectionData","icon","toshowchart","chartIdx","navbar_provincesData","map","metro","join","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","quickResultsWidget_cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","quickResultsWidget_assertThisInitialized","zipfileName","imageLoadPromises","votesInstance1","votesInstance2","seatsInstance1","seatsInstance2","turnoutInstance1","turnoutInstance2","progressInstance1","progressInstance2","spoiltInstance1","spoiltInstance2","triggerState","getRegionName2","getRegionName3","QuickResultsWidget_quickResultsWidget","SeatCompBarchart_barchart_partyColorsData","SeatCompBarchart_barchart_className","SeatCompBarchart_barchart_cn","SeatCompBarchart_barchart_classCallCheck","SeatCompBarchart_barchart_getPrototypeOf","SeatCompBarchart_barchart_assertThisInitialized","SeatCompBarchart_barchart_chartOptions","parseSeatsComparisonData","SeatCompBarchart_barchart","d3horseshoe_Chart","mainSvg","originChartData","totalSeats","rows","poslist","J","R","angle","Totals","PI","onMouseMove","onMouseOut","Counter","partySvg","pythonConvertedCode","horseshoe_partyColorsData","horseshoe_className","horseshoe_cn","HorseShoeChart","horseshoe_classCallCheck","horseshoe_getPrototypeOf","horseshoe_assertThisInitialized","horseshoe_chartOptions","SeatHorseShoeChart_horseshoe","VoteCompBarchart_barchart_partyColorsData","VoteCompBarchart_barchart_className","VoteCompBarchart_barchart_cn","VoteCompBarchart_barchart_classCallCheck","VoteCompBarchart_barchart_getPrototypeOf","VoteCompBarchart_barchart_assertThisInitialized","parseVotesComparisonData","VoteCompBarchart_barchart","d3groupbarchart_Chart","groupChartData","groupSvgs","groupSvg","formatClassNameFromPartyAbbr","bandwidth","YaxisOffset","subX","barAxisTextSvg","barAxisTexts","exec","TVSeatCompBarchart_barchart_partyColorsData","topLabel","usedValue","TVSeatCompBarchart_barchart_className","TVSeatCompBarchart_barchart_classCallCheck","TVSeatCompBarchart_barchart_getPrototypeOf","TVSeatCompBarchart_barchart_assertThisInitialized","TVSeatCompBarchart_barchart_chartOptions","desc","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","d3deltabarchart_Chart","newGroupChartData","_objectSpread","delta","deltaData","barTextYDelta","axisThick","TVSeatSwingBarchart_barchart_partyColorsData","TVSeatSwingBarchart_barchart_className","TVSeatSwingBarchart_barchart_classCallCheck","TVSeatSwingBarchart_barchart_getPrototypeOf","TVSeatSwingBarchart_barchart_assertThisInitialized","TVSeatSwingBarchart_barchart_chartOptions","years","TVSeatSwingBarchart_barchart","TVVoteCompBarchart_barchart_partyColorsData","TVVoteCompBarchart_barchart_className","TVVoteCompBarchart_barchart_classCallCheck","TVVoteCompBarchart_barchart_getPrototypeOf","TVVoteCompBarchart_barchart_assertThisInitialized","TVVoteCompBarchart_barchart_chartOptions","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","TVVoteSwingBarchart_barchart_partyColorsData","TVVoteSwingBarchart_barchart_className","TVVoteSwingBarchart_barchart_classCallCheck","TVVoteSwingBarchart_barchart_getPrototypeOf","TVVoteSwingBarchart_barchart_assertThisInitialized","TVVoteSwingBarchart_barchart_chartOptions","TVVoteSwingBarchart_barchart","CSS_PREFIX","calcPercent","toFixed","firstEdge","nodeData","results","node","el","validVotes","partyInfo","edges","partyResults","result","partyfilter_edges","reverse","new_results","available","newProps","totalCount","count","getTopPartyNameFromNode","beautifiedMuniName","tooltipClassName","labelElements","regions","overlapCnt","rect1","rect2","bottom","eventName","eventParam","CustomEvent","toUpperCase","PKLVDNUMBE","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","loadScript","id","scriptURL","callback","script"],"mappings":"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","file":"static/js/src-components-quickresults~src-components-race-for-seats~src-components-race-for-votes~src-componen~3364f670.423a1151.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\n\n\nconst client = new ApolloClient({\n    link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n    cache: new InMemoryCache()\n  })\n\nexport {\n    API_URI,\n    client\n}","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getSeatsDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            party_Event_Description_Icontains:\"national\",\n            orderBy:[\"-national_pr\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  } else { //  if (options.regionType == \"province\")\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(province_Name:\"${options.provinceName}\", orderBy:[\"-regional\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  }\n}\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(party_Event_Description:\"${eventDescription}\", orderBy:[\"-national_pr\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else { //  if (options.regionType == \"province\")\n      eventDescription = eventDescription.replace(\"National\", \"Provincial\");\n      eventDescription = eventDescription.replace(\"NATIONAL\", \"PROVINCIAL\");\n      eventDescription = eventDescription.replace(\"national\", \"provincial\");\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province_Name:\"${options.provinceName}\", party_Event_Description:\"${eventDescription}\", orderBy:[\"-regional\"]){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getVotesDataForComparison(options) {\n  if (options.regionType == \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots{\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          location_Name:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality\") {\n    var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          location_Province_Name:\"${options.provinceName}\", \n          location_Code: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                      iecId\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType == \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n          location_IecId:\"${options.iecId}\", \n          location_Ward_Municipality_Code:\"${options.muniCode}\"\n        ) {\n          edges{\n            node{\n              event {\n                description\n              }\n              location {\n                iecId\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\", \n            location_Ward_Municipality_Code:\"${options.muniCode}\"\n          ) {\n            edges{\n              node{\n                location {\n                  iecId\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByProvince(location_Country_Event_Description:\"${eventDescription}\") {\n            edges {\n              node {\n                location{\n                  id\n                  name\n                }\n                totalVotesCast\n                topParty{\n                  validVotes\n                  percOfVotes\n                  party {\n                      id\n                      name\n                      abbreviation\n                      iecId\n                  }\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByMunicipality(\n            location_Province_Country_Event_Description:\"${eventDescription}\", \n            location_Province_Name:\"${options.provinceName}\") {\n            \n            edges {\n              node {\n                location{\n                    code\n                    name\n                    longName\n                }\n                totalVotesCast\n                topParty{\n                  party {               \n                    name\n                    abbreviation\n                    iecId\n                  }\n                  validVotes\n                  percOfVotes\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { //if (options.regionType == \"municipality\") {\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            topPartiesByVotingDistrict(\n              location_Ward_Municipality_Province_Country_Event_Description:\"${eventDescription}\", \n              location_Ward_Municipality_Province_Name:\"${options.provinceName}\",\n              location_Ward_Municipality_Code: \"${options.muniCode}\"\n            ) {\n              \n              edges {\n                node {\n                  location{\n                    iecId\n                  }\n                  topParty{\n                    party{\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getTurnoutData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                percVoterTurnout\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                percVoterTurnout\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { // municipality or municipality-vd\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n            event_Description:\"${eventDescription}\",\n            location_Ward_Municipality_Name_Icontains:\"${muniRegName}\") {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n  export function getTurnoutDataForAllEvents(options) {\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getSpoiltData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                    id\n                    name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                event_Description:\"${eventDescription}\",\n                location_Province_Name:\"${options.provinceName}\", \n                location_Code: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    code\n                    name\n                    longName\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType == \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n                event_Description:\"${eventDescription}\",\n                location_IecId:\"${options.iecId}\", \n                location_Ward_Municipality_Code:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n  ","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getProgressVotesCount(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event_Description:\"${eventDescription}\",\n            location_IecId:\"${options.iecId}\", \n            location_Ward_Municipality_Code:\"${options.muniCode}\"\n          ) {\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport {getSeatsData, getSeatsDataForComparison} from \"./race-for-seats\"\nexport {getVotesDataM, getVotesDataForComparison, getMainParties} from \"./race-for-votes\"\nexport {getTurnoutData, getTurnoutDataForAllEvents} from \"./turnout\"\nexport {getSpoiltData} from \"./spoilt\"\nexport {getProgressVotesCount} from \"./prog-votescount\"\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            abbreviation\n            colour\n            iecId\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getProvincesData() {\n  var provincesData = [\n      {\n          \"name\": \"Limpopo\",\n          \"abbreviation\": \"LIM\",\n          \"munis\": [{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM331 - Greater Giyani [Giyani]\",\"muniCode\":\"LIM331\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM332 - Greater Letaba [Duiwelskloof]\",\"muniCode\":\"LIM332\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM333 - Greater Tzaneen [Tzaneen]\",\"muniCode\":\"LIM333\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM334 - Ba-Phalaborwa [Phalaborwa]\",\"muniCode\":\"LIM334\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM335 - Maruleng [Hoedspruit]\",\"muniCode\":\"LIM335\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM341 - Musina [Messina]\",\"muniCode\":\"LIM341\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM342 - Mutale [Mutale-Masisi]\",\"muniCode\":\"LIM342\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM343 - Thulamela [Thohoyandou]\",\"muniCode\":\"LIM343\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM344 - Makhado [Louis Trichardt]\",\"muniCode\":\"LIM344\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM351 - Blouberg [Bochum/My Darling]\",\"muniCode\":\"LIM351\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM352 - Aganang [Moletji/Matlala]\",\"muniCode\":\"LIM352\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM353 - Molemole [Dendron/Dikgale]\",\"muniCode\":\"LIM353\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM354 - Polokwane [Pietersburg]\",\"muniCode\":\"LIM354\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM355 - Lepele-Nkumpi [Lebowakgomo]\",\"muniCode\":\"LIM355\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM361 - Thabazimbi [Thabazimbi]\",\"muniCode\":\"LIM361\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM362 - Lephalale [Ellisras]\",\"muniCode\":\"LIM362\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM364 - Mookgopong [Naboomspruit]\",\"muniCode\":\"LIM364\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM365 - Modimolle [Nylstroom]\",\"muniCode\":\"LIM365\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM366 - Bela-Bela [Warmbad]\",\"muniCode\":\"LIM366\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM367 - Mogalakwena [Potgietersrus]\",\"muniCode\":\"LIM367\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM471 - Ephraim Mogale [Marble Hall]\",\"muniCode\":\"LIM471\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM472 - Elias Motsoaledi [Groblersdal]\",\"muniCode\":\"LIM472\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM473 - Makhuduthamaga [Ngwaritsi]\",\"muniCode\":\"LIM473\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM474 - Fetakgomo [Fetakgomo ]\",\"muniCode\":\"LIM474\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM475 - Greater Tubatse [Burgersfort/Ohrigstad/Eastern Tubatse]\",\"muniCode\":\"LIM475\"}]\n      },\n      {\n          \"name\": \"Mpumalanga\",\n          \"abbreviation\": \"MP\",\n          \"munis\": [{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP301 - Albert Luthuli [Elukwatini/Carolina]\",\"muniCode\":\"MP301\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP302 - Msukaligwa [Ermelo]\",\"muniCode\":\"MP302\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP303 - Mkhondo [Piet Retief]\",\"muniCode\":\"MP303\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP304 - Pixley Ka Seme [Volksrust]\",\"muniCode\":\"MP304\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP305 - Lekwa [Standerton]\",\"muniCode\":\"MP305\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP306 - Dipaleseng [Balfour]\",\"muniCode\":\"MP306\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP307 - Govan Mbeki [Highveld Ridge]\",\"muniCode\":\"MP307\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP311 - Delmas [Delmas]\",\"muniCode\":\"MP311\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP312 - Emalahleni [Witbank]\",\"muniCode\":\"MP312\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP313 - Steve Tshwete [Middelburg]\",\"muniCode\":\"MP313\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP314 - Emakhazeni [Belfast]\",\"muniCode\":\"MP314\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP315 - Thembisile [KwaMhlanga]\",\"muniCode\":\"MP315\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP316 - Dr JS Moroka [Mdutjana]\",\"muniCode\":\"MP316\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP321 - Thaba Chweu [Sabie]\",\"muniCode\":\"MP321\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP322 - Mbombela [Nelspruit]\",\"muniCode\":\"MP322\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP323 - Umjindi [Barberton]\",\"muniCode\":\"MP323\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP324 - Nkomazi [Nkomazi]\",\"muniCode\":\"MP324\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP325 - Bushbuckridge [Bushbuckridge]\",\"muniCode\":\"MP325\"}]\n      },\n      {\n          \"name\": \"Gauteng\",\n          \"abbreviation\": \"GT\",\n          \"munis\": [{\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT421 - Emfuleni [Vereeniging]\",\"muniCode\":\"GT421\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT422 - Midvaal [Meyerton]\",\"muniCode\":\"GT422\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT423 - Lesedi [Heidelberg]\",\"muniCode\":\"GT423\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT481 - Mogale City [Krugersdorp]\",\"muniCode\":\"GT481\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT482 - Randfontein [Randfontein]\",\"muniCode\":\"GT482\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT483 - Westonaria [Westonaria]\",\"muniCode\":\"GT483\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT484 - Merafong City [Carletonville]\",\"muniCode\":\"GT484\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"}]\n      },\n      {\n          \"name\": \"KwaZulu-Natal\",\n          \"abbreviation\": \"KZN\",\n          \"munis\": [{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN211 - Vulamehlo [Dududu]\",\"muniCode\":\"KZN211\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN212 - Umdoni [Scottburgh]\",\"muniCode\":\"KZN212\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN213 - Umzumbe [Umzumbe]\",\"muniCode\":\"KZN213\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN214 - UMuziwabantu [Harding]\",\"muniCode\":\"KZN214\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN215 - Ezinqoleni [Izinqolweni]\",\"muniCode\":\"KZN215\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN216 - Hibiscus Coast [Port Shepstone]\",\"muniCode\":\"KZN216\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN221 - uMshwathi [Wartburg]\",\"muniCode\":\"KZN221\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN222 - uMngeni [Howick]\",\"muniCode\":\"KZN222\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN223 - Mooi Mpofana [Mooirivier]\",\"muniCode\":\"KZN223\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN224 - Impendle [Impendle]\",\"muniCode\":\"KZN224\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN225 - Msunduzi [Pietermaritzburg]\",\"muniCode\":\"KZN225\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN226 - Mkhambathini [Camperdown]\",\"muniCode\":\"KZN226\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN227 - Richmond [Richmond]\",\"muniCode\":\"KZN227\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN232 - Emnambithi/Ladysmith [Ladysmith]\",\"muniCode\":\"KZN232\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN233 - Indaka [Waaihoek]\",\"muniCode\":\"KZN233\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN234 - Umtshezi [Estcourt]\",\"muniCode\":\"KZN234\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN235 - Okhahlamba [Bergville]\",\"muniCode\":\"KZN235\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN236 - Imbabazane [Loskop]\",\"muniCode\":\"KZN236\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN241 - Endumeni [Dundee]\",\"muniCode\":\"KZN241\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN242 - Nqutu [Nqutu]\",\"muniCode\":\"KZN242\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN244 - Msinga [Pomeroy]\",\"muniCode\":\"KZN244\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN245 - Umvoti [Greytown]\",\"muniCode\":\"KZN245\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN252 - Newcastle [Newcastle]\",\"muniCode\":\"KZN252\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN253 - eMadlangeni [Utrecht]\",\"muniCode\":\"KZN253\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN254 - Dannhauser [Durnacol]\",\"muniCode\":\"KZN254\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN261 - eDumbe [Paulpietersburg]\",\"muniCode\":\"KZN261\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN262 - UPhongolo [Pongola]\",\"muniCode\":\"KZN262\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN263 - Abaqulusi [Vryheid]\",\"muniCode\":\"KZN263\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN265 - Nongoma [Nongoma]\",\"muniCode\":\"KZN265\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN266 - Ulundi [Ulundi]\",\"muniCode\":\"KZN266\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN271 - Umhlabuyalingana [Emangusi]\",\"muniCode\":\"KZN271\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN272 - Jozini [Mkuze]\",\"muniCode\":\"KZN272\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN273 - The Big 5 False Bay [Hluhluwe]\",\"muniCode\":\"KZN273\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN274 - Hlabisa [Somkele]\",\"muniCode\":\"KZN274\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN275 - Mtubatuba [Mtubatuba]\",\"muniCode\":\"KZN275\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN281 - Mfolozi [KwaMbonambi]\",\"muniCode\":\"KZN281\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN282 - uMhlathuze [Richards Bay]\",\"muniCode\":\"KZN282\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN283 - Ntambana [Ntambana]\",\"muniCode\":\"KZN283\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN284 - uMlalazi [Eshowe]\",\"muniCode\":\"KZN284\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN285 - Mthonjaneni [Melmoth]\",\"muniCode\":\"KZN285\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN286 - Nkandla [Nkandla]\",\"muniCode\":\"KZN286\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN291 - Mandeni [Mandeni]\",\"muniCode\":\"KZN291\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN292 - KwaDukuza [Stanger]\",\"muniCode\":\"KZN292\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN293 - Ndwedwe [Ndwedwe]\",\"muniCode\":\"KZN293\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN294 - Maphumulo [Maphumulo]\",\"muniCode\":\"KZN294\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN431 - Ingwe [Creighton]\",\"muniCode\":\"KZN431\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN432 - Kwa Sani [Underberg]\",\"muniCode\":\"KZN432\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN433 - Greater Kokstad [Kokstad]\",\"muniCode\":\"KZN433\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN434 - Ubuhlebezwe [Ixopo]\",\"muniCode\":\"KZN434\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN435 - Umzimkhulu [Umzimkulu]\",\"muniCode\":\"KZN435\"}]\n      },\n      {\n          \"name\": \"North West\",\n          \"abbreviation\": \"NW\",\n          \"munis\": [{\"provinceName\":\"North West\",\"muniName\":\"NW371 - Moretele [Makapanstad]\",\"muniCode\":\"NW371\"},{\"provinceName\":\"North West\",\"muniName\":\"NW372 - Madibeng [Brits]\",\"muniCode\":\"NW372\"},{\"provinceName\":\"North West\",\"muniName\":\"NW373 - Rustenburg [Rustenburg]\",\"muniCode\":\"NW373\"},{\"provinceName\":\"North West\",\"muniName\":\"NW374 - Kgetlengrivier [Koster]\",\"muniCode\":\"NW374\"},{\"provinceName\":\"North West\",\"muniName\":\"NW375 - Moses Kotane [Mogwase]\",\"muniCode\":\"NW375\"},{\"provinceName\":\"North West\",\"muniName\":\"NW381 - Ratlou [Setlagole]\",\"muniCode\":\"NW381\"},{\"provinceName\":\"North West\",\"muniName\":\"NW382 - Tswaing [Delareyville]\",\"muniCode\":\"NW382\"},{\"provinceName\":\"North West\",\"muniName\":\"NW383 - Mafikeng [Mafikeng]\",\"muniCode\":\"NW383\"},{\"provinceName\":\"North West\",\"muniName\":\"NW384 - Ditsobotla [Lichtenburg]\",\"muniCode\":\"NW384\"},{\"provinceName\":\"North West\",\"muniName\":\"NW385 - Ramotshere Moiloa [Zeerust]\",\"muniCode\":\"NW385\"},{\"provinceName\":\"North West\",\"muniName\":\"NW392 - Naledi [Vryburg]\",\"muniCode\":\"NW392\"},{\"provinceName\":\"North West\",\"muniName\":\"NW393 - Mamusa [Schweizer-Reneke]\",\"muniCode\":\"NW393\"},{\"provinceName\":\"North West\",\"muniName\":\"NW394 - Greater Taung [Reivilo]\",\"muniCode\":\"NW394\"},{\"provinceName\":\"North West\",\"muniName\":\"NW396 - Lekwa-Teemane [Christiana]\",\"muniCode\":\"NW396\"},{\"provinceName\":\"North West\",\"muniName\":\"NW397 - NW397 Local Municipality [Ganyesa/Pomfret]\",\"muniCode\":\"NW397\"},{\"provinceName\":\"North West\",\"muniName\":\"NW401 - Ventersdorp [Ventersdorp]\",\"muniCode\":\"NW401\"},{\"provinceName\":\"North West\",\"muniName\":\"NW402 - Tlokwe [Potchefstroom]\",\"muniCode\":\"NW402\"},{\"provinceName\":\"North West\",\"muniName\":\"NW403 - Matlosana [Klerksdorp]\",\"muniCode\":\"NW403\"},{\"provinceName\":\"North West\",\"muniName\":\"NW404 - Maquassi Hills [Wolmaransstad]\",\"muniCode\":\"NW404\"}]\n      },\n      {\n          \"name\": \"Free State\",\n          \"abbreviation\": \"FS\",\n          \"munis\": [{\"provinceName\":\"Free State\",\"muniName\":\"FS161 - Letsemeng [Koffiefontein]\",\"muniCode\":\"FS161\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS162 - Kopanong [Trompsburg]\",\"muniCode\":\"FS162\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS163 - Mohokare [Zastron]\",\"muniCode\":\"FS163\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS164 - Naledi [Dewetsdorp]\",\"muniCode\":\"FS164\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS181 - Masilonyana [Theunissen]\",\"muniCode\":\"FS181\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS182 - Tokologo [Dealesville]\",\"muniCode\":\"FS182\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS183 - Tswelopele [Hoopstad]\",\"muniCode\":\"FS183\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS184 - Matjhabeng [Welkom]\",\"muniCode\":\"FS184\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS185 - Nala [Bothaville]\",\"muniCode\":\"FS185\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS191 - Setsoto [Senekal]\",\"muniCode\":\"FS191\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS192 - Dihlabeng [Bethlehem]\",\"muniCode\":\"FS192\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS193 - Nketoana [Reitz]\",\"muniCode\":\"FS193\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS194 - Maluti a Phofung [Qwa-Qwa]\",\"muniCode\":\"FS194\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS195 - Phumelela [Vrede]\",\"muniCode\":\"FS195\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS196 - Mantsopa [Ladybrand]\",\"muniCode\":\"FS196\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS201 - Moqhaka [Kroonstad]\",\"muniCode\":\"FS201\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS203 - Ngwathe [Parys]\",\"muniCode\":\"FS203\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS204 - Metsimaholo [Sasolburg]\",\"muniCode\":\"FS204\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS205 - Mafube [Frankfort]\",\"muniCode\":\"FS205\"},{\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"}]\n      },\n      {\n          \"name\": \"Eastern Cape\",\n          \"abbreviation\": \"EC\",\n          \"munis\": [{\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC101 - Camdeboo [Graaff-Reinet]\",\"muniCode\":\"EC101\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC102 - Blue Crane Route [Somerset East]\",\"muniCode\":\"EC102\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC103 - Ikwezi [Jansenville]\",\"muniCode\":\"EC103\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC104 - Makana [Grahamstown]\",\"muniCode\":\"EC104\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC105 - Ndlambe [Port Alfred]\",\"muniCode\":\"EC105\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC106 - Sundays River Valley [Kirkwood]\",\"muniCode\":\"EC106\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC107 - Baviaans [Willowmore]\",\"muniCode\":\"EC107\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC108 - Kouga [Humansdorp]\",\"muniCode\":\"EC108\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC109 - Kou-Kamma [Kareedouw]\",\"muniCode\":\"EC109\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC121 - Mbhashe [Idutywa]\",\"muniCode\":\"EC121\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC122 - Mnquma [Butterworth]\",\"muniCode\":\"EC122\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC123 - Great Kei [Komga]\",\"muniCode\":\"EC123\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC124 - Amahlathi [Stutterheim]\",\"muniCode\":\"EC124\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC126 - Ngqushwa [Peddie]\",\"muniCode\":\"EC126\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC127 - Nkonkobe [Alice]\",\"muniCode\":\"EC127\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC128 - Nxuba [Adelaide]\",\"muniCode\":\"EC128\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC131 - Inxuba Yethemba [Cradock]\",\"muniCode\":\"EC131\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC132 - Tsolwana [Tarkastad]\",\"muniCode\":\"EC132\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC133 - Inkwanca [Molteno]\",\"muniCode\":\"EC133\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC134 - Lukhanji [Queenstown]\",\"muniCode\":\"EC134\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC135 - Intsika Yethu [Cofimvaba]\",\"muniCode\":\"EC135\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC136 - Emalahleni [Lady Frere]\",\"muniCode\":\"EC136\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC137 - Engcobo [Engcobo]\",\"muniCode\":\"EC137\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC138 - Sakhisizwe [Elliot]\",\"muniCode\":\"EC138\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC141 - Elundini [Mount Fletcher]\",\"muniCode\":\"EC141\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC142 - Senqu [Lady Grey]\",\"muniCode\":\"EC142\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC143 - Maletswai [Aliwal North]\",\"muniCode\":\"EC143\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC144 - Gariep [Burgersdorp]\",\"muniCode\":\"EC144\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC153 - Ngquza Hill [Flagstaff]\",\"muniCode\":\"EC153\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC154 - Port St Johns [Port St Johns]\",\"muniCode\":\"EC154\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC155 - Nyandeni [Libode]\",\"muniCode\":\"EC155\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC156 - Mhlontlo [Qumbu]\",\"muniCode\":\"EC156\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC157 - King Sabata Dalindyebo [Umtata]\",\"muniCode\":\"EC157\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC441 - Matatiele [Matatiele]\",\"muniCode\":\"EC441\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC442 - Umzimvubu [Mount Ayliff]\",\"muniCode\":\"EC442\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC443 - Mbizana [Bizana]\",\"muniCode\":\"EC443\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC444 - Ntabankulu [Ntabankulu]\",\"muniCode\":\"EC444\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}]\n      },\n      {\n          \"name\": \"Northern Cape\",\n          \"abbreviation\": \"NC\",\n          \"munis\": [{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC061 - RICHTERSVELD [Port Nolloth]\",\"muniCode\":\"NC061\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC062 - NAMA KHOI [Springbok]\",\"muniCode\":\"NC062\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC064 - KAMIESBERG [Garies]\",\"muniCode\":\"NC064\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC065 - HANTAM [Calvinia]\",\"muniCode\":\"NC065\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC066 - KAROO HOOGLAND [Fraserburg]\",\"muniCode\":\"NC066\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC067 - KHâI-MA [Pofadder]\",\"muniCode\":\"NC067\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC071 - UBUNTU [Victoria West]\",\"muniCode\":\"NC071\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC072 - UMSOBOMVU [Colesberg]\",\"muniCode\":\"NC072\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC073 - EMTHANJENI [De Aar]\",\"muniCode\":\"NC073\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC074 - KAREEBERG [Carnarvon]\",\"muniCode\":\"NC074\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC075 - RENOSTERBERG [Phillipstown]\",\"muniCode\":\"NC075\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC076 - THEMBELIHLE [Hopetown]\",\"muniCode\":\"NC076\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC077 - SIYATHEMBA [Prieska]\",\"muniCode\":\"NC077\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC078 - SIYANCUMA [Griekwastad]\",\"muniCode\":\"NC078\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC081 - MIER [Mier]\",\"muniCode\":\"NC081\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC082 - KAI !GARIB [Keimoes]\",\"muniCode\":\"NC082\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC083 - KHARA HAIS [Upington]\",\"muniCode\":\"NC083\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC084 - !KHEIS [Groblershoop]\",\"muniCode\":\"NC084\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC085 - TSANTSABANE [Postmasburg]\",\"muniCode\":\"NC085\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC086 - KGATELOPELE [Danielskuil]\",\"muniCode\":\"NC086\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC091 - Sol Plaatje [Kimberley]\",\"muniCode\":\"NC091\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC092 - Dikgatlong [Barkley West]\",\"muniCode\":\"NC092\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC093 - Magareng [Warrenton]\",\"muniCode\":\"NC093\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC094 - Phokwane [Hartswater]\",\"muniCode\":\"NC094\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC451 - Joe Morolong [Kgalagadi]\",\"muniCode\":\"NC451\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC452 - GA-SEGONYANA [Kuruman]\",\"muniCode\":\"NC452\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC453 - GAMAGARA [Kathu]\",\"muniCode\":\"NC453\"}]\n      },\n      {\n          \"name\": \"Western Cape\",\n          \"abbreviation\": \"WC\",\n          \"munis\": [{\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC011 - Matzikama [Vredendal]\",\"muniCode\":\"WC011\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC012 - Cederberg [Citrusdal]\",\"muniCode\":\"WC012\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC013 - Bergrivier [Velddrif]\",\"muniCode\":\"WC013\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC014 - Saldanha Bay [West Coast Peninsula]\",\"muniCode\":\"WC014\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC015 - Swartland [Malmesbury]\",\"muniCode\":\"WC015\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC022 - Witzenberg [Ceres]\",\"muniCode\":\"WC022\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC023 - Drakenstein [Paarl]\",\"muniCode\":\"WC023\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC024 - Stellenbosch [Stellenbosch]\",\"muniCode\":\"WC024\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC025 - Breede Valley [Worcester]\",\"muniCode\":\"WC025\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC026 - Langeberg [Robertson]\",\"muniCode\":\"WC026\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC031 - Theewaterskloof [Caledon]\",\"muniCode\":\"WC031\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC032 - Overstrand [Greater Hermanus]\",\"muniCode\":\"WC032\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC033 - Cape Agulhas [Bredasdorp]\",\"muniCode\":\"WC033\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC034 - Swellendam [Barrydale/Swellendam ]\",\"muniCode\":\"WC034\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC041 - Kannaland [Ladismith]\",\"muniCode\":\"WC041\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC042 - Hessequa [Heidelberg/Riversdale]\",\"muniCode\":\"WC042\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC043 - Mossel Bay [Mossel Bay]\",\"muniCode\":\"WC043\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC044 - George [George]\",\"muniCode\":\"WC044\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC045 - Oudtshoorn [Oudtshoorn]\",\"muniCode\":\"WC045\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC047 - Bitou [Greater Plettenberg Bay]\",\"muniCode\":\"WC047\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC048 - Knysna [Knysna]\",\"muniCode\":\"WC048\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC051 - Laingsburg [Laingsburg]\",\"muniCode\":\"WC051\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC052 - Prince Albert [Prins Albert]\",\"muniCode\":\"WC052\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC053 - Beaufort West [Beaufort West]\",\"muniCode\":\"WC053\"}]\n      }\n  ]\n  return provincesData;\n}\n\nexport function getMetrosData() {\n  var metrosData = [\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},\n    {\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},\n    {\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},\n    {\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"},\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}\n  ]\n  return metrosData;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\",\"ELVIZ_grouprect\":\"barchart_ELVIZ_grouprect__3r-aC\",\"barchart\":\"barchart_barchart__1g-zw\",\"ELVIZ_stylesheet-tv\":\"barchart_ELVIZ_stylesheet-tv__1BK01\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__tgFvS\",\"barchart-map\":\"barchartMap_barchart-map__1q5Ah\",\"ELVIZ_stylesheet-tv\":\"barchartMap_ELVIZ_stylesheet-tv__2Oynn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"map-widget\":\"map_map-widget__2RFiV\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\",\"ELVIZ_stylesheet-web\":\"map_ELVIZ_stylesheet-web__QqAjU\",\"ELVIZ_stylesheet-none\":\"map_ELVIZ_stylesheet-none__3Bxph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__1KFQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2XNYt\",\"piechart\":\"piechart_piechart__1_rKy\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__1l-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__20lGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__1UVX7\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__1faC8\",\"label\":\"quickResultsWidget_label__2Dt1H\",\"active\":\"quickResultsWidget_active__izwwa\",\"quickresultswidget\":\"quickResultsWidget_quickresultswidget__1za_y\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__284h0\",\"quick-results-title\":\"quickResultsWidget_quick-results-title__l1vy0\",\"race-for-seats\":\"quickResultsWidget_race-for-seats__2jA3-\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__1QzTz\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3beRX\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3OaTN\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__1_krp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__3Fxlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__1v6iW\",\"ELVIZ_tooltip\":\"piechart_ELVIZ_tooltip__nq19G\",\"donutchart\":\"piechart_donutchart__2UxpS\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__23IoW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__2O9dV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__29vdd\",\"multievent-container\":\"barchartEmbed_multievent-container__1G-dC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__3KEZl\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__2bLlY\",\"horseshoechart\":\"horseshoe_horseshoechart__2Js34\",\"ELVIZ_stylesheet-tv\":\"horseshoe_ELVIZ_stylesheet-tv__1-bHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__1B28Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3Hovq\",\"multievent-container\":\"barchartEmbed_multievent-container__2y7nI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3iHSi\",\"multievent-container\":\"barchartEmbed_multievent-container__3dDi0\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2Ln06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2m2Vo\",\"multievent-container\":\"barchartEmbed_multievent-container__3U1YR\"};","import React, { Component } from \"react\";\n\nimport {\n    loadScriptsForEmbedMode\n} from \"../utils\";\n\nexport default class EmbedBase extends Component {\n    constructor(props) {\n        super(props);\n        loadScriptsForEmbedMode();\n    }\n\n    render () {\n        return (\n            <div></div>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 1\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 6\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForSeatsBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 9\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    loadCanvg\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();        \n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,  \n            stylesheetFor,    \n            eventDescription,      \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    loadCanvg,\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,       \n            stylesheetFor,     \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 10\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 2\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var newState = JSON.parse(JSON.stringify(this.state));\n        newState.componentID = -1000;\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionEvents: [],\n            componentID: 5\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 4\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showProgVotesPiechart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 7\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties\n                // .filter(party => party.event.description == )\n                .filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`                 \n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatsComparisonBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 8\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatHorseShoeChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 16\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showVoteComparisonBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 12\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 13\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 14\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 15\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 17\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatDonutChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","export {default as BarChartEmbed} from \"./BarChart/barchartEmbed\";\nexport {default as RaceForSeatsBarChartEmbed} from \"./RaceForSeatBarchart/barchartEmbed\";\nexport {default as SpoiltBarChartEmbed} from \"./SpoiltBarchart/barchartEmbed\";\nexport {default as MapEmbed} from \"./Map/mapEmbed\";\nexport {default as TurnoutMapEmbed} from \"./TurnoutMap/mapEmbed\";\nexport {default as TurnoutBarChartEmbed} from \"./TurnoutBarchart/barchartEmbed\";\nexport {default as BarchartWithNavMapEmbed} from \"./BarchartWithNavMap/barchartMapEmbed\";\nexport {default as QuickResultsWidgetEmbed} from \"./QuickResultsWidget/quickResultsWidgetEmbed\";\nexport {default as ProgVotesCountPiechartEmbed} from \"./ProgVotesCountPiechart/piechartEmbed\";\nexport {default as RaceForSeatsComparisonBarChartEmbed} from \"./SeatCompBarchart/barchartEmbed\";\nexport {default as SeatHorseShoeChartEmbed} from \"./SeatHorseShoeChart/horseshoeEmbed\";\nexport {default as VoteComparisonBarchartEmbed} from \"./VoteCompBarchart/barchartEmbed\";\n\nexport {default as TVSeatCompBarchartEmbed} from \"./TVSeatCompBarchart/barchartEmbed\";\nexport {default as TVSeatSwingBarchartEmbed} from \"./TVSeatSwingBarchart/barchartEmbed\";\nexport {default as TVVoteCompBarchartEmbed} from \"./TVVoteCompBarchart/barchartEmbed\";\nexport {default as TVVoteSwingBarchartEmbed} from \"./TVVoteSwingBarchart/barchartEmbed\";\n\nexport {default as SeatDonutChartEmbed} from \"./RaceForSeatDonut/piechartEmbed\";","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      console.log(\"draw Chart\", options);\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        var maxValue = d3.max(chartData, function(d) { return options.yValue(d); });\n        if (options.customizeDynamicMaxValue) {\n          minMaxY[1] = options.customizeDynamicMaxValue(maxValue);\n          console.log(\"maxValue -> minMaxY1\", maxValue, minMaxY[1]);\n        } else {\n          minMaxY[1] = maxValue + 1;\n        }\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  dynamicYAxisFromValues: true,\n  customizeDynamicMaxValue: (maxVal) => Math.min(100, maxVal * 1.5),\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 1\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n\n      console.log(\"rfv barchart componentID\", componentID);\n\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName2,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 6\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      console.log(\"targetState\", targetState);\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName2(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n        \n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName2(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 9\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            disableNavigation: false,\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    // componentWillReceiveProps(newProps) {\n    //     var newState = JSON.parse(JSON.stringify(this.state));\n    //     fetchDataFromOBJ(newState, newProps);\n    //     this.setState(newState);\n    // }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                var regionType = self.state.regionType\n                if (regionType == \"municipality\") {\n                    if (!geoJsonData.objects[self.state.muniCode])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                } else { // \"municipality-vd\"\n                    if (!geoJsonData.objects[self.state.iecId])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                }\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    // if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    var undefinedText;\n                    if (self.state.regionType === \"province\") {\n                        undefinedText = \"New municipality - no previous results available\"\n                    } else {\n                        undefinedText = \"New voting district - no previous results available\"\n                    }\n                    var mainPartyName = getMainPartyName(d, i);\n                    var subRegionName = getSubRegionName(d.properties, self.state);\n                    var tooltipText = (typeof mainPartyName !== \"undefined\")? \n                                (subRegionName + \" : \" + mainPartyName) : undefinedText;\n\n                    tooltipDiv.html(tooltipText)\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 500)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                \n                function setRegionType(regionType) {\n                    var newState;\n                    var newState = {\n                        regionType: self.state.regionType, \n                        provinceName: self.state.provinceName,\n                        muniName: self.state.muniName,\n                        muniCode: self.state.muniCode,\n                        iecId: self.state.iecId,\n                    }\n                    newState.regionType = regionType;\n                    triggerCustomEvent(events.REGION_CHANGE, newState);\n                    self.setState(newState);\n                }\n\n                function appendSpan(foDiv, regionName, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"span\")\n                        .style(\"height\", \"30px\")\n                        .style(\"cursor\", \"default\")\n                        .html(regionName);\n                }\n\n                function appendLink(foDiv, regionName, regionType, addSub) {\n                    if (addSub) foDiv.append(\"span\").html(\" > \");\n                    foDiv.append(\"a\")\n                        .style(\"height\", \"30px\")\n                        .style(\"cursor\", \"pointer\")\n                        .html(regionName)\n                        .on(\"click\", function() {\n                            setRegionType(regionType);\n                        });\n                }\n                \n                var foDiv = fo.append(\"xhtml:div\");\n                var regionType = self.state.regionType;\n                if (regionType == \"national\") {\n                    appendSpan(foDiv, \"South Africa\", false);\n                } else {\n                    appendLink(foDiv, \"South Africa\", \"national\", false);\n                    if (regionType == \"province\") {\n                        appendSpan(foDiv, self.state.provinceName, true);\n                    } else {\n                        appendLink(foDiv, self.state.provinceName, \"province\", true);\n                        if (regionType == \"municipality\") {\n                            appendSpan(foDiv, self.state.muniCode, true);\n                        } else {\n                            appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                            appendSpan(foDiv, self.state.iecId, true);\n                        }\n                    }\n                }\n                // foDiv\n                //     .append(\"button\")\n                //     .attr(\"class\", \"go-back\")\n                //     .style(\"height\", \"30px\")\n                //     .style(\"color\", \"black\")\n                //     .html(\"go back\")\n                //     .on(\"click\", function() {\n                //         var regionType = self.state.regionType;\n                //         var newState, event;\n    \n                //         var newState = {\n                //             regionType: self.state.regionType, \n                //             provinceName: self.state.provinceName,\n                //             muniName: self.state.muniName,\n                //             muniCode: self.state.muniCode,\n                //             iecId: self.state.iecId,\n                //         }\n                        \n                //         if (regionType === \"province\") {\n                //             newState.regionType = \"national\";\n                //         } else if (regionType === \"municipality\") {\n                //             newState.regionType = \"province\";\n                //         } else if (regionType === \"municipality-vd\") {\n                //             newState.regionType = \"municipality\";\n                //         }\n    \n                //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                //         self.setState(newState);\n                //     });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(`${currentRegionName} has been disestablished`); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            if (!window.canvg) {\n                return reject(\"canvg module not available\");\n            }\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                var regionType = self.state.regionType\n                if (regionType == \"municipality\") {\n                    if (!geoJsonData.objects[self.state.muniCode])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                } else { // \"municipality-vd\"\n                    if (!geoJsonData.objects[self.state.iecId])\n                        return;\n                    geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                }\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    \n                    var undefinedText;\n                    if (self.state.eventDescription.indexOf(\"2019\") == -1) {\n                        if (self.state.regionType === \"province\") {\n                            undefinedText = \"New municipality - no previous results available\"\n                        } else {\n                            undefinedText = \"New voting district - no previous results available\"\n                        }\n                    } else {\n                        undefinedText = \"votes not counted yet\";\n                    }\n\n                    var turnoutData = getTurnout(d, i);\n                    var subRegionName = getSubRegionName(d.properties, self.state);\n                    var tooltipText = (typeof turnoutData !== \"undefined\")? \n                                (subRegionName + \" : \" + turnoutData + \"%\") : undefinedText;\n\n                    tooltipDiv.html(tooltipText)\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n                if (!self.state.disableNavigation) {\n                    var fo = svg.append(\"foreignObject\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", 10)\n                        .attr(\"width\", 500)\n                        .attr(\"height\", 30)\n                        .attr(\"class\", \"map-controls\")\n                    \n                    function setRegionType(regionType) {\n                        var newState;\n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        newState.regionType = regionType;\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    }\n    \n                    function appendSpan(foDiv, regionName, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"span\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"default\")\n                            .html(regionName);\n                    }\n    \n                    function appendLink(foDiv, regionName, regionType, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"a\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"pointer\")\n                            .html(regionName)\n                            .on(\"click\", function() {\n                                setRegionType(regionType);\n                            });\n                    }\n                    \n                    var foDiv = fo.append(\"xhtml:div\");\n                    var regionType = self.state.regionType;\n                    if (regionType == \"national\") {\n                        appendSpan(foDiv, \"South Africa\", false);\n                    } else {\n                        appendLink(foDiv, \"South Africa\", \"national\", false);\n                        if (regionType == \"province\") {\n                            appendSpan(foDiv, self.state.provinceName, true);\n                        } else {\n                            appendLink(foDiv, self.state.provinceName, \"province\", true);\n                            if (regionType == \"municipality\") {\n                                appendSpan(foDiv, self.state.muniCode, true);\n                            } else {\n                                appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                appendSpan(foDiv, self.state.iecId, true);\n                            }\n                        }\n                    }\n                    // foDiv\n                    //     .append(\"button\")\n                    //     .attr(\"class\", \"go-back\")\n                    //     .style(\"height\", \"30px\")\n                    //     .style(\"color\", \"black\")\n                    //     .html(\"go back\")\n                    //     .on(\"click\", function() {\n                    //         var regionType = self.state.regionType;\n                    //         var newState, event;\n        \n                    //         var newState = {\n                    //             regionType: self.state.regionType, \n                    //             provinceName: self.state.provinceName,\n                    //             muniName: self.state.muniName,\n                    //             muniCode: self.state.muniCode,\n                    //             iecId: self.state.iecId,\n                    //         }\n                            \n                    //         if (regionType === \"province\") {\n                    //             newState.regionType = \"national\";\n                    //         } else if (regionType === \"municipality\") {\n                    //             newState.regionType = \"province\";\n                    //         } else if (regionType === \"municipality-vd\") {\n                    //             newState.regionType = \"municipality\";\n                    //         }\n        \n                    //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                    //         self.setState(newState);\n                    //     });\n                }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        }).catch(error => {\n            console.error(error);       \n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                alert(`${currentRegionName} has been disestablished`); \n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 10\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n    \n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 2\n        }      \n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n      const {\n        stylesheetFor\n      } = this.state;\n\n        return (\n        <div ref=\"superwidget\" className={className(\"barchart-map\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = options.variable,\n        category = options.category,\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n\n        \n\n    function colour(key) {\n        // console.log(\"colorsData\", colorsData);\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var totalSvg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom)))\n        .classed(\"svg-content\", true);\n    \n    \n    var transformX = height / 2, transformY = height / 2;\n    if (options.chartType === 'Progress on Votes Count') {\n    } else {\n        transformX = width / 2;\n    }\n    var svg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + transformX + ',' + transformY + ')');\n    \n    var labelSvg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + height * 6 / 5 + ',' + height / 2 + ')');\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = svg.append(\"g\")\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\");\n      \n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n\n        if (options.chartType === 'Progress on Votes Count') {\n            colorsData = colorsDataP;\n        } else {\n            var partyColorByName = {};\n\n            var partyColorsData = colorsDataP;\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.abbreviation] = edge.node.colour;\n                })\n            }\n            colorsData = partyColorByName;\n        }\n        \n        data = value;\n\n        if (options.chartType === 'Progress on Votes Count') {\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', -15)\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle')\n                .text('Completed' + ': ' + data[0][\"percent\"] + '%');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .text('Captured Votes' + ': ' + data[0][\"count\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 15)\n                .text('Total' + ': ' + data[0][\"totalCount\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n        }\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n\n            // console.log(\"mouseenter\", data);\n\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        if (options.chartType === 'Progress on Votes Count') {\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n        } else { //'Race for Seats Donut chart'\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Seats' + ': ' + data.data[\"seats\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Party' + ': ' + data.data[\"name\"] + '</tspan>';\n        }\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count',\n  variable: 'percent',\n  category: 'name'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 4\n      }     \n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"piechart\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"../ProgVotesCountPiechart/d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Donut Chart',\n  variable: 'seats',\n  category: 'name',\n  viewBox: '170 0 360 320'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass DonutChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 17\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      console.log(\"targetState\", targetState);\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-donutchart-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      // console.log(\"styles\", styles);\n      return (\n          <div className={className(\"donutchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n\n        // console.log(\"chartData\", chartData);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default DonutChart;\n","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\nvar toShowChartLabels = [\"Race for Votes\", \"Turnout\", \"Race for Seats\"];\nvar toShowCharts = [\"race for votes\", \"turnout\", \"race for seats\"];\n\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      return (\n        <div className=\"metismenu-link\" onClick={this.onClick}>\n          {this.props.children}\n        </div>\n      );\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"Race for Votes\",\n            activeLinkId: ''\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        var passInfo = lastClass.split('-');\n\n        var regionType, selectionData = {}, chartType = \"\";\n        var activeLinkId = '';\n\n        if (passInfo[1] == '1') {\n            regionType = \"national\";\n            chartType = toShowCharts[passInfo[2]];\n            activeLinkId = '1';\n        } else if (passInfo[1] == '2') {\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n            chartType = toShowCharts[passInfo[3]];\n        } else if (passInfo[1] == '3') { // muni level\n            regionType = \"municipality\";\n            selectionData = provincesData[passInfo[2]].munis[passInfo[3]];\n            chartType = toShowCharts[passInfo[4]];\n            activeLinkId = `3-${passInfo[2]}-${passInfo[3]}`;\n        } else if (passInfo[1] == '4') { // metros\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            chartType = \"race for votes\";\n            activeLinkId = `4-${passInfo[2]}`;\n        } else {\n            return;\n        }\n\n        if (!chartType)\n            return;\n        \n        // console.log(\"handleNavBarSelection\", regionType, chartType);\n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType \n                && this.state.comp == chartType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName \n                && this.state.comp == chartType)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName\n                && this.state.comp == chartType)\n                return;\n        }\n\n        newState.comp = chartType;\n\n        // console.log(\"handleNavBarSelection\", newState);\n\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, newState);\n        // triggerCustomEvent(events.REGION_CHANGE, newState);\n        // triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                icon: '1',\n                label: 'National',\n                // to: '1',\n                content: toShowChartLabels.map((toshowchart, chartIdx) => {\n                    return {\n                        icon: `1-${chartIdx}`,\n                        label: toshowchart,\n                        to: `1-${chartIdx}`,\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Provinces',\n                content: provincesData.map((province, i) => {\n                    return {\n                        icon: `2-${i}`,\n                        label: province.name,\n                        // to: `2-${i}`,\n                        content: toShowChartLabels.map((toshowchart, chartIdx) => {\n                            return {\n                                icon: `2-${i}-${chartIdx}`,\n                                label: toshowchart,\n                                to: `2-${i}-${chartIdx}`,\n                            }\n                        })\n                        // content: province.munis.map((muni, j) => {\n                        //     return {\n                        //         icon: `3-${i}-${j}`,\n                        //         label: muni.muniName.split(\"-\")[1].split(\"[\")[0],\n                        //         to: `3-${i}-${j}`,\n                        //     }\n                        // })\n                    }\n                })\n            },\n            {\n                icon: '',\n                label: 'Metros',\n                content: metrosData.map((metro, i) => {\n                    return {\n                        icon: `4-${i}`,\n                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                        to: `4-${i}`,\n                        // content: toShowCharts.map((toshowchart, chartIdx) => {\n                        //     return {\n                        //         icon: `4-${i}-${chartIdx}`,\n                        //         label: toshowchart,\n                        //         to: `4-${i}-${chartIdx}`,\n                        //     }\n                        // })\n                    }\n                })\n            }\n        ];\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatDonut from '../RaceForSeatDonut/piechart';\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport {saveAs} from \"file-saver\";\nimport {\n    getRegionName,\n    getRegionName2,\n    getRegionName3,\n    triggerCustomEvent,\n    fetchDataFromOBJ,\n    handleRegionChange\n} from \"../../utils\";\n\n// console.log(\"styles\", styles);\n\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"race for votes\",\n            stylesheetFor: \"web\",\n            componentID: 5\n        }\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'race for votes') {\n            imageLoadPromises = [\n                this.votesInstance1.exportAsPNGUri(), \n                this.votesInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'race for seats') {\n            imageLoadPromises = [\n                this.seatsInstance1.exportAsPNGUri(), \n                this.seatsInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'turnout') {\n            imageLoadPromises = [\n                this.turnoutInstance1.exportAsPNGUri(), \n                this.turnoutInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'counting progress') {\n            imageLoadPromises = [\n                this.progressInstance1.exportAsPNGUri(), \n                this.progressInstance2.exportAsPNGUri()\n            ];\n        } else if (comp == 'spoilt votes') {\n            imageLoadPromises = [\n                this.spoiltInstance1.exportAsPNGUri(), \n                this.spoiltInstance2.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            imgs.file(\"image1.png\", values[0], {base64: true});\n            imgs.file(\"image2.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState);\n\n        var triggerState = JSON.parse(JSON.stringify(newState));\n        triggerState.componentID = -1000;\n\n        triggerCustomEvent(events.CHART_PREVIEW, triggerState);\n        triggerCustomEvent(events.MAP_PREVIEW, triggerState);\n    };\n\n    render() {\n        var {\n            comp,\n            numParties,\n            eventDescription,\n            stylesheetFor,\n            regionType,\n            provinceName,\n            muniName,\n            muniCode,\n            iecId\n        } = this.state;\n        var self = this;\n        return (\n            <div className={className(\"quickresultswidget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {/* <div className={cn(\"row\") + \" \" + cn(\"component-transition-menu\")}>\n                    <div className={cn(\"col-md-2\") + \" \" + className(\"label\")}>\n                        Show Results \n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button \n                            className={comp == 'race for votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for votes'})}> Race for votes </button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'race for seats'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'race for seats'})}> Race for seats</button>\n                    </div>\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'turnout'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'turnout'})}> Turnout</button>\n                    </div>\n                    {\n                        (eventDescription.indexOf(\"2014\") != -1) &&\n                        <div className={cn(\"col-md-2\")}>\n                            <button  \n                                className={comp == 'counting progress'? className(\"active\") : \"\"} \n                                onClick={() => this.setState({comp: 'counting progress'})}> Counting progress </button>\n                        </div>\n                    }\n                    <div className={cn(\"col-md-2\")}>\n                        <button  \n                            className={comp == 'spoilt votes'? className(\"active\") : \"\"} \n                            onClick={() => this.setState({comp: 'spoilt votes'})}> Spoilt Votes </button>\n                    </div>\n                </div> */}\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar />\n                    </div>\n                            {\n                                comp == 'race for votes' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        RACE FOR VOTES: <span className=\"regionName\">{getRegionName2(self.state)}</span>\n                                    </div>\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <BarChart \n                                            ref={instance => { this.votesInstance1 = instance; }} \n                                            {...this.state} \n                                            componentID={-1000}/>\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.votesInstance2 = instance; }} \n                                            {...this.state} \n                                            componentID={-1000}/>\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'race for seats' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")+\" \"+className(\"race-for-seats\")}>\n                                        RACE FOR SEATS: <span className=\"regionName\">{getRegionName(self.state)}</span>(#SEATS)\n                                    </div>\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <RaceForSeatDonut \n                                            ref={instance => { this.seatsInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.seatsInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'turnout' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        RACE FOR VOTES: TURNOUT - {getRegionName3(self.state)}\n                                    </div>\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <TurnoutBarchart \n                                            ref={instance => { this.turnoutInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <TurnoutMap \n                                            ref={instance => { this.turnoutInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div>\n                                \n                            }\n                            {\n                                comp == 'counting progress' && \n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        COUNTING PROGRESS: {getRegionName(self.state)}\n                                    </div>\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <ProgressVotesPieChart \n                                            ref={instance => { this.progressInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.progressInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div>\n                            }\n                            {\n                                comp == 'spoilt votes' &&\n                                <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                                    <div className={className(\"quick-results-title\")}>\n                                        SPOILT VOTES: {getRegionName(self.state)}<br/>\n                                    </div>\n                                    {/* <div className={className(\"event-description\")}>\n                                        {\n                                            /(19|20)\\d{2}/g.exec(this.state.eventDescription)[0]\n                                        }\n                                    </div> */}\n                                    <div className={className(\"barchart-container\")}>\n                                        <SpoiltBarChart \n                                            ref={instance => { this.spoiltInstance1 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                    <div className={className(\"map-container\")}>\n                                        <Map \n                                            ref={instance => { this.spoiltInstance2 = instance; }} \n                                            {...this.state}\n                                            componentID={-1000} />\n                                    </div>\n                                </div> \n                            }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 7\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      \n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n  container.selectAll(\"svg\").remove();\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      for(var i = originChartData.length - 1; i >= 0 ; i -=2) {\n        chartData.push(originChartData[i]);\n      }\n      for (i= -1 - i; i < originChartData.length; i += 2) {\n        chartData.push(originChartData[i]);\n      }\n\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[ 3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997, 1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519, 3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581, 7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729, 13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660, 19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723, 26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i ++ ){\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist=[]\n          for( var i = 1; i < rows; i ++){\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J == 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J==1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j ++, Counter ++){\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 8\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"horseshoechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 16\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromPartyAbbr} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return options.yValue(d); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromPartyAbbr(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('class', className(config.CSS_PREFIX + \"grouprect\"))\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromPartyAbbr(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true,\n  viewBox: '45 0 655 340'\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 12\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromPartyAbbr} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => item.data[0].delta)) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => item.data[0].delta)) - 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromPartyAbbr(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromPartyAbbr(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n\n      svg.selectAll(\".xAxisLine\").remove();\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"currentColor\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 13\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      console.log(\"targetState\", targetState);\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 14\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 15\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={className(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","export {default as BarChart} from \"./BarChart/barchart\";\nexport {default as RaceForSeatsBarChart} from \"./RaceForSeatBarchart/barchart\";\nexport {default as SpoiltBarChart} from \"./SpoiltBarchart/barchart\";\nexport {default as Map} from \"./Map/map\";\nexport {default as TurnoutMap} from \"./TurnoutMap/map\";\nexport {default as TurnoutBarChart} from \"./TurnoutBarchart/barchart\";\nexport {default as BarchartWithNavMap} from \"./BarchartWithNavMap/barchartMap\";\nexport {default as QuickResultsWidget} from \"./QuickResultsWidget/quickResultsWidget\";\nexport {default as ProgVotesCountPiechart} from \"./ProgVotesCountPiechart/piechart\";\nexport {default as RaceForSeatsComparisonBarChart} from \"./SeatCompBarchart/barchart\";\nexport {default as SeatHorseShoeChart} from \"./SeatHorseShoeChart/horseshoe\";\nexport {default as VoteComparisonBarchart} from \"./VoteCompBarchart/barchart\";\n\nexport {default as TVSeatCompBarchart} from \"./TVSeatCompBarchart/barchart\";\nexport {default as TVSeatSwingBarchart} from \"./TVSeatSwingBarchart/barchart\";\nexport {default as TVVoteCompBarchart} from \"./TVVoteCompBarchart/barchart\";\nexport {default as TVVoteSwingBarchart} from \"./TVVoteSwingBarchart/barchart\";\n\nexport {default as SeatDonutChart} from \"./RaceForSeatDonut/piechart\";","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\",\n    // \"DOMAIN\": \"http://127.0.0.1:8080\",\n    \"CSS_PREFIX\": \"ELVIZ_\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst CHART_PREVIEW = \"chart-preview\";\nconst MAP_PREVIEW = \"map-preview\";\nconst QUICK_RESULTS_PREVIEW = \"quick-results-preview\"\nconst EXPORT_PNG = \"export-png\";\nconst EXPORT_SUPERWIDGET_PNG = \"export-superwidget-png\";\n\nexport default {\n    REGION_CHANGE,\n    CHART_PREVIEW,\n    MAP_PREVIEW,\n    QUICK_RESULTS_PREVIEW,\n    EXPORT_PNG\n};","import * as d3 from \"d3\";\nimport config from \"../config\";\n\nfunction calcPercent(a, b) {\n  if (b == 0) {\n    return 0;\n  } else {\n    return (a/b*100).toFixed(2);\n  }\n}\n\nexport function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            validVotes: el[\"validVotes\"].toFixed(2),\n            percOfVotes: el[\"percOfVotes\"].toFixed(2),\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function parseVotesComparisonData(data, props) {\n  var results, edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else { //\"municipality-vd\"\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n\n  var partyfilter_edges = edges.map(edge => {\n    var nodeData = edge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"]\n      .filter(a => props.partyIecId\n        ? (a.node[\"party\"][\"iecId\"] == props.partyIecId) \n        : (a.node[\"party\"][\"abbreviation\"] == props.partyAbbr));\n    var result = results[0];\n    if (result) {\n      var el = result[\"node\"];\n      return {\n          name: nodeData[\"event\"][\"description\"],\n          percOfVotes: el[\"percOfVotes\"].toFixed(2),\n          partyInfo: el[\"party\"]\n      }\n    }\n    return {\n      name: nodeData[\"event\"][\"description\"],\n      percOfVotes: 0,\n      partyInfo: {\n        name: props.partyAbbr,\n        abbreviation: props.partyAbbr,\n      }\n    }\n  });\n  var results = partyfilter_edges.filter(edge => props.eventDescriptions.indexOf(edge.name) != -1).reverse();\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        percOfVotes: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n  return new_results;\n}\n\nexport function parseVotesComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseVotesComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseProgressVotesCount(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"progress votes count data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Completed\",\n      percent: calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdWithResultsCaptured\"]\n    }, {\n      name: \"Not Completed\",\n      percent: 100 - calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdCount\"] - nodeData[\"vdWithResultsCaptured\"]\n    }\n  ]\n}\n\n// export function parseMainPartyData(data, props) {\n//     if (!data)  return null;\n//     var locationToMainParty = {};\n//     var edges;\n//     var regionType = props.regionType;\n//     var sort_results = function(party_results) {\n//         party_results[\"edges\"] = party_results[\"edges\"].sort(function(a, b) {\n//             return b.node.percOfVotes - a.node.percOfVotes;\n//         })\n//         return party_results;\n//     }\n//     if (regionType === \"national\") {\n//         edges = data[\"data\"][\"allProvincialBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var provinceName = node[\"location\"][\"name\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[provinceName] = partyName;\n//         })\n//     } else if (regionType === \"province\") {\n//         edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var muniCode = node[\"location\"][\"code\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[muniCode] = partyName;\n//         })\n//     } else {// \"municipality\"\n//         edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var iecId = node[\"location\"][\"iecId\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[iecId] = partyName;\n//         })\n//     }\n//     return locationToMainParty;\n// }\n\nfunction getTopPartyNameFromNode(node) {\n  if (node && node[\"topParty\"] && node[\"topParty\"][\"party\"] && node[\"topParty\"][\"party\"][\"name\"])\n      return node[\"topParty\"][\"party\"][\"name\"];\n  return \"\";\n}\n\nexport function parseMainPartyData(data, props) {\n  if (!data)  return null;\n  var locationToMainParty = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"topPartiesByProvince\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          locationToMainParty[provinceName] = getTopPartyNameFromNode(node);\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"topPartiesByMunicipality\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          locationToMainParty[muniCode] = getTopPartyNameFromNode(node);\n      })\n  } else {// \"municipality\"\n      edges = data[\"data\"][\"topPartiesByVotingDistrict\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          locationToMainParty[iecId] = getTopPartyNameFromNode(node);\n      })\n  }\n  return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      partyInfo: node[\"party\"]\n    }\n  })\n  \n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return results.slice(0, props.numParties);\n}\n\nexport function parseSeatsComparisonData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"event\"][\"description\"],\n      partyInfo: node[\"party\"]\n    }\n  }).filter(result => props.eventDescriptions.indexOf(result.name) != -1)\n  .filter(result => \n    props.partyIecId\n    ? (result.partyInfo[\"iecId\"] == props.partyIecId)\n    : (result.partyInfo[\"abbreviation\"] == props.partyAbbr)\n  )\n\n  console.log(\"filter\", data, results, props.partyIecId);\n\n  var new_results = [];\n  for(var i = 0; i < props.eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == props.eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        seats: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n      // name: nodeData[\"event\"][\"description\"],\n      // percOfVotes: 0,\n      // partyInfo: {\n      //   name: props.partyAbbr,\n      //   abbreviation: props.partyAbbr,\n      // }\n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  console.log(\"new_results\", new_results);\n  return new_results;\n}\n\nexport function parseSeatsComparisonDataMultipleParties(data, props) {\n  console.log(\"parseSeatsComparisonDataMultipleParties\", data, props);\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    console.log(\"parseSeatsComparisonData\", data, newProps);\n    return {\n      partyAbbr,\n      data: parseSeatsComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseTurnoutData(data, props) {\n  if (!data)  return null;\n  var locationToTurnout = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[provinceName] = percVoterTurnout;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[muniCode] = percVoterTurnout;\n      })\n  } else {// \"municipality\" or \"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[iecId] = percVoterTurnout;\n      })\n  }\n  return locationToTurnout;\n}\n\nexport function parseTurnoutDataForAllEvents(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var eventType = node[\"event\"][\"eventType\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      eventType: eventType,\n      percVoterTurnout\n    }\n  }).filter(edge => edge.eventType.toLowerCase().indexOf(props.eventType) != -1)\n}\n\nexport function parseSpoiltVotesData(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"spoilt data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Valid\",\n      percent: calcPercent(nodeData[\"totalValidVotes\"], nodeData[\"totalVotesCast\"])\n    }, {\n      name: \"Spoilt\",\n      percent: calcPercent(nodeData[\"spoiltVotes\"], nodeData[\"totalVotesCast\"])\n    }\n  ]\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\" - \") != -1) {\n        muniName = muniName.split(\" - \")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.iecId;\n  }\n}\n\nexport function getRegionName2(state) {\n  if (state.regionType == \"national\")\n    return \"National Assembly\";\n  return getRegionName(state);\n}\n\nexport function getRegionName3(state) {\n  if (state.regionType == \"national\")\n    return \"NATIONAL\";\n  return getRegionName(state);\n}\n\n\n\nexport function getNationOrProvinceName(state) {\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  return state.provinceName;\n}\n\nexport function getNationOrProvinceName2(state) {\n  if (state.regionType == \"national\") {\n    return \"National Assembly\";\n  }\n  return state.provinceName;\n}\n\nexport function createTooltip(className) {\n  var tooltipClassName = className(config.CSS_PREFIX + \"tooltip\")\n  if (document.getElementsByClassName(tooltipClassName)[0]) {\n    return d3.select(`.${tooltipClassName}`);\n  } else {\n    return d3.select(\"body\").append(\"div\")\t\n      .attr(\"class\", tooltipClassName)\t\t\t\t\n      .style(\"opacity\", 0);\n  }\n}\n\n\n\nexport function fixMapLabelIntersect() {\n  var labelElements = document.getElementsByClassName(\"place-label\");\n  var regions = {};\n  var overlapCnt = {};\n  var i;\n\n  for (i = 0; i < labelElements.length; i ++) {\n      regions[i] = labelElements[i].getBoundingClientRect();\n  }\n\n  for (i = 0; i < labelElements.length; i ++) {\n      for (var j = 0; j < i; j ++) {\n          var rect1 = regions[i];\n          var rect2 = regions[j];\n          var overlap = !(rect1.right < rect2.left || \n              rect1.left > rect2.right || \n              rect1.bottom < rect2.top || \n              rect1.top > rect2.bottom);\n          if (overlap) {\n              overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n          }\n      }\n      if (overlapCnt[i] > 2) {\n          labelElements[i].setAttribute(\"opacity\", 0)\n      } else if (overlapCnt[i] > 0){\n          labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n      } else {\n\n      }\n  }\n}\n\nexport function triggerCustomEvent(eventName, eventParam) {\n  var event = new CustomEvent(eventName, { detail: eventParam });\n  document.dispatchEvent(event);\n}\n\nexport function formatPartyName(name) {\n  return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n}\n\nexport function getSubRegionName(properties, state) {\n  if (state.regionType === \"national\") {\n      return properties.SPROVINCE;\n  } else if (state.regionType === \"province\") {\n      return properties.smunicipal && properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n  } else {//municipality\n    return getMunicipalityiecId(properties);\n    // if (properties.Municipali) {\n    //   return properties.Municipali.split(\" - \")[1].split(\"[\")[0];\n    // }\n    // return properties.SMUNICIPAL && properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n  }\n}\n\nexport function getMunicipalityCode(properties) {\n  return properties.code || (properties.smunicipal && properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\"));\n}\n\nexport function getMunicipalityiecId(properties) {\n  return properties.VDNumber || properties.PKLVDNUMBE;\n}\n\nexport function getRegionFileName(state) {\n  var nationalMapFile = \"province_lo-res.geojson\";\n  function getProvinceFileName(provinceName) {\n      var provinceNameToFileMap = {\n          \"Limpopo\": \"lim_lo-res.geojson\",\n          \"Mpumalanga\": \"mp_lo-res.geojson\",\n          \"Gauteng\": \"gt_lo-res.geojson\",\n          \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n          \"North West\": \"nw_lo-res.geojson\",\n          \"Free State\": \"fs_lo-res.geojson\",\n          \"Eastern Cape\": \"ec_lo-res.geojson\",\n          \"Northern Cape\": \"nc_lo-res.geojson\",\n          \"Western Cape\": \"wc_lo-res.geojson\",\n      }\n      return provinceNameToFileMap[provinceName];\n  }\n  switch(state.regionType) {\n      case \"national\":\n          return nationalMapFile;\n      case \"province\":\n          return getProvinceFileName(state.provinceName);\n      case \"municipality\":\n          return state.muniCode + \".topojson\";//\".geojson\";\n      case \"municipality-vd\":\n          return \"vd-data/\" + state.muniCode + \"-\" + state.iecId + \".topojson\"; //\".geojson\";\n      default:\n          return null;\n  }\n}\n\nexport function loadScript(id, scriptURL, callback) {\n  if (document.getElementById(id))\n    return;\n  var script = document.createElement('script');\n  script.onload = function () {\n    if(callback) {\n      callback();\n    }\n  };\n  script.id = id;\n  script.src = scriptURL;\n\n  document.head.appendChild(script);\n}\n\nexport function loadCanvg() {\n  loadScript(\"canvgScript\", \"https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js\", function() {\n    console.log(\"canvgScript load finished\");\n  });\n}\n\nexport function loadJSZip() {\n  loadScript(\"jsZipScript\", \"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js\", function() {\n    console.log(\"loadJSZip load finished\");\n  });\n}\n\nexport function loadScriptsForEmbedMode() {\n  loadCanvg();\n  loadJSZip();\n}\n\n\nexport function handleRegionChange(event) {\n  var newState = JSON.parse(JSON.stringify(event.detail));\n  delete newState.componentID;\n  this.setState(newState)\n}\n\nexport function fetchDataFromOBJ(state, props) {\n  Object.keys(state).forEach(key => {\n    if (props[key]) {\n      state[key] = props[key];\n    }\n  })\n}\n\nexport function formatClassNameFromPartyAbbr(partyAbbr) {\n  return partyAbbr.replace(/[^a-zA-Z0-9]+/g, '');\n}\n\nexport function onPartyAbbrsChange(e) {\n    var options = e.target.options;\n    var values = [];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        values.push(options[i].value);\n      }\n    }\n    values = values.slice(0, 4);\n    this.setState({\n        partyAbbrs: values.map(value => value.split(\"\\x22\")[0]),\n        partyIecIds: values.map(value => value.split(\"\\x22\")[1]),\n    })\n}"],"sourceRoot":""}