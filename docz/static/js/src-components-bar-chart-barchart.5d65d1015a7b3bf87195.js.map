{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.c0227140.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJGg2D4IISQPBg8gCP4VVUAFe0oJguCYIvIhAhyRD2GQyRUPQz4NxoHC8LokVcNogjz0Y7JyLtDV2CDKU3RNBVzXaCSHWAdhNB8eRZLldoAAEYCIEQBlQDCukUgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ28gAWQL2AANkC4L1jAECADEfWgRJvP4ZxDkRR1MHYAAFIR-CWfSfjgMLESSmsUpoZwIGsy52AARiikL5HBczqEsgBBOYnPYSMVNI6B0HDdh5E5JyxGGmMZHYVEHJgbhgEPWz7OxeRt1rYAxqgCbggAMmO8ZEnmShmgOo7zG4e75TAUJzJ7VB2nYAB-DZxvDSMZquG7wy6mspBkat3zMWFJMwMAwigKY_tm-aQYGlca0TaSCBwVLMhSa8CF22s6z4gj8y4CY-BAOKfJ8_hfBgCAUkISmACYWdpkB2C3VdExJ-iRKYrnCbrSRMex3H8d2qRUfBsxvxADiMIzbDBPw-iiJIgiAK0CgQP0BgqMkzGlhU9csKzDSWP4M0pXEyjIPYIwQjsdBk001iQFdu3DYdZbHKtkBPWItCtbOOBvYd4B-IIS33WQz0-YE13g9I-i7aUqYYFYbD3fjyQcE9LPsIj6iXPWM8ADURHgbVolcfUQosM8ivoxJHCgYU4Eb0cCBK340EROBa4IVwzFjk084LyRZggEvJNc0KYLgGAq9oIe6-7s9xWeagADkfSZVBx6QwPPSn8JoHDkAKLMVgYP7IQ_nMmu66G5vH4Hl-R7-m_UDvo50B13FDKeAeBLACm6M5ZMfknatRpj5X-T0XqGR6FAfwcB97HkjMKRmaBMEwBmgvCwXQCB9HMH7eAABtHBnl8EAF12AAB9GF7H6LQg-FFgbdVvvfVOIoKL_37K3dundh6uAEffLoIC4B4AaHoAQd8oANG1ENBB3VBF8IILqGYr07DOSIRseilgLotX4KKSU3RUrCnYKveAZV1iJD6lgWwAAZVwgQoBXH4EVc8op7Dnl3pYPqABxc8NjdSWHPM4exNZEgV3iIyK4ORuBzXQDgOE5BdRgFsV3Bx8SoCMisQIKIBAriKMZEjcp3QADU8oACkpkuHmTQXAOwidM5YFAugOwZtMxTAXquCyaJQhSmFJGAclA7iEJ5ktUIcJxmDjgJ-GZgjl5QGaM5CYtgKJEwsFsuAOBURZCGgY3Z7BUChCIC3EUEB4BXAAKzdzOUXGg2p4DkH6DowyXiQDs3auwfer0-yXi2K9GJZziEwB3qgYx8wfmoGiIZeI4KIUTKfoifBPyUVnKIM9CAmKPbYt2biyijhMBYpAE83ZtzyAPgpVSiwwMzkQGaAsyZByLlXPorcpZZd0a7P2YcketAcCcuuTEeAQ0Jl3FFZc8VPKdm7KZdS1l0qDldGhbCghfKIUElsEKrIYYoWGS1VKxZRrNUmMVUTZVRMWXDTVekj-z98HTP5UTQVRyRVos_vgs17KnX9xdRwmZtraz2rZTKkl-KD5ut1Z64V_5o1-uco65NIb3VTRmRGtNeKyXatOQKwkBqRXRvzf6qNebizWtrGGiwObzU0ofHGiFCbDVNuSQ_ANHaa2Muzaq81uJ0CFlOl2mVmxGaEBbWcttIqh2FlTYO8meBe21lnf-CdTMpiLoDZuwgq6NILmXjqiFgjC04qcCygA6gy4ll6wAAAkZmMqGoKs8V7l0PoZluu8zgPlBFQI1ZqP9n16oOV6_8878TOX0iwMAV7V17OLRB_A37CBDVgyyh9B6ZmCr8BgWA29DJ0VnJAsD-BKiEeNdQEjaQcAeFUJGfZyzM14cozAEqWdbkjHPNnLMmzi34fQLATjfwYA8b41jBjGAmOEhYzO4tXQJquBGNHV9insiZFU1raTj5mM1uVYMzCfTtRcH1G0GgiMBmZseJwVl66cBQfYKOhze6CBupmbZw9UBj3nq5pIWsZ7PMBaJph-Dt7bOhfvU-mzIWprqf1e-z9aGCC_v_XQIDMAQOxbXchxNjnl0YfvQh4LuX9Uobc0VuD2HStNLOashcGywOrsFcpkYsnEtjkcDQVwaAoyciWOu-TuypFdBkXI2gCj4jKKGsvAgE2MiKMjIjFJJ6zlrLADgNrkYNuni6yBXrLoBB_SWLtiD74zlKGOEAmA0iwEQOG0TQ8lyTzhV4_oFxthQJRheQQA5opzzBIaLqXeAB9ewD6-q71CYNwT7GiM0fw2kR7tZnv4xwG9yTn3UTpGO79g5N4-p-Mh6KSwoOioA4rg0c8N7yNCZE10MTEn9Ao4sLiDAowMddnezQbH33jvW3gE1JklLyNKa09HJY7MfIo7q7WLi5sdRcAAKozEAbQKzuHi3bbfftnrfXjsDfI-d1ccuLAK76R-hIyvUD6WegQTXmaLKUFgDgDuKRowgBTqTZ6duaD8FZ4Yh0zkLkJFXWjk8XR9LZx5wQPnuPIz45wADoHIPweQ-h-eWH-r6cwAR6gWjBDw-nBezQI10eYCx_j0dxPkmCdE4h0TsnFPzxU5p9ng5ufRPcdj4H9nJwRjl9-JXrHX2E-C_yM1MqYvNMqejoH8gFIBALam1ASMo3QEr8Uco2X3UiZJeHXgL9k7UuJD_V0DLwvHf1fvmFq9Q19TRDwDgIgaBIwAA44FLAj2Xrw6BEgfBQC3I0AfqH4Wj-T3Iy6roRo_5SZOAAGL7AEECgGFiMDsAADs6B9yF2EKd-Q0sB9G8BgBSBKB-I4BkBq6giYWD6VW16kgyYOA9yq6JCZCa2d6cGN6oG1Boapue-tY4uc-BE1-uytmQWOWFgd-EWcW3BOWGkAmnWyByWJ-aWF-gGV-getmEamiOBRMkWQeWM5QaIlAiQ2WZytmmiQ0LoYw0cHWByZ43WI8BuJ27AkhLh0WSwi-6Crqq6tmnqY4dkWQI0UGVwrhbmIR0W00Bmv8RMue-eheteLObBFggiVhARtAQ0v2W2Y4vWUALWyG_hiakYqRiaOhWaZkMR7G3e4mseCRNA06gW98xRxyzkmRmAjhuR_aw02hoGmiWRqIQgJhC-pMIe4mDgQhuuBADhh2_WHeJakGy6sxFWKWHhLSGCsaeR5WBRgRTRtApRZuPcUxTh9RkKpCAg5grshyC4oKthRqYAByfw1kugjhR2exMyq4U4GQw0xxk4Y4rB0YmaRMsYHAnhrS-Ca0IJaxWC_A3uacIAnIO0oGgJi0EJYJ-0qx-CnumiFoMQBAsAAeO0-0BE2iuiHwBEWqGkI0W81GqAGJQ200VwoMcYiJtYQJrEAJEKUilMDxTx0xAgdMzJRMKJB84J6JB8mJBEFof-iQ-JbJuqZyEgu4sgzJjJSp7Jrx5RqOWmkYPJBuZIiy3xzuru7unubWBQ7ABc9GmssJgeDW6yCWcAlB98rA1c68I8LilAnYnxzklcLpYi-okaSyjpACdc7pnpAgei7AlCzpa8YioZ04dC0RKqw0AAhGFCKG3C7qInXN8ckffGmfZCIuGXGV6T3OKhmR3OGaYRCurq4MWeGeknkHgOMsIpmUWR6dOIHvsRYH3K_svBjgkJGDWXWUsjgBMHQJGEglKIZJGFUksipKBoItGV_K4ENLOZQj5AmaBvmeWVmSPFKi2RWa6SucwuwGua1AmXKbKRCrtm1sEpkDME2TqUdnqeyksEuUeWSAebua4J2ZyB8NEKRIngIEIEcKtoaf-BkCBUBSBZyLvhqRYLefeY-QdrqWOl3NdiPJ-emYWUeTmaebwgRGIvueGSvL6XXIORvGhYHleTfkcE5qmkvDABNgGQVoftRfhUcJVgxSRcxY6m5uxRGsmd0eyebsMecqMTYU-RkEsFBksG5isV4esT0b1C7v-MafwBYRbvoNPsJbqr0dtpomIlhQWa2bhQZmPN1FDA6DDHDDRGrPwnLEoArGhErNxH9qrNHB5cJKJGkoBNoE8frOBD7JqOaCbI6MrBbLnIIFqHPA6LoJAHOAHFPFPPFYzLFVMF4CIP0bMHZCtHYAHJlX9miLMLuKiICK0kRC-NlTMC_mgB8K0ulUtFtJKklRrCHPzD5fVVfBRMFTCHXlFclYXHXo1YWmeCClOdQLHrkvyu_EGoPGImPANWfJ6DPOnGZIIj6s_EeW_GOH3OisudlmYJOa9KgopVgjQmgPYKKcePUSwWcewIVdVbldiNQmwpdddTAAwieRQnAK9bggXh9V9SwhdQDWdTAJwt1BCewO0gLHmNgF0j0sZq6IWkZqgP0SMhEMdmqnhQyPMtjYhsbomicgKTCFePoHSh7EICIESrqr9m8nAB8hAF8tQD8n8lFACoir2FAOwONWCpSiTRqiaiYj8ptYiDTais6higfD8levAJNuYPYLMCLrejinigSvwOLaraSsWPSiTR2rrSJbWGKtyncuwI8nwZeVcRNagFNVcJQnQqBmGvsVpa8mZhZg7nhbaU1vsgTWNbANbVNX9CTaOZsKgBOc9NbRRSPHhbqoIlba9FNfgXXJQvwDWfwHQinSAPEFAFNenS_rMInugGkEjNkGkJneUIzczQGCAHQqUZeRYGdlsRrsAPHYZFNZESTdNP-QQIBZBdYmBSpa7n3XjsBcKLBeZfBUWBFUrugKrurllvUfsZNZJvTZXa9PEQWqBhGv-CPB5GODgFUqOZQO6SMBkIrcvH9DgKoNgFkp7gikClAAHk5M5BaK1M5sdCTR6nloaoLdQKag9PwPfUio_XCUka2vkQQGkVli3Sve8p8q9FcDvTBGeAfQkjAEsL_TCsLR7KLcrV2vterSALLTjvdYrfMPwB3eyd5r5iTX4ZA4UTA_oKvfA98jCKOcg_vVUlNOxU7RbXsKgPnlqhvZ7Y0eJlAycpg1qog-w3vVjFUvIATXQ1A0UWIyURPauNQFUe1pveyXHZJpYRJXkBEEQDUUnoTsTk3uTpTtTrTipG0TkVcOutwwTQQSwFVABXgKY5JnBWcu8XQNOF8WA7mUcCGH1A0LvENKlSkDgKE-EwTWIfXaTXpOTYsCTXTXA0za9CrSNtSVqksPXSTbg_gtk6FmrQfCU7WGWsWBU_WlsA-DU-cnKibdNYk63cvcXFQ_aXMYmbRT0H0HtZ_ERTuvtUeTgJAPDFGC8HpEjFM0QKKgfM_fg76rGuuZueyXdeYP8ZeUCcLLqkmKmFJBYuwEUjYi6dDffGprDTkOfpk-wMErjpzeYJWKmCTayUKceCKWDZ7ilMUhaCkEIHMvibs_XYwGgh4mICCvjI0ColIGCwuMC9s2gDMOEDRYkwKiYpTLQJ0vyYbZee86tGiV8_wD80QBaE8UICA_Cai2i7WOSBYsMIdBkJTFiVJXySAJ_RCoju4GkGtJAnNEoww1cfjBTUg7I6gwUjANNHWjS0LK84qQixCm8x9Z86CWKcS8KKS_820DMECxy4CXC1ABC_o7C-4vC3qyyWsqCqdaqx84Sza1luq78-Sy7jKea7slUry7AwzSw9QNKzK1y6RmtIKu068hk1XYXvRoxsxgibi2i35jKxCm0zbXXvnTMJGLM0jPGwm3KRs8NIwJMiddsDAIkGtLMxpB68AGW2IJW7QEQPIFIAW4ZGIHXdm5di26236yC-xPHQq2ciqb27skq2DSq5CQ6-ABq38wCzq3CTG626C6a4a_nlYCYiLAawO3s5azJPiyOxiY66S865SxpG60TBW5IyYp22iwGzy8AMGwI7kyYhG7prYfCeu3G9S627suk965k4ZEfSfWfZSJfdfVgLfYA488iqA8mS_W_aOse9s42yyB62Bw_eIEA1zQ21Xa-4kxezK_m1XfhRK5TLg-ILgxh69FhyCwh-YEhyANGuQEzfEC8NKSAGIHRwx0AfZGR023B4O1RwR4yJTGx2FBx4kBaKwOgOINGWaW42iLEAQFx9QBR4Cd2_7QTBy_2xy1m5eevve_MOwFBx7GhwipS-_e-zS0O_azu2q-O781q4CzO0p3KfO-CwM8_BzceCa-Czx4CZu1MNu3a6O98xOwe667GwmxW0UwfDh621ewS3y8bk3dA5F8eNI7vSg_I1S454k1px-0TLg9taOvl2Iqm2yvtZm95zK7m3h4W8W2tLg_M8eOW2g3V5Lf-Aio19W_V-15Kwp6gFlzK9NBV5dkNyLL5_1zuGDBy9F3tMezp5anpwA7R3ivR8J0x0_adDxxZ6O1Z1CTZ5q1O7q2FyC2u_qMt-x0x-5zAJ52a0d9s759a9twF7u3t2SyBBS6F7l7Hc18AOmo1yN0TLF7y0jAK4ET92Uyl2w2l5w2g1K-wON3KTl5930wIK54iERaOr0Cj618V9GgclEGm9GuV7d591V3x0WyW2D5RC_uD5K_xwS9GtT5RPggSQz79z15IFR_D9h-2599N4k1IGN5t_K1N5p7N2ewt85PwEJ4x_ZGJxJ6Axt8T0iWwA96ifi0F7Zwdw5yN85_C6d5RCtzL8kPmtd4azr0iyi_92uhi_wFi6IJzFb-bsq099ZyS69zQO9zO2Z593S4iAy9OJTPYEVJYBrUr_XRW1U5gHz_6wXkjnF8DxA8o5TxAPmqlxw3IzD1S477K2HxN0yUd9H4jxCnN0LRLx7NLyJ3L-tx_bn3WMic7-r3u5O9q4d0j4mGu6vGaaZv0XJwCpcoEAIKb1zyyRb1MNn_ZPMJi_DTi237sv543y9yF179n77zAP70y_wAAJzoHv7Uw-T3L3Kh-z8nvfcdrR80uA8t0J-bH0Og_62Q_p_iuMiw_Z_cy18acF_qf1_Dsu-7du92fTsX2x7XXoa13j99PiWSYqM0yH7ADR-3vRJhP1WiANwBbLeAfXXn4fUNe-7N7i62X619V-6_AQJTEP7sta-FbY2jcngDn9dkl_eLiD2boUCJU9wB_mKwy4aQ3-5nYXkdy25q9MBTfAAa31w4eBwgEQcwIgMpjCCbg1AOmDRiAI7Ag2xaTRozm4yRsZM0bVXsKV_5jsPABAaujNFqT8lOYtSBfjoNQAWgBwAoGCMxxmg7QtGUgSQaIIo4f9zO3_SzloKwHN97OQAsPiAIhY-UCoV3SQGu2AGuDHuC_PSExCBCCC527jPrsAGKCMBv2OiJaGhEpgAASYALE13jyAvQPlXIUxG1jiABea9eHokJKEyJRg7SLZm3wIJ-1kmt4e8I-H4AZChWKTLqHCQabZds-X7Neqw2aGMNQ2SQ16O0M6GVddOpiEABkPF6StNaPvVroQwyHJcZh_NWvrqjZ4_IMhbPEYdn0j4TDNhVaKPrMNy739-hZ_I4R-0YE8oNhwAS4VQPOGttgi8UGmKMJpZhF2AbMWmKsNrSfhih8DMQHUC6Cr9IwkgaMLwD5JmBGEvACEVCIECcgngRAJYBrRnYC8wofXYAVwM4GTdDazgiFOqWBhWUpgNlUIPDHOb2UGITEL8E5UVgu13K7SNqr0TDhAQAqYEQOFiQNYnp6oloSfC1FaiME9IiqIAi6AtBvCfgxSeIIqioAVkrgHgNBDsAhpmRSS9EbEi8FgAciQIFoU-ifmlEu50A8oswIqJFCSl4CfKJpOkgyCIgesaQC0OyIMSciLQFCK4C8EY7kA9RqAA0VMDgCsA5wBiYfAIDAAdwRgZSWwBABlHdBkywVdwAQFdHui3cHDE9G8Kig0xAo0Y0Tq4GcRwBrRC7E9CMBsC0B7R1UFqD8BGD3kUxmYjxNmNzEwB8xFiK4EWJLEWUzIrsMAOQHtFeilobYn0dnD9EBigx-QUMfpwjE0Box7gH4MKkMjWi-scPdgIKO6C2joAUAC0JMklBMcrgaiGsP0UoBFsrgAAYk357jFUG4othqOXRXBWoB4owkeMAQyIYImQLKP5CWDJhoxEQF3DEBmBlxRAoUSgPkAQYhAPAcAF3OEHBq8BRAIE9YHbwtCMcUgXkHoPoAyCqhQJoEmsG4zpZ3i0AM4yUh3DlHATsJi8LsAUCuAxQsA8E7CYhIsCcjTxLMWKMSAzHLx-gYAYiR-IsDEQdgdnDAFcBzFTNiJSE2wChMdGoB0JMo04NsEVReABA04VccmJInrBRJ04C0JkBYB5ArgAUIiVJMYn9hKAaASbBaHxy1isIDEnCaaP-ZcAT0ko4UFcH-bFtOE8sakUjR4heV1YycK0iKG1hMi9YLI3qk7H8DHA3YAcL2NfAzguR_0WQSwMIHhhM1j4HsQapIAvg-Y1qBIo0BHROqSUUKz5MmIfjkrLENBx4JYFR15TWZ1gglXKfUVyknIFG6wI9jWEKlV0DkmiLVMVOqnuj_6HscxPlBOY5I7YfaSqaymTK5ScAjidMW4g8T1SSS_U1xFmMl4gAfEfiAJEElCThJIk0SfyTWGVRVSRp-SRkMNMMgHI4kaDIaMdWnLoBviubNJBkiyQ5IJ6nU-tN1N6k7SJWRSEpJtN6h9T1pMAe6dED2mJTpyVSI6b8XupcNak7QBpBdLKLrB6KGBGmIqi4rvCIZ6wVlpcVU59QBy_AT0YUDhJD5s4h1flIIgAAaaY2wFkjuJjgho6BNcSfyOAABNPGXAAJlzYho7MGtBtSUy3YcKQ0TOjKMZDT5-AiQBcAGM5nRV5eazVcKsjbHOQ4ZsweYDJmRleiA8oGDHDcAFwgABw8ARbDAD6hVRQU5iHsHzKwD6g0A5M3WeYGPBjgA8QqFaJ7mYnbBWJ6AV7hWXsQgBtxYAR2U7Jlnsk5ZaIT3EzhvDeA-ZfkPyHTFqSRgoM1SXGemJpljh9BHsSOQHLczVJKZocx2XNlgqyyIS2QT3CjPd6gR7eg2dEEXlAxCz74z4sKTMFMwcBRZZoWgCFJfFM1tSH1YbPnKOA-BnIFxBmvEBgDQQZMLbMMNyzzwWZHwlCEOfjITljgZKy6WuusHrktB8CDBFubAE-wugYIQdTNF3NIyihe5kYShPJXYBxzB5hMggLXUVSrgUZGOOYP409yozO50Qd2bb0yBo0SWfM4qmjTQQa52Y-4EANUkjBuZJALMWOVTLDmEQWYnIapDLLhIzJj5EspoSADt4uyzkbshWRCR0p8DFZ5o_QK4CtEGsA8F8-WZ7gflwA75oua2CIECIWhN-MuaBbslHLw1sEDU0aXAEGkLhMFV8yBfDQgnmRhgbLREbRy4DCYRcdc_lEfPFmnz-A580BZfLgWrFtZIQdMWQqJiwLsFN83BRq3vnyKn5WWHyK_PYC1JKsBgkBSAprCHyvRYCwRSAGEVLzRFmJcRfgpADJAqZ0i2sLIuvnuAFFxSJRY4pUWe4NF7AAedTKHlTAgFouUhboosATzg4zgEWe2OiYCLJZxi2xRYHsU6ALFCle1ubJggZzeSGChmffGDiWB4aoSucM5H4UnyolJimBWYo0oJKsp2g-iMwtZbpLx5_KVrFpg-nIJqA2pQipRW3I4UxE3xDal-QEB3gU0LkMqZmhzS9KCuZ0DpaZTETl0646dTOtnXlR2Ia6mdUuostrpBMhE2FSZcnVTozKll_AeZc01mX8AVlV8OhGM2FDnhJQTZFZUT0vITKKy_Sg-JQhWWipiwDXT6hkSLptc3lpkvoATUG6ZouyCU5peYDPCpR5xhZHGJEDLIYltyxTTgHhVzb3LhQjy48JQjhUHxDk5IF4J7j5BwlVmQNB-NkGZmmVKEEAOpErJhg4U3cdAFIBMDWbDdM0uAa0IdlaX0QceBdfaSyEHIx0fipxc4u8v-Xj0Vkt-NAI_iwDkzWZaitqDTAZVJkqFJJf_O11iDkynEtgKFUQBel5SuCYqtMeTMoTnkp5-dLAGypFBGVgVkdQ6S5D5WsEbpL0nlcqG4Y8FM0ABFlW_lfyoBxV5M3hetgMW-dPcOAXADYrRk4KXg05P8ugD6CPNIw0CGXP-QHIXEqZXsqQUQEjBYBhVmaI-f6uQgAFg1f5UNa9EvqRrMgha2NX-TiAJqGCVMlxLdgdyJAeeo5WINsDgCRg4oDamIDsDekO4uVYdK1SpFzZ2q0GXah1U6szQ4ERVRwYOBGRCV-r46iMtfHUAyEmCYI-JYoBGvIqGVsyB8zNFOpwDYAcV7a-RWGpaUNri10astbLNKVWLp8PanlespOKsETCUBR2g2qvVuZp8pC12RQm-bzjFx1UNbqLlahVi21ssqPMPirIzJd1sEw3MyUMVRKugtsQJXKTiXwLRcy6tlknMNpxKsAN6z6dyr7UC1fp5gE1Wkm66ALcAxEDAFBj-hfzSZcpAFZeTiVQZp8FGyoNRs5BGBN-kgOBDz1iVXrxmIDJYIOUUAQAZoq2IvrmzBUQrWyGqmFWKROmtw5EKUd5UsFE0E1GUvG80i0ql6DA9Iw-XDSCrvWuRSJaLZufHWfbms4lS4-jvZA_U4B387FGdKFNfElzRyR6wtdyBM0JstsUawtdLk804TW2ps2AJ7ms0AalgOATfssi8310e1RoDVtEDk1YIyN96jkkRvOSYqqoHHXFQHlWZ_tRgAHC-n-UBGyissfIXgB4ChEjAngSwW9VAE5D9r0tUAI-qrjhDn0F6o6mltH0Lkua2A-AYgGvhJaJbW4GJBTemSU2UB3lEcumD8g8WDq7pCWh3PNsZA8rMNQW79fwFgBgAs5w0C4pkTChpBsZ02xWThpAUxaaWwWsdhEGnZCa9tkmdJKgpgCSrwCLMBzR4v4CBQA8XErrQFoQmBbkN2m2jrpv2AGbLV0yc7XKTM2qcLNxPKzf-ts2AbHNAqZzUzVc0Frw1UksPj5pLXTl_NmO9bc1VC3w7mOSwZ9WpN1QMbkNV6knRasLUEbY2ubJ9Ujsp26o4l76_xTNAhR1LdUM66Jr53nWRhF17g6EiupnZrqtsG6tpdHVg38b5x0-YTQiqRhSaEgkK2UElqyxjb7IE2lTQis01ubHFx6sOnrrPWlqaYeu6naDpOpGbCN_KloJGDAGiRjsy2jXbBWZ3m6sF_AdnbVrw2bN6diTXNpVnAImEHdA_BVVtOeloNVtbu5kguUyUwRslnSadfHpyWzqEZA5IXehqgVi71138TddHW3U87k9ievdc4g9qwb0dJ62DSbunIXqsNFu0XLer9311GdkYGXOwHILqbOtyGjbeAF_VhaEdSwIDRaBA1YawNGMn1RCiyXw0Dk0Gy-pEogVZ73djC1DYksC4i7cw2LOEkvoVmnbvdIK3bbyofX3USNU26pKxqo3LoaNLMTvSzohRxLwJ7gUiMKD5mv4uweJJDazv43qjuRfM1qJRNO3b7PcNOxvYfptX3Umd7es2jfp55T7OkuS-GaCgF0Z7EFwcRffIHF01lTVOobMuXsoUgHUtR-8wM7uHXO7Vt0B8ve5ox1Ybq9LS2vYxvr177raB-gg2AfMDB6UBYep6bdJW2HTYKkBpgsyVv1hpWsctAYk0sjrfEj5Y-hesDPkDWSXK-OSQMBxcn-U3JBgcCEMikiA5gcYORvJniGiC5oUZLOPnbE0PmNG8pOKxq3hsYGGvcTky0ErKZymHeoUwfUH1CKhWG289-Cafj3MHKDxMcUrAKXCJEkjC0KeHQ-nihww5Vw5hknM3msbt5Vwbhjwy3i8NjxKRygRWDPCUMRgNAOsYCHoHcmRx2AA0F3B3CupIF4sAcWYGUcoBksgC2lUgb1RUgPobgMwOebsAin7KhQCQOo4KO2DCi2jofZo40E9V6aBAbcK5d0C6NZ0ejHcMllMYtBoBjw-kCY8MYdgpAAAjtzQDj_NZgeAbY9iVQXrHS4aJJAjMc9BRNQ-kMII_PDPDOAJQf2MRBcckCZBEQFoH5vaMeNXwbjpxn0jGTrgNwe4j-NAAsrgAvG3jVYz4--VD7xTgAZ4SwGQn2DPGBqkgflSDtIG_HJIcWuoQHTrzCFc2iBE8JscZATGRoq4EkxkDvFbGoAxQVcH5mzqJ0s2FdH1pPUum1pVwdJ5ae-CaTxScTu1UZQSfS1Emy8lJsk4WjFPUntjXJomAyYSBgn1lJynLj8EwBF9uuJNdxB4GUGPMSavyvkobU7bSteG_KGU6Ot5O3GEIPu0sq1yPLCFGZc1ZcqzJmQ5cwOx4fgD8k-zqghQ5w_ZR4C1NcYdTSAD2C4gaD6gfTS3SiFfDtquRFZ8wg-O6f4CemhQ3p_mhGZjRumkAiZ0M8mGTBv1wCd5R458WCQQBEg7gCAJGWLOlnKIDtVM7sITMgAQz-oHM61AoaKAYzSw-s0mcmSUA7ZbPTs9meTAsxIDBZrIEcBrUjxiIkZbUKEAgCn0fM2wDuFdBrOvy6zmZhswOZZitn2zcZjM4gETOGwUzK5mnv2abM5nhz5cz4pYGsjuAAMkZK8zeboDLmpeBwkXHufXOnnkwW5j7TudfP7mvTPZ2s8ebXONmcz7NcAtBAtBFQ_AYLYUCMBXKUIoL8QdxLBdcBPm0z-aE86Ba_OxmHT-CTsweYAtHmme8Z4CwOfuSQHH86IWALOEjIPpKA2QKqOiBeBoXVzb5kC8mBIFKBtzuFki2xYIu9mgLbF7M1FDzPsBTu-QBFJGX1DwAJLqFgS9rUwCYWRL2Fjs8Bf4uAXiLu5rM02aihDnwCp3EeKqMoQGXW5FoR_PkHyAsWXzSlzc9-G4sENeLf55M4RefOaXfz755MFFDdjgFrAxIg-GgjvPDBhgVZk4KECssKX3LIFryypZ_P4X_z8l9M5FeEtgWxLrgbYH4BOCRl3SM5uwJYH6B8Jh04VlPsWCUtRQYrPFrSw2fUtEXErmF-5KJZvAdw3gGQOcJQi9mkRLkkgfUMkFrgCBBRKQIqxhdItNn6r5Vhy5Va7OHnXLtV4axxb0slGUg7gbllJdUoEB1AEALq9EDQRoJBrJV2a_clstcXvzFVyK9Vemt4X9r3lsS6pX0hGW3kGAIQEZFMyWzW5u1xS5dbGvLMJrZ1tMxdaEsjWUrRUTMtsDgsuhIyRUW5JNjgDCCPIb1pKwDc-vBpvr8VjSzNf-scXyL4BGtfMFgAWhd42wS5DMHLOUIa1XgOC5bMiCUA4bdVzi22eOvjXTrKNmq39e0vJg4ool6wO4lcDWQBQDGQK1zZ5uMQIA1N2a-zcRtS1kbzlhKyzY8txR5r2N6C63MjKXggCqEfwCLfRty3xbMAGW5NZcu_XHLstlK-Zk3EpBuzNFyhPvEypEBGLM5veQlaGua2yrdl-m19cZtS3Ubut7M3FExvXWWAt1oy7vAcgbjIgGt1mz7e1u62frfZ0W3FEgM3gFwrgC0AnYCuUIr0MERiJ2DDuy24okdw23relv53vb6BCi5QEWtoIQbdAeC0DYIDPAxwGQVCHkGzsgW4o6BPO5Le7OF2JroZqKOgVEvngHy1IOUOZnLvdBjLMEfsQ-mzrN2e7fd9u-7c7ue2i7-oXu_NcvAQAvJ5mP7B6VgAsAKzQgUMeGUARQAZ7K99Aodbps4WGbcVj28zeXu92rrj-dK6EEjUTAfQqC-C7vBSBwX-gf2YWw7b2v_WH789m-4vbvvd2z7KV1KNkQpv6RIy0DkeLA5HCn3e7zto61fbdugOprBtiB73d9sjnJsVgN4NEGPRtW-gaQcMj80Ii6g8AbCI5OgEkCXKSG5gRE8RD-yfUAH71oB1gQoYO1AVt6F0yAHVNBn-A-oZFlEDQSzhR4Kwy8r6f9N_BAzPyfUEVHDO493TkZey5g7XNiPLkSFqR13fcvKPoEolxGQPymAuJwgeAYkcTcvChAQbiKSiJIEVoUs0Acl1G47dEdFRjHID7R-I70eLWDH9Zoxz5Hmv6gGQ2wSCXBeVvFIFwVNzh4Y68chOfHb5nRxI-5bSPwHCT6BI_fSvUBMrCFyG1JDHC3IwA2d4J5-ZdsYOkbhjvx5I4CdL3KrwTwGxACwCwBkgAAaRXIPHjwkZKuFAGbXohUQZTxJ2g8vuqWUntT9J4E-0eJPfbNa-x5GQCIRgRQ1AYZ9AlpuaPqnQTyZ_o4adZOfIcd8AqZmE7KyLb0EdZIcDWcHPknojnZ_U8ydBPEnJd_M78HcBiXAg2wYmw-knTZxDoUkLgGkCudt3Kn4z257o7qcZPzrhtox61FEtvIoAUQOwJQnheIu1nsLm5yAFSf-PIXODrJ3_sgMiQkLeAai8TY_QEBKN2wNFxfc2cS2an4LqZ3s8ee5mrrdkIuFYBkSn10ixlrhQuBhsDX4nTL1qBU_QegvMXdznFzHZSdeP_k4BQl-le5t0BibKd2GEM4FczPczozmlzrehfivpnUr3M77esARDgxRl9p3Bf1DEv0naLjZ67a2e-P6Xuzh5-q9aiHP2A2oI4AAClnA11oQBE6kuv31AS1tF7nZBexX7XaTx11C8adeOWYHNvwJObgin1oQlCNwAxg4fuPAHnjwcy2dDcnXtnDr-51G6ydswKLXgUSKnd3hHoBwdttZ2zAxdYuIXerrNyzCuvK4iA61jAEq4nsZBRBtb4V2M7DcTOC3ErwS825Sv43Ig3N4mxO6iA83a3mr217S_zcRvC3uLplyzF9s3hGywgnYP0C-WRkt3MiHd9sD3eAu1X-rjd7w9DQCOY9Qj3ix7GCRhBQIqMipnI-1N80fkwSEPjI7lLTWozGjxd9q8quPvAJs4JtyAHPDtPlcBLgmwICsckvlb_gMUJUGzuQflcGLkD8-_A9fvdL_dogE9AQ-UIK4FwRV55H5cZuuH_AHD7G4w9PvaV2HywLpdCdcA74fYYy8Wx7erPz3VHxj3W9zfX21zmH-j4y8E-8errNa5eHvcoTH5MAUAAfuR5qseOQA1H_t1q5ltCewPInt8zh8_yl3R7DgC7pQnafogKHcAE4AIBmDZ2dPObkV4O6o90fNPTr7T4x_fzzXzEGATkQzHMCUJ3P6ATz2gCs8ufqXgH9Tw55fdFv6zOnq68Q1EEwQN7kZGL72H6BuPFPmb5Ty59U8hfDbGn8L2u9E9RR38xtjIK4Hqhzh7Ahn5x7AFEF_AEg6b1L5R_S8FeF3VTpd4J7C_gePXD6G8JAfK_2Q9gzQD15QHwwuhob5DyMoN-G_wA-X2dzrzeFo-gfcvkr_gJYGcA0EfLHLm82JbHBCBwbJCHBCl-mtKeVvT6BQHw8uw3vDarp18x7DNeuAAAWsSNCB4264gm295qffeGR1H_Adp3d93iqO8U_7yhGp8Nu3eHvBSZ74ZfA_nhLAa3mEEa5BtoBib05gQJRq29GFUPMPjF6D8e8Q-IOTn77799jeiWK4fl48MS5HDIuX7VP7Oz993hE-sfcFsH098BR4-Iva52n7G_mttuTglERZ1QBuB8u8ANPwn3_oZ_3ecfLP173l7fMc-hXkBtt9ZHAGRkFf4A4X3T6Fdi-mfuPqX0t5ACy-UryuU7jzbguUbSEtFmCBFAU-He0v-vzXxL5e_gfZfvt88DzdQCbHVKvPyhA0Fd_u-oAp9as9x718i-bXLXoD-5ex_g_JfjvkX66--cMYGaeQR0Eh_BuSRnAmwO4KILq_W-GvsvkN7Z7zfs_Gf9vyH1p4J90_Y3kB0IGE7wBwWtkCX-iNN8D8c-aP_HrRzL6L-R-HfpfoP-X_mtV_SMnvui7iB2Bq-2YwX0PzLYj_M-u_-Pnv2zEfvCByzYjq6EtZWsaT-gYmAQKP5bd2_O_Jf2f835SsNBBQ_jIy8f_AWwBt_zX0V1P-1_R_y_vtsJ89EjU83wbkNjIO5BeDWRG_FH8P4T8vet-dru37i-e_qz7S-ZfmzCuu-oPK6Z2WyJ76K0J_mJKjAqANv55-A7gX7ABWvlH7d-zfs87_OpEBVA5APnrEB4AhAdv7Au-fgJ6YBxfmAG6-HPoOYEuRAO1wMYWyJIBuI_-HACv4hYCTadgiQJwF4go_oOa7-0_vv5s-MvoT5nm4BHIiAIfrmnauAvWMMAwAlLk34SBmXhP4g-HfiIG0Bo7nP6eW8vkQB_YmwK_6UI54KiBUAfQPba_-9ZvQHX-dnnr6aBd_jgESBvtrqDyulrpnYHuLVjV6X-KgXT4cWwgY4EH-Ega67H-xEMRDXmYNiTZfi2wJMiCBaAcD6VWt_tgFBBdPiJYEuGAKXhI-z_kECj-yloAGte1AaAE6-OgRz66WkBrvAkmZvpbaVBYVr4EswulgEHJBYgRAFRQxthJaLWKfseADEuQbYEYB33g4FNB4AXP5RQvtm25Sc-9sWwRAIwCgF1BIwY0Ez-zQXP4HW5QeJhxAqIIHarBSHj4FWB7PoT4HW8waIFDBHPvchXWMAI_jCY3cp77K4aIFsCEAo_icEHB2gW5bWBewSla1wqAKgB-AeQJ8SU-ZxJKAu49wb0FUB_QSAFaBxQc8G7BdPuzaQGMANOaiQ4NnDBE29duGQ_-9Xn_5QhNnugHAh9gaCGBBiwRz5y28vlBbUAZth3Ap-s4C7gHe6Fjb6E-WtvkFh-1gQMELBRwbSFXWfUMRAkmBSPkC9OExhOjoAo_nFBqBN_kyGHBdAbSG-2u8CSGTukZJKEUhUQAKEh-wobiGDBYoVCGuuyuAUiduyvpqEsAAofEFZeiQSKFPBaNhAF92-gZa7CCpZv1ar-JgVECzgeQP_Y7B4gXT5z29IZP5Gh4ISaFz-59pAaDervsTbQBoQM1Cj-59o8Gehk_oT7oEV1ka7Q0jMGbTHM8QMejQQyQNJ4FIxLqECn0IYUKF2BSQcyGqhLMOgQpWD6GCy2A8FrlBEARbNsFohLwS6FAhbfiCFYBeYSUGRhj_qQhsOxDlJZth0QMQ4hhioTmEeh9_q9qiW-oClAdwxgbd76gXgMwGOh1YZCFDhYYYOGuelfha5PyVjs1CRkooCQEW-bSK4CJAo_q54LhTgXT7v4V1rvAjwmdpJaW254ZRpUhrFhAEnhh4SkGvaKVlX7bWU7srYVCmYXUGFej4fiGE-7-K2HDAqAIG6ZgAYQuD6Q9Kt-F9hfQTiGNhooc2HHhrrvjaUYn9hE4EYt4dZZzhu_L-EshdPpvzDhlQIq5SWhEQH5OhEAfhE4R-YZvzzWt3tOYE215os4jwpGFv51B1EZREIRLMJvynh6AKfQ8RY9rvB8RfEaP5cR7ERCHOhnEcbb7GlyMSIU-j-A-TSRHcMJF1hQAQ2E0B4YSD6_eXlqJZyI39mPb2AXQCfhceZET35aRokV6G0-XljRFRObgFcHLO8nmr6WRZkRGG7wXlldYEOnxO06bi9DpGSeRzaiPD8hvga5FORGkS5F6B4BMrjCCxLjACBA1kKfSRkDQFgDdmDkZ5bBRiQZpEcW-gYLbP2BSMr5EAWUY97JRnFmd5KoF3rI53uu5h7CShIoPiAxe4Zu94BmH7pVFXo_3pGbqOQPgaHuWVUYWC1R3frvBXoyYGaH6WwoPXZGWT9rMCOK_kdnZ9RA0ZiEJBnURqA1RctOB7TRPofpadgIYrSoHuv9nABTR_UaGFuhhtl1GLRqIMtF7RV1qKBGMdAHy4bhl0agCoh2fp1FnRGLkdHsAPUbP4rRKVu05ng1FkZKb-PkV-KTYu0QNHKRBQfwAvRb0YsErRj_l-KSonkUxFj2I9nBbLwQMTw4HRlVuDFLRvUf1G6e4BJrJNWizmOBoIpIVn7UhDXtNGf4z0QtGvRmMe9HYx81pYBwAcFmaTIuidl0CJA3gSTF3hIAOTHj-orhjEnRWMcmAnhFFiV4QARbBbaP4kAOLFW-pMY9FCx2YTBH8xWcpDHYxbwS8D_iXgLiTwWn2KRCgQ90bLH1m5MSDEMha5krGnRQsb7bmIEETIgXA11tAAekkZHd5BAgzpYGzhb5uTHQR2IWbGCx1EeUGtyUnhXATG-sVzHTRbEWjHzR1UdTECxtMcmBcRIsbigVAfPjX4MwzUAIAWg4oC6BFsQMSJHhxhsVTEQxQwaHEpW7kUcCWAYQBbbigbAPbHZxxsTLbexMcZvyuu8znBYWg2SnpCbelCHBD9AqIBvYIo2cfqHqB6MfnE0xKsbHF4BocSXbukFamJZncq3H16UIj7qgDcyFQJIBA2-HiQjZxFAViH1h3McPHRxKsYmLE-0GmZ7Cgb4kR7Hx5npZ6B-fUYfGUxkcQXG6-N8SE6QGlgB3CV2Kfj3SbAdxEYSh218VeiJivMXYH1xB8T5CP2W1l-I2h7TrAACAzapfG7RiYgrFexe8crGFx_8T5CSRJJugjlm3zgkBIuV6C7juQjivQ7wJ6CVe78Ozpre7COPyDjBBA7AFAx1Rfph97SCIjiACpQi0q-5pmgPnNH1mNCd0D0J3fmwkuuoluObLw14K1aeRjsiU56wAXoH6CJYtrnFrmvCXQmJo4HnIk0RS4j8AW2eVk6CjesNrInOALroAkwRSifwmz-ciQv7DAETl0COxSHo9bZ25iRi4mJKiQIkGJcUOO7-xSPuJhjgJ8RZ72JribXGG2TiVkCqJBiTjGpW-QB3BLxNoUa4A-y8DMHGRgiRTEKJb5kEm0AISa1BLhPlpuKZkZtlOYSg2IBzF-JGSUYnYhqScrSLBiSdGGMxsTjjZj2dFuyiTR-iRkmIJO8WUnpJhXiLFrW8bptFp2C4DEFEARST-HJJ_AG0kuJGSRKFIWB7iIB-AhSU0kARjiRfjKJwSWMn4RkBg8bb2EQATGZx8QEUkURwyawmLJpiRUkGJvsUc4QAFoT0kJ2EwLACbAAyU0lhxlAa0mHJziWYknJp4UWwRANoZXEEA1kLsktJKkQcm0JRyUMGCJm_JJEFIMQCEDFQwwEgitWAAIotxCKRhERWPCSckBJlVqMmvJrUJvy-2UFi9iwAqdoHHEquyZ7FPJQKS8nHJ2KVAGRi_4mFBZWvAVqYoe9yQPGiumKccl_IpdpsZ-AsgcZ7CAaNI0kJJzgH8gLJ5KcsmvJ7MKeHf2T-GPbXIfAX4kSpIqXwkUpIKUKnoJFFt4mWCDLBT5uA_4nJ7kO8qaQn7JbKSqnswj_iV7NW8DjfLbAVDgamkpAKcam6-bhhExrRUjs9CtWjVvRb4e0ifEluxojlDhkJ53hQmXe5Udd78ATDvLQOAStAwnyOG9o1Fhp9gC1G2AbUdwlrm4aRkAK0Uad343gyuKlDx2oQI7LxAI4L14ph4aewDukHOD6kPR9ZtmmpQGLmmmkMmabP7ng9gHAiiWCAZgCZU-9vIGOy6cV55jgqHi2k-Qs0R1H1m9aRmnkM3fs2lwI81o1YVI-kZt6rygEos6RADdkTLhpA6dOl1pSHummRpE6U2mDpV1g0CV2xgR66OKdALMnGRU6aAlbpzDrunlJQwVemSRaEfBZ3krgH4A22UwZWkGxqaYOnop7lmOl3pUPoOkShFwfCEIWkkIjIgIAUZenAZN6RGlkM96br5Xprrs4DP-u4XYCbhXYjYjZ0xbD5EQAMCSMDCA0Gb6kQeg6Syl2BAGQhlAZcCHgHQQCjo4oJe84qMCrGnMZhFvmV6VvEpp7GdukNpe6YsFXp7-JAaeRGIPBYPoujmjRwJgfgJlwZO6VRmTpg6ZvxCZbQBaCdORAFEA-RMEEEChWIwBuk-Qm_DJm8ZiGToFTpFfvpYeAfgDbHxRr9okBwWG6S36PJAKZRmNp_GS2klu-lm766OB7iIIZAhGdVF2ZJSTvFOZfGQ-muZbkeXLsA7TgzD_RRAItZ2Z_yaDEQePGeOlGZYkfGl_6KVn1BRAlrnX4pupCDcAZAE6HckwZ6WQZnJZ1GSzBIRWxo2RROCFtkAsArGSik_pf-uRkwRQWSllehJmePExBqADEGBAkZIjKxADWcVYNenWaVmAZ8mX_qCZ4BLvBYAHYZQh9Qsnr1iYAdme_hjZcmfulCu2kagCzZk5uTJjgtyZOadx8kkJIbpuZmtnOZIWUK70xuqaDbwWZcTAlIeWdlJktpQgfsltZ1GZIGjG9juZDwW5mBMw_Ap2fFkmx3GbenrZLmUK4pWFjvK7ARxNnCmMgdAKiDIBp2X-mjpSWeNkbZGUVIE8QYsSuR7ZrwJGSOAkAEQB3wxEKdl2pCWe9kTZbNowFEuhHuwHJANCV0CnZLWdiGU5GOXgHngs4FQBeAytlzmUAXgKdmcZI6amlo5YOZdlCxayWlaEgTUHFEmBCQAMCuxVaU1lCx52cFlIZLaWkGyuOoYj4rW9uMcxVepEBkAbpeQQ5kU5ouRdnq57UPNYPGHmfSn_4dzGzHG5AWY5nm5aucZka5YCVV6MxvWP1lAEcFtzRHRxuUDky2bOeDmtBw5nF4wAZ8Vu570R9qfHG5KOSLmg5Fue7mtQJweUFVZDETgnc0lCKlBExRyI7IbpDwW9mu57WSHktp9yIDap-UwBN5o0Kfg6B2Q7ALXk7Rz2WnmJ5IOfBkp5qWaRlp5EoSFZERJNiGLFgReeTnA5YaaXnUZ9yFAHk-NAGSGUIcOYxC1BxWVPmq5ZeYbZTp9yHgHtOZpKm6vwtcIKL_40URT5tuwqMinDZ_6RXlC5g8f-kT58ma0EERY4lcTERj-VWFK57GfYD35q-UBmtBXPnlECgrAG8DJu5mHrl9QDkCyilOz2T_lf5d-V5aluTUDaE3g8BX3GQF0ViXnJ5bud3nNprQeO4Tm7gATY5RV4VzY9ZBUSgXt54-egVr56MW4YrBPmCyCP4EYAFbJh9eVMDr215oECQRxkbvBuGAaSVFBpZUVQmVRC0bJnOZwafVEKOcadzEJpP7rqh_uyacLnuxQhYZnLR9gAc6iWooA0AQ4kSKKDOAFcOeAuIKiOBkOgkob0YcFJGbvAqF8iablj5u8dVHCFGBV6HmFBzvNa7wfUNQXtOD6LqANAizhYKzgXgMoGcFFhc7kJZR0XYWUFnURYWfRrhdTjOAN4L4jBIFZpHkt5ARQc5kFNhWORKFvURYW-2GeEEiGgncfEBPwG9lNFZFd8ekVlZmRQc6uu7TkTi6guoOwAeFuoMEguIUOAYU4wlICj76p18RYUs5O8SEUZF70RYVb5D6AABHDQGZZ9QKfrDBdgRuV0UHOV-XzGKF5RQMU-Qg0ewDK42aYEjQeRHnJz7eUcYrnfp7sSoWuhVhXXGLF6OZDFHFXPvqDOAuoDeAGgFcFsXtwU3i1bFFKxUEXWFfRUsUXFKxVdbng-oDD5Q4HrgEheFLMSUYwQrxVGGlFmwP0XfFhYUJlE454OeCxFooPEX5FfwQohGRZhUcWpFnxecWFxRxZbEBIuoM4BaFyJaiVQW84kzSI50wRCWj5pxbYUwl-JSsWuuMPn8WxFIZg-guIYSNJ6TIY4EjmzF6BD0UApuJWLmPxRxXgHOADQKqqsl-oITi7ePKBE4Ql8xUAlnFopToGOFO_GslSlUOPYCG-ExQvHwg9jsQkClq2fskilXeQ4UqFYSfqDU4ooFJa3ILEckVJJJxYdGqlFpXXFWlNEWEz6cwSETgNA3XkZ4Mw-kPACvFB4WaVul9hR6U-QwseATuFROBMWQ4DQN66UIquAUC9usxQ-HhlDJV8VMlHSeATJk7heeBJl-9vznQJFQrEEZlOJRGVhFhsVaWGuzgFDgrefUITi7w3JUDaogiLsHFsZYMXWVQloRcoXRlVRb6WRILiLqA-IXJVOZlmR6ATbQAoZUKXBF1ZQOWrJ4BLlDc0RUGgjRA6gGPbb5jum06vFeyS6VDx2ZXiVilemfNbPWi1riQkhB7jBALmuGTF77l7xfSVlFJ5eqUqFccWtGLW4YK1bp2wFPoCYlb-T2V6Zwea6XHlapd3mOFYKZAbEh32XUn0Q3uYDGzFYKX2WMlYpSMGiWg3t0DmYFLNeVGe5dh_a6hXRehUoVOZWhXLB-Zn1AWgzgIDgg4qqi4U-RfQOJnFFIwU-WgVL5eBWWlIwW5GuFISPGUaZrwMxXF58gMVE2opUb-4hpX3kQxy0_ZdIVc6WdIwkNRn3iwlXoUhRwlqOQZu1HX59ZjF4yVs_kHyWAPXhdxXQd6VYDIBBOUrSmVNJYH76VGLjpWoVOgSpVDpD-TzYRO6mUR5MyGADsmB-jlei77JdlaRUOVKhfi7gE9gMSoo-LVgTkvAgzsfbZ2PlaxWVW_la-Xd5PlVdYJ2HkBv4OlvTguBdgdErFVBVIFQlXSV9lclVBVKVm4CHQ7gH4DnMKYTF5J-lkEVCKuaNH5Z5VQ6akWJVHFTLY-Vvts4A_2WsRgDERCLlN59Ae4d5VBVdJYbbtV7pRNUqFbma9Ff-V0RFWdxFwEkUkZjlXx6Hl7lpNWRl01SE5XW7rmlYI5tAGgAIhMECfajVu1bZVFVAVSVUhOZVbQC1ed0V-KkQjETzJXRT1UL7nV9QZdUUF4HmtWbuF-IVD5IbTgl7Cgg8IhXGRf1d9Wd521QlUzVTcd3LyeG4fzk9u_4l-lcxa1fOXWFW1TWVrmjlbmYvxmwOJijmcAAubCAzQPkW72AFQcX8AeNcOlaVuNVdVJVXoXjXzWuoF2LZU_VQaWFmRwF-hiiFyCtWAVRDCoWvZG1dpWM1HVTtWfZCGQtbEiFmVtHZA_gJJkQ1wtQVWbV4tVNWw1oCWVVzm1FoAhygbVjeKJAx9jACSAPVa9WeVcoC1UpRflerUw1m1SoWa5EWSOJ6ORAewG2AXAR9XK16CXTWiu2Nb9UO181l-itIMAJgm0WDMLJ7yeosGwAN2xtS1UNBNtT9Xd-jlbAVDRwddzRMFxll-JrI1VXHWq1YtYnWz-ydcXEwAwoMXQLxJdXvRx1bVbbU41b5snUuBL9oYHCA91JQi6gjdeWVnEcdeNWFVBdYsHJ1tGS8ArAXNaObFQVXnrERVyYXHXKlMEX7VJ1DtVNkRZS8XACXh7TkvXIFXtQV5Q1ulX3UqF9VpAZuIBQLomtWB9bOBH1LVaNYJ10NbXU01u9fNYlQn8CUZyePbvKV15pjj27n18VWrW91QwY5Xp54FhKD5pkkLVVtWADVQ57F59cK4iVHJjWDFRSKjaZiIronyZWmZ4NJZGEtpi2hUE23l-JDMkZPSbyF5BVfXgeNaXmkFpZIcWmIelkOWk8-2djWmtmeDfTV11NdeB76VhlX17GV0tSFLTB5lXpycNaNd2UgANld-D0Norjl4deXXqw3JAxlRN4jiQ1R5DjeQ3jI1n1gfrN50N_KFxn2eC3uB7HeL8Rt5g2qDTt4IWe3sl7Z2x3qo2ym-Dcp7tek6VB4wefQPB4D5pab56oeUHmY0zcDDapFFBUPjD4wh8PuzhZBKPm876NcTpemY-QjWo0WNDqToFOpIsa6lnOHcHpD-efDY1kpO_qWE3mN7jYlnf1j8dQXTZR6HQWERjBbuHMFPNEARsF-2VNHcFCgOsCwN6WseBoNCDWPDyG6EDFI4Qyhn5S6whRuoYQQpcJ5IuwPknHCewFTr_BIN--mmTLwOSGIhR0rgC-RTIbBIIhjYxIn9i1a-GaiDngXyhkpHA0whWjqo4wjWgRoWzYtxGcEHN8SQA4ZBeD7uTctsqewuyhnT7KCQOc4dwf2HnQnKqzAZik0x6Ps3jCizIB5P0fmKc2rNFzRhSuA0yiPBHKWdPKaS0G9lAAPNWVM81fKv1BuRvNR6N0CfN83JAg-Gs8Uby_NMyP83nNPLEC0gt0jrc3gtUAPryxA7HDC1PNNdHurwtrzabjvNs4v5jTWhvJXzicR_Lsi4tazcXSXNI8IS1gt2dJ3yzg3fLJxSglLaco0taQAi1yq7JldIpknLV8oNaMyOBR7qo9ArLbkQLZwB2AekDoiJAyZMmRfaMyLmyh4HRPyj7EKRMWA4N8rWXSAMe1tK0cUGyvZDigDIPDARkKprCFXN25E62LNpykwgsIbrVMq28kyF63ww6dDWgLNLrcRSOt8AN63LK8LaG1-MzrX9hDQ4bX9iHIGoOHSGa0zQ9SEIubO8ButZomhBnSZzOASuArypgAFtmSNkguklDAm3etybdG0uthyHIKqKMzRyhNMlAoGR8MubCm148nKj7pFExYCIxHAC4JYTFgmdG63xt6zOlpqm0tKTSZ025Py0KV4hUpV0IDTIohcAOSIgxQAmdOu3oA7UjXQNMp0lW1rwW7fO3miRbWvDp0h7YpqoAKUKe0farcOnSO0puCxhNItmCM1MGYzWcGHYZZJM01krbW6h6EsrZGDJkNZJzpGtxIia1Ad9rZhKPMIUiCaoAZZKVIUQ0HXHTwtKHXFjBMPxGi3bNFqKXxASRkJh32t_4iKCg4PbeIaFq25GR0Ntf2IB1EdeXK3DUdibb9THKcbTXSRtiQEx0xtrHZK150JHd2r9tWbR4B0daLLm1lt_4Ee05IkBqW35tknS6QYd9Gu-DQdRMEiqMdPbQp02oZgNB2ot-Hc_QTSRzSZwLwynbWAnKSdLy07KoLXsoktqPFC1itcLZK0adibPC3nKAgJcqAUt6isoidiTOa2FQLRF8ridjnZeT2mDNqO2YAmdLB180xLcI5rMxnb0yetNHRGT8dXHS60DtYXQ-3pkwbVS37yWnfR2noeZCNoLM3FFG3Mdsbbx1LKG5OO22t87Y-1Wd0XYF1ykEXSaiUACHWWToqP5gwhFdiQPgj1dNqEp1Ed1DCi2soBzYtzEcoDEZ25dFgKZ08twLRZ1EtcygkBktLLXZ3UtJyj10mdznT8xudTZB50KtfKLF3usjRMWCfKdGG61rdvTLsKhdMAOF2nAgZsS1RCNdGd0HdRwPF3Mds2BqDJdf2Kl1Xd6XcV3et6dCxg5daLD0rpkAyi93cdIACcqzKFXTa3vWxLQu21dJFjF0TduyI11_0zXT-2twlCLsIddDrV10Zo-3QCrQdA3S5C2YzLedwI6gPbTTwtZnTN3XNlncS0CtBkEK1fY-VqljZ0sLSt3odlPU52StLnVt0ZtkdJ517dyPWTLnIR3X50nd1aNz1Bd98B2iXd13XECRdmdB2iTt-3aL1g9EbfkrvdPbV93VdGXQl3_dv8Gr0NEz3QV09OnXZl0sdEPWx0Z00PUI5VdP3cxxRdiPY91EwqPTCjo9oJpj0doOPRirHgj3YT39d0vawbTiN3a9DwdGPemQKdTSJZQWm0oFaZftLXa3B_t7SvqQnoglGB2EGjTGHjrAgiO70R9XvemTIdufffCrdJfZs1fNO6DKjTCiqDp1_0K7PdD6d4HIZ0zIU3QS2zdYLddpgmd4Kjwi4ZymX2ZoJynz1XKAvYWpC9OXD51kYLyqd3MkwXW7by9m2mH0rt47S72z9-XSD2FdYvWl2QKkyGWRgt8Pc70ZmdrWcj59nvYh2Y9Swr71m9BHW2zlSDLXZjDQw3RNKjd3xG301kfLVZ1d9zTHeCLd5PU70St8AKuhD9m3SP07dyOKlqT9x3d8qYAnelQQvmC_SADu9YLfd3H9T3bj0DKbrZnRf96ZPv01dh_X32d6p_Un3pkWPS-ZX9G_f72hoOBMT3AApPWmYstAGq33U903R_3Et2A0wJ3ggrSkDCtrPfZ2ADTA7z0gD7nf23j9a_UcButUAwF1iDnAHUydomA4v2K9y_fwAq9D3dIN-9ZGPIM79MwHv1WdB_Sv1H9hA0v1o9xA_ZBkqsg-QP2Q3XVQPlS6wLmxEDkffZCINcfbTooIX7Q8YkOKfZhRUU6fd1KZ9Ifca2KoaHZK009rA_N1QA7g5MTxAvQE_JbSfAw6Tl92Hbp1V9OzWi2BDkiAl1QDvbWmw3K4mhPISDEvdAM39JvUtDfGqiHs1DdlfYc3N92LZmqlDIeGO3IcwDCVCTtNqPf20DeKqN0zIy8CQ4IDmDBBx2tYaLmx-Y3Q0s0zI3XLpLb9eg2-6KVzCau0zI25BNoTD33YrJ4DvBNybc6_mD8TMdabSKCj905NM3CdJ6HoS5tmdCMM-tJbacPfGLQ5sOU63bQl1Ntg2a3qttsqFygdtr7bH2lwcWl-2ImZxMibkU_7d4MGIGfdmRZ9AQwkOn9Pwz8Aos-iEMpYdA_Vh0HNaFHh3198wLX0VDOHY32Gc1Q2N0CDkqCwMd9VnfMqQt8QMt399XPYP0bdFyqAMiDu3RP2HdvnTCD-dM_YbRz91TggNIDCPQYNqD5orYgCAkI_sAIDGSLyP8j4QKG1oCEI0ibhAbXSda-9PI9XB8jko1GLWDy0vf119WDBLzP9rXDUPPIzA-3109c3Xc2ktmLdC3s9WXQAPxDFI4INUjwg4ZqiDLI_SNT9TI1L32jRwBd31D2_RyN3dtrbAN5kco5Ngij26Fv3LDQo_KMBjYo8yQSjvw1KPY9UqH6MZAAYwejUDbQ3QMV8jA5aN4jeo2nSEjCQFwM8DcnKSPmjQA5SOud1I7aO0j0g_kOMjkvTAPSDcve6PLDno8r2yD1w19zPdcYwqNRjgY5oMhj_o4qPhjhtJGNQjBAGYO0o_IbGNoQwo4qOJjNgzWB2DRgx70JjDYliaWm--lSTQoGJOdgciVpoEBPuLKLcjoAZLRiRs89RBGhs8V9LkagcnMOARP0BnK_R4UbPBhg08WKtlp0w14_irnkwMsB1njwHJeOZ0M0LeOtQ94zTyPjbls-M4q_AH-N0tprX4y26bPIqgrSrKChjDdWIyhw4j_KLmw5Q-wPiB9QMoLEDSO8EwVKIT-WMhM_NaEyp3paKGEsIETXUsNBITlQ-XzGjAGrdTpaO4xfCQA2QIeNikKGMePUTwHXRMYjGLQbx_9VfGRP8ELEwA0xA7EweM08O2PljHj72iAAWg_sk1Ttosg9RP4izg3FpBSFcijpps-LC2gwEJeOjh1C-MHAB3gV1F8wL8PWkzQYKqzMxO26UOtcTIGRLDv1VygAugbDYNAzBOsEjk1KDmy8BCbLz6JpGwAyy5OnYpXqK-hUrYKukxgqqS_2jIo96_ejTrPqy0g2JNNGELe2MwORmoAqGHTZnIMAGiNQAJUxNPyj8AWQpJWEAtwPcCPAFQB4AtiDFqeBsg7wAMBegqnFtJWgdcA8Sh85psEa3YtlEWCZTKQBkbOUnELZK0iQkOrAwkIoFcxdUrkp00GwqAMiz9IGjOEAziuki6Dyie6j5RAgbBMhJoId4oJJYS_KGFB4SkUOwCb8jBJJL8o7kJ5Cri7AH5BwIV00TB2i3IqeLKSNaOhJvCvIrpYAR6BDWi-Z1sv6ZpW0omaADG2dP9PCg1ssWKzAIMxKADGAMzWimS5YOwDbiOZo-KrgFslbI2yZkijNgA9yHjN4zNaDJIZAp4lRIu4xktuLkAVM0TOQzGQHJLrRikuwCESVklSIuU2RlEy5TBRvlNBUxRqUa9GFRq6AzGNRr0b1GSBCcbzw9RW0YdGVRgM3Cz8xv0aDGtwOLPKQoxtJarGkxobkyzE8LMa1GCxoblLGtuOMbMc6iPfDuGDQKDjK46hbYaVTdwA8CtToKFtJ_IF01gCJA1kE8BIU2xmtRmAmhiKZdjoxHzPlGDRpZiFo_RrWKjErRrcAdGI0LkD9AVwGbMWz6hUsDfBoSJYBFIcORkBXC4wDnIZSYZMwIxmDhPoCtxJiDNoew4snIKPM7s_saeznMBpDTQVKHECG5Yc2MByIas8KAazmwIvIaaHw_PCrg8c5bMNA9c0HMfichqzPoQ2RpCYfGwoF8YkOnM8yJdNvVDSZRUexg-SHGI8KjIBSZxvoAvGVxpiZmQH7SdT3G3xpM1FSczaX1esvQiyDOQvUj0Ksm5QymQ3zP7NQAtsGzHfOcGaNMiPqj6LShPAM2ozky26vszgCSm5JuySSm5ktKagYRfNnQRDitFADRDjzC2pUdseKDjMMj815D9CD81XQjCrCNOB3giAJnQWgBnaDgDg_3UXyTd8LaQtG0JVsTwULRMAZ3NDYfH0OP0YfNuQ0LuyOqa18YhbGmfeYfNQIWAuDKwu0L8ZrXzmBHvIkACLn7JJjiLZyCyaoLFXLwvQNHbOazR803IaagYppr130tyLQ_1vzKQ0kOajDpr_PkT_80POALpJiYRZsoC6kDgL7JJAsJA0C1EN-WuiKVyfwoOJij9CvUksJYLiC5JjILYbAgzoL586yZYLtM30pZQ-C4wskLHLEqbmsE7dQvHsdC_qatsES8wutwUixlpumHC0u1cL0gjwvHs_CzxzsLuXCItogYixVy_YaS09h-L3C0jzyLMrQNxKLIvLGyqL7JOovfCaw-yaOUmRmzNE2rxhYiTzace-SzzahgbAbG2xkvMezC4mvPKz_SL7PbzRU2lS7z-8ygj_Gy5P6QnzhaHoxMMVS5fN7ADUhguvQr88mT7LhkKUQvzq4BGi9SJE3e6oTP0sYtIEpi1SbALuqJYs0mrS-Y2G02dGK3VCltD4soLVdG-YtCgS6gvtCzJIq2xs0S0dxutrCxr1Jt4ixCu5cUKxVy7t7Ul8Jydl7aiutwLBokxcAI3IUtt8nCzqZfCtS2USKLYfA0vE87vVivUoEnGHx4rXWo0vYcghs-0tLyo60NaLFyw1JXLL_WAyEmJi0AsWLZi2Au0mEC8yREjc1LZ2mjLamky_L2y2guTCAwjqCyr2wrGzu9ri9LTuLDUp4vstuqGCutM5CxyyIrxPDCt2AcK_qu18hq0jzIrLpBVxordiBitF9FS-Gg0rs_HSufcBK2ChErPHPIvUC1ApSviLOK7StCLCbMoud0TK1QxqLrK7WiqjrKJcv0TZPXPHWCYDHAMRWQ0L1JnjWWuBNXjHsJyBQTQSpmi8r9y_yugYLy9Yu6oOXNnS_9wnF8vSr-gL4tDC3yAEtbL9a76z3CofYoPUA5OK1xqrKXBqskkWq_goqr84-Dg60HsPsIRWIK4bSgG8K2iwSD0K63CW9VK0TDTrrbBas-8mKypA0suK0Gv4rWS4Ss1LSK4xx7t1q6ivntx7Xau5c3q8ezkrCbH6vHsUQoGsZLrbJEkpAeFsTwhrTS2GsU6Ea4Cp7E0a8NCxrAkwxNCTCayJO3LrBAAtFrIC4KtWLwqzYuirOY0z3cDLPfmOSr3y4mwyrza3KuArTaxfNHw5wqqt0ova-HpnCA65eSqrv5egCg4la0bzDr5KERtPSuwu0JTrZqzSyrrNLLeth8KvW-vmsxq4uvrdkrWktsbH7Cwtbrj67zw2rp6yisXrx7BpBoCjKvSsfrBpsyu6oby13rsmhmDWDvtmk8g1jgJgzyg6LLaHoSbLgwrhuprey0CtV0iqHoSCUxy0_PrA0HWcuabcWByskkVywZ2_zDm8KZ8rZi08ubDZyCWuwbFgMZ0GI-3WKvooEqyYVSrTm_XS_Yda7hsArCq38vDC7Lft26rfm3KTTrxvRYCrrWW7SzzrGQyFsi9PPfACFbFwsWClbuXFavorQW0Vt3Kkm8es1ba6w6v2btW_XQBrjW0jx4ruW5eTur1S-lukrHW9mzKo3Wwov9b9dMNutbFgBxuDbNLO1tjbiTF1uTbJK_NsQoE2-Nstb9GhtvybK26aZE9OBHoTE9Lm-HpcrWo6JOebdy8SY-bFW7sgBbu27l3XbZyBWvGj1a9Fs_Lta0lsNr8q7Zt4bP7sb2qrvfd2uXA9G-_P9rW27iJHDRW5lutbs62DuJMvGw9tosUO2VuqmsO9mzqtG62iyo7K69usjbuqL1s5LM20NtY7MrFVvnrK2zSy2r4cK9tE71OwputsxO1-u079dNNvk7cpPeuE7C2zjtLbU2ySGvrHO5ttM7jO_zuadgu6NvGda22ch3bSqPttxYh2zGucrca_QN_9Hm0R3JrEANvADKaa0-MZrDuK-PZrBqnKrQdyrcaQAb-HTlINSbPOVB4oGu0pSi7Ba5duPLCO0TC3bDOxDv10jPTEDM9PfKK2obV5Mb2xbH2yzSNrJm0Esoof20OsUbVG4xP2QtG0DvyrWu-Osq7iOyxus7ZyDlvc7ba48xu7rbFxvC7Au3nu6o8O67uW0Ke7jtsL5W8XtosIm6LvY7Ym2Xt47u6x6sF7aLBLsfsre8Gt5rze9tsjb7e_nup7y2wT2u7Uu7f3U7a2zH01gSyyyAoNDg_pvrLE8t9tmbJJN9uHL328_NEar86bsojX840Nc0hi2JMXbopldvFr0G68sirhtOwM8oPfa1yRgqq44D24ExqDhILge1huJbSq3vtU9wQxQsw7FK_OP-rzq9myurjK8TwRAhljkjn0YUwgK79qS8eyk7VO62yU7eS-usVcc2wivbruXPjtsmLe9etYHim5eTNLKm5Gsvo7K_Luubiu9yt-Y9u4fuO7x-1SZCrqmxYA5cF-_AA_90eyYQk0_212t37oi4_sYb8W8HuKrmG1gvsHQ6wDtuL8e5qs_mTGywZpM1PV_tHdrC-71pL7OxcJoH2bM-t879S8AeEKUAGAdIe5rOwOlLKSw6sysBS6ocJsGBzJswHh61Jto79W9VuaHdO-ttKb4ayys_rmiz5iDd_6wruAb8a1i2iTovdGg275vbsskk6a9iq67Wa7lofjSrYPRqUZdjosfzeTCEfh6luy4TW7UKN4SgYlB1jCQbl5C7uG0RfEwdmTcSIht5jfkxyzkbFvlHvAbNGwDtcHJSzwfvbsqwlvfbQh0dyVHYktUfktCa52sOmgOwlseLkh62s877a6gCg4ke9Rsicse9cIJ75-ROuJMoBp3vJ7n-zEvyHx7Ioc8cuezTutsBh2kvV7nW2YfZsFh7XyXr3G5_y4HfewQdUM6pB0uoA6U9kbom4QEMvzTPM6cYlGcxpQACzkVNUYfHos40Ybzks5HNoAnRlFRyzfRsCeKz07ACctzRs4rSazQs78cNzmwAbMrGbc9Mswb4y1XOTLxxk0aRwsy6iY7zfBJPugqY4AGPHz1UvUTGbAh6ZtXz5mzhu3z5y91Kr7hrevuMnXh6Qc-H1yz_P-H---Bveb1B1Bu0HMG_QepaYWwPARbjzVFutMvB6yYtHFm8lukCl5Glsl7AmwasV7Rq-2NhjP-6Md8b9aP_sJsgB04eOHeB5-urb36yPtsrHh9oub7n8982h-7-yH0QbR-4KcTGdB2fs9bC3c9uobNazQBxbsp_wfP7yq4kwcHfR2IcZCgxydbzHcpMxuqnkK2scanE46GN9j2p1nviLyhwaeHHwZ7zuZnlx0ad5nQu2aeuHFp1GvEH7J8duK7qYwjrdKt-Okcvrm_bMf4IYExEeQGUR6gPG78RzadJHDZ-UxpHlEEEe5yU7Qfs5Hzp3kcn7pawjwamCG57tIb3u2z2RbkYHJt9UTR5htyn9J8CutrHR5RuTHTHIDug4DQE-T3A_QoEcZHUXA6cf7JW6sco7YfCzs57zY7kvMLmp8mfBrDK_meFnl5CKdCGM4xYDyw1UBE50YmgNQBzT3MyAAGIV3pJVAgxIFUDeAdM7-Dkg5SXoogA7NUpU_IPkDgCoXHMN3Cp0sq5JUTF-QH-AwgWAD6BwXxwFHkdw3MjkAOhNFjbCWgEFyCDQX7CuPK0ch2JJVtNV8JheewUef4wIgPKOo4o00VOaCSVAAHouu9mjgA5uVKKnQVOPyIJf3IkWmJdEo0JFVTFU07D8gVOElzrMizvs0JcswOAFFBiXal6uDdGuswrM2zQl7yKyXvlepdgnes8ifLGRs2Ze6XOAAZelTxihMtmXel7yLiXhl65dYnRxqjLSXOl3AjyXslYLjmgVoJEBmXcUKJc5uM4yPOZGdF7gAczAF3ceqGLxyBe282rSor1m2k1WLUXEEnMAUMCgPIDyAQAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}