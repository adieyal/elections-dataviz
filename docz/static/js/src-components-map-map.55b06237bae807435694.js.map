{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/Map/map.mdx","webpack:///./src/components/Map/mapEmbed.css"],"names":["module","exports","ELVIZ_map-title","ELVIZ_loading-spinner","ELVIZ_tooltip","ELVIZ_stylesheet-tv","legend","partyColorsData","regionColor","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","stylesheetFor","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","filename","concat","getRegionName","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","_this$state","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","config","CSS_PREFIX","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getMainParties","partyColorsLoader","getPartyColors","values","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getMainPartyName","d","i","getMunicipalityiecId","properties","PKLVDNUMBE","SPROVINCE","getMunicipalityCode","edge","topojson","projection","path","parties","availableCnt","party","b","legends","parseInt","getLegendXY","data","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","curProvinceData","item","react_default","placeholder","onChange","onRegionTypeChange","province","key","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","Map_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-map-map.5937d78d.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__1LqU5\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__17q6Q\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3-o8A\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__3H0zq\",\"legend\":\"map_legend__2ss0P\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        // var ctx = rendercanvas.getContext(\"2d\");\n        // ctx.globalCompositeOperation = \"source-in\";\n        // ctx.fillStyle = \"#ffffff\";\n        // ctx.fillRect(0, 0, rect.width, rect.height);\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+className(`${config.CSS_PREFIX}stylesheet-${stylesheetFor}`)}>\n                <div className={className(config.CSS_PREFIX + \"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(config.CSS_PREFIX + \"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                case \"municipality-vd\":\n                    return \"vd-data/\" + self.state.muniCode + \"-\" + self.state.iecId + \".geojson\"\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                function getMunicipalityiecId(properties) {\n                    return properties.PKLVDNUMBE;\n                }\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else if (regionType === \"municipality\"){// \"municipality\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                } else {// \"municipality-vd\"\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .style(\"height\", \"30px\")\n                    .style(\"color\", \"black\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        } else if (regionType === \"municipality-vd\") {\n                            newState.regionType = \"municipality\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---map\"}}>{`Race for Votes - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the race for votes across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKZ9VmN0TX4T04AEchASdah9DgSRoJmSQohmfhVVQAV7Sg2ZzyIQIcmNOV4MkRDkM-DcaAwrCcNI8jsnwu0NXYIMpVguUFXNdouIdYB2E0Hx5H4-UAAEYCIEQBlQFCumEgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZxsgAWJz2AANiclz1jAECADEfWgRIbP4ZxDkRR1MHYAAFIR-CWBSfjgdzEWCmtQpoZwIB0y52AARm81z5HBDTqC0gBBOZjPYSMxPIGwoHQcN2HkTljLEFqYxkdhUUMmBuGAQ89IM7F5G3WtgHa6AuuCAAyVbxkSeZKGaJbOu67hDvlMBQg0ntUHadgAH4NmW8NIz6q49pW1BqprKQZGrd8zFhbjMDAMIoCmB7-sG97GpXGtE14ggcDCzIUmvAh5trOssPYLdV0TLCyIojGUbrSQYbhhGkfmqQIa-sxvxAOiUIzdDMNmViZgArQKBA_QGCI7iYaWMT1zQrMpKo9h-DNKVOMIyD2CMEI7HQZNpP4RWpZ5h05f8YchU0FlRf4CIdbgagLXIKAIH0NWZbgVgUksShktnZXadcVgYAtG2UgtfwLRmWcreI1ZUFt524mDwoQAIkSpl0SA531kAcE9JOUNQOOA-4oUkigVxAigZ2s8M3OFwzh1RqMhOU5Y3CPjgOBS6mGA3aY52U5Tpv0IbnitQAGUoTsCmdiXLSgfvPIjgj1amMyodHAhoLQZLXBFC24Fc1GzyXkVEkcUeBDX1dN6EP4NPgbVolcMwRfdeDk89WYIC7meLHc_eYAX1At4M8-CFcde5_FM8agAA5H0MB_5nmcG8QBSlQHHn_uQM0tB7aUCBhAGYECxz6lOrEdB8QXg72LP_SAWAsI92LlABoeg35Sn_miCAmIMj2DyBEIg55m6iFeq3O-khwjQHrpHGqrBl6ThgEA1Au9hTNX4AAYgAJzkAUQoqWwijhdHETeYU05JFHBMrIoIBimSCODiI1-BkdFwB_q4KOadTpSiUj0HOdc4EwEjMKBhaAXF9WfqIggfRzDl3gAAbXcVZFxABddgAAfKJex-hhLAQRN6ZhVH9mPmgREliL7NSPr8DJZ8L4PRsWbfwdh0bYFAugOwgtMzTxqqjTSaJQhSmFJGAclA7jeKxrWBkcI2mDjgJ-bpFgJi2BwKiLIzUfGoxmccWwudYCgL-CkaISkrgAygHAcBwyZkdxoNqeAiD0HnSuPwAATLZCq7BQHnT7JeLY510o7NRuopSlgtqlX4KgVZvYoBPNnrMl-6TT4uNOSAf5gKZlEBwaCsW4KQD_0hRYaFhFHCYDBRCpFFgLbkAfBihFzyekzXgJsMcYVhRgpGDADw_AdnJIBbWCAzR-kdLgGGMRbyPldIZbM0ZbKJm0HZeI958xmrtLuEKzl8wCKQrepCplLVxVsvaSfREXjTKEpGYScZv9BUqvyS4sVAycD6pBYkulOyFUsolSiiA6rplIr5TqrIOBbWGpMkq11MLzU8p6pa5lnrbVopgNyrFWqxkCv_EG4sRrWVetRcWGVgK5WAqtZ6nFD5Q1hqdZGnAGacgeuNfmpNsyU2zLTcalgFQPCLNdgwn5H4NW-tRjm3V_4q0LJgEs-t51Y0So7TWrtdaVnnRLTMstMyK1xsCXAUlBByUCCzVi1tLqZ1zoXX2_lxLZ1BHncKMdqMJ0tu1b9EU9U4DJWAQAcQAKr9Gak609BBz2Xtvf0HAHhVCRj5UM31j6sDERfdeh9J6AMaiA1ej9X6f0HtrE6vwGBYCpSbhbEY7DXQmXg5UJDXQ_gwDQxwqDGBv2El_Ye-ptYuquBGJGXQv80AZDJAMpdMynVUZGFezIMw8C0ZAq4BjAgmOsrI7WelDTUK1O1FwfUbQaAgwdcesZ7GSNjLPI4Gg_GXQCAeksFdtB3yQsPKEJGOAPLoZoD3WwoEox7IIGy88AANZKupRSWAAPqvt06BwDF7r0idmUZkzZmOGWdROkbTtm2X6nqslDzopzwADUGjngAOpebGQh9AOGUP4fMwQfzfr1LiYZjQFL0AoA3tQApU6BB5PdKdWpvjAmHrjIXA8-qCRoy01tvwTk7KFJuyKd0wLJ4ugDZgHl0L1mIscPs05lz7nPMEjGU-iDBWLAjZoP134E2QtWfC5GSLOBouxeSvFpLqX0tssy9lvDBH9AFbE7WBiQsdRcBvTMdAWQ6t_u1cphrY51P0a0zp5bW6sgGdExRiwq3fNvogD9yFqStlQGaJhwksGLBdD8QIcwLoxipUiDSSMJ0zpKUjF0Y2UA3ZLC6OoB5LGkciK6HxEywBcToAmFcORABWWySxNgMMIFcAAHHI2y8hMczNSVODIYdhF2BMpt2GiCJS0HuUjJ88v_Bvily8ug05tf8rHPVG4_QPDhFcfwDnEx0qiKlDgG3eB1uAtl0hdwCvWvPrNxAC3tAuuC5SIQO3LPYaB8IAVzVGNJDsFSVKHwJk3dG9PIDzmWBavnPQL1vXtZHg9AILgLElAPDxEFvkWguo4QNukbTeK7t9hSzDdH_PuBIAJH0mNGvMiwA99743sNef484Db1AcUUpIz8_YJP0PjuuATFpw8_AMAhf5ZsU3-XKQKcG7lx7_wSwUdgHZWANlfwdJ0c0xkPNqAtMAAlLD6h7vzKPqMGE_C6FJ68-Q6pXCads5tgK4A4hYAytOc8ArgZ8ndEUm8RogCYAb9l8g8CBwDF9w9OEm9eoc8sd4BUFBsk9d82UIgrEb1RQe4usBRXA0hJA_YUhlQS8tl_JvJetxlyQXgnxFA3wgkypwlIdS1HtocYQwMz04dDsOFGdawZcHkpknduc-cBcEDhd2AxcJcpcJCIx3cTFFdtIjwTxVcsgNd9Atd8Ddcdk8CNCvdTd6E_crcQAncQ9F8ncXcsC1Dk8tlvdLDLcA95DRAEV7cw8vDf0dkN8t9nD8Crsj8T9ipz8BMr9b979H8m0m9X9hQYAP86Av9UB7hxh0Q_8m9AD4gYAQCudfDZ9QCoDIU8jYB4CV9kCHdUC6UAjfU8848C9mpTDPdGs9B08uszks8QBHDm8h8i8S8oAy8XgYBK8Mhq89Fa8-hEQLQ0B-9ZlB8C9h9ysO9YAu9e8-9jFIVljW9ysx9atJ9p97C588AF9aj_C19AU498DWjt91CFclg286AwFmpihMg5jQoBALRWARB4ALRcJIwAASYAM8GBEBMBFTcHfTXqE1WcYoFQkRKAVAXYJXU4YzHQpBCbK8Aw_gS-PopYGAa42ZFE7YHAE4EYVAUeTsZqF475Y8KXMk_ALoNHIOT3Qgi-Yg0g_gcgyg6g2gykBg7Pfgl_ZlZXD4bEvLMQ2ZbodE7QrbXQ9XDhLrGTPIXbTuPozAmEK_F4NUrZPLLrM2WIbYO3X_XTbIpYXEDAUYMo6ArFY4pYR0qfZ4-ILZV0zZcBI0N0nI-06AjZd0l09gVAUIRcbU5kqtdyAgdqQ0kNKXKSBcLZTgZlZkyALoaUhIsNVMiAdMlU_gagY0nYEU31CdJ7CwG7GAZDO7WM0QzM2ZVJfHfSSZEyWzCkscfjKAKXHNMcJs_3RsttHgwrQ-VPDTZrGU3xfxY4ZMVrWAcfJ1VkiIs_JrLTQcssuePuAeWcZwGYNAEHcc7HScxWGch5aE8InAGk8eVc7pVcN3Fqcc1JBTQFAdWtZZBtO02ZNdXdBdOlEDCNNtKXA83HMGJvWMDgEpZxMBCacCuAFxLrXCC0DnM8XrAAan4DhWQugtguKFBNjgYRwHsGcGcDi3PDCgaAc3kE_LHAtFBMor3QEHkGKE5Dmmf1rFAscVKRcSgqcRgqhNwpSHwsIuItIoc3YGQrhXgpiAIFgF6zmjBLHAhNQFgr0xDXkA-jjFFLDTYtZL4BAFPyiK0zQswsgsWm4tgv4FwhkokF3FkBYsTGGiMuPC4o4t4uoDjgEqIrOxIrItErhQvIKA9h3OvzBD6Kkm0v4D8v9hAAJj9LrBhg3PHk2nmAmn4GygWIUCLD3mSpABkQAHY8r-ApJUCJoypbIJd8wzjirSqpJMZ_9Zk1KbLarCZPodkryitKNMgOMuMeN9LGM0lhM6zpcRED9fy4AkSjhvlbkoAsIwpoA5S4VTVEQ3NR4LRKcU9KBdYAxjEdlSd7EWRwSOVqAZra1jxEcw0dre1clVUYAjqh0TqFrbqQ0Bqm9Ul7qXF7Ybr0Y2dbKZl-BLN1QhR-AwVzYiAlrKAVr4A1qNrMUYqLB-B9QZhjN4h3AVlAbxKZhQbwa2U0h1rjZNr3zoD-Ar0whQII4wUUgCAMbVrsaoaCVGrIV-AABpEYVwAALVDNCAtBuXiFRv4G2B0lQEpohuptxuhphv4GAQ1HxBS3gG8LBVQBGEFqxpgBxuoFFpiv4HhiCHYF7KMTBWP0VshpFtpphtrH4HPH8FoCAvsFmF1rhS2ANuFtVuNpNrhQlpFE2Ctptp5pAA0gduVppvxqb34GlrC09vmG9pGHID9pVrxu-qPTDUAvMFerAXetmqwiCWTuPHCW1Pjo_ILHakjAP2dUFVeWoBFUesfKxTiCTK-QbW5qQG-v1xxzxzrqmtmBuu1IaUpHmuBUREBsbtrETrnkJyuputgqLtzUzrjO-uru6HMpwXIDwXNgMn7rptdzHEnInrbXjQgGDR8vgkNhjsWOgNnvEoXqXoIV-N6MQAHqwObrhVYHQCtAvj5BAB8q3pdWjSSjEv4AtDQrEo_sFXzX3sTkds2u-v-kBiQNvonKApDISBzotTavrJEROgSFFH2BgCvWVoAClcabrmo-KcAQx6oGhgEQGWYvtf5X6fL9rxEx6oSGjyiFxD8zx4qChtzdyoxBzIUdUxoutIyc5Eg7d-Aa1ThTS-io8cA0R3By9yceHAUKS-gG1IwLlbIFHZk-HYAusOlJQCE7cyomGbiREIhUEYgZgpMOATIlSYAUE0EZhaNTKwEjGUGjgxgTJxdbIxrfBmoRdSrvGvAbhIhoJLI0BmpxdlQ89vj2BYA0gMAdkZcV8QmrJmo-cSSZkeqBBjypQOsoAutPYmCxsdshtfVkcQ5rHlzL9Zh5hiMUqetJHGrTMzcusBx4AMg3Zz15gpRRQfkRGQBSE0AABNfUMJ48McXrKR6INELrO7TRLAPp-yeyf-lqEYZC-JQgZJtAPqH-t-5ZyMPAZCwJ1hTZj8DRmZD4bi7IfJ22U2TmGgM07Ilxwao4bGvB6geKjIZqI8jaknUM0fTB7BygN51AG6_o1JKIReZeGIApX-D53ROeD-L-Vea1QZbxqh1wOFzQoJV53GuFjKTTJFmFjFseDIbOjS7FZlAAQjMUIT3iyV_nHIsBeqhdpeFDgDhZyTHC_lZf3hKaxXRcxZNTyB4xpYsThf6LXNRkJyIBpFM06wFZJf3j6wmDoF-bJ2oEjGESgEZEGTEij1SRxeoCsWai1Z1aCVsjJcatSVHjiHOntkRZZbFWXi2Qde3isU1fiDNa4KE06W1NFdQTZeNY9RZYsWNZiVj09eCTOWzthuQaRWZe3h0TvHdVMkl31dMRZfqg8A8AEGTbeLZzTcarTRDYDf3mNfWn7BLbpasSCRVgvn4HCVrZAHiCgEJYEUbf4GyDSHbcZZmX9erYvibfRYbabZbbbZHc7fQG7YbeH2FHNoLq7blIGkrqRX7eFDzePCCUXZwB-EwB3bAUiRbKnf_F3f_CoFHj6E7trBpazZzY3ZgC3ePZ3eLH3azuam3dPdM2zdwwgAbSvd6ijykjDXJZmXOocTPCOpGNLfhkiG5dgppftRYqtWpZZa8W-qHtLokVLavaHrXdzcSBcQztQ7AWYOXq61fs5HNfCUiXDcw50UQbjchTA72qwQJeI5OsWE4F7dmWY_MDPGwUIkXvcmXsSHzWtQyGhcGSer9Nw8HAk9XhwGSgZp7gS21GARvX1BvHPCvYsFzvjYze3hcR04jbUQOtQHLuakAf_Ew_LuM6tRs4-WMiOlrsmt62k_tJet7oeq-ZNTk5XghucDO11CS2AXsG05gYQ_zZidOAbXtbY-3gzq84iWM4TM9OTJagc9FUOmmPurc5XeepES_rmv4_PuE4IWDUjHQF846Xk_gH6Kb0i-PGahtdi8oFdYMiCSK8tZitS6TPs7M4s-y7PsE4vpXr6OADz3npG7K7G5gdSWAZMhK-m_wQMjE6q_FVq9RYi_Y7mpa7tba_i46_zW679N6-6Am5jym9wRm8SCvtpTXtcc4C2AfE5fnlK5W9E-e8fHW788k_q7DUa925i_2_a8SCCWO5S_Q43qAsB4Y6b144RcO55Zg6IAUsq6WAgG4-ecrcM6i_46R9gs48x-M4TfMVLde8g50RR7g6hMB_-9mVw6rf3UA5A9RlSQ2qsTCjVz6HgG1KtTQf-ct0BeBZuqvzUF1DAC62kY6SPr6PYEpaOgtEMdMkeEPo2s4DsHVMoikWoCSHYFtXrge_S8jEpcNdQCsRwGL3pylDgCCSs53uDW4JgcTrHW-rN6De1hjuH2566EjHd4viWH99_kt48Gt7szt5YeLqjRwUd_p6HMao54vi5-iB580KD9cG95T8p3SaZyOHaTD4cSV2nOxv1B3wiG0z60gAICKhKkjCCRGAF3CUD9wdxqsTj-ZcLCL7WqXgmBa3z4eXJ3792o_Bz8BSifK1EXEXKsLDo9Laj09myefU6zqBwqcZOvFjM5ksYu-opMKUT9_mT5xzq53_0G4Z3-qYNxaeiDwAmaN6aemf4GgrtwcusMw96zOd4ame0xSrREoG2CMQXwaItETCUth_0UZf8usI-O3Pj0haJtoOsoBSmAM0YQDeSvRZ4nYnOjo8uO7naAkPQ-JmdqKwACAAxRS5IDzmKAkAGgMrYTA4-6bPPlC1XjNQgkJ3LFKkldgdlO09gLMCZGYHal9-rgQ_qn1nYCB52PGLAZj1Bj5djG9A7eK91B6E8MecfMUoqgYEQ1VA2ACXm0hZZ9RFeyvKQVijMQKcEas6LQdvCUGAp2B0ATgVtmME8ZDGKXGEGl30FIpLBOcQdFwIIBEd_ObKdQVgE0E0tOQkSZCshUh6NUAOjHQFIYIhrGwRQarYfpGD_jsAPAnIZwU3UnKuDrBngqIT4IjB-DJeyQyJBaBCDCIrB7gmgF4Mk5i8NBkvVwIEJzrfRGqCPNhmIgNwOZBmkYCQakMHrQ9zAQSDoQAFIecnIIwGVFkI-MxKJVHyq_C2RUJasEASQEMNljsBvIFrOHmGmtYtCMAmhBfijnazL8cAq_ZyuvxACxMDcW_MgajF36_xTBf3E_tQgejn85gl_doCkDfDn9mmj_bis_zX7WFTh8TPohcNrD39tM7QGRhkW-I2glg4gnQQNANiZAMiOcf3Ms2aFxN0AbQjodszhTcgGmTeP4VUkeE1NHwG_SWDiL9LAinwTuFyOwAuSAiLA5I9oKgSpE0j3h0zdoM5CdK0j2A9IxIFSPUYsjv-4AcrHbhuGJBFBkg53j0LniU94BsHHbiKPMG6cyBeItlBf2IygiKkbwu_hALZFUjkwfIrUc03aA8ilgZUfyJyOkYVIRRoMG9t-3vYVDEgTvRqlHitT29Mu_4XwZoKu5CcPubnXQVj1Rg7C2sOTTrPBHJCSh3YbgkuKSJNpXDXAkYfgYIMpzmjT-FfUzE8NqYgBaA6eW_i7S5EUCn-PhfgGGLmKRi_k0YmGuSP4AFRLQ-QEqH0zKhnInIOYl2pWMzHwi4AEIu3Lx0q7eIxYRvXPj0BTFCYC-1AewCmOM7ypxSa1Y8GiESDSNHOQ3fgMlFQSJAUgTtf0X6URDUIxUK40sZV2nFjgBAc4qgFojQBZAtu_YgHkIBHESIUxsaG8bRhTEKjoCQ_c6GOOoScFChJkBsROITqSi4RsjREdYSmHXiB-o4u8Ts2xHKg-xuYw9I4KTJiRHgcNUMjEGXFJA1x4DS8VXTvEepdxFCfcdjRnFHiPgwgAQJ5HPFUdnxDXUCcP3fGW17xYE1AI-OoRUSrx61RiXRIyCfj2AFoEyDzl_FYoh6AEhEd9mWavilInEo4JBPwgwTYJunGBuENzGtj0AwjQsYnGTA855IzYmMYEi6xZjLQ7gdqMKD6Yysuw0lcsTFQtFdEC0A0SBNAjM6E9qucISTvvkj6RpOQZAyVqmmZSuiBuHyKoXkLgrvcROvokyErw3EWASEZCChLMIyBbJx8cfLyUsUkA2AuwwQZeBKCNBSJbWS0J2JFnn62xF-uTKXrZnISJBgq5o9FvGNb5J8fex_RpimIeFaj0xRIkAFGRv4WSw0yku3O1PNH5ivhak0qa4HKkCBtJ0BVsVwC7EYDycRPCKTMjwFDSRphA4gYiTjp9SPhgohIH0zBHZQMp9zTqVikt5MTzKgwZWm7FGk-Fuxs0nAU3iPK7Dx8xQGRJh2WkMVORn_DaaiCED_8EKZxO3MmDemKNdJVY8rBaF0aL0xuTpHACLmfGKSyRGrE6eqXGxTT1WTE66WZDQIu0XRbk7em6Kc7TFbU3okKXLxd4wNTG9jSxtI3bEvB5GvAUQBjLklKNMgmAtRtyDpkwNLhQMkAGDP0Y-F7BrPbNMIHJlsB8AxAPJnZI8AKVHJG3bwa5NRxR9MRaFMFLQ1Y6wCDICgrjqzPZlAjOZsAMAN4ShFHlWy7kNIA5gVltT5mkjNmVhPOaczDYwow2YRmNkwBBmPE6kdDJAZNitStMtaTv3hkgBqsWyBvJdOmkas0ZMDO6UGNqyPTnpoJFaQDOQEfTf-302wrzPjk2ziUkAkGdzIhnlRWJsbXMVjLlm5pcZi4_2cFJ5l9QSZEQ-0mTPMYUydp1MjVprPpmwTGZKjFmd7JblKTOZ2c1SRyNVBdyw0sM-0kdKNLmwiywclGdCJulhpC5h-XNM-SHSvlzoc0yFFXNzF6cm8tc9BPXKpmYDm5WsukegGUbMzSqB862RzIzn5kcoPM_ud7OtlzdmcfkrLiNGxkuo3RAkkzsGXww60iSHCT-f12FQLjnOPtVunl0PnfyRgOtKZBAv1xAL5gYKXLs7Tkmowp6VwH7jV28E4BAuooYLmQzC4QLN5fpehIwgEDMJUQkQGsuhBwDxYr0DQXUMAjcz2Ab89Ua9OeCWD9kIcn8gMW5J7JtpIwnC_TJ_LO7G8S5ICpBavMBSCK5qXQ-0m6LBQEzRufc2SSguvZJcwEVwe3lPUDou03UGi44E5M27jJFFwnHRSbSK5XAlu13D7hVwwXOTV4nIMxdASIU1z4kaQMhSwkoUqkjstC-hYwuYWsKr07CyBTrSea5iJ6fC77NIrzk9R4J53ZvF6KUX3dVFTQrBOXNW5fdxO3gyRYJMlHSzKhSnFTmpw05aduFUOC-eIRETSKYFFShns_M-RlzluInO7oWNqV9t1Fx4TRW_L1QdLfSqi5FN6k6Wvyi529PRfAlgW1gLFwy-eaMpj5EIJl2KL7pYrSVNKCEa3QxdkqcXoEIFJC9xeQtYRUKmINC88HQoYVMKWFbCjhT_IHKj8TaES6vvwuiXCKfZRbKlvb0XndoR0SkOaaklCiWdCpqo1qd8QQKoBdQofB5GNMskUCLZVpV2SVX1FKSKByikqmnNbEpyTRZ8mBq2LqI-E9RqK_qaUhMmzBbmNAIQJskhVnVKAaYwkV1iwCEASAiAGQBSpHmAqusfuCIJtXxUbSCxSwfgGuItAl4J5qKzmTit5UgA9Rns4VVfOAh7w-mNaSUBI1RX0q8mfKkcIKsVVYq_ZhZCRugKnk5LseJc6ZVH0lRl0PkZSpllUuuVZA_5-gV3m0obJWraANS_pd0PgWlRfJbq3lW0tQW9KulIyl1NooWX69Bl7q7pdH0IguItlfpW1A0CK7ag_VMyz-nMswBRr7S-aBNcavzSpqkULigmm0sAVSo5S4irzuAu9W1hpFJq8zguLhQTUlI9dc1bEsTLdAC1pqrLiApMU-i5esi6AhWsNVFiS1OxFBSIpbVVq21-M9Jbd0fqlqXVFgXtfUprwdqiZDaidDsrcVMJPFbCbxbNmOWnL_FFyoJVcqgU3KIF9ynWgIsdXT1rZGBFno1SLpsMx4HDQKnuR36czBGw0vpj8BdDFlZUrVelE-mOAwAAYKE9gFhAIg0w6YL2WpMxGZi4RcY2QNmEBDoxcxwIU8buOaH5iOgSsUwa-HBEEBagu4XgEQJ9NmDrF4AzsQjXZhkbYQq0BAQEHXEkAUbiNrMGVqgFrgCJJ41sbdK3BZhwaquZwdjdHCLBpwGE3CSQCnD4pdxIsom9uLNiliCaHUl1fJPS0vhcJK4PCB-HJuliBwHUuy9dRQs3WWxVNN8RODwj4TkqtqJiPPl52U2vcR6Sm91r-gR4v83E8SNAPYB-EsYh6jGqjaRtt6hI3NPwmjrEhnQhJXNEiQLdEliT-bwtRw4klfBqjQUQNbEPGBUgNzVIJMroB1KuEaTogWk2mJVOOV6RRgCtXZbVJGmdVho2sSMPFHCiEAiA1aT5eZIOk-UNp1kPpJYI8HahbBtg1QKPPIp7p5JT4DW2ZGgrhQh1La5ga2uHWQVIoxlDS4bYVnIxxtIN-gKTOgDVJyYWMa5FbfsneyfZvsW2_gtQAUrl17ACGNIIdnvKWqj1zZUyP1v_C_xLIY4HAKaxgCFtIU3ZB5VEovV8E421AKsqhku04DdNHi_TYcrszHYYsxFC7GljBzyyx08dVcNQHPCCFn0whCujshB37KvFBhI7I5mcyuYPM16MIu5IR2rgbyDxO8jgNSQkMyGhDVynhVp3AJvGzgqrfoAfBLBgOjVD5cOjfJ9b6lTiwNY1Tm340pI6OP8lkG8a9ABAdm0-B73urKbViQMKMGMTlDcABoqu19kWr6pXUvEVHACpKOjD_5QK0VQFEmFTBJaZg7AXjdrSOQzApg2DLTNXkrCpgo8bFF_k5QgrHCIRFoFIEIFCB4QQqpurFIwFLFiB9CWYBoNqEJhh7vqjANAAjSmCkyPkOlfSWhRgYe6TKsWyAcKCIAkrf-ZYpiiophrFiYAwwTqBkB0rtQoW-ei_BdJgajjzt40YAEuzh2uEz1Le3EjQBq0Pbl4Z4F7ZG16i5rdiwemZPVVH2ox3dPwz3TxW9257fd_uwPUxQn1IpQ9FCMQApSsCOcpAsey8YwHukxxp9Wer3dYR910YyVMlYvTDVe0TQ3Rw-yFI3uRrN6nUx2-pWdqf1EZHwP6Zim0sYAdJe0N-lznWrLFiBa1vyKQP_qUgr77Sf--3Q4kANtSB1Yge6hAbgPUBoD0BWAwAcjY6VF1PMsQHgYMioHzoGBuqrREjmkGmq6lNet2osBb43V8vaYmAe-SF72AFbGBlPti0z6zK4AefX7raBL6f9qitfXnDECy6EoLiHfevogX77I57FE_dwahJVj595-1BJfqDU37gAU9e_faUf2zhm9rez7R3tG296ntsMV7UPvYCUGYDkBlkAgfEDOA5DScHAMQagNBraDfpBXeWw2heGL4rqWYCyiuriiy1uS--lgYcT_9EgE0e6lrqkiaGYjDJN7WIC0NedYjrh9A0GsPRpzZUMh8g7OWRgcHrKlB-_R4foOFqnOw3axUTL6jrQOD9lI_c5uUMCA89_BgPZZRkNh6BOVRghNcjARSHRDMhg_fIdn3N7GjvB5o_nov0hUr9KCzQ3Np0PQE9DaQCaIYbK2RL_cwAObVcFMP96LDRe6w5gdsPmB7DUVRw_ka5FJx0jqAA403g8P2lpd4hlItkgrYPGvOFvA3v4Yca2pgjM6pFEPXCMshIjE0W1DvRcRxGcDmxnBKCbASyUQT8xq4zcdO7ZHk0uRg_YiZ3DNU16SUs3fUa4PH6RjOeiY11qFVCG_Sce0scMc4r4meDZ-zYDsAtClj2j1s-PagET0zGTaBkJKo_zpM9bvA6etpZnrGO0nut8xVk-EHUP2qITPO5eUpAWMP6JETelY6DCMP8LJoTWl8j2jWQ6lHt_e4k__3QCWGIFNVXMatFQAeBsoyoU0-aZmDKgpM1aDYi1seRG9-jC4Sg-PpYqcGFD1JpQ-MZaOL6mTMVRgOypZCcnxoojcIByrQqjjx52wCaC_s_g_t8Mn-6EkXsFM_C2VBATlSAzhQ-UxjHgTM77H6AWRVJfUOaADvwxSBgz1xj00UY9O4mvTQpvg_6aD1x6qziVMMyACrP8ncx0Zk0nGe1TI7UdEGZM9_vZMn0Gj6Z0Rpmbc47MczYlPMwWYHDkEjxbnOaCjsDjnoUo16SsxGYyNr13TjVT0yMcUNz6JjrRwQwcZEOumbdwaF01AEvP1njz3p44fJAohAgAzLtffe5GuPABig--u3VMDog6VQSTO-QF6HYjoBwLFENmOICkCAF-g9u9E3WHgvHIkLAY4YCMCwiVcMSJmM8BHoIB3gHwXWUEmzu70GnesigO40imlOanqAVwUEjRa-XUAlAQa_rfwFBJ36FtuY0bexZSODa1UMJri7opDVgpQS8xoS_aQwJwWALYgOoF0FL2RhJA0YXgKNLMBRJeAaljS4uieBEAxVMlQo7tOrPOnazh5kyyHrMuApf1P0VHQBqA1AxLdvGmxNTCUC0wkIqcOOJIF8EIbtASGsCLpRER8UKtsNEAEzu9qEBbg9wR4NWnIAWhsgWNNkO8AGBeh8jSkOAM_V_in5Ra_AAih5XizCVva54FTg0BZpuZ7uf6my5A2A18UvwLliDRlqYhMxsINcfjYhruYGBwI-kgauqR-IH6rgn6uLa9DMA4BCrSWEqxJReAbEHU1YhCl4SuBeBOoY6fSd7HNgpBrIg46hEkhqjDWirJViKl7FSpBUjgDqIUHIzoshBzTqCS3GOl1lIFVgUAcgJGD5z9DXZfOJyAVkNhPR4gD1p6y9dshvXNr6kba6Nbczbyrd6M1cCdcblrXc4VOK653PvktoKky11_E9HHHw2rZqMN9dFE4DUkGMAqm1tsAHkI3r2HkAoFcF8hYAibbMludWKuANi_IxINK1sn6BgAqbq4dVa0YwBXARgNgWgETdnhY2rgaAc2C6HxviMx0XgMiRkCuB_XKb8N2eJLenArUB4eQK4I5DlvU2IblANAJbViuzY-raENm5wnpRA3irbmWihaAIAcAstg1wGyNbNsW2rbXIvEQNRHzc3ebA1k2_bZKuO2OA55TYTkH0lTXys7tsYkknA1uXIsnl3Id5Y5h6A_LjSHiCcr8XnLAl54GvM9Or36GpYidgJYTs8ow6a81ekUIWZywjAc7dUKCFDoLvJYUsC64la0zuwV2MiUwAAIo3oGg9gBmm5nizOAb0PcSwLlcSy12a8AAR1CAmlMaKEtK43dQz3dE7-OhbETqvQ14n0vsSKgRAXvzZCdfd5KOeFFApYo9QSxbMBmmJr2itAgRClRWoKab_1lV-yw6l8VnKAlly1cHncWznZa7UBE7NDq_urh27nd7u73f7uD3f7l2VcIvfzvXor4NV5QHTAfjR21Asd4CPHfasQRA4KQUe_nATh-7ZgeALB5bYoL3dUNJlC2DQBw3URE47lhhPd2svabIEauZTc32r6MPOewodcMvFsDMXuNnxd2N8Q9iMP7u_6uSgQASz_FlN-oZh2I9oDKaF0HD_oLjWYftdV4FDuFJ6F4cWh-HfxGR0I5ssiPLA_ifYFYmYcGPccRjpPsKFyZ5Y4AqjmiM3SDl0PuIIj7ctraBhWJbHVD7KK4-8KOPRIuSP3fADgDSP4AjgGrB489DtIvY2jw5LJh8fqR_1qSi8CleR2zZTqQ9Y0ieHHsZBEgrUVcFk6PGWKsHxQVcI-RbbWOcB5QAC0pG6SllVwxTmsOEPKuBxEn3LCxGk8lEZOts-TnJw6m6eFOoA9T1GKU4SBtscBi7OAFINPbODEjUeXODmxQwNoo857Q4ISj07x1ans8QZz1HfBNPuILT6zQ5szKed-LRLJgd0ikG11jw3tP6kKABozbZk-Jb9gs8eRIA4UPcBoPqCEtXcBEVwIJGZEQMnOXE_dEADc5l5PJGldqMBMC_ef6hkwyYMqK7M4xq5PmV6CAIkHcAQB2AQSVF-i8IjhJwXRXaFx87hdlQCqlF_tYC6hcN0QXPMO5_uAhdAvqXMLuF2ckRfYkjgPcdsiXixfagJ7VKTZNsFHg7R8XBKCF8GiJewvkwZyMl_86nrQvaXlAAlyGoldwulYRQpF1kCOCWAdI7gIIL0O1e6u6AIr-l4S6ZfEu4XMril7rqpc30aX_1RV6K7m0qvkw3kV2TeFcAWhkofgNwcKGZpYuvXSNSW8zWNdXdxXZryV4wW_Cyvel8r-10q4jU2vfq5rnnK7JCahk6Ac4IJDfkoBxWBwE9ggCG7FfFhnXPOS1wC-tdXOmXCr-N5C8re2vmX3kBF0UOwT5BvkWL0vnXDPGFvTX9b4l427Ldyuq3cbx18q_DcuvWXzb8IPkXbdTvYAFoaCPkHyDdvk1utJN7C-8jSuo3Vrg1Im7te3OHXJr0d72_XdqurAeAUMmAhzhYvrAlAYYLi5OChBl3CaTACq-8jJgB3Mbod_u5reMvj3Lr11829cDbA_AJwLF33Ant2BLA_QYu5zife71i3Y77yJG6UDRvKXdb36tW5HcJv0PIL4lzzibfsAbwF7QIJZCxeaJ2oxmTCMkHPgCARbKQOD2G7_f4eP3aH1d3u7BdYfa3bH5lzzgnfsB6oKyb5E7CCQyZYABAdQPMOghSUkaDHhD0x83coft3ZqHD6C7pdXdf3a7jSae9E_yRUE3QIJAcgwBCBlIUmbYCslgCyeX3Y7nnO-63flud3KnzD4e-w_ce8PAHlKAG22DM0XQ_ri2JbTgAW5LIln1z7C55zIfyX9n5T9x6c_qfd3PHlN0UM5fzA53wCbYMZh3JgfqUowID2uIUjBeVXPOUt3Z8Hf1uYvDLuL8S_8gEfrAucVwDpAFCfpr3fgEvPV_IgQB8vY7qryx4rfRfh3znrjyq_8h8ekv3r6d0EkvDmxEI_gDr3-6G_deHPvX795x40-4fYXDBVN8IDM8y9hPoCQjUQGyjogXgM3zT8KWK-fvSvfX2Lyp8q8JeQNTgAUKgg2JBJgEhkT6cICIDHfVvyYfyEV8U-ReBLjny7-V-u9rf_IbrhcB65vAQ-sXKWZeORE7CffmX_kfyPN6i-xulv_Xlb0j5yobfzPQHqlG26CTLiCAzwMcHFPRBwBEflXnKqj4B-LeOPmPir_qG8g5UCP54bjNSDlAyZzP-nkJoOnYA34W2VP5n6z9p8PV0fDPq7yF5Z98fLwv7MpERv7iwAWAWLzjMXlgD7wvsUAYXzL7F9Y-yvTr8Nyz-09Afz3x8iYD6AoKuAsXwCFIMzX6B2Z2vNbxj2u-N96-4vBvo9675yrueuev8LbwpCxd--cvkQEcDr59_u_AfGPqXxK5Z-3eNX9EgxyXjsz6ebwfQdxR2I1CSBdQeAeJBMkgvm1Q65gJP9EC2Th_fv-LhlCxYZQXPQFdbuFPDURo5xZwBJHRY8_md_BFnrzuGslC-cQufnWL1Dz1-BeN-ogzflGst93f6hkoeogjx1hI9TAe44Qc9-bCxeXhQgXn1ZIREkDW0yVXb533J57-z_I_bH0f0jRb8_up_M_2yHx_1AMhtg-CO39b_G_NGFwlAT79P71EKeIvJXuGgjTH_I0rfjH7Uun_rZDaewHtQCgeRPn57dw0LGAAf-1_rZ5_ev_iABn-4_kAHA-p_tf7ueyUBABYAsAMkAM01vo4ZNcQSGI5QA2wIhAsICAXqLheQ_gt4j-__uf4T-jPjh6gBt3py6b-WLk2RqEHKjQG2Qv3j_7nef_k36ABl_mwHX-YPkUJSYwnG0zCe7rqjiHA_ASj5nerHowGiBF_pP4SBeojj7quvwO4AgagQNsCYuWbkLhuwnUDxBcAaQPwE0-qgcP4gBTAegHiBWAfC4EeByFABRAdgAZ4LgngTQFlQpLnYEMBDgRoEsBwAba6f-DYq7JkQSNHgCwAhEDD4vAJeKiR-B3_vQFo-wQQAGaBrAS4FlQp7vpAdwVgLOhUoTqiJ5cAmAFACBe9Hgf5We4QTP65BJ_uoGZBoQZgEj-dQe57RBwHnV50AJgVD6o4FtH4F0BSnnT6NBzARgGG-tQfC63e1gK-a2As1Fi5M0rgPqCxBgAX4GCBaQcMEZBowc4GtB8LlIHsA2oEcA4MzgHd5fSz_vqDm-6gO4CuAfgSoHIBwgagGOBYgVoEuBZyNV7Ne1vmdpUo0IEEhuAn6DAA0BrwQ0GbBTgc8E7BZyLf5eA7EFe7PeiZHm5He1QS8GpBQweL7AhTwdkFghp7jehEAEnhgA9By8Av7UAAIUgFCBagaiFZBYQUf5nI7nql6RAdXiYE0hUQPV4Ahgwf94oh4QY8HkhLQSAEz-ZyLd5p-s6Bbg7A_QMexkewrIKHbAwodYEIhYIRX41OdpLX4zO3fiABE0luJFRt-zbE86d-LzmChXolgH34G8qNH87IhK3iqEk02wdS7ngDNDehRBaXgIAr-3QWv4W0PEJUCfeloTehAhtrqaEZu5oZ6GWAG7mz5EAaDA6FkBFwN0FWQVQZx4u-yoX6GAhgQekGehxNN6Ggh1LrqEbut_lwDCIfYCJ4wAI0nwHShKYTGFIhrISaGJhaoRSHRhG7qe6cuWyCr5Zuy-OUEkeEYf15RhqYWcjEh6wWyGE0pYRHDohBYd5Ai4BHtz7Tu9gD0ZBIDNOiAZ-JwAIAzAn3qmEDhHoV2GqhPYeWFzhfHj0wYA1Ysvi9C64egCbhaALOF-hIuEWEoBXoWWFchvof2Gnu42r2D9Az_teHfIt4QeGXhC4cqHdhPoYTSHh7nqXyZABUHOAjhBkFi67-YntQB_ACQP8H5hF4SLgshJ4W-HJhtrjgw34N4K7L_hyQDtDsAODLe7uALoAF7p-WLhhEIY2EZUGfeCETeAvhp4cuHnh_AIPY34rspYBFBuriBqHiI4ET7Y47iNcEQRVEc4A34BVJX6lo8oYSiXOttIzTM0bNNqyc0F8GWLqhczj-xd-YKAzQs0wCPqE4IA_kaHFhu7gsGiRHNFzSSR5YeeCWANEUUK2MmwF55oAJgby4CASQYxG_8rofpEvhGkezTiRv8DpGURIAPJHAIrwQR4JYF7seCxBzEby7Hyx8p95uRHkXZEiRDkdpHvhrkQpGvBfHliEnA8QT8FUANwJUF4AQUdFENioUazThREkZFHBRuQa7JYhOkMZiBAWLoVHFR4EZGGH-UUe5H1BcYRsG2u9kWJERRcEYzTpR7nhpyhA9XszRJBfiFi6C-ZEgUBpRNUdBH3BjUVpE5RLUdVGvBt3ueD1eqAKPZ6eCUQ0BzRC0VAAE-TvpVE1BrUTVFrBxoepFhRTURNG9hDUelF7BN-L7i2AvQOlpOhRPtxDOAmwHcAcqFUc2FVReUbcEkh9gQ1EHR40U5G5R0Ua8GuyoQHf54AzNKMgw-ULEREcRU0bGF3BpIV9FZRh0b9GTRwUeCGAx-oPoYJR2briA7AQ0eCHHho0d9GOR9dMdHbR4Idp7CAmLvDQ7QVwe24Ux_QHhgCAuMW2GZRmkUTHOR4waTFUhrsrGqEiT3jzEG4FnlDEoxI0XDHCRCMT9HEx5YSjG3ed_qdDHy9Xr55k-zRpw4EAOkJDGbRbHtLEsx2UUjEkx0MXsH6gnQfD6jICUdbSCgGQJSSoATMe9EdhK3mNFsxf0e5FnIugZYHtQmUDkBBIooLEB4A7sUzG2BsMZ9FixrMc1F6xwUVK5RBRAAySfooyJIDkIKknAAyshYEEhxxiQAnF4guMVK7axiMZLEuRYcae5UIX2A_7gx_GMMAwA2wBnHthe0Th72xIcVLHRRLrgVFEAdmJsAKx43qiBUAfQAW5Cx9cSLGBxrkYTG1xucfXG3euoJ0HLB8PmR4ZAKQKBGCxGscC5hxu0WpHVxA8UdF1x7kd97cx8Pi14MRycZQBwA2wB0gZxNsVXGaxK8brFrxVIWz4YAmJAlG8uEYM9Ghur0dFH9udUZ2H9x4sQ7HIxz8Xx7AI49r1HPef8Y-7dx7kRu5ZxEsezFe-U0Uh6purbisj-ukQBkCUADosAlUhvcUEHwxwcavFDxICbd5Yh2jiYFIuiQBEBUkuMd5CLxKATXFYJHMVNG8erssAj4Y1dFJT6e9CZHQW0s8S9FbRNCfjGix78Zgnnx2CbyGnu78J2Dj-wYTehogWwIQC4xNnmAmfxocdFFhersufDX4fgN1Y8u_iJKCoI0iWgnxhQcTrE5x1CcFFVersikTlR_roDA7kSsThFBeKCV16vxdsWfEGJkCUYmxRXrtQBrio8PAmzgqCOxFzx1Li4myJg8YYnRR_kKe5ZsrgOPbas-QFi4JYR4oLjoAuMaEmBJVCc4khJt3hLTeJUQDb7uJtIYknkJBMR_FBJqSe5HI-BUdqy4hpUeUksAiScfFLxp8YUkpJLnvPHRRrPo3HLBFuOi50eNMeN5RAs4HkAbRHCZrEtJAQQHHoJeidnEQJTSf4ktJfHhhFzRJgYbGdRD8UW6cJwUTlTcJfcZQn8JwSe5E5Up7tMGEeImim4RQaXO67JAWbtqyxBoQFSi4xeycknbJxSc7HueN-G4LzI3AZED_87CY_GrJLSTon1R4yeAmOxzsTLF-Iyfm8BnBoKSnwl4tyfkk8JWyU4lTJJ0e5EDhqbqFCjwrcQsH6gXgFHEDJ3yUMnIpIyR9FjJvCfomTJA3tMnIpfHkDHLBrwCVBYuXsTB52AZybjFHh9yQinkpSKWcgi4p7sAi_w8PoT68pPoEkG-Jgyc0nIplcXUnzxjiWSl2x0UVBFoxOcDnCtx54LOijAyyT26kxUEWykyp6kXKkgpwwKgCXBmYAsk-BIgKlEoJIuLCmbJ0qUCki4ewal7YYz_g6mIYIqXilipXKbUkUJNqV_HuRciIOGVAwYdBARgeLigl-p2qUClyIfHgsG8uaXjq7cBv8PoaMxoaRsnEp8KTqnVx0UXIg8p6AFSg5pzCXml5puMVmnhpPqWchyIX4Xg7GYoZMxFYQ57tCijwRaX8lvxaaY7FvuBHlQh2--nvYBdAK-ISHAJbaSWnyJwCG-5Rpfrm4AJRlWNOCNhQ0SOmDpa8W-6nuCfp8wM0f_Pn7zBq6b_AJJ_aRa72J-0Q0kPJiKdtFvu7URbixB1KDAA6QVKFi4NAWADLwzpLrnOnYJb7rglEArXsB7s0pUa-kCgaXtqz3psoVX78R_-IJHe0btIWDjafftJHPO1TkqHAIKWEpGEQKkbbG7uoGVLQy0kUbBnJgrSc27JEtAE97QQD_t-b5-n3hhmi-u6Th4oZ7AOBmTRJGbf4DwgQPIEO-lPlDE0ZL4RRlUZesSRmnuooCwh0AlQfSk8ZZpun7EZKWJhkSpKAWxloZ1GSJk--rsgzRngcQX7psAFsEcBjhe8ZbTCZmGU2kreEmaiDoZ0mTLF7xZGiukJpvPpQBP-Zfsxn6ZrGZLSUZkmRxkiZKKUUI9MUlCsA_BY4DnAeJ6qSu7AuGGfOFkZbHjpn6y5Yb5l8edEczSDw3gTnBdAiQDPFeZz7gFkOZKabokgAgWXpnJg3Kam6uAkAP_zCe0ENlkZuGmdynWZ7tLZm6ZUmelnueUmHZjF4IgNCGWY7UKBDqxoqdS6-ZWmchk2Z7GcFkOZt3j0wKQzcRcB3e0AP3BYuLNEEAU-XcX4m2uvmVanEpqWeVmRpdCfkS1hsSYkBNZbqS1kiZkacVlgZdmV1nJgWaZlnQoFQNwHtQVKMVAZAFoOKAug__BpnFp_mT5kdZu2S5EYZ5aWy7IuWrmEDCe4oEpkNplmftltZ5GY9llZ9mftl7BnAczQWglgEEC9JXabn5WYv7N8i3ZnqfcFzZIOXIguxL2Tj59wQBCBoTqqvsiDAgkgMuKBh2OLdn-xRKclmo5XWSsKeRKYnABThVuiGHUI9OcKAzhlmTTnbZqGcDnU5N_rRGjwXnvp7E-XWsfi_8kQMJkrCSWf8kpZQOUFnPZKWCsIm-LmcSDP-DNBr6UBDOeLlgBnOaVmy51CbBkrCFaePalImLudEJAXgSlioIFkLIxEZ7ObZDIevEeOiAZWKMBlKhmtN0A60EGZqG_s2oXChhQzgPBm2AhoUhk4ebudrRtokUX7mmiBHpy4p-14Jm4rpPeBbB7hVsVDGR5diaMnJZoeR7mTRaeVGm6Mn6pm5QeToNYlNh62ba655L4Vnnh5Oec4Cmi5McMAP-XQCNkW0xnp95p5YmfcFV5WQBHm1563kUKgIyvmZH4YY4CznThbeb3kA5bHl3m0APeWVCOZSWvkCjwqALi7P-0wcpFbIKeZNka0teX5kZ5UudPkAC5YZHlHhtEX_wBsa4jy4Sg2ILFnj5c-ZLlvxB-bPkZZRQmFlv-yXvp7ZurKJum35RWfdnUuj-TXlz5FaeJ7NeGbjD4LgB8R96p5O-ZPnAuABXrHH56SUjRkeZqXWhgRP-TNmZ5XQO7nV5CBbXl-prso4bVZEQNwHpAD_tr7QFZUGGl_55edgVh53eYAULZ0gRADtJYBUEhQ-EwLACbAUBVvkgAkeVtk0FGtHQXZ5eBVQU8p__BEDdJ32arG35d2XvkP5whbgVH5-BRWnasMQCEApQwwKTiZurdhDm6FrqSslT5KhZXmKFDBaIW84rsl66YksANCGxJ2QHFnwenCfwWYF--aYUz5jBQbHuA1We5BgenYKtnwiW6bwX8FyOTwnwFyhRciDhlAKPZ-ARcWOF1aLdgj7QFERSYVa0IheEVgBdCU_4qs5iUeJMZQRc4AXIHeaEVuFh-S5F-5FyF-Ej55BOXrMRbgFThrZhhXAUFFduSkU4FZhekUyxWWW8D6e8MO4DbA3xBNnNZ5ec0UuFChakVKFLkdFjkMgHi36nQmbkR45ugYZzD7hUMVMU8Rcoec4CRdfkJEgAhfhNoOAXtPc4_UGoR37e50GWCjng9gAHmIZJ8cC57FGQJNqHFesTeA3oYUG66hAPePEAjgKEY6FaQfcDaSb5QxfwAvFYUC-H3FYdKUXUJlxSVQEeZsZgCEaqvpkBZZYAJdlbhY4K6H2AMJWCUW0DxQcXTaesdCW85RQkR6MgDgPCLdAGDJbjvJx4G_BTAexRiUlU9-St7gljxfiW6RmJRkVFCDQALmtxODLIx0AN-VDGElRRX3EsleJZCWQJhJRWkP-hPpxiuAfgPt7EJgJWXlm0HJbAUWhOJRCWRRhJeklZYQqYLncQHWDKDZADJQIHYlRfuKXalHJXsFQIGAMNJ2AXsedLsACWC2w5h8wTmReewgIEVAluxdaXml-xVNoSlh6b6UlULse66d-sjAkEJAowApBdAppeTnB5bHmKWBlVpSVQi4smW0BwJWbojQZEGuUKUclIuP6W4lKZZNGElciBmUc0RAUQBZJY4RlLZAbQCMCmlciEWValpZZiUAxzbh4B-AO6Nenm-iQMG75lDYoSmJldxZqWslQZRymqlDYrf7zRiNKKE3AGQCMCS0DJeCEtl45amVthb2dEDsADNMvjrpRACsgrlIpcSnJlTxeyUNi7nvVBRANKTYDxpEZhkCC4PBT6XQlVIWuWWlbZQ2L2pmDsKx-uRPtkAsADhVGEvlIRaKVjl75QSXtlGOQfGokxePp4dYsQIBVVRL5QmW3FGpRaUllEFQ2Lpl_eVgDgpWLvVDlB_GJgArlhZYIW7FYFRhXnl8LtzGoAuFdy6DMY4NwXcuQSN2mdg4jAyXwub5ZRUuR0JeHEv5VON56r5y8A_425vBbxVMlu7qeVslPFZiVwuNFZv4aQZwWYx0A7_oOU7p8hcyUUVZ5TJW5B7nkv6dBhqSYGt2jIGkRKlHFeqW2uUlROXMlslbd6zC-QEXEMVrwIBE7QAoMIjQpalaMWaV6FdpVQlslXsHRBOcGekJRKcewCa0cZWpUgVJ5VpXSVflbkEux54LOBUAXgGv5JVNWRxUoVkqWhUBlvlZKWyV2FdrSm-swZen6eE3gMCDFKpSGXpZXFblXBl0JY25RBVSaZG0xNWGFVieXWkmliVmJS_EaVklTFXWVkld1V8ejhrOW-FKkuwCEJDJaAlkVVlamVvumWWJ5wA4WfhXmwzNPnAoZU1ceXJZs1R-XQJ6rpw4wAjOWn5PamvqzlTVFlWbT9VqZTZ6ZF49nGmm5-cEEhhQHmRMg94DJTIkzVV1R-WKJRQsuIOg-kOhG3uGRPAn_VUwPhEZE71RdXkVPlbFV5Vowukn3uwYZZheAxFYOWFeNVbDV1VmJTzgGxvkTQCeJQSMZXkQQCV1WjCUVdtVfVmFTzguxDNIPC_B2SOfAi2Kkll6fpuqAYUapIZdTUY1A1Th6XFSHv6m6oFsHhkXw0LF8mNFFofYD813NVaVIesUV-lEArAG8DfBG2lMD1QhkEyjwB-ZbLXS1bZUh7aen6Dq6E-N4MVBXBGJXrU61EFUh7Uhv8EkE_p3wYKm217NGbVIeFtcFnRYdCYmQsgQaYRWEew0iDV0l5sDq6BAEwMRnRY6xQBmbFQGdsUgZktMWVnlUdZBlah5xa7RXFRxajDfOQeahVTZsda2UcZ9gLZDGJTmZ3Z34-9s4AJYhVtHq3RDoBLTRlIdcxn516eRTlS5KGXHWY1k5SlkN1P8fVDu1DNDfi6gDQNwFLms4F4Dlx9dQXUSVgOe7St1PNQFkN17ngzTd1yWM4BacooCvbYuB1XkU-loXAXVQ1LdbnXBZDdbd4XKlgN3WAR8QCfC_sxGYfWc509ehkN1ewQvW4KuoAL66guoFeg9wrCpXW9FzNg0Uc129cj431-9c9kN1NNTfgAARw0Dzu9UPAkAwaUp1Vb1IDYA3rl1GfnVYZ7ADegvFwCJYDWhZAbEDl8v7DrlX1tkKRm9Vk9SqxANeuag2xR-oM4C6gN4AaAJYODbvDwA06WPXrJSDeBUH1xDae7ng-oPpGsKODOeDAIA9d4H8ey8EQ13JZFXvXINedcQ3z19UPFjngK9WvW7-D4X8TKl4tVNmoNu9TnUyNXDTlQ9ZQjbqDOAlgPvbKN_rh1Dmwj0aMAaNf9ag1eV7WVPUUNkCdvU5UewfpG8NWnO8434PcOnZZuNXGZVsN5Nc3W6NnDcA3ENLsc4ANAgzPVAeNmnNA0sRq8A_4SNmVeJmhN3FZQ3ENBVVE0xNoXBpwJNnGBbCb-olQg1ZNHDRk0uN-dfPn6gyWKKDtuymUQ275TdW_HSNYTZk0n5RQgvUD1lLFegKNDQEhFjhy-ApDwAjTRPUBZ6TbVXt129c_k7lLCqKDQNLCg0DHBQSB9gFAeYbwXTNW1SE1ONejeE3ypRQpSy9154Es2Il6vnFLDAh8WPVapUjRM1t12mVU1TBzgKwqD29UDeCsKfjcuKogngb_XeZLWQ83lNkzfc22QdqbJm9NpjT3C6ge9r408uGLomRpe0AI03BNLTbc0z1PmfnUEFRQnFD5wyUDnDRA9OO6XsQtHjmFEN1BaQ3jNOzW02VNtkEwX7BEAGZ7RAS-fMXCVBAYQ1j1AhWS0PZFLRU3Bl29QdmAeKyOGCZusPgIDhg6zaU1yFzTdpkotd9dS04BDed54f5ULEtWauJLTo1ctgLchmS1-Hq7IYR3QDJhkq7ifMF4-KyNUn11ZCcOVZ14tNK0oNZCXx69NFoM4AnKDCrk0JNDNH0A5lV9ba0AtdzZq1kJi6d3X1QvTfM3zB1_CTUINfreHV8Rkdc7nR1SoeNq31adabQnFMkT7nB0qdeqEGhrzqpEoB8bc43Bl9gMlCWAyET0ZoRgZVYA2NZ9aKj2wJCVDEFteoWRW5tuzdQkpY-df4GZZqsXS2W-MSV0CYAdpRQW8FLbZcgWtWVba6NtlLcGWDtkQUUJjiU6VPGARLwBT5a-n3pO1jNwLmO3ct7dZO2nuUPpZD0xymTEkLgXYCzbLtrbVs1vx67Rq04ek7e55uAnUO4B-AvtecnjajoE6HJQ3QRkQXuJ7ZchQ1F7T61Xtrbbd7OA9vtJ4YA7bvEDHg1icgkDtAHS-G_tqLdS6DtqMUUJlYqsbxlztLFRcCb1lVYh2rtCHTLQJtesYh2nuBwUB6mVW4eYnLw_bT6VEdsHfh15tm7fnVcxmLbhlxBXgIAT4gPwSx28Ze8e1Bftr5Q210dTbZAmIdfIdgVJQLpWBFPtwoJkjqZUMSJ20dMNfB2jtjHWDlP6jYfSmwVIoLjR8dSLSt5wdkUYO3UVL-aSigxcUoK7CAzQCxVLZfadB1gBw7Tm2Cd47Qx1gBfHrqDnSxGqB3Yu7LgL4ZAvSXkBftmcQJ2KdBnfnVyV07TbT8eKQKGTdlZHj23-AeZbZ3qVkrbu76dk0YZ03t_LnEFfYcoOwXLwR4lr4wAkgEB0LgWXT6DsAAXT-2OdG7Xp351DVZ01YR5_h7FxxtgInHmptnT1XJdV7VV2XtbHoO0bursvAR1wMAEbl9R9YQuCNhRMGwBxSBXV-3TVHLXh3BdaXbV3kxQ3fnBnJtMat2Pts3We16d3XX-29dtXe56AsT2qr7K0T2rN2Vdi3YR21dI8aECc4qqcKC9CuoHd3NxpErY2_NynXbkONXXVd3lhfXWGUvArmUulHAOLWOCNZc7cylydtXak33BqXdd125BVQzTL5cAIT5I9qcYjlQ9CPQp05V-3Wu3512rYl6aYKQCXm-FBQCXlftzHkF049SnWm0CBfHqlD5I_HhUESc_rjOB2A8_hJwU9uHaO17dNPSACDtN1cSUSgHxdxDPt7BcL0DFrLbZ0fV8gA7lLaFgA7mycJzspoA2vjtKAhyfHFghMRymqdTgs2vR7y1ss8COXZVBHeWEgl7xZ8WeJPxeN5Oh_xfFGfeIJWS4lOlrfz289kUXW3FtAEaW0Rd1bb0JltvvZ951tTvUb0u95EZFEkRnvahHNA-EVhEsNuEUEgx9QVOT1QxJEcH1DOofbBF6x1EbRH0RPnqXy_8rPWOBsRn3tRFp9C0Bn1Lh2pVaE2hfQPaEJRexc6EYAroVaFl9FgMb0YJpKdqX6RJidMEmRt8X0CWR-fUIA2R3Ed-DO9I7UIXjF7RZMWsKmWbMXyBo8PJDJ5H_qwqt9GqBP3Q11Pehnu1_eZ7XmA3tdD7rdVdQHUm1wdW11b1YdQoDrAivZKJESe8VYjh2tVm5ZmaGEF5aAQPlm1bcwMsJrAKwSsAnCqwxiKhqBWamtQ4TwNUE5pfWb7UhAGEiQskKZkVqB4AVG6jANRD0XjOsAiKDqEPQJCDGiMJny0vDNQ1Aj4GcgiYb0Ls4OgCPNMIwAwTjr3osPrFJwOoEhAyBAwa8EaA5kqIOeDHsY6BIQMGhaHGgfyq4COqDcTBmApdq3SGmTsDIoUriDsdbL_ATszbAkAKBo8HZgzs4zvrqrgw6syhiKA2ldTTqoHGwMXgkg8cDSDlAvWwgAHbPIOtsvdL-xQAig0RoqDx7LbyrC6g3EqiK86u2oTqug6jDiDBg8sZGDv8EOymD5gy2xdGhMrYPKDZgzgCqDTg7PAYD0eIko3cLSmIP6DHA2kBfMxg8OxmDo7AkDSOBQHab0IUoGEPtskQw4NqDMQwINUs3gykMhoj5JpB6ekQyK2tIRYo6zosGvDCCCgBkJSyUs36vNKSi8DJ2TqD_BA2TFgHvJUPHsTbKewNsXAwZwGQ4oEwN2YzUKew1sTQ9vCzD09g2yRawZMMPGDhsKsNAwkwxTpzDmhDSy7D4fJOzTsZg2OiU409vcSHD4yBqBxCmArAPeIXms-x7scIOQAS81A67IZ8n7O8OfD4jtepxsVw8wM3D09uMjjyriJPieoIZEQBtsTzBhzwAYI0CTdip7FdpHAC4AsPFg4wwh4sCPQ_fTTO-iguBNsNLHIOJ1ZxU7RN86bObDoA1A9sZQATbFqxcA1Aw2yC6cuP8MyOdI8SNsjYAMyNmDguiyxUIoUJyPLDY3HL3jo6g7-hkD6vSjI48WyNQPyOXDubyFItA31SdIRzk_KHDRJA4NJo3A-Ua8DEqPwM1ggg8Ao1qIgyxjjOaQ_4MyDBJEEMKDLbHYMRD4zkmgaDGXG4M5cA6uaMODlo64ABDsg5kP4kIzlYPxAhQ_YPdszoy4PGjbapUaEyFcgNTjOUg1aMmDfo7aNTUwUiGOOj2o-gMuDiEq_SEGk6r0SrgFowmM-j1o6SPZDikLOB5D0HgRb2j4Q-EjFDYY-gMUYpPIkBt4ltG5hFjMIA4OfGh2JIPLsq4EMOYAHvIuzYjVnriMtjJw5oSLDxg8cOIjzA-sPhs044mM7Dc494S4jwI_MPBsKw6uO28Zw_AAzsbY1GDW-6uiECvDD7CKOqSQQ17ld-h7PqPKombN-wFYjA8BqJ4O46UPKCW-HMNiEqSBiOvjcw6ONGIuI3fSTkkzvopLjJYyAC2Ycg5U4IWLzpSP_4fwzyPiOwo21LcjvI_BMGCAo2nCUAKEySNmDNTgMOzwQ9I-SJGBtkOPGDUE_6OUChyLBPQZGE32xoTyEy6TdINLIKM4TOAqROqj949vC3sgmDshkjrWlxMmoD4zmx2kGzoqI6jGo9cNbjBkIeMCAHY92NyTvY6kMnjnqLZgHIKFmgYZEAUpoIfszjIwY8ShjOyjudriEYwOqCtBuNYsJ3N8QesRwJi4mQXjJwB1gQk-pM0TxyKlb-2s4BMDQSmLsEIsYbAiUJuCGxCZABkA1l4NSItk-JDNQjk-oDOTlk55Pk0eANBKxTfk9Jz9chw0EjqA9Y4kYVGakxwgaTVTnVDg83BNToiIGQvz6YY2RFLj44bmPFO2Cn49PaZT3BFLjzOQHrBjiTjKFSzlTsAGIQ1TdU8Ky5OvqJxN5Tq2m5NaTtvO1740iE7SPMTvqKxPYTVwKBNDKnqDaKiThKAJMnIQk6tN8TJZDMbDyi2gdND0fUzuOq9LoDZYUDzrFQPiOCozVK_w2CPYxIYqgnACVcAfFxNZoSvRKjbTbKECTbTPxpUrjU-GIThDgbOM4ZKo72uWqAzxqL9MyTiQLxOXDkoo-TbTdpOixXAlA_KNOgnDrdNxiKo_jhAzgyIROKi8WvE7nTGvbKOVkQgAE51w6MzVgvTv8HQNZovyskOcD6wLqOtqc1J6iGjFLK6M8Dwg65yiDs8KMMqTfgxBMZDKY-mP1jUQydwujZRmzMVGyIZ4OsD-8D4NzU6LL6M2jWQ5YP8W1g-LMNjwSNEO6cEY5oNuj0Y0kr8zXg0zO-Dqs6WNUTwQ2mO1jRQ5LPhjTaqZBxDELjGMGQiQwLMWzKs-kOBDGszkOVjVmNWM6zjs02NGjFQ97MpC2WnVB1DGQEIACikTpTh2A0TnYAdxWYC0O2AbQ_bqJAnQ90PATcDH8zOjzY1UpbDv8HSTezAE_sNtUQ9Ib3p9DKJxPZWToGJ4cQRxe8P6An1vdZQDW4rVjgTDI-gAodeAJONTaR_L0RN8mw-ROJjj9KE77S3BHaQRATkdPO3Wvc_wBTzsTiyPdIac0vOlzEE4_QDzQ87MAjzDbOoNP49c_opWtUwOuDNzaAixNy47c-VClUrskATkAXcwYTLzulP3N4g-8_bo88o8xwrbzfc4vMNsjivVgiApeLE5kTTxpPPoAgC3yMbz4C-POQLO89AtrzZg67Jvzu85_M7jw8z_NHzZQzWCV-9KHngJOpM5QOg87rCqMFaTaHngfjlLOix9QsDHjiFzZgNQv_T0XLaxvIB3KrLJABbARAsLFquiOZjykDHhs8T8jwNCTho3wtfyMQhTSWTdJBr0iitUzuPcoki6gossiixlN7j7bE6zbw6i41OaLM7NIsPD5OE8NULwi3-L307wL8OMTMjt8NnjJqNYu88zC2Yu8ETi38Z5Kai5ZO8Lzi4ViSLkY0Wq8zwBqWoqLtYJ2NWzSY-rMBjms6qjaz9s6GOOLQi0ijjOwgqIJGLGrIuzKL3iwOKns77E-ynsXi9ATHOPXpiOYATbHtx0T4w1S6WswS49yzjhw5Zwagui8wMCKWIxeOTjQC_ksFcMgmrJRctS3ouQTDgyOwWslc1RN4T5g4qFVLmS4ChlLZdJwufwLLIlyseh7DjzdLjJK4s_qay6JiGz3M3qPFqJzkEuTLMOF6PFjas2WOpjTSiHOCL1S12PdsyS5KA8Y3YukumLBSyXNJQR7GkBnjHS-sKFcK7sUvnjJwsDzlLj_DiOfLrAtMOJAk4_UsigjS3ZjNLJS60s7j7SzVBXLIi10sEcPSyyyTjTbOM6DLYyziPEjLLHIPjLIK0ijTL5nLMvcsnXCu5LLsPBssuLCS3BLOzF3CbM3c93FcuhLvs8mP-zFYykBVjeDRcuNj9K4ChJL3xCksPLx7BkvPL41DGhvLJ7Imi0r-nHZNfcvy6UsArFI02z5oVc8iusLvSyCMmQ0i9CvPTp7Pivbjhw4ivqQWq_wvLLaK01wwzmK_ouZDQy18h4rF44SuVLxK5CikrcXFwvg8X3NSs7c7q6Jjvgki29CSLQ9J6vkrLLPkv0oNUMQsyjpC0jzkLr05Qs-IyHHQv5zjCwgwszyJKqtkroPFMjgzP44IuWrhqhzP1KSaH4t4ypo3zNiE7K4mOizTbIbBtsd4I8ZxLo1N0jCrc7HcupLTEo8tSCg43NQfscq__iFLC3sqvhUOa66uVuQE9jyA8Y65mIdI3LHIOjLFS1Os544a6DwLLPXn6u48qy1X6Q40s2Irujey2bO7IRy8LMnLVE42tPTd4CEOmzEs0WunrNyyKtdrYq2kC9s_azkvvLeS4SjgsPyyZBGr46-wtqrQK2OM54LYymwAb86zMCLrIywStUTRK4SjrrSPJSvxZ26ysthT46PuvZjk3G7Omz7a2ethL9awbALr164kABzPK0HN4Nra7BgdrIgi-vyLvaz-svLA67ktDroK4qu4oBaAgsqrQG5tTmDGqxcNMbqKxBstLUGzBvmDy6y7nTrqMEhverx3Novob7U_uvrAYazmtercy9vCnTsa8PxkzjhqX6JrdM29PwDVLGmsMLwZEws1gha92zejF6ymN6bBANbT3WF7udAOzD66zOjq7M8aiczX8rIsyr30wEaLsf05avZLMqx8sDjQ1Iw7RTY6BWulyzBvXRiEWyKX5zrcW5YPrDYlJBuYc9dLiMYDSEqyHJKMyIlubj3GxvziIWW2TpETCM90iFbB8KfNDKkG5JvJtUGRSN2k800KPFbbUnBtijKaLDLrAeePFOGL3Yn_BwDPiCwteaTbNVvrDRQhBMTbgmzWB54sMgiO3DcABCMT4dAzuzGYcI1pskzca5dP2bcADdNGsyo0mvMYxmy1C0LF8PQtHTFm5au1rIs37ORL9m45u9AiIqlbUbWa6ZxiLpa26rXEz47qvXLENECSBbJ4wwPMbn67KuYAUw0cDVbUW-UPbLss7Ftmj0nNDv_romylupQaW-1uZbZYtlvYbr9EgpVbkWyjtwreGqVvY75W2kJAUj5NVt2knE_VudbWKxwjQTY03BMtbWE21t0728Lgvy92zkrqW0DU_ZaqTxqK5OaTLmzpOS8G41rp9QCvIZOQ4vO1GAbjoMBLutblAKOzXjcE7lNQzIk4ujFzAMxZM7jTAtZOtI83FFtOTjAC5P5TzOx5MKZ3k05OpTIO0cDdTc1KFNjo0TJFOxTDk8lNxTO4wlM27KU8hRiE6U41NZTWuhrtxowu4VMZExU2iPFCHAhVNZEjINVP4YBq0KwmClk01P9ErU4TYETeCzQuO7vU0nv9TJgiuzDTQuxbsi7qVsVP401WzLZTTbO-xNLTpUCtNa7OihtNamTezxPfsountOtU8kgyh54tO__OdsjO1RMwT7k81vdIeeNNNMT_OBPsx4yu4tOz75avort7BkLxN2kLC63tnWK-7DOd7i-ymh9b3uwNvyLQ21mijbkoh4DjbgjqgtTbl-6X5VzFgPNuQ4R0wXsnTRM2r1GgJC7tuMOB20qN3TKEugiPT3grTOJCyaypt5Kmux3s5s_mw4zQz_Y7PDmTeM1MigzAyODOzqkM3GjQzVq3DMU6-IyxPN7w2BfCozX-6X4_7Bm4kK4zzGATPbOb-2dPNOn-2_CmOPwOEBkH9M6dsm8pm1duZrlm9mu8b9sIwf7A-a5JMCLAq8WtuD4i2WvrAMWyAopbCs4cvWbxy9bMpj4hjEu11rmyIePrENM-sF0r6xjrDroO6Fvfreh1Zqsec66SuTrgE2BumIcuME4CA_B-EBzr7wzYd2Ha49BKIbam5QDOHm6wt7Ur1h_8S2HhjuEBKbWY87NSHR6zoMnrqMLdu2bGs7evCc_K_Euykik52vaHDG-KszyH6wYdsbCq8GrxZphxOtUT75rNvsb_YL4eW0zhw4elHGQM4eTDY5hYDhrnh11xiolR_4dmOgRzU5YbjKzht5jUZkcDxDH3J7OJH8h-euKHXKzECBzn0nyuxLGY-oeRHSR3RspHU8oxtGHCC2DthbyxwtztbZh1RMCb0m9qvNH5R0Tt_Ljh34fVHFw7UdsLrXJ4fybHqPscBHBAEEcNOYB_fT1Hdx1tt0HO2wwd3HbDgIBWOqThQsnbKayZsXb6a-ZtcHN225uiLeo-Iffbkh0bM8zVa4EsRH_25oSEb92xYPxHbaw05bLMsx5tyzeW0idRHIx5EvKHwY1Mf3r6hwevGzfR9UZxjBGxysRLFg7Eeknqh29tYnIR3Cc7LzK_0dTqBJ3Sd1raJy2zkbvKwUNknus5ie97-cmZtJLyI6kdvrA1Bkf_baxyiswgHCHOuUT5g6PtaT9-3sdIQTh3ccVHupycd3HNRzgcgT3SJxO2YLW7cetHLct1uV80AHztA7A0HpPHg0vH3BUoZCpSAtYHopLwjTNAOXRS7YUoYw0H2m72iUDLjg6fUDLB0Zs-IjM0rNVDQh5PxQnX24WrlrHJ_DsBLvyArOCzPs_yecrkSxifvjjamlxSH2g_kjZn3szZtEnFgySc2Dop6HNsnJZ-me4n7g6spjcLGDmcKH4S6ctMndZyyfTHes1LPZjrs3mMDHtYDmdVn3ZzbPljYxxRsTHIp_2fkng50XPhzZ2zmdRzs8LUOwA9Q_HP5MQoA6fCzrQ_JDZzuc17IVb99H0Mrn72wgsjDFc06ugbFGDXPO9tWw0oSdk0q3O3zNAB3PPzn5z3OD78605FvnNI-I4sjN59sOgLUAPKMW0QC8fPScDcyAARnewx-fQDX53dY_nKF3-cTz02_udAw6E3_NYXDaxBdQXZWY6Lc7BCzGvbbOm3QywIUJO5KZkCPIEDE0TKBbDraIapGBzaLGFahzaYu11iuybnNLvhSOAnNrNQ3F9lBkcaFEUK9Yn4uTudTLUNxc-nXWE2yBnMu0JchqIlyGqkcrBPwBKXRZxKfdC99HNornXM4XQ4yVJ6ArVrKA_-IIX-wPiD1QMoLEAEkRl8bzFyZlxIqWX99JPS9KTly6KmX8J9SexjmA-fvC9MQJADZAXRuPSzKLniQOwnLUC5d-XuGwkM8nnmkFdMXoV6xcueJl0mpRXIDH_Rv0ADNvTFoYc1KMf7Mo-LKSytPL9yrw--AORsHcVzsuZnLBrIdmb-Sgpw4KeCqFzhcjZ31w-Svl_VdlnQ2kicgnLV9EKLqbBj4aVXI18FKaXGeG_SSXfRJ-LTXil1JerCskjls4QHgwygfTRis4D6gN6MI32ADQMlD1QPcGNeqj217tf7Xh18deLXEl1iILXYl1pcgAOlytdFXFF-8dUXY4DchKQuoDLq9KmV_pi1XvVxmcInWZ0idCS1l8v78e9l3ED94KaEPSeXrHm8d7OpMzYx2M5jI4yxaDMyYyCy5jO5qxahDOmZEMOVkJTeUOzKDbNiVqBKR4WXenZh3geNyfrfoON-gj03IxpRwWsyV_fQRy-RpGAr8wAKDYs3YJoxROzTgqadAUXNyeSiMTgCWbUql_CrBsAEzIPKtiPKsOBmMzNx5ro2xNpfL8M18now5y6jCufFXiTr2flcxYFkp_cmZFtdYKQIBsNm3CnAnHBSp18Nf8oi6jdezXd1xazsoClnyC8AGECkB6WAIkjfkDpM1FKzA5CHnCxSNCLVhY3RwKWL4WKJzhYng1N_JDoQdN5OZtSOcCWIUI3Q-5uaEwAAWsiIO2LR6zAHgoIfXnEANcSu79k1Pg-Tzk7Hc03bKNbtJTtu_7vScmHBNNLLdd8ndMQxUyngEWsmOPDuaZDgQCHEfLPHyRSEU1XeOTmLmbud3SMA3cZuNu75Mt3j5K7vs8Ju7FNm75d1FN27Qm74QIur4-Ijt3lh6ZxSgrLgfcV7WU8fd7A50jnBW6JkJSxb4UoGVBhgK-F7un3_tnrIbDLFKHjP3N1lYa-EZyC_eIEX92vQ_3H6CICsIb9wQCAPhsCA9yKDyM_ewPA0KHiAPRzJED_cVqIXe33G4lg_F35Qu17NQuDzMAeCxUzdBuIN93g-eCBDxMKcgdNjnjrO3SJg8UPxD_g-RIA0MQMzys9-hA93rhBYTm4HhDrfgyyigirjo2J0Q8kPBDwNDqMUglw_d37XjEQZAd-A_jNcFCHHc93XDAIBKPPcOCMIVq2w5BmyzhsfQGzjKxpTdbIZ5Re9oWOhurg6kaiqf6AW8D6DR3dj9wKQKDgNY9bq-gLY9iQmAPRhQA2xhwgOPcoICMbYCd1tiRk0QDGQePNAJKNvXyNzKMQi0QDTwnUiRu9O9DJHA9czXFHFRxunaqZ6dbILWPJYZ3riN7c0ovACMBPAuqvEJQAKQmZtQA0vB9hwg1tPk-lmOzhHb0Q9VnZiNWPGhBZsarVqg7cwYpnUizw-wCLalQ_VgDaRDEFtbcOogtkkIE2Y6O5BdgZNuwByIOADzhOQY6BZBWQMtlPj3zGz6uDTWtYqVC5B-z7PCjPFoKgR02OABu6WpOVGOhLlZEgKpmg2wHNbPPy1v0OzwDz0_QjAXGK88Sg2wAhRaIY6Ms7lg7ADIiquEtgqqc2T9CC9XA3eDzhgACL_xLs2wAqC9lQDNqghcAYL-QA4vEtqi_K2LAKrbLCpz_IBtPkgAg5EM7_XHagQaDiQ78eWcKPCD3roB46zAj3mDSdOcTnS834NwDMCWYqJLEoJwrL9GUMmaAAC_hWgevJqNAqAKXyxlO8HcvdALLwy_sv8r6KbHgsr7Q6Wa_HslANAbmMQQD10xOK-RWyVoxJwAERas9YAiQDpBPAXVFg6aaZgInYcvCw_hj0vbL0y9yYDqCLYvPrj9y-3AfL9sCtQuQP0BXAMWDq96vSwOqTH2C6MZUZAq8D_iWkvgBKDTgmRP85A4-gJDkfIisnCjVM48g2jWveDra9v0UkL1BQEcQF1p9Wzr1QgyvwoHK9daTUoTPEz2mquAhvur6KANAJb-bCGapL0_3IQCDho78O1W8g6-WtLzLCYO2DsZq4O3GAQ6_wEcPJocv4TqAMavoZ-Bw9krDhY5kKGMwo4asRxvQMxXbiONOVqQgyDeNXYNx04dvXToyBHig07Mh9OqQEU7RtLgu3hq4T285upWRug1xqLeWG5gFTtE9QBuYDQPpT3AQBqDdOKqL3eCIATbBaApbbmAOBALrOg4NdCEwzQbfUaO6NJG8WO99Q0sHhrZgzy_LJbuq0l4nKbBkULpeKb71cjmoYfXnB4YzORvPfq5qRCgw8MoWzvW_GPTgs3jG827we8mj8s-WLpOZ77DDdOV7zMg3vo70x_l9_-C2yPbX1i-91QgRvkhuYoKLxYcf2hnbigf0UBB_ofZgxudN44zgh_FuSH0bwofUPKTsYfLLFh-qnVFpqdOmJtIR_UfJtKR9x0FHyc5UfxHz1wsUdH6s7Z7syKJ-wypAzVDv7iTntvus27_5MiI4ez-_mAJkBx9hfY-6gDRbVLNF9aTCjOvKyXe76LtaDQH8e9iEvH0Pc4AAnyuzCfd776jOCEn0-9SfL2zJ80sbmJ-_fvMX7a4kWZexHvVQPhKp_gfv9FB8wfmn10I6fyH3p8xUzn5NTo7l4uh-XimHzAy2fLtPZ8EfA9PdRUW43ybSbzR4lRYw4HCEt-UYeH2R-SWCkgPQLGtHzeo5GvqKJ_Mfmy4ytsfmD_u_pf-JwowJfvaC2QNf4X57dFPXWF9fAfcKLWd5zIS3d8xf77J99aTD3-GJPfsTX4rHXfTEFwhcB18D9nnspD983fzjzqDrff34iBdYMh2pILU1g-98gnHL7l8XvPTjsgFfAzjsjFfj79EDPv5XxkSyfp8PJ8aKin_u_KfPhJV_Vf633V8t60P7KYqfUtvhytfIAODTGfnXyxTdfBn719-k_X8AaDfJtMN8m0o39bJzfMNJN_Wf035R9jfLny7QLfiQKt-2Yq3xtjrfWsoR96XrnzR9ufe3yiYHf7R1QcpozlnA5uWvb-GKaOwoL8TiOg75_0oaI71g7OwE7_g5QAhDjO9aaTjnO_caEmuCgNvcTx9eiO4jt8c_7qX6lZZoZ32l9mXyPxzeTkmP3l_dIeP4d84CLbIUNSC_P03hTOfP-Z8QMWv1iYsUOq_MPdqWfzDQ5_1slPs6Olf46yrf0v3Z9q71TlerbfDn4X9r0pKzh8zI9f-R9hCHnyWSefMyN58dHTZy1AcfF325eBX99In_Y_gn6jAp_977MhjsQY32dKDz024e8blP50rU_ou7T8tUmf_B9R4Ff_aTYf3apZ9N_m32vTF_dgKX8H_l4kf8u0Vf_uM1_sgnX9K_uYrL8u0hHzt8G_7fzmud_qMN399vtsp_8Gs4B_qjAh_sEcR_hH86oJx8oxv5d2zvKdvlrkdIvvu8iuBsMOPqJcWCDNc-LvNdohqLdzANP9snLP9awPP8a_PxMEgL2dChm-8SVjmsPMF5xN_pcBt_h5Nafl6osUKSsmFMWBRLJCZ4sk18WqDPIy_lihsll188_kbwz_vh8L_vaQr_v_8Qlrf8TaPf8JfrX8yTBUpAAX6QP_nL9rZIyNgLtX9uLA4tDeOoC9furQ2_vaQO_t2p3zAZ83_tARGWkC4jAUPI-_kADxRox8JRpADurqP9zvmZdRzkld3Lgn8-Plj8iAY-RSAbMgV2IKduVsKcaxqodqAR6taAQ0AllEwCYAfmgmvqwCaARv9hWugA3MMbcDIBwD0ULEDtJkVxeAb6he2AICkUPIDKtCICYqGICNvg4DjAX_9u1BqsbAe-8TVtcMb_t2wqPsWAqLJL85JCoDgAToCkIOyMn_voDTuJKcugbYCQAUgxS0N0gIAY8dbbP59SZmeAozhfB9QNACMiCF90Riz8WQCgDRdtd8lIHF8ztpsDqAIORkvsZcx_rH9Edo-Rsvpk4Z_vl9sfv05U_m311pnaNwgVHhbMF-9GfrxZdgYNYA_ligtPpVpZAT2pWgSZ8GgSCMsPj8C5AX8CKlJoDmRhUpH_noDYJDSxpAVihJpG0pOgaoDG_uIDYJDr8DpgYCxaPr8jeCYCB6AiC5ARYChgUSCe_lihQAcb891s4N2Tq4CY_vFcJ_t0gzgee8_Abj8rgbe98fkV87gVEsMkCodV_hEDElhwhngeXs6LK8DVge8CnFOwCFPiABQSEp9elHkDPgXB9mgSxRigfUCZhvrsgQQqCpfqCC5JOCCQLpCDdAVrJYQRr9OAFnhEQYSCJviiCKgcSDMQVaDnFN9RcQZeJ8QeX9TQaSCf_paDKgUb9IUKn99ptLMjgfFdujoNcv5GgD1gR5M0AeGwMARpcMnrxc5rmzcTuPSDT3jl8k_r6gAgYCgpBLbNzlvbNeQZCgngTV8tJkz83gQkCo8OwDHjAwCmftKDWPAkDzjnUdaAcGguAbkD8tpCgseIUDBATGhu1FIC1QfABZvpqCYQYoD7SBAokQfaQ1AZ_8tZNqDtATCC9Qc38pvpeJW_jFQ7QfN9BfjFQ-wVMt3EtYDrQc6De_iMD-_uSC6VgysoAT6DOTvAD8xk1ctzv-BR4JvgqxGOB2oLHgqBG8ClgBx8s1HsBUASu4XcAyD-PhcDmQdk5rgQT8OQUKdKNguceQY8D-QdmCTkMKDRpoKDRQQWCogTEDJQcABbwV9xyweBDkgcvBUgekDEgJkDGAVBCwwTwC6wZZZO_o2CigZ2Cqgbxs4QYygvuFODPDBitVQQPRcIfaQlQSXpTPr2CnQTL9zQdr99QWOCN5Nt9BgTaC6gSSDuIWMDNwZhtTfusBetjHgl3ixx54IdxkWMF9MyCwsfxiKDCHvu83gUmgWFshw3gZDhQ1j0JFIWYto_h5MLvnH8pId4tnwb4DL3iNtJlkmDglsZCH3pyCNINyCiNNQCtVlmCXgVBC8wflsrll8C7IT8CLVggtzIZIDyIXUsvIX6Qy_h5DZkPf9AocYxqRhCCH9gcsXxKxC2Pg_9a_kJCUFA6CQoZChxvklCLBExC5tpFChgalC9LqlD99plC3QSFCZwTFC01MaCIoY6CrnBlDTuPFCsoflC8odxDglnVCvPtVDA1s1DvQW4DaQR6M9IXiNvAfGDXwZVDr3iyCRPs1C65mVDIUKmCqjFQDhoUKsAIQ5D6viBDGvpigtVoWD6ARKCpQTT8ZQc5DIoaft8oQFD8obOpmwVNDMJgCCS_odDvgeqDRoeX9OwdlCSbC_8lARdDcxClC9oWGgP_tdCcoU9CmcGFCdQfdCS9NFDroY1CqoZOD-oZxDvoWwDqgadCq6IL9UoY9CYaFYClfiFD_oauCQYQVDIoQjDylEjCtnMGtVIWYs2oTSC9wQldO1NtDseLahAECmwMIVx5XbjgDKOFwQNIRkwY5tucTwYsC2UG6IbwQ-CXPBlAcECTDnGDTC6lFP8fAQmCkYRYBTIZFC_IWNCZzrkMfwWECeQbJI7ITNDQIbmCRQfmCgYZECEIWRI0gROpUISWDWYY4U3tLoMPIbtC_SMFD3obWAioddDagQLD6oUbCX4D5DGgeDCzoe2DbYdn8roZbDIhHRClYbBJoYaooXoc7DeIebCaoZ_9JTrlCHYcjDgYcVD3QaHDudlcsMYZMtYZCws6odGsawCJDNemJDVZBJDxpssDYfoBDC-PeCNgSKDtgSbwVIbGDm6HnDdwcDcMvvFtW7nGDzgUyDEwYNDCvpCgpBFetvBM2svOJGB2AYvMjxFV9ZYRHt5YfNDwvk18GwV6NdPklBu1KSsPDA6D5wQxD7ATXIiLtdNoLkbxG4QZAPDMOC-gT9CegUhMRwTFQDQVrJx4S7QFwVigBwRICAYYfDEYTxC3QU1CKQTEMxHu1C8YXSDNrpXDGQUZC3wQU5WQTcCZ5AvDV4DesJ1BmDFwRv8iwe3CUIQz85YcBD9kOt84IY1RloSc5iwdkDlUBtD_QQ85GqBaMh4edxbQTmsqLGYCHoZPCsyEuDMET7DiFDPCZHE09B5MugSNtvAPDAaC7obvCcES4J0of0CYqMvDoQZvDoocfDhga6Dudrgjz4VuDjvqx9HgFpCYARd8_Qd-MkARABOYTats4cGDwwVgDIwXddqYSYR74S-Dq4VigkwfXCo8O_D4AHeBvwfOcM8L_8VYUhD1YX_DYnB3DAEd3DgEXD9QIWAiCIQ2g3MCkC1YW2cUIUWDVodBD1oWWCJLMbDaAdYjkIRrC4UGtDRdrWCPgWGgNxHz9B4T19h4QPRR4TAwzYTDRCPgvDVfttxSEVrI94dQjTios5xwbQiQ4awiz4WHCPQfUQBITWBzfq5Ye3juRJAPY5wgA79-nk78MHC78cHDa8PftO9iHDLBSHPoB53v78KMInC54M4cgvmnDEASsDe4V98gwTACFIbDt84SKCkvupDBkSXCWzg1dy4acC5EYZCcfjXD3wS_DPweJ9AxlrNmTn-CEEV3Dwvj3CQEWYisIbMgvgVigqIVIp8IVFDDTmUdjTjiCwYfaDSoeVCmQNiDmEVPDMkRkjwASb9L4VSDGYbADtdNx8svjMj-YYCglETMgUwRQC7Zg8CNkfoABQcYjHIQrCXERAirqFAj0IU4ievLKCkUAPDzob8CQkUbxjjucibTigjCIR4Z0EbcjQkdgiKoSuDT4Y8j2Ec8jawJ6DVyMOc88HmM4kDkdujB7Mp1Ayhf1oRAREXNQyYS4gKYVGDpLrIjeYb1CFEUigAUYEDZnGLDxjvkNJYTZCKwbD8IUVsiTEZnDmLDCi3EYhCbEUyiUIS4g_3gB8mfsTCxEGCYmrpmDgQeiiYAB4YioSbQIkaSiGuNacmDkQiyUXaiKUQ6jB_tkic9gdN1gK0izwO0i13r8d0IIzDOLsyhxkYe8y4awZpkQKiq4Y_D5kc_ChoeyDlkSv8iNPKD7YWvQaIYcjSgTDRygaRDJAdaiG8FxDyUZSjdfk6iL4duCXAR8jx_p1CQ0T1Cw0XMjIUCKixPvvCVkdEs1kTZD4IZYiHEaWCkUXsiZkKiiE0dRCDoUbwT_gPQ00fcjPDJmjxTNminkY6i80S8iC0Vwii0QGiuPvjCaTiuw2UdrC5IT4iflqGCtYdyiIwbddlrpax-UeWiH4ZWjhUbXC2QVihCfmcsJoemCZUTJtaAfYiqfgiid_rAjEgRYjzoJ4jeLL4io8BuIjkclCTkcf8U0SbQB0akiM0WciqjhcjLUWOjwMWwjAUK_CvQVfDcYaXD50ZfRPASuwDIX8iq0cejX4bcDGqMEDZzqEDJoZciN_tEDONprDRdvECRGPhjLEe4j1YdWDoEQ7xiwMijPgdICv0ccjMAGZ9MtOHIC_oBjTkeQA9TjijB0ekjIMeOiqUc6jcEV28LfgUj5hF44HTqUiaXl_0KkWO9cNG78p3kQ4A_iQ5ffpXAF3gH83URY9l3tXwcLjqBCkJJD7dhnD1viuiPJgMjZ4MpDhkYXD_EMXDr4fBjdIWWigKIQDw0WhiFkVGjlETGi8Mdp9NkbV8FUaAj20ajADkYksjUU2CWMd9RJMbhcvoXgjALrPDdMvPCiLvggtASvDn0Q4gx4TciJ4SSij4Wkj7UWjCIMewBqUZSCdwXZiJkf1c-6P6CUMX1DXMZGi64cmCOQbWcvMSUDwUYqjrIH5jdkYm1r0Rv8W0YiiFvPRjsIfGiJnIqCe0TFQIsSH8N4dAR55vEBiLraiPtAljPoWNjcRFciC5OljCUXxiWEWtic0ROihMVOiWPjOjisYGiEMQgDF0UIi96H0icgWuiotBuj0npIjt0bgDd0b6gKsUKiqsdjZ3MUigz0ZQDL0d9R7IUAioUT0itJorDpwTeiVoXejvEcwDH0VejXERv9qwV4juAdrDesfWDGMSFiw0EmisEXiiM9HOCVsbmJYYZliwMVigRseFCYaBNjILrFjpsY6hZsUyMosQ8icsQJjc0Vtj1lm8iisXBiSsfuCWlPuRfkZVij0W5iasR5im8NhjxYZoiGsb-imsbNDmfr9jzoP9i_SOwDCMXigaMaRjWlADidEWqj3ZihDqMfejxEZhC_EQxiuvojjQsSaiiUajjrZBaisscNi9MfjiYqITipsQPRzcYljTcdliT4Xbi8sSUBhMW6CU0GS8EHJE47fjI5N5tJjkNOg5uIKO9XftUjPfnUjtNGpjjNJ6BmkYH8g7qVcuWBTMk5tTM5MIZjwtt0idkRHtTMf0jc4YMjKWAXDzzjZixkXti50Q5jrMU5i-YeziBoZziT0bVjPMemD_wULjvsXNCU8X3CAsbWAgsYai0UY7CwsUbxV5jVhvqBgsJgF_ND5qOjBMZtjh8fljXkYWjm1P6j88XADLvhXDQ0QejiAXP90MUsja0ZZDF6A2iYVjXiaAHKjfMT9iG8TF9xcaDDOscDjHEQ-jnERrjLLP1ikEd2ou8fcxO8R_M-8VgsD5jgtB8TTiR8XpwCsfTjdsYzj9sQIjpOEuiTsWIiYASGCLsauiXPDyj3bjGC74XPj5ES5j_kUvjo0Svj3saCjvMbXjIUfXjTEQtD2sRDjLEbeit_qriYASwCZUW3DOAdDj30f_hO0QNjE0UNi_SDfiScfWR78YPNH8d_Me2i6D1sXlj38WPjp0RPjqQdpD3AROoWcbPj90TATD0WXjqsRXjRUTGiNEZKiBcXyDUCfKjd8RgTG8VgTKwQRjIISDi4gbBCyMQtiFcR4iVceoSzserjCUBQSr8T3jkFt3i78XvMmCQPjKcUPiMQTTiP8dztRMR1sdgBQR_wBtQ-njJjwID4gXcmCggQMSAqgN4ALsr-ByQIflckbpQ4pMnV-ALZAcANETbIJigVYFr8lQtA18gH-ABCD6AQiQBpyQEgk8wP0knYMPBbmOUAQQIESLpP_BzKJphvaG_0BEKUTqJoSIEQKvBUaFlo8NOaBvaAAA9U0RQyHAABBKAgqwWzxgoFok84HACrPLonk6KDay8PonTkaImbubomjEjaimwPj6tEiYkxErKwuwN2AewG5g-wG-xKhNonXPTonDE2eCP8D3Ck0OFDbEgYm2eaYmFwRkxbE5-6TE5Yn5EvaytEwB7REs4kjE7zRcYb2jPE_YkgARTFliPokVQTomdE5YnfEoPFbEwB4lUAEkzafEhKvOYlD3B4k7E2qLTEoV7LUT14XPHl6tE5-4DE_wLLExEnKvLrSqvXTwrmK4k7Ej4np1JolSgK0CRANEn-QDokBBIq7gaIom4ASl640Dwk-4_5y0AX0AMFW1w2McGjmgb2BzAAqgKAeQDyAIAA`} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};"],"sourceRoot":""}