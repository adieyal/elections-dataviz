{"version":3,"sources":["webpack:///./src/components/TurnoutMap/map.css","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutMap/map.mdx","webpack:///./src/components/TurnoutMap/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","stylesheet-tv","legend","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","stylesheetFor","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","filename","concat","getRegionName","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","_this$state","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getTurnoutData","values","jsonDataFeatures","geoJsonData","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","legends","text","parseInt","getLegendXY","it","data","enter","append","attr","center","projectionCenter","polylabel","style","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","electionEvents","getElectionEvents","edge","error","console","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","curProvinceData","item","react_default","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","TurnoutMap_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-map-map.5ca56915.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__wglKN\",\"loading-spinner\":\"map_loading-spinner__1tubS\",\"tooltip\":\"map_tooltip__2u1Rv\",\"stylesheet-tv\":\"map_stylesheet-tv__1cbzd\",\"legend\":\"map_legend__hpC2c\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"tv\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-container\")+\" \"+className(`stylesheet-${stylesheetFor}`)}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToTurnout = parseTurnoutData(values[1], props);      \n\n            function getMergedColorWithWhite(percent) {\n                var originRGB = {\n                    R: 0,\n                    G: 255,\n                    B: 0\n                }\n                var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                return `rgb(${mixedR},${mixedG},${mixedB})`;\n            }\n            function getFillColorFromTurnout(turnout) {\n              if (turnout > 65)\n                return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n              if (turnout >= 60)\n                return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n              if (turnout >= 55)\n                return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n              if (turnout >= 50)\n                return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n              if (turnout >= 45)\n                return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n              if (turnout >= 40)\n                return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n              if (turnout >= 35)\n                return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n              if (turnout >= 30)\n                return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n              return \"#D3F6C3\";//regionColor;\n            }\n\n            function getTurnout(d, i) {\n                var turnout;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    turnout = locationToTurnout[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    turnout = locationToTurnout[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    turnout = locationToTurnout[iecId];\n                }\n                return turnout;\n            }\n            function getFillColorFromRegion(d, i) {\n                var turnout = getTurnout(d, i);\n                var fillColor = getFillColorFromTurnout(turnout);\n                return fillColor;\n            }\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getFillColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var turnoutColors = [{\n                text: \"More than 65%\",\n                turnout: 66\n            },{\n                text: \"60% - 65%\",\n                turnout: 60\n            },{\n                text: \"55% - 60%\",\n                turnout: 55\n            },{\n                text: \"50% - 55%\",\n                turnout: 50\n            },{\n                text: \"45% - 50%\",\n                turnout: 45\n            },{\n                text: \"40% - 45%\",\n                turnout: 40\n            },{\n                text: \"35% - 40%\",\n                turnout: 35\n            },{\n                text: \"30% - 35%\",\n                turnout: 30\n            },{\n                text: \"Less than 30%\",\n                turnout: 15\n            }];\n            \n            function getLegendXY(i) {\n                return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(turnoutColors)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (it) => {\n                    return getFillColorFromTurnout(it.turnout);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(it => it.text)\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getTurnout(d, i) + \"%\")\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .style(\"height\", \"30px\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---map\"}}>{`Turnout - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the turnout across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__Gu08M\"};"],"sourceRoot":""}