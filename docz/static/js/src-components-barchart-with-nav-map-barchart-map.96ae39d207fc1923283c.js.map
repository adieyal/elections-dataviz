{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","BarchartWithNavMap","onResize","react_default","barchart","map","BarchartWithNavMap_barchartMap","provincesData","barchartMapEmbed_className","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","MAP_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onClick","onPreview","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","loading","react_loading__WEBPACK_IMPORTED_MODULE_7___default","color","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","topojson","projection","path","parties","availableCnt","party","b","legends","getLegendXY","selectAll","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.7e6dfe69.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"barchartMap_tooltip__3irZv\"};","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div>\n            <div className={className(\"barchart-container\")}>\n            <BarChart {...this.state} />\n            </div>\n            <div className={className(\"map-container\")}>\n            <Map {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart-with-navigation-map\"}}>{`Race for Votes - Bar Chart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}