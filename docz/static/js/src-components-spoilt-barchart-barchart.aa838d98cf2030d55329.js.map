{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.css","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/BarChartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchart.mdx","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","chartOptions","percent","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Math","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","dataLoaders","getSpoiltData","values","spoiltData","error","console","data","parseSpoiltVotesData","parseInt","Valid","Spoilt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","SpoiltBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-spoilt-barchart-barchart.42c59aae.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3yxxz\",\"chart-title\":\"barchart_chart-title__3RHv6\",\"chart-body\":\"barchart_chart-body__3x1qF\",\"percentage-label\":\"barchart_percentage-label__zQdUV\",\"chart\":\"barchart_chart__1_lSr\",\"large\":\"barchart_large__cgVCh\",\"y-axis-label\":\"barchart_y-axis-label__3UnAe\",\"y-label\":\"barchart_y-label__1I4tN\",\"annotation-line\":\"barchart_annotation-line__bj9Mi\",\"tooltip\":\"barchart_tooltip__2BaaR\",\"grid\":\"barchart_grid__2TlS8\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"spoilt-barchart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"spoilt-vs-valid-votes---bar-chart\"}}>{`Spoilt vs Valid votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__UywT3\"};"],"sourceRoot":""}