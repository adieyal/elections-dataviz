{"version":3,"sources":["webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.css","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/BarChartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchart.mdx","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsData","options","eventDescription","query","gql","_templateObject","_templateObject2","provinceName","getVotesDataM","race_for_votes_templateObject","race_for_votes_templateObject2","muniCode","_templateObject3","_templateObject4","vdNumber","getMainParties","_templateObject5","_templateObject6","muniRegName","_templateObject7","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","__webpack_require__","d","__webpack_exports__","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","container","width","height","className","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","tooltipDiv","predefColors","svg","parseInt","document","d3","x","y","YaxisOffset","barSvg","barTextSvg","this","draw","chartData","partyColorsData","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","name","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","barchart_partyColorsData","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","regionType","muniName","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","getContainer","setInterval","events","window","console","clearInterval","Math","_this$getWidthHeightB2","d3barchart","setState","event","newState","detail","refs","vizcontainer","react_default","a","createElement","getRegionName","ref","style","dataLoaders","partyColorsLoader","Promise","values","seatsData","error","data","parseSeatsData","RaceForSeatBarchart_barchart","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","e","toLowerCase","indexOf","alert","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","type","placeholder","onChange","onEventDescriptionChange","item","key","onRegionTypeChange","disabled","onClick","onPreview","concat","replace","RaceForSeatBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","REGION_CHANGE","MAP_PREVIEW","parseVotesData","firstEdge","nodeData","results","node","el","validVotes","partyInfo","parseMainPartyData","locationToMainParty","edges","partyResults","map","b","beautifiedMuniName"],"mappings":"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","file":"static/js/src-components-race-for-seat-barchart-barchart.ff983718.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province:\"\", party_Event_Description:\"${eventDescription}\"){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(province_Name:\"${options.provinceName}\", party_Event_Description:\"${eventDescription}\"){\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  ","import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\",\n            location_Name_Icontains:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\", \n            location_Code: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n          event_Description:\"${eventDescription}\",\n          location_Id:\"${options.vdNumber}\", \n          location_Ward_Municipality_Name_Icontains:\"${options.muniCode}\") {\n            edges{\n              node{\n                location {\n                  vdNumber\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                      }\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n  \n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event_Description:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event_Description:\"${eventDescription}\",\n            location_Province_Name:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniRegName = options.muniName.split(\" - \")[1];\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n            event_Description:\"${eventDescription}\",\n            location_Ward_Municipality_Name_Icontains:\"${muniRegName}\") {\n              edges{\n                node{\n                  location {\n                    vdNumber\n                  }\n                  partyResults {\n                    edges{\n                      node{\n                        party{\n                          name\n                          abbreviation\n                        }\n                      }\n                    }  \n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  ","import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport gql from \"graphql-tag\"\n\nexport {getSeatsData} from \"./race-for-seats\"\nexport {getVotesDataM, getMainParties} from \"./race-for-votes\"\n\nvar API_URI = \"https://elections2019.xyz/graphql\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n  cache: new InMemoryCache()\n})\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            colour\n          }\n        }\n      }\n    }\n    `\n  })\n}\n","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n    var svg = container.append(\"svg\")\n        .attr(\"width\", parseInt(width) + XaxisOffset)\n        .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3pUzv\",\"chart-title\":\"barchart_chart-title__XIgPi\",\"chart-body\":\"barchart_chart-body__3UlUe\",\"percentage-label\":\"barchart_percentage-label__1nilh\",\"chart\":\"barchart_chart__zds5v\",\"large\":\"barchart_large__3YEo-\",\"y-axis-label\":\"barchart_y-axis-label__1NS72\",\"y-label\":\"barchart_y-label__1h4yo\",\"annotation-line\":\"barchart_annotation-line__-DjJK\",\"tooltip\":\"barchart_tooltip__18QLh\",\"grid\":\"barchart_grid__kniUI\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className, chartOptions);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>RACE FOR VOTES ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              style={{width: this.state.width, height: this.state.height}}></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n      //  console.log(\"chart component\", chart)\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents\n} from \"../../api\";\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        if (this.state.regionType == \"province\" && this.state.eventDescription.toLowerCase().indexOf(\"provincial\") == -1) {\n            return alert(\"you selected province region type but didn't selected provincial event\");\n        }\n        if (this.state.regionType == \"national\" && this.state.eventDescription.toLowerCase().indexOf(\"national\") == -1) {\n            return alert(\"you selected national region type but didn't selected national event\");\n        }\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n        return (\n          <div>\n            <h3> Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"Western Cape\"\n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"City of Cape Town\"\n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={vdNumber}\n                            onChange={e => this.setState({vdNumber: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-seats---bar-chart\"}}>{`Race for Seats - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__tUXug\"};","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst BARCHART_PREVIEW = \"barchart-preview\";\nconst MAP_PREVIEW = \"map-preview\";\n\nexport default {\n    REGION_CHANGE,\n    BARCHART_PREVIEW,\n    MAP_PREVIEW\n};","export function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            validVotes: el[\"validVotes\"],\n            percOfVotes: el[\"percOfVotes\"],\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function parseMainPartyData(data, props) {\n    if (!data)  return null;\n    var locationToMainParty = {};\n    var edges;\n    var regionType = props.regionType;\n    console.log(\"parseMainPartyData\", data, regionType);\n    if (regionType === \"national\") {\n        edges = data[\"data\"][\"allProvincialBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var provinceName = node[\"location\"][\"name\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[provinceName] = partyName;\n        })\n    } else if (regionType === \"province\") {\n        edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var muniCode = node[\"location\"][\"code\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[muniCode] = partyName;\n        })\n    } else {// \"municipality\"\n        edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n        edges.forEach(function(edge) {\n            var node = edge.node;\n            var vdNumber = node[\"location\"][\"vdNumber\"];\n            var partyResults = node[\"partyResults\"] || node[\"topResult\"]; \n            var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n            locationToMainParty[vdNumber] = partyName;\n        })\n    }\n    return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      partyInfo: node[\"party\"]\n    }\n  })\n  \n  results.sort(function(a,b) {\n    return b[\"seats\"] - a[\"seats\"];\n  })\n  return results.slice(0, props.numParties);\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\"-\") != -1) {\n        muniName = muniName.split(\"-\")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.vdNumber;\n  }\n}"],"sourceRoot":""}