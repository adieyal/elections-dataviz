{"version":3,"sources":["webpack:///./src/components/TVVoteCompBarchart/barchart.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchart.mdx","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","Chart","container","width","height","className","options","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","errorText","this","draw","groupChartData","colorsData","partyColorByName","partyColorsData","edge","minMaxY","dynamicYAxisFromValues","d","groupSvgs","barSvg","groupSvg","concat","partyAbbr","barTextSvg","i","length","chartData","data","bars","name","getFillColor","getTooltipText","pageX","Number","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","l","toUpperCase","destroy","barchart_partyColorsData","getProvincesData","barchart_className","originName","styles","refreshIntervalID","chartOptions","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","react_default","a","createElement","ref","dataLoaders","getVotesDataForComparison","partyColorsLoader","getPartyColors","values","votesData","error","console","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","JSON","replace","TVVoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container"],"mappings":"6HACAA,EAAAC,QAAA,CAAkBC,cAAA,8BAAAC,cAAA,8BAAAC,aAAA,6BAAAC,mBAAA,mCAAAC,MAAA,wBAAAC,MAAA,wBAAAC,eAAA,+BAAAC,UAAA,0BAAAC,kBAAA,kCAAAC,QAAA,0BAAAC,KAAA,4XCEX,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACLA,IACIA,MAIJJ,4BAEE,IAEIK,EAAe,iBAAnB,OAEIC,EAAMN,2EAEW,eAFXA,uBAAV,GAKIO,EAAaC,YAAjBL,GAEIM,EAAIC,iBACM,CAZd,GAJFT,MAkBMU,EAAID,iBACM,CAlBhBR,IAIE,KAgBIU,EAAYN,+BACK,sBADLA,kCAAhB,UAKAO,KAAAC,KAAY,SAAAC,EAAAC,GAEV,GAAAD,EAAA,CAIEH,WAEF,IAAIK,EAAJ,GAEMC,EAAJF,EACIE,GAAmBA,EAAe,KAAfA,kBACnBA,EAAe,KAAfA,yBAAuD,SAAAC,GACvDF,EAAiBE,OAAjBF,MAAmCE,OAAnCF,SAuBNR,YACA,IAAIW,EAAU,GAAd,KACIhB,EAAJiB,yBACED,KAAaV,MAAuB,SAAAY,GAAc,OAAOlB,SAAPkB,MAEpDX,YAEA,IAAIY,EAAYjB,+BAAhBS,GACAQ,wEAeA,IATA,IAIIC,GAJAC,EAAWF,mCAEE,SAAAD,GAAC,mBAAAI,OAAiBJ,EAAjBK,cAELF,yBACEtB,EADf,kBAEIyB,EAAaH,2BACFtB,EADf,sBAGS0B,EAAT,EAAgBA,EAAId,EAApBe,OAA2CD,IAAM,CAC/C,IAGIJ,EAHAE,EAAYZ,KAAhBY,UACII,EAAYhB,KAAhBiB,KAOIC,GAHAT,GAFAC,EAAWnB,iCAAfqB,KAEaF,OAAb,kBACIG,EAAaH,SAAjB,sBAEWD,uBAAqBrB,EAArBqB,cAAXO,IAEAE,6CAGa,SAAAX,GACT,OAAOX,EAAP,KAJJsB,qDAUAA,sCAEmB,SAAAX,GAAA,OAAOnB,iBAA6BmB,EAApCY,OAFnBD,SAGe,SAAAX,GACT,OAAOb,EAAEa,EAAFb,MAAUA,cAAjB,KAJNwB,aAMmBxB,gBANnBwB,gBAOkB,SAAAX,EAAAO,GAAA,OAASM,EAAYb,EAArBO,KAPlBI,eAQqB,SAAAX,EAAAO,GACbnB,6BAEAH,iDAGAA,OAAgB6B,EAAcd,IAA9Bf,aACoBG,IAAD2B,MADnB9B,kBAEmBG,UAAD,GAFlBH,QAdR0B,cAkBoB,SAAAX,GACZZ,4BAEAH,kDArBR0B,SAyBe,SAAAX,GACT,OAAOX,EAAP,KA1BNsB,iBA8BET,uBAAqBrB,EAArBqB,6BACgB,SAAAF,EAAAO,GAAA,OAAUM,EAAYb,EAAtBO,KADhBL,oCAIa,SAAAF,GACT,OAAOX,EAAE2B,OAAOlC,SAAhBkB,OALJE,cAOkB,SAAAF,GACd,OA/IZpB,IA+I4BS,EAAE2B,OAAOlC,SAAzBkB,OAGJ,IAAIiB,EAAWX,uBAAyBzB,EAAzByB,kBAAfG,GAEAQ,6CAGa,SAAAjB,GACT,OAAOX,KAAP,IAJJ4B,oCASAA,sCACiBpC,EADjBoC,qBAEa,SAAAjB,GACT,OAAOb,EAAEa,EAAFb,MAAUA,cAAjB,IAHJ8B,+DAOa,SAAAjB,GACT,OAAOX,KAAP,IAEJiB,uBAAyBzB,EAAzByB,0BACQ,SAAAN,GACJ,OAAOlB,eAAqBA,SAA5BkB,MAFJM,oCAMa,SAAAN,GACT,OAAOX,EAAE2B,OAAOlC,SAATO,KAAP,UAlJNC,sCAkBF,SAAAuB,EAAAb,EAAAO,GACI,OALJ,SAAAW,EAAAX,GACE,OAAOZ,EAAiBuB,aAAjBvB,KAA6CZ,EAAawB,EAAExB,EAAnEyB,QAISW,CAA0BnB,YAADY,KAAhCL,GAGJ,SAAAO,EAAAd,EAAAO,GACE,GAAIzB,EAAJsC,eACE,OAAOpB,aAAiBlB,eAAqBA,SAA7CkB,IAKA,OAAuBA,YAAhBqB,KAFET,4CAAkD,SAAAU,GAAa,OAAOA,EAAPC,gBAEjEF,MAA4CvC,eAAqBA,SAAxEkB,MAyHNT,KAAAiC,QAAe,WACbxC,4kCC1KN,IAQAd,EACAuD,EAToBC,cAIpB,SAAAC,EAAAC,GACE,OAAOC,QAAPD,EAKF,IAAIE,EAAJ,EAEIC,EAAe,CACjBC,UADiB,4BAEjBC,WAFiB,mBAGjBC,OAAQ,SAAAlC,GAAC,OAAIA,EAAJmC,aACTC,aAAc,SAAAC,GAAK,OAAIA,EAAJ,MAGfC,cAEF,SAAAA,EAAAC,GAAmB,IAAAC,MAAA,mGAAAC,CAAAlD,KAAA+C,KACjB/C,MAAAiD,MAAAE,EAAAJ,GAAAK,KAAApD,KAAAgD,oDACAK,MAAa,CACXC,WAAY,YADD,OAEXC,kBAAmB,oHAFR,0BAcXC,WAdW,WAeXC,aAfW,GAgBXC,SAhBW,GAiBXC,SAjBW,GAkBXC,MAlBF,IAoBIZ,EAAJM,aACEL,EAAAI,MAAAC,WAAwBN,EAAxBM,YAEEN,EAAJQ,aACEP,EAAAI,MAAAG,WAAwBR,EAAxBQ,YAEER,EAAJS,eACER,EAAAI,MAAAI,aAA0BT,EAA1BS,cAEET,EAAJU,WACET,EAAAI,MAAAK,SAAsBV,EAAtBU,UAEEV,EAAJW,WACEV,EAAAI,MAAAM,SAAsBX,EAAtBW,UAEEX,EAAJY,QACEX,EAAAI,MAAAO,MAAmBZ,EAAnBY,OAGFX,EAAAY,YAAmBZ,EAAAY,YAAAC,KAAAC,IAAnBd,KACAA,EAAAe,eAAsBf,EAAAe,eAAAF,KAAAC,IAAtBd,KACAA,EAAAgB,mBAA0BhB,EAAAgB,mBAAAH,KAAAC,IAA1Bd,KACAA,EAAAiB,mBAA0BjB,EAAAiB,mBAAAJ,KAAAC,IAA1Bd,KA5CiBA,yPAFAkB,kEAmDjB,IAAIC,EAAJpE,KACAA,KAAAC,KAAUD,KAAVqE,eAA+BrE,KAA/BqD,OACAd,EAAoB+B,YAAY,WAC9BF,OAAUA,EAAVA,eAA+BA,EAA/BA,QAvEc,KAyEhBG,0BAA0BC,IAA1BD,WAA6CvE,KAA7CuE,aACAA,0BAA0BC,IAA1BD,cAAgDvE,KAAhDuE,oBACAA,0BAA0BC,IAA1BD,cAAgDvE,KAAhDuE,iEAIAvE,KAAAC,KAAUD,KAAVqE,eAA+BrE,KAA/BqD,sDAIA1E,IACEA,YACAA,QAEF4F,6BAA6BC,IAA7BD,WAAgDvE,KAAhDuE,aACAA,6BAA6BC,IAA7BD,cAAmDvE,KAAnDuE,oBACAA,6BAA6BC,IAA7BD,cAAmDvE,KAAnDuE,oBACAE,0DAIA,IAAIL,EAAJpE,KACA,OAAO,IAAA0E,QAAY,SAAAC,EAAAC,GACjBC,gBAAqBT,+BAArBS,MAA+D,SAAAC,GAC7DH,EAAQG,aAARH,4CAKMI,GACVF,iBAAsB7E,KAAAgF,KAAAC,aAAAC,WAAtBL,iDAAmGM,YAAcnF,KAAjH6E,4DAGiBE,GACjB,IAAIK,EAAWL,EAAfM,OACArF,KAAAsF,SAAAF,8CAGiBL,GACjB,IAAIK,EAAWL,EAAfM,OACA1G,GACEA,YACFA,EAAQ,IAAAO,EAAUc,KAAVqE,eAAA,UAAAjC,EAARzD,GACAqB,KAAAsF,SAAAF,0CAIA,OAAOvF,IAAUG,KAAAgF,KAAjBC,+CAIA,OACIM,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,aACEiG,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,gBAA2CkD,EAA3CC,UAAA,KAAqE0C,YAAcnF,KAAnFqD,OADF,OAEEkC,EAAAC,EAAAC,cAAA,OACEC,IADF,eAEEpG,UAAWA,EALnB,8CAWGH,EAAW6D,GACd,IAAIoB,EAAJpE,KAEI2F,EAAc,CADIC,YAAtB5C,IAGA,IAAAd,EAAsB,CACpB,IAAI2D,EAAoBC,cACxBH,UAGFjB,oBAA8B,SAAAqB,GAC5B,IAAIC,EAAYD,EAAhB,GACA1F,EAAkBA,GAAmB0F,EAArC1F,GACA+D,uBAHFM,MAIS,SAAAuB,GAAK,OAAIC,cAAJD,uCAGN9G,EAAW6D,EAAO7B,EAAMd,GAC9B,IAAIa,EAAYiF,YAAuChF,EAAvD6B,GAEArE,IACEA,EAAQ,IAAAO,EAAAC,EAAA,UAAAiD,EAARzD,IACFA,iDAIRyH,EAAA,49DCpKA,IAAIC,EAAgBlE,cAEpB,SAAAmE,EAAAC,GACI,OAAOC,QAAoClE,IAApCkE,IAAPD,EAGEE,kBAEF,SAAAA,EAAAzD,GAAmB,IAAAC,EAAA,mGAAAyD,CAAA1G,KAAAyG,IACfxD,EAAA0D,EAAA3G,KAAA4G,EAAAH,GAAArD,KAAApD,KAAAgD,KACAK,MAAa,CACTwD,UADS,OAETtD,kBAAmB,oHAFV,0BAcTC,WAdS,WAeTC,aAfS,eAgBTC,SAhBS,GAiBTC,SAjBS,GAkBTC,MAlBS,GAmBTN,WAAY,YAnBH,OAqBTwD,eArBS,GAsBTC,WAtBJ,IAFe9D,yPAFKkB,kEA+BpB,IAAIC,EAAJpE,KACAgH,mBACU,SAAA7F,GACF,IAAI2F,EAAiB3F,EAAI,KAAJA,cAA8B,SAAAb,GAAI,OAAIA,EAAI,cAC/D8D,WAAc,CAAC0C,eAAf1C,MAHR4C,MAIa,SAAAf,GAAK,OAAIC,cAAJD,KAClBH,mBACU,SAAA3E,GACF,IAAI4F,EAAa5F,EAAI,KAAJA,qBAAwC,SAAAb,GAAI,OAAIA,EAAI,OACrEyG,EAAaA,SAAkB,SAAAE,EAAAC,EAAA9C,GAAA,OAC3B8C,IAAU9C,YAAe,SAAA+C,GAAA,OACrBA,iBAAmBF,EADEG,iBAI7BhD,WAAc,CAAC2C,WAAf3C,MARR0B,MASa,SAAAG,GAAK,OAAIC,cAAJD,oGAMGoB,GAGrB,IAFA,IAAI9H,EAAU8H,SAAd9H,QACIwG,EAAJ,GACS/E,EAAJ,EAAWe,EAAIxC,EAApB0B,OAAoCD,EAApCe,EAA2Cf,IACrCzB,KAAJ+H,UACEvB,OAAYxG,KAAZwG,OAGJ/F,KAAAsF,SAAc,CACV/B,kBADJwC,+CAKesB,GAGf,IAFA,IAAI9H,EAAU8H,SAAd9H,QACIwG,EAAJ,GACS/E,EAAJ,EAAWe,EAAIxC,EAApB0B,OAAoCD,EAApCe,EAA2Cf,IACrCzB,KAAJ+H,UACEvB,OAAYxG,KAAZwG,OAGJ/F,KAAAsF,SAAc,CACVhC,WADJyC,+CAKesB,GACf,IAAIjC,EAAW,CAAC5B,WAAY6D,SAA5BvE,OACA9C,KAAAsF,SAAAF,qCAGMiC,GACNE,YAAmB/C,IAADgD,cAAuBxH,KAAzCuH,6CAGUF,GACVE,YAAmB/C,IAADiD,WAAoBzH,KAAtCuH,wCAGM,IAAAG,EAAA1H,KACF2H,EAASC,IAAbD,OADME,EAaF7H,KAbEqD,MAGFwD,EAHEgB,EAAAhB,UAIFtD,EAJEsE,EAAAtE,kBAKFC,EALEqE,EAAArE,WAMFC,EANEoE,EAAApE,aAOFC,EAPEmE,EAAAnE,SAQFC,EAREkE,EAAAlE,SASFC,EATEiE,EAAAjE,MAUFN,EAVEuE,EAAAvE,WAWFwD,EAXEe,EAAAf,eAYFC,EAZEc,EAAAd,WAeFe,EAAkBzB,SAAqB,SAAA0B,GAAI,OAAIA,QAAJtE,IAA/C,GACA,OACE8B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UADF,iEAEEF,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,eAEIF,EAAAC,EAAAC,cAAA,SACIuC,KADJ,OAEI1I,UAAWA,EAFf,gBAGI2I,YAHJ,kBAIIC,SAAU,SAAAb,GAAC,OAAIK,EAAApC,SAAc,CAACuB,UAAWQ,SAA9BvE,YAGjByC,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,UAEIF,EAAAC,EAAAC,cAAA,UAAQ0C,UAAR,EAAiB7I,UAAWA,sBAA8BA,EAA1D,wBACGwD,MADHS,EAEG2E,SAAUlI,KAAAoI,yBAAAtE,KAFb9D,OAIU8G,MAAmB,SAAAiB,GACf,OAAQxC,EAAAC,EAAAC,cAAA,UAAQ4C,IAARN,EAAmBjF,MAAnBiF,GAARA,OAKlBxC,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,gBAEIF,EAAAC,EAAAC,cAAA,UAAQnG,UAAWA,EAAnB,gBACGwD,MADHU,EAEG0E,SAAUlI,KAAAsI,mBAAAxE,KAFb9D,OAGMuF,EAAAC,EAAAC,cAAA,UAAQ3C,MAAR,YAHN,YAIMyC,EAAAC,EAAAC,cAAA,UAAQ3C,MAAR,YAJN,YAKMyC,EAAAC,EAAAC,cAAA,UAAQ3C,MAAR,gBALN,gBAMMyC,EAAAC,EAAAC,cAAA,UAAQ3C,MAAR,mBA/Bd,qBAmCQ,YAACU,GACC+B,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,iBAEIF,EAAAC,EAAAC,cAAA,UAAQnG,UAAWA,EAAnB,gBACIwD,MADJW,EAEIyE,SAAU,SAAAb,GAAC,OAAIK,EAAApC,SAAc,CAAC7B,aAAc4D,SAAjCvE,UACXyC,EAAAC,EAAAC,cAAA,UAAQ3C,MAAR,IAHJ,cAKQuD,GAAiBA,MAAkB,SAAAkC,GAC/B,OAAOhD,EAAAC,EAAAC,cAAA,UAAQ4C,IAAKE,EAAblH,KAA4ByB,MAAOyF,EAAnClH,MAAmDkH,EAA1DlH,UAOlB,gBAACmC,GACC+B,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,UAAQnG,UAAWA,EAAnB,gBACIwD,MADJY,EAEIwE,SAAU,SAAAb,GAAC,OAAIK,EAAApC,SAAc,CAAC5B,SAAU2D,SAA7BvE,UACXyC,EAAAC,EAAAC,cAAA,UAAQ3C,MAAR,IAHJ,cAKQgF,GAAmBA,YAA0B,SAAAU,GACzC,OAAOjD,EAAAC,EAAAC,cAAA,UAAQ4C,IAAKG,EAAb9E,SAA4BZ,MAAO0F,EAAnC9E,UAAmD8E,EAA1D9E,cAOlB,mBAACF,GACC+B,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,qBAEIF,EAAAC,EAAAC,cAAA,SACIuC,KADJ,OAEI1I,UAAWA,EAFf,gBAGI2I,YAHJ,MAIInF,MAJJa,EAKIuE,SAAU,SAAAb,GAAC,OAAIK,EAAApC,SAAc,CAAC3B,SAAU0D,SAA7BvE,YAKrB,mBAACU,GACC+B,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,0BAEIF,EAAAC,EAAAC,cAAA,SACIuC,KADJ,OAEI1I,UAAWA,EAFf,gBAGI2I,YAHJ,WAIInF,MAJJc,EAKIsE,SAAU,SAAAb,GAAC,OAAIK,EAAApC,SAAc,CAAC1B,MAAOyD,SAA1BvE,YAIzByC,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,eAGIF,EAAAC,EAAAC,cAAA,UAAQ0C,UAAR,EAAiB7I,UAAWA,sBAA8BA,EAA1D,0BACMwD,MADNQ,EAEM4E,SAAUlI,KAAAyI,mBAAA3E,KAFhB9D,OAIU+G,GAAcA,MAAe,SAAA2B,GACzB,OAAOnD,EAAAC,EAAAC,cAAA,UAAQ4C,IAAKK,EAAK,aAAkB5F,MAAO4F,EAAK,cAAmBA,EAAK,UAKjGnD,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACEiG,EAAAC,EAAAC,cAAA,UAAQuC,KAAR,SAAsBW,QAAS3I,KAAA4I,UAAA9E,KAA/B9D,MAA0DV,UAAWA,aAAyBA,EAA9F,gBA1GN,YA4GIiG,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACEiG,EAAAC,EAAAC,cAAA,UAAQuC,KAAR,SACIW,QAAS3I,KAAA6I,cAAA/E,KADb9D,MAEIV,UAAWA,aAAyBA,EAFxC,gBA7GN,kBAiHIiG,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,eACIiG,EAAAC,EAAAC,cAAA,aADJ,cAEIF,EAAAC,EAAAC,cAAA,OAAKnG,UAAWA,EAAhB,cACEiG,EAAAC,EAAAC,cAAA,YAAO,gBAAA5E,OAAA8G,EAAA,6IAAA9G,OAAAgG,EAAA,mFAAAhG,OAIsBiI,eAJtBvF,GAAA,gDAAA1C,OAAA2C,EAAA,mDAAA3C,OAAA4C,EAAA,+CAAA5C,OAAA6C,EAAA,+CAAA7C,OAAA8C,EAAA,4CAAA9C,OAAA+C,EAAA,iDAAA/C,OAAAyC,EAAA,+HAAAyF,QAAA,iBArHnB,6CAyIRC,EAAA,28DChQqBC,kBACnB,SAAAA,EAAAjG,GAAmB,IAAAC,EAAA,mGAAAiG,CAAAlJ,KAAAiJ,IACjBhG,EAAAkG,EAAAnJ,KAAAoJ,EAAAH,GAAA7F,KAAApD,KAAAgD,KACAqG,OAAA,KAFiBpG,yPADmBqG,IAAMnF,kDAKnC,IAAAoF,EAC0BvJ,KAD1BgD,MACCwG,EADDD,EAAAC,WACgBxG,EADhByG,EAAAF,EAAA,gBAGP,OAAOhE,EAAAC,EAAAC,cAAAiE,EAAA,QACErI,KADF,UAGEmI,WAHFA,GAIXjE,EAAAC,EAAAC,cAAAiE,EAAA,QAAQrI,KAAR,KAAkBmI,WAAlBA,EAA0CxG,MAAO,CAAC2G,GAAlD,6CAJW,4CAKXpE,EAAAC,EAAAC,cAAAiE,EAAA,QAAQrI,KAAR,IAAiBmI,WAAjBA,GALW,wOAMXjE,EAAAC,EAAAC,cAAAmE,EAAA,GAAYC,cAAZ,+/tCAA2huCC,WAA3huC,EAA0iuCC,OAA1iuC,2DAAknuCC,QAAS,CAAChH,MAAOhD,KAAOA,KAAPgD,MAARA,EAAkCD,SAAlCqD,EAA2CK,cAAtquCuC,IACIzD,EAAAC,EAAAC,cAAAW,EAAA,CAAUhH,MAAV,MAAsBC,OAD1B,QAEIkG,EAAAC,EAAAC,cAAAuD,EARA,0LCjBJ3K,EAAAC,QAAA,CAAkB2L,UAAA,iCAAAC,uBAAA,4CAAAC,yBAAA","file":"static/js/src-components-tv-vote-comp-barchart-barchart.bb205e66.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__1zLc8\",\"chart-title\":\"barchart_chart-title__34fO5\",\"chart-body\":\"barchart_chart-body__sN91B\",\"percentage-label\":\"barchart_percentage-label__1Vd0y\",\"chart\":\"barchart_chart__1J14d\",\"large\":\"barchart_large__35mmq\",\"y-axis-label\":\"barchart_y-axis-label__2yM88\",\"y-label\":\"barchart_y-label__2B2wO\",\"annotation-line\":\"barchart_annotation-line__FYX_W\",\"tooltip\":\"barchart_tooltip__3Mu1e\",\"grid\":\"barchart_grid__18DCF\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData);\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`);\n\n      var barSvg = groupSvg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n      var barTextSvg = groupSvg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n\n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d) {\n              return x(d.name)+x.bandwidth()/20;\n            })\n            .attr(\"width\", x.bandwidth()*9/10)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n    \n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x(d.name)+x.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparation-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  {/* {fdsweger} */}\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-votes-comparison---bar-chart\"}}>{`TV Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJEsAA1PCRBgddoLQ-CCEkDwYPIcj-FVVABXtKCYLgmCLyIQIckQ9hkMkVD0M-DcaBw_DCNoEjqPIyRSNYkVzw47I6LtDV2CDKU3RNBVzXaZSHWAdhNB8eQNLldoAAEYCIEQBlQDCuh0gNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZzCgAWGL2AANhiuL1jAECADEfWgRIwv4ZxDkRR1MHYAAFIR-CWKyfjgRLEVymt8poZwIDcy52AARlS-L5HBJzqBcgBBOZfPYSN9Jo6B0HDdh5E5XyxDmmMZHYVFvJgbhgEPDyvOxeRt1rYBFqgZbggAMju8ZEnmShmmu27zG4L75TAUInJ7VB2nYAB-DYlvDSN1qud7w1GmspBkat3zMWEVMwMAwigKZIY2rb4emlca0TNSCBwArMhSa8CAu2s6xk8j8y4CY-BATLwvC_hfBgCAUkIFmACZ-Y5kB2C3VdE3ptj5M40WabrSQSbJimqYuqQCaRsxvxAfiMIzbDcIIoiJLItjKMktiAK0CgQP0BhGJUkmln09csKzYzuP4M0pSUhjIPYIwQjsdBkxMniQGDn37YdPafI9kBPSok2RQ-OA4Ejv3gFkgh3fdZDPVEo2nVImjTeDlIhFCGZE5LkV06Y3bWBSSxKFq2dQ_4CpWBgC04Ebi1_AtGZZx93SphgLvhPb-PPRwT1x-wuuVICmszzE-BtWiVwCuFdcYNsah4osM9arYxJHCgYU4EP0cCHq340EROAN4IVwzBzk088kWfJFmCBF709YiUBBwBgGvOAu9-hwGoM_Vw-pQhYwgOSGAJ8RQQHgNfM84pnjUAAHI-iZKgd-SFp5f09OEaAacQD0TMKwGC_YhB_CcuvTes1j4MIfswl-kNqGoFoUcdAm9xQyngHgSwApuh-WTJFAOA12bhR4b9f6NkehQH8HAPBx5IzCh5mgDRMB1rLwsF0AgfRzAx3gAAbW0SFPRABddgAAfBxex-g2PwfROGNC6E1wIPRPh_ZT7n0vjAvxdCujCLgHgBoegBC0KgA0bUs15FjX8T43UMwAZ2D8oYjYbFLDPX6vwUUkpujbyOGAx0go95QIDCAa-iRJpYFsAAGVcIEKAVx-C1XPKKew54cGWEmgAcXPOwPCupLDnmcI1dYiQ8LxEZFcHI3BNroBwHCcguowBgPqfMqAjIylRAIFcOJjJcanO6AAanlAAUg6p4pyqjU7sElg6bAoF0B2BdpmKYy9VzOTRKEKUwpIwDkoHcAx4tdqVyjGCiF9FaYWAmLYHAqIsizRyYigJIoGkeA8MAq4Fj-CTRwfYRqYdtSTXJfwc8BUCr8FsdfLF88aDangOQfoGSbL3HYESomWLaz8DwQDPsl4tiZMGgATmlTM_lArRaSDDnfRh5AICitgFKblUqZV1KhVi_gQ12DTSOELcKqV2DCpsuq8VNlZXytpo8MOhrjXsFNea5VD81VQHYGKzV1A7X2osPwQWRqByuvZpKi10QrXet9QDANgbHXBv5qGk1Ea6rsKcl6n1Gr426rlQK4N4VDWWt7LG3Ntr82BosEmkAQtDUeqzdav1tSmX2qLQNSNODJqWAaLqbtzSfXNPPPYXt_aE32trfWyNtVRS6jwg0UlDRJqDvPMO0dfacETtpoyvVk4YDYNQPk-YnSQCoGjWW7dtYwUqpgHo09V6LBED-hAe9YdH3sGfQxRwmAH1VoFWg8gD4_1QrhliiAzRQWDjgOs0-k08XAMhQWpFhJUUv1oLBnF8H8VZPoeCmDQCvLYeAQixFYHEUQbmnCmDXRD3Hv0f5PdyKYNoow7Rmy9HZrUbDAejjBTSO03I7TSjUH8PrMzYiPRSH5XMbQ1kcT98mF6K49BhTt69ECdrEJ2sInuNftffg6TArZOsf_Pp5Tfk9Mvo06BqFunVP6Z_QxzFiKTPobMy-pzKmxOOeLJpiw2mLD2bE4Bh8RmsVufk6F5ZeG7g4Gi_51aY0IuodRiKSacBao4KGbNWTaWCAZay0MnAHhVCRmY5-KFeWsBMUK9lgAqv0XLqWasajq0MxrEAStlYq4l2TfgMCwCwTZVis4JEEhRQN9AQ3ePUFG2kbrGByuEkqwW_rlRYD1XHmgkY54J5TD8utwbyCuh_BgLt_bi3Hy9dXOR_5mEfnai4PqNoNAcZ_ILf4kBUBmiHcJH11Dy1XAjGWyis8jgaCuDQFGTkSxIu0FW1i8JXRInRNoLE-ICTZogIIGjjIcTIw4xWYx5Du0FxgBwEDkH32Kfg5AlDl0AhIZLBp3JhHoGlgCJfkIlHojxGI8RYeUIVMcBJT2_oZpthQJRhZQQGD54AAatVdSiksAAfSK3DlrtXMvZYF7TIXIuxf7cl6idITPZcwdFOeIZm61f2AABIkpGVrybG2YDDbmwNtI-vayG5PMbiXUvzeRktzgR3k1Vca-twu88AB1V3MGpubdOzt8XNBfcPNpoJV2OouD1ZmFzmA72quA8yCD2TdPIfQ6Z7DibLH3PvkE8l2sOeflx-gFAerqArJ_QICXgtImfHhcRT4yn8A0SUESNwvdPjZqoHgVARLgXXJHhPF0KyXd08EFN9Li3-35dK5V-rzX9ecD5fa77iw_uaA8c3zAbfu-Q9h-t7b_t9unfZfPIn_A7vPeoHm30USxv1Jg31-AfxN2D0Z1DwP3Dydyj1nXPFjwTzP2TxO223O23yvxUQlAEDxwxygEjGRxEXwLiQSUzxbwsAv11w636AHyxS-3J2a1sES2MVMXYBdDGDviIBpEjEURbSIPgEoCgC7iWC6HUHFRH1pl7ibhblnFRUbkK1nE60jFZ3CRgz-Dcl0Bfhrw-BsBuhwWLDgAsXCkZX8iUCND-gEL6AgCkMRRR2EK7kjBsNRXJBeCfEUDfAsQGlsWwIC2wLWk0yz1rGoKKxgP0DsJkOblbhSFRVcC7mcEUMy1nFBxoxgDAA0N6m0IZwyD0KWkMPKBMLMOKEyERAtHygEAtFYCIjgAtEEhggvVQAtGrnIkjAABJgBMFZtUA9FUi2d9E1p1lZxigKDHJaY0D_9ADwiM8ScGC6FODPJ0U_JZdx8dCl9S8UUcdFjaBIwFjG9btKDphjstszsLt9BpiCA7D_E9iliYRLtMA1jEsh9yIm8BUx9yhJ9p9sC58_JOCHBWjK8xwIcdDoC68F8EglhwSoAlhyAnl1F8EYTyJ0lMlsCTMxxtji8bj2d-Vgij4gT6ca96D7Cxx2Dg5UUFxxU-j1CcBNDsia9XiAsoVVwpwMg5o7C2CBBzBoxSdEwdpYS1E9FDp-TU5ej-AWi2J-BORzo91aZYwOBhT4TjwhS4TRSdByILQYgCBYBJTzorokSuUJo9C8kCljJ5oujD1ej4cBjOQrgEY4wZTaw5SeIeTiSwAWZaSCTGdOYHTs8VT8FlSBT8Fow1S2JminBEgdTnTq1awJBdxZAHS7T4zScGSksxi_dy9Iw6TGcyRoMri6EadmC4BEt_FqjaAn5N5mlKBOxWS_JV4aiYEykIF95UBRN4UoV_EudXBKzqzgFZoLFSzOEuyqzpxbEeFwNIMABCQjM-YQ4JTeOwiwfxacoJYBbs6cVhMcFBLyFcuAGfUnTstcjIAjPIPAUFQJWc1c4cjIAIw4iwbgmkUXBISMA8q8xDHACYOgPgqwgGSMC5OATkfSPdEs-slhPyP8ooxLCwZci88sl-Ljc8i-YBGBRxZxcCnw5UQNPdVnKnIZTIGYU8rMjIHM_DJYAc2C1wMkBCucl-AIzkD4aIGiUPAQIQI4YnZyYQ_8DIFipilizkUY1cHCvCgiz0oi2LK-Y4TeSinFHcmBBc9gVJciZCyzGCEBMBJsmpGBOBBBJBLctBXczs4itstM8cuaCc4fB0n4jg87f4tiTMkSgQSExfRyiElRQM48REtiZE7lPw3JZOKnTMxSyS7FbcmC2SoIt-MafLY4dIzGZiWCcieiLWHWNvfWAucSIuc2EUaSFiciaWbIS2ICbQ22cCKOTUc0J2SpISKYIhMOL2UQKhUeIsVASAOcOOb-b-XQFq_-KYLwEQVEPCzyfaOwOOXquXNEWYXcVEQEVOSiF8fq2YHAHg1AFOSheiUq3aU6eAKeBOTK9iTiFa7qu47CbameOeA_Q6lzM8ONGybfK-VcNhRTR-GBNtY-Ki4BEaE60hH-GYP-BqxydalzNEHmNIWCPICIIgbfN-T67-chKAVasaLxI4G9Dhcijc2-CTQcvcswfggGVykUoM6xNAewP048EfDk8wUa-amYQa7EKxVxImkmmAexJxDaoaumnRAAxm5m5xQmzmtymADxMaBUl5HKqWBSHId5OgT5Sq3PWYwVflAFdEYFJnajOShkOEVs_8yCs_UzDFH0mEK8fQYDWql8D9WmWXNlOADlRBTJQlfW2mIVRo5tCVTtHVNtaM2tRtVVZ2rVV2yVM2wtEAZ1MNN1KNEVctG1f1f9aMmtRVA1c1F1UOr27Na6qO926tZNVNcNcKLtJ2iOltAOrFKdFNRO9NZOn2tO-2wVOtYtc1Utc9fOvNdOxNOOmuhtCTFOitSul0_VNurtHtTdFdIdEdMdLdaOmOqdYtGdOdBdJdIetdEezdQu9gXdHu_dOjApU9ZGphZe7eyTfBU9OPCfDIcwewWYJkce-VczA-99S-gVXzX9W-5uijLYY2_gXeuDBDHlIlEAElMlOpClKlABmlOlBleKfWikltW6wlVe6M-IKAXS-AGBvdbTXEosPWVlZ7V7fvOSxgn7Qs7Wq6ru1AW6yGfW98zYFsnGmyZ8-cuWmO-SuhSBgGW62aTsn-zshlH--B26hlRa2YUPdANIXGbINIDh9lTlPNXwquiwVnLY9zeaZhm6g_QI_WwYuIAgRiri4UXGdi2Ac_ZikFbRgQPiwhzct63clM-VChz86h6gWhmi-hmO_xeBxB3Ddh_gThkAWxbhhINxrh_gUR-APhqIGYQR4R4nIJn-n4TABlKx6tVxtiPS2aRJ1BeAHASALGKMUHWcJYVQbAFncndaFZGRijCMHwL6PyVnSADAaJNQQnS43GbkhhwNUmNpfFbbRo3yb6ZFeQ9p1PRo0p2mPi0p-JwNOR9EhR4AVJmIeAQI9tNe9Rhi084x3RiaDigx7i4xkZnEw4lKzB9AAvIvIkxk4yvYEh_bS262g0gA73YvZzICuhcFCVZY98mCM8HAZ57lbWkshZLavyCxUcvdCouafxCAJJJYb1PyL5w02AWcCYDC8FxgdgJfTgS5S5OSoLSDGF1AYwiAWxck3NbITF2sP89ZE8rRG5vFgli5Hy05-VFfFDTYyZrIeaCBy5iRm27lE5P5uwFBlMtB6gLc3FHDKYh50nfxHF3Df8F-YKMcT5qln5uhP8vsoF0nEF38uhcFvycKSF2aKVnAOFlIBFzgOsFFxF9FklkTKVixfFwl8VYlpx-VMlmYClm1u12l7W-lgVRlnWllnYlzeVac4jHlFV_lg4s56gf_ejMV3B-Y87DEjFdjagejK4GV95-Vi5eQbWtEggDE3YhNxvcKyN1AE4nbUPOSoGzEDIewMGyIbfC4mDCPBAmPBoePH_Uzfi_lagc8VrdLGgitp12sKtkG2t1Eet_bRtnARXZXBA7LDtotiN_VflFko4E5xFfxEMSaRdWaTqnmHALdxdJVo4QNgVCkqmB8Z-82jlq2yR7lK92sZNo9ApJYDOteveu9BE_W6-9y79zzYsB9oLV-xYfW4Nr-wDg2yOi57CCDmZvSlBws_oscgVVJPoL2mAJSvDW9cijJ6AdHSMF4SyXGQjogHAc9Y8bprDjhKTCCvdcmvGQNOUuWeVJMVMVSEpdgMpMZGoyq6pFkUiGyh0PKnIZwa5qYIZc3LpysVMfWp0hUwUq6Rm4MioogC0cuNoGYHU5j6tRgVRdpMQMVKmRoRJKQPThcbTxjtAV1qYIZ4dgpFmWgLAeqqMlp30_mgM_GzRfgFTuokCIQKASM2zqC1RREYYG6DIFmHxXz6vL0kAIL85wAw6CRTaXN_N4Ac9o29ANNt5uV0mLNqU-LsWNexMizgVOTxmjzxU4vbz4UVT9TyuLT2z3Ttpcz7feWMzqAUrxj77cVT9eBGIJBPGqryr1Unz7Q_zyUy5b0kAS5eToM_gZ9BBWXaLkEsEEAKUlz1z0lv5pLm9sT7lX1mOr3dwNIQ6WTHtvbu947sbK7VIqUrrlp09rbxFJRi77CfhsJkj3GJ757gVejyMRgHF9gbYGARIQ6Ej4yC5cH2gIgXUiHqQHFsQMZ37_w-L5vNerFKQHrqUB72UuM3Hx0vkirxT_m5T2rtTiuTT9b6UjHxFZr_T__KwApdrlrzrpr7HqYObpUknzz6r8Acn8b4QwL2nlDnb4AJ9-jQ76M67074Ac71AaNgpQA27irGnlH2UoHqH_gc9cO8QHXmNBHm5gn6MwHm5xh_ZA6fgD98QD9w3gGY3nTzXnbhbl9VVRKKAF4CMkAMQfTN3-IT3u3myB3xjp3i3lmX3xBf3ryKo9AcQUsgoY4KXfoKUQP6gYPx0viZhh3krqun7wNQQje-YdgCcvybXvOyU9gB6Tbrb8r9znnqrsngQOrynxrkX-1en8z9DqNY8Uz1n9PljjnobhTrnvnsbvzoX6n6v9X7bsP4AD9vRKX57mXg6dL3GVLqZ-fm-9N3Lmkv5taYyfvx3s3rXuL735wZh9gWeHAVP1AQ_wNPP6fqjphVGqvj9nD0J0TW9b7tHlp-j033GkHmDzn4Y0yO-CSHmLw_agDjwupSAeRxgDyAb-d_GOmtB_5YpF-MdLHln3i459ae6AiwA_3lQF8-MRfb6C7wYh-8PeXkCvg9GwFE86-I_Rvs3w06t9H-dYDrmIDgTkDI-lA5IHol776dUBdYQfiPxG7zd-eTfFbhN0n6CDaYUPYAD-3gEyDawy_JLmv1QzyNWW8g6zFvxy4fN8uB_JQYmFD6MgWY4gc_rmkv6zxEBhgodqwIsC9ABA6HZClXwcFODN4i1F9DBg_76Zv-bfFHn_yB6ADDo-mDwQxAX7m8TBWghiKEIMzQCxAUQrrAoIQGSBEeNgwTMjxR54CdOmfXNEgJwEMMshBAgVEQJTbM9SBIACPu7094x9qBd0WgWwCH7-l6-o3cnvVyp73dBBHfTrpwNiDcDPe1UGAPwPM6dCrO4QKfo_y8jzAHO7yb0n4OrQiDmhYgsfjQCkEbcbB5IEpGF2nAsx7AtUSwO_TmGBo5BD9RQYcPtQqDV-xOdfpoJOHZdZWegvfmsLOHyoiuKPfIcgNz62cShz7EgaXwqGu8-h0fVgLH3W6V86hZw2vrz1EFedxBTAhrtTyQGyl2BYkBPk9n6qxApgOCYXIEAEBDC2ezwx0qMJs4EiIs9nfgI52c42CFhDAmrhIMF4BdpBJIxFBsNC7CFth_ASVAAHYAAHGzHCgABWfkQcLsEz9Ih0WLIQwwuHJc_WebKZtFjuEZs8ujw4yDYNeG_d3h0ZLIZCOG6LCYRPnNoSwJr7sDhW3feAHiMP7ABjA_kMAJ8hGAHoMgxkXkBKMdKD9FuA3WAI0O540jYRkgifpyCm4ix-As3JTi720pJN4AK3HIgIGF6sC5BYHHDM6PlQXD5ewrENsr1KxLZVe7AREZdBsFwctqVffMV4IEbTlfBIopHCSU5J1hAhoPQ6NOW4YIZOmUjcAbP3rH8B-mTYytLYhgGnxom-CBlMkNSFMj0hggxMfLA57Z98eVdbUcPxDE-iDRCI0powA8DhAIg5gSYZbxAAribgUdBLh7x2BndUMQrVPOdhV4rZjI1IucR4AIC1J1o1yabuwGuTejrxTRAcAKBghe91o50MtudikDbi1xk4xGNOLoFQjdRo_VoS30XFt9lxq4lkBuJZj_jdx8XObPuO2CHiUUPbPtgVhoJnjbATwlHpeNJ5ikbxFfe8YGJFhPirxN4weP0CCifjVoBnLCUajsBFY_xsE2_tOKnG08ZxTQ70fqMgkdC5hXQgzuLQGHmimuIEnUd6MsicQgQho57owFajuB4hxQRSWJ12hoQWYHRQ9jgnkBehxa-k_apoHEBY8xOeQ29jbTECRJRgxSREGUjUoZV4qtlQQSAVPBjhDO-gO8A-GDIdEMuNAB8KNHW4QdoyRQ1zhbU5ZUsrgHRAAFLOB-0aGGcM8DADT5wpFkqllKWCm_9uiqbMOB0Ql4mll6rnTfseFPQdFipigu-tPwUGlSEhC_QqS01uG5SEhTmQKZlIYbyimp4o-qQw3jEEompvUuAK1JsG4h0AEwK4HyLakx1NgPMQgFcEFgcwmRgRUyZIzEB1AugLI4vJIGjC8BoxZgBxLwD2kHSTGTwIgEsHfrU8seiUDiUJK4kMMNRZXW6QKgFYRUXQTE9GLFRFpOS5I4tL8EoG1hoRdYVVESIbHSqChi4UkcUsnDOBWxgIegMCPHCi4dc5aXUS0PkD6hXABoOAfkZZFIwe8XQFoaabzGOQcFau8QUjFQEQpXAPAIXbYILUchGkRQGpF4B6JyQoyLQdomacTK8A3RSMFI_uB7xSChQeg-gDIHTLMAMzLQXgdAMkGXgPJ1kGQREJDjSAWgkZrMkCD3E2pXAXg_vcgGLOWpz4ZCctcAgIDAAXwRgJyWwBAGpndAJypVdwL4heniyx8qiOVnLUJmzT2AqUdmDFD1k4BEg_cJpLUVVnrARgNgWgD3Daj9QfgIwPCr7P9nByawocwjhHJKRXBo5scx2RgGTBgByAPcRuA3DnA5JjZps0YBbPyDWzi-dsmgL7PcA_B0MNkFWdDmzEosm5rMzvBaHBSShPeVwZJDWH6qUAQeVwAAMTSpJUpGfuSD3ZlMw8AGM8eZPknkCJIkMETIKVCihLBkwvsiIMIQG6MZRACUSgPkABhXA2kUCfZLQFVCiBL56wPmf70FnQwRZAgC-bwCvl7zr8tgDYavLQB4zu41M04LTOfkAKEoSUAoFcHShYAn5L8vKCBAxn8wMoxIWoiAn6BgAIF6wKiDsHq4YArgSc8-YArfmtRVEn81AN_OaIXwdgpGLwAIGnA9yfZAC1-ewAoXTgLQmQFgHkCuDRRwFtC3Bf2EoBoB0cFoS3GnKwgoK95cs8uFwDloUzhQVwcuKDw8RJUAZ-zOXAbDXjGwfE0gZMG0MhmkxAI2gIqvDPWoBx_AxwEOHHAjh_UAaHKCULQGbjbzEENVT-DDRiBw0R4r0-uHY1PqtFCKDlRmKNLwBLB3ZBAGEozSWBSsjMImCcqEqHZSsMU2bdYORhGmFg_InI9mKRgCWzRTU5M-yvaylCTQnyHcRuJKTvzgEsa_KfxArlcCBytkGRMcLNGSWaZ_EAATQqW2AqlOOdJb3NkF0IBw2QdIjuT7JikLe1KEAIkAXBmyhlXQEEWq1XBfZ85fkLxaLjmBS1gyMhSUnulFw3AmcVvFHPjhgAZZ5gUoYpD2CGVYB9QaABpacvMDHgxwqy0nOsrRDBlTiN4bwEMsiiRROY1ySMAkrwCXJyllSsANUsaZkSw4j4uaAEsuRNK_lAKnZtYwVLZBllfcPRfVThzoggCe6aZXQi3naUnsHAOZWaGsXCBtKmZRmgLnRVHAKmxi1FHEFgDQQls8TMMCdw9yvZHwFiX5S0v-U44lgXy6RjWFJUtA2GyYSlfEBgCS4XQMEMhgWnpVjZRQTKyMBYgCVLAIVbKgFb4VIy8rjGlgd5NjkbgLL5gS2fgIUHW5Qo7lmykAONVxYqchlZquAKoh2JBjPl08yQPzH9EzIZukYAJY6udWGrDVEq2YLqsfDkiZh3qrFMauDI3ynIwwaMcAwqFcBpsF9ElfylkxU5Zo7iyMG0KzjPUiwiFcikhjsyTk01gVRxj93VXvJ3y7yYMnPk7KcA7AdckILQmgBtJtS63bWuTWXwG0QEtgmEIYwEAaqnOpapzsGUlLL52yXSt6neAszmFkOcxJGhY0w6SKkKm8bWrphnUsJX-y6l-Bw03gBMQARYrdUE0oS-EO1tMaClmpgQbqX4W6ndd4x_p7q-GFRc8JKBWZCNpRRQ49cKDHX4ILEQTMjsWCgFM1ZoX6mJv-EkV9AvWWmZHmgwsDuKb4BUTvCuXJiRBhWvRacnojyZyV6Or6gQO-uPAWJkN-CVwpQODJ8h1uRRbmvQh6VgAdytrG5N0vRg7lDWdAY1ngDVZoDbylhJRCyDPAwaEgK5Z8qhsPX7oTEVYzjbBovLwaiAiGoMmsmnLRJ8ov61DUOrOaQbvyyiM8DYu0o9r-8iwTgHJWtZUtv1rKuAHeGFYkt6OayOASCs5inoQVBrOZH80OTRBKWmSP2XskZDPlTGCHBcO2of5QaVO0QCTZojgEksjElY8wHAPw3uF-ARGzkEUXfKUBKydo2CJSEhg8YNpkYPkLwA8AHSRgTwJYCmqgAAUBN7BKALFoLxwgz6ICHGCgJdJS96Ovm2-KfF6JSbT4MmygL-rvHAqrN1yGzS5pgD2b-83Wv5m5p8qjQ6F6PKFLgGtAM5U1lPdNfOWLJ0Ilq-oCpQ0r7K6tBo7MZjRRmxZ6bpZ5HWIA0saS2AxNPW_8h2sW3LbvC9iPyGSSiBYBptGnWbS_Fy3Kb7G6AAxIVqrEDaLebmjClVpY0FpEglOSIFNvO1YAGlq2YdUcDaGJEUguGGQtkoKxPk6gicCnhpxGKU5N492yuI9tcDYFodjcGDNgHcLI93ymQXFi8BoYk70AfQRopGCkThQSd5iZTu3M7mqoqBADAaN3Eygk6wCThX3JDtSCU8YdrCIXQTvPwxJxV1jX1Usv1U3KpdGy8tXCXJTLJNoxQFHW0PYAdEmtWGBDPIBGKTrtuRwROMLtrKi7Yi0uvVSAANV0rog9y_gAqXJTPiYIkYmvJKWwL-JE4Gmk3YLo04w6dVMuq3XLsRQhr7dSugBk7tzBOcXdsXdzYpqNA6NNWRwbVuwHkSmtkW-atiDAno3ws8AiLR8Riw7VLlP6-KEXQ9oLWuBbWBLXqce18o6hQKPu7HeXsr0Y6X4BuzpVDrN1arYiHPXJYQWR3O62hOAMqcXoEB66IdErOhMbtmUN7qa2qjnsGRKzO6vFg6x5kbpghe7p9-O7vcwwX2Jw-Zy-ptaxsXKT6VKs0KfdvtzS97IwdQDohHp1Lo7OyAVTPXNvWB7pE4hOppDgwdKk73Ah8ynd_up2ZAfy9OjIZf1t0mqvez29jS2Te38bgtgm8wNPgZ2ga_t9qEPSAACXkoGd3-pnd5xZ1tRPe5KTnRaG53f7edxefnaTnf3i78OoBiwP7st1dBvYQa6tOgYd0AM3NujK8TBFInArE4aud5ccDa3kNwDwZLAOSig2cHQpH28wHdrM2GZLkuAKiBgC-WQxHVHS6tKgcDToGvl5KJQ5UFUOcgjAkqSQLIjoNgGFdeBhIOSl422FcYwm7jReV43abzDnzFsgt0GCWRwCEhl7TAb40BQr5bfMkvPoqy2d0DrOwgwA3Cg4BuRdLYzASoG7Yqf95On8tyECMo9KcNOn8qajSNcLnuaGfaMGQiPs6lgOASVJVnSMtNMViRtgPgGICEFVNCRxBBpucO2FzD1jXAyAFgBgAkVc0MkisUShpAFc7Wq3uIcNWVH8jnRiIFTyWDPkBVAx1wGkBW0WhXUsRizSABigr7RtyA3I5Au2PWN7GHhvIDAH2A-HoDUhzhUEYFUhGVsYR0Q_wGKOQHBocRiLE0ZmBJGrVFO-xrsfi6ZGgDNDHI5cYyOdHHjWBio2o1cP3HhlZxgQrAekP0ckDLx1aJCcsMYHuYRMsE_KlXAOlz9COq_TfrAnBlE49-uio_p8SyURDqJzJgyNmNaa7DxOBw1AB410noVrBz46kfIaAHadIByk3buhMANJDcJqugicjBYiFITOL7a5re2x7NRKJvk5gYFO-G-jQWx9iFq5icz2AKx6fGKZxGObuUzmwbdKaRNaGFmRwk_d2veS4ZPd7yP3T3qR1D7CTYpNiIGqlIP7Md5Jl_fyhxPr7LT5-T_ZLrZNk6_93xzk1kZoY8m166Bp4ymqFO08RTDOzU-wH5GgbUekZzo9SY7kEGSjg0Lna4fIN7kHaLpa0050J0S66KFu_1aapdO8mTV7BoJURK3HOmnObums2IZhO40LjcZtU3Iba2KHF9Kh6eWof5gpnkTrZgNVHvcA0RhQQyngl2EbVymTVbMtGRfTOlB1YFYxhc8GWjO-HOzDDeM-tBWPJmIT3pi0051tPMN8TDpiPRSJJMt7XAT-kUBScjMUivy5x2M3ubVOSnetpM_rXpts3fbpTI5k09Y3ZP_7IzXJ4A-zE3P8Btz0B5U3AdVMIGWgop7EVGC_NDaDzSZoC_E1QarhE1E-IQMkD8gprIi2q_M6MQCzyL0IluSQPkw0AwzEVDAAFKpBtx24I8X-WaJ7G6J1E7mPsZi82xPytt48nFkMozO6WnE-LE0KYPqEmi1Ro8SBNtnHhEuhMaJGBEYJJdxZTAAAivVgaD2AAA0mrmtzOB6szSSwM4HkvIERLAAR1CCxBtgTC-AP11qLiWdsBw5izO2Pwa5ssIl_LIPGHh_UPLR-KPCZe6Sig48CSEZCfh8t_C_L6tDICNLPD-WDVPCKKu9P65ONX8bFz_C7lXACXLLilttDJbkuIFkCbaHS3pcMvGXTL5lgq-21XCeW52QyN-L9OUA6xf4tF8pgVV0U2x9FfsFINZe9Rxxy4swPAINY1KLGDhFij3voHsXxwMIzVHmAcJRhMTOi6JKxeRSWBnhz-0Qcio2SdB8dCE21SQKUW7gVEe4G1g4VFTWsEAwEmlLa2ODuubx9rVSSBAfBvhLa0AbjOa56FOvlFhQVRGolddWuqbTE-wDNaDc5Lg3nrwoXvbdR-uSAEDpxuLq4qXjbWhQeHGBAjdag8KsYwN-uDdbvgyLU4DkvvAjbBQpBAbZZKgH3mWuo2EISpohlB1IZGZ6OsJNBLflssZBp8LmLmwIFXkDWoAxQVcKex4YH4O15Qfbv6gLS4X-UwtmsFVoeRRUoNr1aSjBSJJs2ZrnNxkPzbZb8o-bAtwa_Ldpii2_G4YuwEWqfVwAH-gGooXAP1odi_ggzNesBujHVaUGtmXZnLbiXvglbTElW5uQxrkUiSS5IO5hz5RYoH-ZfY8PwFPSS51QQoAOu2MbFO280cdhoPqCTv_CGIlCQlAFA2MY09Esd_gPHaFCJ3dU2d2IRfUQAl2M7yYZMANETO4UrFrJIZBAESDuBwWFiNux3YYi2IXVJw4uyAGaR12G7_AJQPnfKlD3S74KSgAPe0Ex2kAtd_UPXZTQrHm7WQI4M0jHBtJXAvKbUHZbtFw1tgF8V6P3YruD2l7w90e_zHHuKBJ7hd_sVfZnvl39wldou8_dHshx17eK1kpYDcjuAgg5gCxP_cAd0Bz7b9y-zXevsr367d9h-49U_aL3oHL9uexfYXvV3l79d81CseggWhaofgPTsKBGB72LEBD-IG0mIeuAIHZAiAE5mnuj3Uo8DrZYg4_soP7Yr92h2w6wfJh-RiZpbeiCNa8oHclAbIK1HRAvAaHld-h5_dgdCjvwCD9TE_fYcJ20HkDjBww5XupRG7KxuBPkHPS8p9Q8AfR9Q_nvfpiwmj5MNo-YcF3WHyjkuxw7UdcP7HMDqx2vfYBwIX4HoixJ46FUWglt-QfIFI6gdYPUot9hRyw6UfIOHHqjsx1XcsepRv7VgPAPAnwSqJeU1gSgMMF7snBQgwT_9rE1kdWPkwNjqe8_ccdxPuHrj1KDg48euBtgfgE4LykrJ2W7AlgZPvBFGn5PzHhTlB3XZqelPH70T4exU_QdhCXHI9le_yJ0cvIL4bwDIHOAsRPKaIwuSQPqGSAbwBAeMlIN07ocWOin0zwZ3Y-GeoPKnEzuu_yPceTQUg7gE7oY44oEB1AEANZ9EFUSqJdnMjvp1M_CcT3In1HCZ6M_UfjOTnFzpJy9ivAcV97UtIQLZCezbAbnsAD5_s6-e8OSnET2x1E8wcjPYnYz-Jwc9qe1RZy2wEhy6F5S1Q0E6OOACuOChIvenWD_kUw_RdlOVHZdpx-_fOdTO-HKx7e_MFgAWgcE2wYXD9WacwAvAJD-F5EEoC0usXkz3h_I9-cYv_nJzwF845Bcr3MoMz6wLvbcgChSsGTvwFRB1ccR8WcTz51g41dHPMX09lV-y7VfJhMo7jnl4Q6FW8pLwHvVCP4GleWOHXlrpVzK5tcKDvXtTl7APJSCz224FiPBL1SIDiO7LBAL10U8yiMuFXzLmJ6y7Od2vMoXLjx04AFDCFvHOCbyP3MiAJuUXWb310pgBc4ugXeLst5lETM3gFwrgC0I2_ScWI48MEDiJ2FLfmvMoFb_esq-requZXddzKJyP4eUAEX9Tu0QY7IciBngY4I8uiDgA9vXHY7_t0g_9dDvbXI7_UKlE5EzPzw-FakHKBewIvugPjmCBXIdzwNV3kz_dwNA3dVPTnuL59xnf3fuPLwaqOwC9jlxVlYALAXlLhUoDWzgEAiKAHe_fecifn99v55W8HfpvX3HL_d2C_qcpPqdEwH0IsdIc4IUgJD_oHLhNe4uzXMDlD0-6reIea3b7vd5yNqcFQd7ErqyLyno8vxGPI4SDzR-TewfFX8Hrd5R-HeaP932bje-jisBvBdrF7m8H0BBpwAKiFEXUHgFcRop0Akge9WbirGWBxPcuJmqa-RfL2hP49_uzLfTpR2z0yjsOPqFdZRBVEs4V-JVOrqO21Uadiz7VCzv6Zc7vKRR366HuWfhcFD2zxm6xf6haoUiGZ7kpxFTBmk4QFJx71df7JiX0aBiJIDPr-c0Apj4j3p5ADBfQv5H4Z75-s8nc7PVHlx9l_CjuP9QDIbYLfJIeuum-C4KV7p7pdZeQvZX3L0F6s_-ebngXnzy17BcNPqATTshxS9Uhjg0EYAVd6V7Rcpuhn7XvzzZ669Ie8vLXglxACwCwBkg-lve-fwo4WJCIUAbYKhDBoTflvbXnzx1_m9FeBPV90r9m-3sJfeUixCMCKGoDHepE8r7j6m6y_nfCv3X67y1_rcrGns7veAAxt5TQQfshwV7-FD7dMuZvZ3ubz98W9BeWv479e78HcAePAg2wLuw7hmldwboqkLgGkCh-cjTv1377wF6R89eG7MztlFACiB2ALEdPhn694GiPvYfxz2bwV8p_FelvDdz9wV7wBwsu7HeAgMoe2Cs-YPXn3j_D-58LfefyPhu0k88jzwrAkSO0bQEMcxqFw1LnZ418V8DQpvH3uH-T4R88-rv0D7L4ahWPyQ0PrgPqAxDB_k5_A8b_X9T6Ghk_LfFP-Xxb_4BW_s31gGSZbO8f6WSH-oIX4V9Z_vfpfA7rn518u87v3fAP9gNqCOCxSc3QgKr4Y4w_qBbnrPmH9N85-y_4_v3y3yF_5iauDXe9uCHaOhAWI3ApWHTxl6a_ZeK_nvv3974T-Bu_vyYENLo68AKQ23OCTzQODjevfBY7fr72b59-J-e__MJJ_ViIBPOMAXd0iBF5e9u-5_RvmP5u-L8XfS_fv8v7U4FfA6dXvKE_1EB1fj-uPO_qp_l5L9U-5_2bqT5EhXE7B-gT6sHyeTf_bAP_xPzf2X69-8rkZ5oCJng6TR21dmHBDIYQKBAGqD7MnYdMqdpWinoQyPsL2eQaJXYeeFiLf4uO0AeEAMaB_iADng-lvViJm54IK4CAMXnQBd2anmKCVAq7sQH1Yk_ngGwBhAagFhOh7kQC_Qwvryh4QFwNQEhQevs35Yu7AW34c-VrlfYsBBAY_7QOogeV5cAtCH2A-OoPBkBriq7nIHMBMAdIEK-Q9qIFJO29iAiAeFiA7jcwmAFAA4iQgTW4keegZoH4BAVjoGSBlgKlDciMzme4uu9gP0IWI-luiAyeJwAIAzA6gU4EuBtgawEyB_AOwHci7jsUgYAKMtzDAO0QegCxBaAIEHOBUvnB6x-ugVoH2BvviAARBSTkfTjs56P0CkOBQWuJ7w6XlYGZeeQSEHaBOQREHBuGQK4BdQc4B4FeQvKCl6wAa4n8AJATfpUFNe9QTUHZBs_tA7RSDuDeCJmrQckCvQ7ANFJZOtcvAC6-vKLMEDYLoFS7Seq7qME3ggwXAE5B5lg7iJmlgOr6AOHjmOBCAZLsYjaIFQbQ4keewYZ4c4UKKZ722SAGHCh-rgAABa8CKED8um8DSbgB26inZOeyAS8FvBY9PAGYBsdp57pBu_lfavBHwfsjfBXjoQHnglgPsErGMAIH7EuaAF3YH2AgMoYnBk-AwEohk_rCGfBCIfECEB-liCEV-MznhCpOx4EL4jgTPqEDU61Oqu6UhOCNSHEhJDnCFfBwqOSFhBIAOyEV-7jov4nAjvvX5UANwLr5MaAAfwBChA0GkE8eGQTCHchpIXyG_BwwXKFUhhvomaL-bkKha8oeoahZsh2odv5QhVTiSHwh6oRSHahtTvVhwIOriQ7KGJiMI4wQyUJYHXBmXvKE3-5oS46WhvIT8E2hHIQNDZu54Dq6oA1lhxTihDQOGGRhUADO5EefQVi7yh0fr6HDO_oWSEah3ftA7yhyfrj6lYVtHkCOgLvmS4qQzgJsB3Aa4r0GehTXrmFch7wWqGBhAoUKEV-iZqEAVeeACQ7IovKB24iguviaEchYgYX4SBOYaqFWhTYQ4E5hVIX365A-oGNjihIjriA7AA4YLCKhn3hmHWhzYdOFguwgOCyWer0Lc73OPCv0BnYAgCuHz-9YTyGZhQYYLC1ODQIKBS03jveF-qiLrKGCh04T6FKh0IaOENh44YiFbhg4dm4Vef0NTpn-Q3ou5N8e8AQBuQ_YW-EthqYV-EWhY4QGH_hk4VqGDhyfvqANOPoFRC9MXdmfQPhlCqMCoA54QX7G-RfiqG_hKEfyFoR74YOGo-hPjRDNQOQBYiigsQHgDMR54aT7iB3npRFXhm4bRFChvfmQFEA5HKVjIokgK0jSycADwSFgFiFJGJAMkXiArhvfpeGNhqETkFCRSTnUz1OJQa4BQ4wwDAAS-cEVSFwOPETL58R6kTRGaRpkXaFEAcuJsBgR54KiA02IoCpGfh64chHXhAEfP7ZuuoNhER-Xbk77BQ3Qa-HCBQ9kJEIRnkVRHeRgkaZHJ-94VRCGuxwfJEHy2wOCgqRZETgHphXkQJE2RHIdo5kBGAMLjUB-9iBFBAK4dY7mRyoT-H8RE4flH8wYTomY4Itli6GRurUXk4mRBUWuEm-tUVZFZhGjjCFUhNTvw76ONzqWHHghFpVEeRvUXKG5R9UZqF0RjUdm6L-8fEB5dAiQBEAjAJEV1HLRakX-HWRi0UKGXOzUedhxAqIAW5nRLvmFFJhEUVSGXO-0dREDRwLsmH3RSTjABLa02Ayrih9WGiBbAhACuH8iZoYhF-h80RpFHR90bU4bwqAKgB-AxxkcBMhnJJKDCEgMTNEURfUQdHPRtbuhH8wGromYYcBoWQ6YwP1BBFrBNLrtEWu1Ud-FzRMUXlEQxHIQ666hBDtQBhuF8KWGzgwhFcHSOXoVSE-uVMUhG0xC0dmE4xmUEk7wYrgLZb7I-QLwH8200ugArhosY9GxRDUVm7NRLMcDrn-6sVEAKxUUbNGChYMYdHCxS0ZlDJ-9WPsgr-hoebEsACsVlFphyYQbFYxFoVSEHuuoUQAR-K4h3bbOh4RYi2-s4HkCJhNYa9EchB7krF0xRsUKHQeiZrMHhhXdlhGhAfUCuHQeocULGDRU4cHFJOgfi8g8wSZpxzxA7atBDJAxgfshC-oQHaKJxwMdFF1R4MeHHOxtTg7h6ctgKQ4VQRACDw3RgcXdHBxaMSOE0xVcYbGpxOMZyJARJiLhHiehjsPHRA4nonG6x6MT3H9RN4S4H8O-UBfBgRrwfqBeAYkQHHcxtYVSHBB_MaDGCx1cf3FLRkQW2Hh-Nqik59QvKGxE1w0tAXErhkQcnGHxL0R3H8w3Ikk44IL8F26zuH8ThF5-u0W_GPxfcc_FDRHIdyK1O7YW872-NAdZJlx_8V3G8RGMU9HzxQ8cMCoAufpmCxxC4FZATA98dPHdx-sQfFAJ2McfHJ-Arhtg4eVXoNhcxITiQmAJjsX6FUhkqK4GVApUZe4RgfdrtFMJdCTeGSo7jq8EH2grgA4PeL8GNhnhnCT1EzxBCb3H0J6YYwnvx6AHaIKJF7jghKJSiSuGSoFcXrEbhKccAlpx_MJKjBuo1sLjwIjIUtr4UxiRfDqJ8CRZGIJysfTGJOMztEh4eF7vYBdAnMhv7hRICQ4ncJAEYk58JNXm4A_RT3hYEDhfiT4lxROCIk5JOInqyT6WA8sp68ocSQd4vw8sV1FRJ4SflGJOdoSuJC-orjABuQdorygNAWALPahJVjhkn2JvDq7FGuDTp8GGhRADUmfBZScAH3BBaI8HmeQqBqD4gpQVnaOegzM8FCoceG56eCEIdgF2xQ9oYQig3SRPiEBOCHHjJgLsbo7Cgi7t45LaVXldLKeq7nMkLJ7PsOEIJnSVMnsAPSQKHbJkcbo6dgVsqD5LOBHiu5vhpyRIn4JkyYWDHJtEaclJOooGDR0AiwaxGfJqALBGeJ0Dm8mT-TydMmogsyfMm0eiZvpZngRrCeFoICMXEnqeWyRCnWJNUQcnPJMySckQpQEQfJbUcSSIkXuZ7iQ4gIyKQsl4J-ySAAgpRyZimvJ8yQvErGhynM4PeY4Koisx1YVvFYu2ybvF7JNieimgpSKjkFcp7jocEkOCfEz5NuG0aFHspNCUKnApXSdSlgpWKcmBvx_Dk0EQAIPBG5LakABqkehHKRMl0pmiZIlUpLyYKl0pUMS8BQIXgFqSkOkuDRCgQ_ybdFX2XKainUxlKfKkmpi0VynZuxSNgmRIFwDm7QAVZLyhvBQQMu6u-AKYMnKp5KbyluphyR6lGx2ybwnNRQqkYF4Q_Ng6ntxTqfMm8JcqXGk0ppqcmAaJqqc-gVAD3jRAcyfUJUTigLoCDykpGibmkYpiqbSmFptTjElHAlgGEARu4oGwCBpdaS6lVOxqfmmep2acn53eJDhaAaqlkClFwQkCDEB_xEaZSkjpDafyngphaQxGJp47pWRUqHjgCJVCbQd3bIgwIJICEuXAcYh1p3ETylopsaY2kCpw6V7I0hD8nAB-BMwLwGPpz6cin3py6Qqm3pCaXHheywqRfDEuF7oS6aMmwBkST4Jbncl_prXnvHDOg6U2mmpXsqh5akB8t7H6WsAAIAHe76VBlIZX6fGlHxcyV7KGJtlmojgsuPgkCM-ceMIRBQv-psk4ZZqHcHGeDwX8FPBp6OTBBA7ABiS9JAIf0lsZ0yOgFhw7nqMnZRWLuxndAXGQKEFQzgANB4x3LmOAgI14Is5xJ_ymN42wyQW-FSZMmbsnkR-CWJmcZ7mIQGaZjMSsZxJV0izEZOsoHcAZpeqVfZGZDyRSl6ZEmbRFGZO4cMBVeXQMGku-MLqu4uZk_o5kGZkmdJlJuyaQB7Yh52PJnYZC6UZn9pLjv5lZAhmdJn0pdTvkAXwqAL3akOgfp4IgIO0VFmJZ2mSJlD2cWbQAJZA0CfErGzcOlEXwYblC5CqvcJ3jSpBTqJmJZ9mTGlFZK5jkGaZKqeVlwAR9uCgUkwjsICVh3bhpmJZhqbpldA4mQFnOZiWYYmPOBrlclH0-3pBm5ZpWTFnDObWSVnci2bnghtuTyph5SpPmYlnRpV6RtmBZnaDM7n8f7hEDMpNafECHZ52X5kTZ-mfFlnZSaYD4QA7sVcmNuEwLACbARAPdk5psGaJlPZTmR1nSZRaSsYCuY4FWSzu3adBEA5Y2Q5kg5U2WDmdohiWfLgse9szGKIizlpbjpeOdQmNZhWeDlrZwORxmg5i0ZpmSo2bgQ4lRsAG25ppPSgDnHZrqadnTZnaJhH2yUCIlDNOnYIkD4o9ASNkc5j2eTko5lOc4D1oE7tZZ-AWfl4FCAUlsNm5Z9aCLmTZL2dNlCw78Xh7RAmwGS4fityUrnhQiOa1nI5auWDlCwDQYR5RAYXIyFuAp8tZk0JUmebkq5z2cVmBZQsEBFNB8zsx5k62wHJ6HZ7uc7kU5RsTJY4IqqbZ5_QizjeAXwlkEkE5ZjqZb4kojGaAHMZLpBAEQhNKC74n0DgOfTcZiAYCFR0p6COjDJOdsJnjJV9rQFZ5Z9PMCEBN4PVgFQDbqED_K8QCOCTBrriWGVkGAB4nx5_ALXn0oQOUPYV5VYlXntZi0SOiyIMzgRGYAvVOtH6R_yhaDdpLoOGnd5RAfYDj5k_oPmn0OeQKFj5ZXg24W8DgGTrdA0qvgEPekQEeQ1KtAQwGr5MGZemupG-dnnV52-dfnaRQGWBHRSv-nQAHZb4TvlG5V6ffnD5SIdfmGJlCaQ64UrgH4AxuW0XHmZp0Djvmk5A-ZnlD5W-bRE7522V9EKQpYQ6C5KwiKkkLpqBevmIFm-Y_koF1-cn7OAIEa4CKRhPl3DlI8DKDyJJEAJhkjAwgLgXL5O-bbEgxwzv_nIFOQTvkMR0EE7a_6PYZ3ijAVkF0BX5siBek6ZFKdwXEFvBdfnciUKW0DjRxgX564skWWwUKFBBep5EFI-UbE75kaCZltAFoJt5EAUQIkkwQQQLk4jAEhTnTaF6OLoWAFCoa4EeAfgH6lFJGHokAkOEhUOHSFMabIV6FR8WPkzhc4bZbmFSzquIJWXST4UtZf-YQUP5gRbok0oq-fP5N2eKuwD6W3MIkmRANzj4W_5d-fEUAFT-QqG1Ok0FbnnxXdp5CRFlAdzD_Z3-SkXwF5eYUU8Fo-SkWkJA1ieQ1eZDtkAsADWT05YuwRRwWfeARU4X8w66elGoA6UYEC8ouSrEB9Fezk17BFUhQVlNFOhQkWjFihZDlYAo8RYiTQZgVDiYAPhdyL2FleS0X6Fq-Q3aJm0SNsVUQ7AA0pjgf2bcUWIriZ2B_yEhWPb95qxQ4XrFxRcJHdZwhCS4ZZMEFV50ZeBRcWxFBRWsVFFJBYb7aRkxSS5xA9zlkw_A7xfkVVOIxb8W1OUXthFoJXdlpaMgdAOOzbR7xY0WwFzRXIWtFhvtm5o4-QFn73FrwO0GvQAoLQhUQ7xSznol5JYkXEJY-fa4iRFDrknihCkZxxdA4hfUWG-QxXrEYlMJQslFRKQFQBeArrrODylDXmCWG-yxWXlklUJWcVBFFxZsWcZaHpbIFJF7m64DAS-TAXJFhvscWfFmpd8XQl8hUNCHuVsViH3OfeJxydBNEBkASFVUbfkclWpRSXnFQ0O47n8EYXX5ClzdokBelEJb6W2l2pUkUr5Q0Kh6dBPWVDgzFHvCQ7eoIKV6VolLjlKX2lI0evZ7wMAC-kRFcrGB7CgAQWKUDO1pRnl-lXJeiWr5QMc1EdFQieRneoFiAVCspaKP8oSFQMScVIF_pTqUhhBLmWFTAywbiyYFUwJ5AzBWTriw9lpJTWUxlA5XGVj5gos1E5OrCZLhSy8xSR4rl7JTmWclThfyKYRDITQBsxFiPiUcQnUaqVHlfZY4XFF_IgxH6WCfA34sIG8HjLSyoroyGL-6GITn9FA-Q2XqlnBQMUHlT-TU7MJ9cv1mXuEFW3E2ZsBfYBgVt5T8UkFNTiKENJzJW8B1-L2K6WTQ3kBBjje9RShWIVdpa0U1OYLqVgAOs7jeC9Q86ZoWkVRFbGXcl8FfmUWoL8OL51JkbqxXuAgrvshX5NTvOVEBIFa8kyWp0XDQsgS2hGDpOBcROU5o1FYEA4JdyTJZJ5ZGGAGp5Znsg5hwIKacVyFqlX0nOeQqP_RghQmc8FjJQFRMldJWlXWUuOpKND4zOooHpYO4kyKKDOAeEGuiJIc7g6CGECQCIAyhC6dZWUxPpVZXmV_ZZZVwZ9gND7uO3aMJX6WDuLqANAD3m-KzgXgMZG-VYVXzEBVcGUFV3lryalW1O-lpND6gbbM4A3gPSDlgHp8IPrnL5flfxWaVwVbMmpV2bp_iDIhoM8XxAjCGqhbJ9VcukWVdVdD7J-eVXOi6g7ADFW6gQyM0gkobleTCUguIesF3JqVRKVGpmVUhWCpqVY-UO4AAEcNA_jpNClhGMF2Cels1dD6AVn3jVVZVy1eFCLJ7APVi15AyKQG7eGIpcHfpHVedX5ZGpXyndVJyWFVnJl1fqBxSN4AaB4Qt1efALBCzk9VJx1ZdembAtVR9XnVSTueD6gKISSjRS_SHFXipRqDBCg12ZRlVTJ71dlXnVuVZHjng54MVWigpVSl5FB1RNAWwV-lXjVdVUNbjWDxiZtbg4IuoM4COVxNaVUEOneIghEllNTKmfVe5VjUfkdNWdWciyfiiFw1xVSPYO4w6ANnzAUBaDXzVjyYtXEVCaZ9UMRzgA0AHa4tfqA3g21WQ7lVVXqDVHVesSdVLVnqZ9V6lGtQdqko9oXrW4UaCAl6gllVRbW01p1ebXhQSWQVU9IWvvtUpVHtS9WmVTqcrUMVA6WFVlZGRduzF8QyJHgNA4wV4G1FojhVXmllKWHVRlgVdjXC17tV1kZF8BNtVO4DQM4CGhP1PCxd5yddZUAJ4NabUq1BGWHW1OE5NFXngBdetEgeGGdZIZRB1WAmu1ZtarUe1Afs4Ako5lpNC61OCKMhzuqIAz725ROU6lh1AtZynB1S5cQnl1fVdHWTIzSLqDdIMtUz6d2nmoK7QAT1byJd11dXGXWVTCYmYVQ3qLVCqI0QBIQMF4put5PVXCZXXz1IVZylhVb2Sn7qpNzihkRupECfb0FpQQ_Vp1gtZDVu1PdRDl1ONzuGCLOvYeGBqBB1fWlP1GdaA011OdAS5uZJLhe43uIoMmXo4D9dVXP1dValDTOUcaI4Z-s5BG7QpFDjc7Wxs1UQ0B1x1QQ0fVRDe47R1FoM4A24_aNbV61-ln0BqFHVcw2H1IdVZXwVjZevb5VwyJHjcN2uVeXO1RDVN4gBylSnmYUalZAH8ApQTjV_BulUCFqNBlX8FGVedq9UgA6jZnVGxuwpYATB_QtMHD5VgMRHtB59DY3Elb4WY2T-xjcg1xlceGFVs-qqdBHqpWHjLE9KGAHdlvhHjcWj0Nesa43d1R8SE0KhEwT0q4hCzu0EvAy7uB6ru0TUA1YuETUfXEJ0TUk6NuwUHCmsku3guBdgSCqk2eNmNRk3H0JjVE2eNtTm4A3Q7gH4Ai0hcaUHFhLkLVDUBuLKk5lNtdC41VNbjdk2eN2bs4D4e1qRgCGO8QMeBkxEZcE1DNfTbWWEBITTOGi-DvhYHtBFwEnVU1RjWFUT-4NZk1CNwzks1JOqfvU6EltAGgC65MEBB6zNZXhU1D2-zQvVVOSzXU20APQX8kHyNEMImjKXyR80-Vy-c83zNi5S_X3NOzc_4TZNUHsjrePYcKCPwuDTc38ws9fc39NkTe407No6QyprNrESB6qBNSD024xgLRo2LRITZcXlZmwOdib2cACfbCAzQC1UAepdVs3EtYTZIkPNwLVfbEt7jrqA0F81OM3d2v9kcAmBkEQvibNNCey0Et1Tai2G5STtY3XO8CG4Vg-Eyv4AaFydcS13NbLci1ZNTzWFVWOZ9UfZwsAiHKBLOy8okDgeMAJIAjN3zYE1ygPTeUl7N6rQc0ZNYVYVEmZtcv54sRUkbYCyRfzcq2OtTLfgkstizY63uOJganAwAJGcI6mBOvgs4KwbAEeQmtPTWE5itAzZq1moO4SG3eoUlT44Hy32M03xtqrdA7-tAoSE3MVEnMKDCM3dicZys8bfxUFttEUW1-RzIQ5HCAVYhYi6gDbW3Wck8bYi1qtCzYW2Ot_BS8ArAvLS3ZHAl9WOD2pCTXfE3N-7om0otgzWah6l-lmllwAs7ou2KR56PG1Wl6VZU09ttbWFXEN3Lgziw63ya0gFAZMbqkite7b60UpNbTkEhNJ0Ssb1QHCEajmBqgecFoAdgOF6qBPTQ9G2tO7be17tuTRKCN5KkK01LOQHXJ6PVNzb2UKACjejwWACjehph2C6pnLK2jNmOBGOk-MHZGY_iMeCYd4diLaGNuZYtG95DeU3lsxreT7Ht5A3vS00JveXfYEdgdfm12tjzS45mNFjW0FWN9jc3DbRdjUXzcdvNVPXQOzjd-AMdn3lIFDBRsZsHsdUwc0DLB8wWe1LBcwTDELBM1QumbB9HfygrFsgVkE7Bi0XsEHBRwaS4YdZwfrXQ5xQau63BInZp2GN4nbp36FJAWQEUBVAeKG0B7HBgAMBJARp0m2hjdolPx3JSiH4xGIbiDihOIXiHGdKpWwVEhVnd52Md_AGzk5BIeWHk3OEeWD7R5XAWpkCdf5dd6J50XbmKxdAlX-2epwlZDmeaYlSwmSVlBdJVfuADnJVetWzTgiKVCgOsAIdaprh1CA5FHIp_SOsLDQ4QdFt1bWwcMgYAlUfsIYpBwJirnDhwaLgohKmVKuQAdNaEOcQUU9CmEqQYHgJRwJmLmPRwaGxkJ5rdAm3WqaRgrgJRBGAsiAzqxaMGjUCPgTqqRhwwftm4pKmQCKpQgUXCAZRiUI-P4go4zlrlqMFqIOeBPq9SmEjZSZQmJQ8YhfALSrgImPlK_CYcPryXooIqeyQAwCBeCf-12pvBnqdnj4ztiCQOD4XwcuHwx7qtHDiRtq3QJD1A90PVCEV8CPT93I9ETBJTrqnjJupXqWPQgwd08QDj19U-PVbaE9gmMT2cAkGFD0SIfwpUJR89ElT1I9f3adx09Fegz3nqTPduoJAPQhQLs9ePd4zn4XPaYRBEvPfpCPAtDhQLVCwIsKKIoiPb90o9Uvej0XqCQCiKzgaIkDRSgyvfupq9aQMYQa9S7DpiTkxvTT36Ip7HoycUXasGSlilarYAwggoF5ATkE5CvoFo9HFCTFsvKoBqYcHvRL0wA0TPs6bax-tOo4o4oAyBYwuGHH1o9VvKfCZ9zlgygoUJMpgCnq5IuCiF9eNt4yaYn3dn3wUGfU5bZ916lbYMotfU31y4s0HX1y4qKBqCvmAhEt0eABiPRzvAgGvLJoQWyBUgrGrgN-qYA4_ZsjbINRKoxnM3fbhir9qKPuLF4a2txgL44mubbj6tMPRzr9H_CmqAacbEcALg8-MWDJ9hTqn3EkSFnbZb8UAD_TTkF6jxlSMEHHEhcAYCGmzP9_AF_3oAYCGAygcCspP01Ev_S_2gDi_WWTAD77M1rNUlABAP59OKAyge2OJKth3dKkFBqPdoCDUTqU0CJjqvdqtHLQfdHfeJR7qpGKQNg93mHFgC9pGKT3UD5QrD0N0lPauB7qbDHn3hwjPZj3y9UAPb2c9TvTd289DA8QKC9YcNbzw9bA1bYcD9PVwOy9PA64ys9fA_Awc9qvRQNxKwg_z1k9Yg7r2AiovVINO9qPbINeMCgwr27pbPSoMq9BLOoMK2WvQqi6De6f7IG9KNubTSDRg9L1yDGPb4xQAVvSkA29yfAQD8Dag1bY3dLeEXo4omTOjhq47A8sRW2H3OEzPqsfcWCYcUTNrwp9APen1eQVfZ32_EyQ5wPTk2Q_uol9ufbIPTG2Q233MkZAw31ZDZAy31O9t6nhxRge9sTgz9gGi_2nwb_Xnn9JV2pZiqYvUr7ikDWfQdj7oQw87139pPUMN5kF_VCwjD_XDf0X0d_fAbsENtjfQlDHg7Lhbqktldy1IsDPagbIYA2WRIDGxlANAD3jA-zSaCA0cOv93jJ7ZwdiFssNQocAoIpl9nAxsNy9Ww1yxR0uw0eonD4Aynrp0Fw_lBpyi-K73L9Sw1WLTkkQxkDRDcQ1CMW4KPZtDcYqUlLa4s8WOUxbICQ21rF8fkBaCN2VfF-qAjI4CXwcEi-L7aRU_tg90qUuA2WT4DqAJpT9ciCJtjm2DjEt3EDOSIh1iYA0vEO9SZYobpWUIwHfBDg2SFfzUYsSvyicEgowRgj61QyKyPylQw_1QovUunSdkVwDgMOSr1s2QwILI5CTnYko89IK2ZI45CodcFjgNE2KOHACk2b2EQO5kJA3QgJ9_3esBUDogzQNpEYPfQNaDjA38LMD_ISPj2jtPR4yeDFvcoNeVVg472WILvbYO7dfPXNAC9lHBT2SD_KH6PjYAYyYPeD5dMGO49DvQT0RjAWJoMxj2g3GOV2evezq-j1PYn3uD5vXL3wMivdwJBD1g-r2baO3XDR7d9g0WN6DNQi4O1gSYzIMeDqY8z2-D_gxiJ1jYY2MOhDNYOEpJjAFPdi4sGzMYz-9QgMTZ2AZFEWCulgfXYCWQGSIkBh9EfYf1qm0fXEphD8xHkNwUxFmWNPq8wxUNpk9HBHa5iBaE8Nhw64J0GKQd9Bsj6A0MPEBzdCsucRrDP9MCKi-eAIUNV5gms-NmEP4__3oAjgLTbeMsOFVgiA8QJBM0AzwxhycDwIghP1U3w63jYMSE-X0gAf43iCATswMBOTKt2E7CPDN9J0lTAj44u4giAI1-OIT62pFArGs3fN2Ky_eGBO4T6AP-METGSH0AgTkJMeMeDqE9gxxM6dBEBeOaE9hMoTEE8JNnDUKDTb0T7E0JNQT9iCsaKTnE_hNkDQE7xPETXtvB2ZyjqMaMto2KCAifWpbKfBaj1o_hhIYjqMJiTknZOtAyGJIwkD0QNk3yOkKjRM3CmTJotkhijrk2n0wgIQ2YB-TjDEcCxjvQ2Jh0DQU4qjt6u0BqBq4q_cmo7m05PFNkD1k9FMCoyU6v11DwTN4wyjKU6MPZTDvVAgig_fT-SD9aUzHQj9s_f-D7D0A1tTT91U_P0HD8AC5PpTaAu-DBTu40haZTZA61NkYUU1tr5jno16Pl8CY51MhEbg2b0y9Xg8z3pjw4zYPjTVBLCPCg96oxQpqQTBVPRk1xMWD_qT6tVN9TW010ozeV_ZgA_07k1Ix9ii9mqyLTG7COqN9ow9jhxTq_bsTX9yAzUOjDcTAdPVo4Q15DjqBQ7UOBMrfVeqmEF43L3XDPA08HXTbU_ajnTHGJQBeTvYuVJXawVIkA2YtkNDMji6M2Rh5j3wpxiVM4gxjSsDWM_KgxDU04GNVjZg1wLu8804FPEzZ7MtMCAq06eTrTT6ptPfTR4zVCxDC2IBpfTZpkcAnCJ00n38AsM18M_0ckjX0DTh05kOJAhQ49Mig-U85YvTp029MyzZA59NjQN0zFO4aFHMpT3TzloVNcMIM2kO397QygNy9kM7zMwzpwB5PwzDOMKwWIJwsjPaz4PXTPtTks1pha9taML08CBwjdOkzKY9wPeDA40nxDjlg1mO0zfswzNMzpUzQwbTJOJrN8jgGrtPczfmO7N8znAMByCzZ09bMXT_ANFiXjCc_5P_TD01UxPTZA0rNCzGxgX1qz0EzwiFzIUyjN_T1cwVOAz9Q8DMQzKfabPs6EM0_ZQzMdCLNHots19a9i0WE7MNa7iGnNkYHU9DNwwwU_RwDznk3bOnwfUw8jkj93SaNUjCMzigWTQVGyPrA4SvZPgjoWoviUDdCAvNDzZkzigxKp8xf20z_k2FMg9kU-OMejzo_jNl8uvAmPMok0wHPyDP9NMZuMRmoTPBDgg1Ch7qGTCtMPqMc_YxxzD_NtOczAUynOYAoGqHac-Wc8LM5zXYpdMLDyC3dO_T-CGgumq4KMKxbq4M1guXjgaOfNbzXkDhozeY8zihozbs5GPNj0Y7jNlC5QhIN2E_s5wN9jhCzMAALiQDWOODAgy1OgLUc5AsszPuPxpwL42ABqpzLpDh2NZBCwPNbq4s4sO3T0s-OptDFfXwsdDYM7os9zV06BqULS8zigOzjWXQt4Lx4MvivETY15pez5gz7Odjrg0709jlYzwP_z5tneDBz6Iswb1jICwWhgLd6uIs7mMCw6TSLyc_-A8zYS1qyZzuQ8rNdGGC6LN5zwHOQv2oP06jP4LcS5XMeLZszwOkLaeRLMukxi8POmLo8zKMMLU8weM1g884kuDzVC4kB6yhk7jQ4DO1nLg7zT2m91y0B83QyOT-4zWD-IXC8YOBzzPa0tn0UAL0A2q3KMItFkjo4D2MDj89oM3zsw_X1cz6TB_xBMvI_5NJzqy_tO8qICLtZJImmCIOlCvwiNMfzkRBtYEL3oyz3F91yFouCA3RPyF39ti3t069X4Yb3SEly1ks_0T7E8vFsXUw8MFo-y3Ljp094_cv5L_wV0Mf9io_ANAjpfZXPgzoI68TrAjqOv3FT_eCmoUUQ_XLSuTI_T_TArRQ9P34rl1oUux0o5tUtqmaK5v2Rg2_api79bjBgNrzWA5SPAIMAK0vgIB1m9Z0jhA7vM2jOSN0uOMvSyfOzLt8y4sVj000GOjLH46k6ZI0y0ssPz3GE_MiryyzkMILaywIwbLxOC5jhLOy1EulK-ZF8sp6Ryy_MnLgvWcsxoRM1igErVy3nT1Qty_Cs_LjywyLPLns0RoSDUKNavfLXFoeh_LrvUfNDsBK6CurDr01XO5L16vtibDEUtCsFohI0hNdzXvLB2pk_hLhxZMTON324w3fZhheQLWg2JQrXYpRzcY_Q-sApr-HOmvE4SI5dyfDqI3RYYjma4FrYjmpgNDIrNYKitkDvfSVOYrigNis5IuK2qYeAxK7tbF9RKx3Akrm2o6ioGR_b1ModFIxvOsrmnlDbhA7S6yN8r-83ZM9LUfcKv9LZ87UvNw86z8BjCPk0ss2D98wWPhTtA4surrQ06_NMDo05wvfz3C8Mu8Dc02HNyroi073gLjM8EvnGoS_IsczMi3tN6r6c-VJKLtS1uoWz0S0jQKya8N2pg2B6w6tW8UG0RAwbC6-hMYUDpOfN7r-wDQuc-Ts4hvo4mG-EDWLGg1GPHLPwmasEziDpasvc960Mu_zzPYIsWDIY-HP-LX8--tBLa0yEuszUi3-sRLuy7-v8zii16sJLGjJgv266QxBv9geGxkAEbww-CtSbyG_uuob4wrTAYbsGwQBmL_RbhtoQ0GzJtEbTC3Yut03s5EZvr_zGTM8L8DN4u29gQy-vALIiwEtiLHG9-tcbsCzxu6rci-nPRYIGyJtJLKgCkukraS10rybMmwQsbIOm2ptt9ym7WCqbKG7azAcWm-QBhbKG3pvesNS95uDzum9OvrzRkzgMybDZLDYJApDJZMQoXS2uuCrG685PKrx6w3MKrqmE_NYsV66auFj1y1RtLTYq2ZuPr8DDTMsbq0DjNhTfwhwtOMgy72MdbfjEoNdbdm7mMkbJq2RuFjRmyWODbNG8Nt0bvAwxsZjqg34sTbPW1NsNbM2-UJzbTgyCIj4Q224tBz1kNb0hzdvTZsbbMywrav6FK0hZgLJ_ZxuSL2q65tqrfGzFOy4BC28M8DHwzcypLRc0FtqbIW0DsobEW_KOArWKPeOy4tE9ptIbMm0islrMuAiPvbYWhEDxaNbElp0UNa2ACa05-Ptj0Y60MSO4jhoytZZbzS1SPOAGNljBPWL3bytWTto0cBJj8q6esLLbo5eusL5PWZ7nLTjN2Pir5M6YNrboY9mONjvW6ev9bQC6WPi9pvT_MzTT62NtXbI49z1bbzC6Rt4zQvQ4uRGUuyb2S9su0GOrb426OPEbzC9r1Ea-2x2OrgfO-1vLbFm2dt-DF29ZtMb0y8rvkYE42eM-4LmD72bMIKB3DU7UwGuPB9m49uOH6K7HuObrpzMqtrDyau7uVzgGpePrA14wR13j5EyAB7IXAFeivj9E8xN0TbEwJN_zcEz4P-8gA0DZnD8KzhNiT8QGpQu-cTCRNDs94-VB-7Geznvvj4yyxPfjee77u42t1iXugTHe4QteOVe4qncqdw0Z6YDDNnBbmkNkL0SdsyMkqaBAMARBhoI6AD0K9ECgiPgiYCgmiNqAGI5zArGFfMTtNrZ2hg6zQm-_goRaIsHvvEa6FH6ssLm-zjvBkP9ETs4jh-z9wKCJ-xg7ha_ePwCP7yu96z-rCgmOP1bqhO5ig916zD23rTjPRzlQ-wPiCTQMoLEB2egBywumYoB41vsLku5AdqmKB-VJIHImCgd9bgmZrvzb-3Uhbz75CJADZAK-0GQoHa-7geQY-B-LuEHVMyL0djZNH2tAdMQBQfL7GDsAfyYa--sYWgghigcJYVS2PvSgaHXmxvA_-EhqDgqgXpQs4jeCVtzQDB8NPgHPO6ewcjcILMwwYzgLOjzoi6H0hCD227wdsY4uxLuUbn8_f3sEcKHIfpMMkQ4tgisWLYcsY3s5_vBkiZpKSXabh9_ueHGvS5wvL_kI8D7bUKJofOHOAM4D6g9WDgh6WDQLVBD0r_LIdpMOh5EfRH9gLEcro3hxfthw0Wj4SZHP-34eiHTK-PtGTZ4PXS6gjgjN4mH4rEAcqHYB-_MWrlh_6vQH0XkajwHcQD7ApbWByAc4HmW8ytwWlilkBqaA3ESr80K3X0anAJUbfhM2VMIZpnwSnN6LVGiCG7pFEbB0hbBGO-gSYLHbxiSZGHJuxDtVi6x7mhEm4ZIUoVmwZDICrK-xhYZ8mdZp6J88ix-0I_GExrWAFGsAEUZZmTxsgaFHRozOslH6HUQczkmAK2TOHrNmqY2HSRx8A7TLNMCcQn9h8wfeoCR31mwnrh2ftf7WR74cEs60iFybSB0jhApAq5m7qNLvx7jSQAJyrMCtI7SPgQgIUoCHZnzrPB5KTw12hMci40x9hB3gxNA2YbSKsqzw7j1W90S4YwAGKP-TxsqogzA9gFmCHryqxADIcGrMnqp6SLCiz0nhtMJDZ6jGnnqWsQ7E-zUss0B1wMncuM3pngTyiBEFAxNBzYEA4oDScC4wRLKeHLaeoqftIepzBhGsJrOCwanCPQnr-I6gLadenyLNKcGQ-eiSykDUoI3Z-QWp5Xo4LoU-KgpooZ_ycWI6gGosxTIp7MCzQE5IITBnYYBqbIsTBgQD8w9Gj0Yl9wpuKiYy3RlMCbQ2Z7meuIhAAWddm6Z1ang0ZrOWexaL6SzSFn6Z9MbNyjZ3WeRAcRtaw0FopyqYWASZ2Kc0Alevqx9nswOKfqb-LKDBaI458OdTn9iNchNrs8g6Qr4K-L2cZAop5Oejnm0E6r8aup8qf6ndrDjiTQGylbL4B7x13LZm2BjLY4zQ59uf4szcgzoP8B55ZDYQzemgCM4DlfqCDofkK-czHH58p0CA3580gb9cxTSvryIxtPA4AHR9jNRjH2P9qnMYh2xpGTI7DWx1sENJOyy4KGkdQ0AKCD6DYdTDPtjz41lGOzg0DbNhcIk_kNFRrEabPtj4XcoGCOr4kx6TAsASkqBkUX-2BgNUWC1i1SdWagP12wyoEEN24T3iNQAtUetF6YgAOkunkYGNwHcAPAfEG0i5yYjqeBsg7wAMBegxDLUSdkmhAcLIX6VljBNULVK1b_SAkA9ipUIMsRCOSailorCcK1IVS9WIl0SJOM-wN_KCKLoHTLn44tECBOMbFx_JUypCv_L8oiUF2AgK7AJKhYyNCvyhBQIUD3Ip662tFe0wS5r1D9QhvkldRb0OATLomHspjJhOW2ZyKaYzBZQrNEZoNsBUyZV_zLrE_KMVfoA7MnhQVXEoA5a1XmmHOrDy9dhvKrgaCvC4VwGAL5yUy7AEPJgA_IsNfDXmmAwoZAGMnArCE4ikPLkA81-NfCgjCswoQArCp7LRXcsm6JoI-2NHqskLmAEpzS3sj4C2ykEPbKaYoV-6EYy_IhtdjQHgmGJJHu1yeyrgB157JHXlcqdfVyq4BdfhXIYRtc8XHVnuyxEOigN3CXdsBnCho-bpQCmnroHNazAkN3URa29VI1T6QDuPJciquwLDdCgXlY3KTFBMvJdTW4N9EhGOYhWfAPq3QJjfw3cQB6UWgaAMeAk3dNv4iyWDQGrj1YdlSJaEAtwPcCPAr3LizToOAFgCJAbkE8BCUg1i4pmAzFuzaugvxNZTTQkN9DdvYLmHjLlX_I0NVo3aANsDzQuQP0BXATNyzd2VSwMcZRWZSPiUZAelFcCAoMAP4oSg04Dyj52wJPoATpBSJZphwvqvuKNEwt6Nai3IsMZBrQbaFTebAactZRE3XhvzZn0HpQGZVaZO0vCrgut6zcNAft4jdvw_1z9QnWJSP9aVEBK4JeMWw3fXCC2U8CNb4U41i_AGqyN5Lc0ACNoDd02TSyprrWu1nluwQnK82R6mE0GMfN3qIwQf1HcPasfsEZd6TAG2etligG20ikbZKN9qPAxSr4yzKvcozTNWjJT2-GrhXM2w2rgNAWZPcCd3LAwJmDnlChkB3giAD_QWg1y2rgDgcTEUJ7q0hnHu080hhYDXLdq23y_LAXG3zTkV9yETEXz9wbhRrtqHMJji9tnMJaN0tq5zOiH7G_ccE_Ym3xZC6AlLxrnUKMbZgaxu15oKoQBwawd37yywb-rvdzgD93p7EPepAI920kOk491YpjLEy40S7kH7Grj3o_AB0QGs5Uq1IuI04Lvf7399yfcQMVtufcWOl96Uw33btq5xMPj96fDAPX28A_X4H9__dbc396A_Pcf93HqBogDxjTAPP9wA9V0ED6ue3DiKDA-pmSFwjT024hxPu13bS5jqRKr2xf2VrZvNCx6ayI9sPGrplBY9Vr8TC2oQ922k5rIPzW40f3DVYug-YPe6Ng-C26j4ihFCBD9EBEPU9xNBnkOKGrjz3i91WvQOvkiY8AwtD0tc73pUPveH3x99BPSGZ95w_sPrnPI-2r3D1ty8Pz3E_fxcCj79xSPtnGOJAPxTxI-_c8k2iCJAQjy_f6ADT-_dpS8aASJjif-y0zOi4D2oxoD8qL48aPHs_BcIPLC0g-MH8Y_Ew2Ppj7hc6gIj8tRYnJSMGT10NEUqhKDvJ9ez6AkT9M9TPAMClrYnSzwPT9oK6EMp6Hs9GkfHPIe8yixPyiMsTXP1AHs-LP69ys_pBXqOs9uP5gB4862PNl49fPw90LZ7o_jwkAT3xD5kif8HCOQ8H0lD8ADUPM3rQ9z3-2AvdzP0T-lx3PhCOSgJPmGkk_8Ajlj6vOrU47TwZPbfBffZPtnFw-2cBT1txFPZwiU-SP7_Z_fPcFT3I9VPMdmcK1P_Ns08zPHL8I-tP9L-rwdPSa2I-lMPT4sx9PAqAM_krdw3dioAyd885_W51mRRZ3Tl2De53g1vnci3UABNYl3vsATa93Fd-JdLWKNlHfFHuNHWRlk9d7SNt3p2vyuOP-ps48QHJBz3eI3GD188D3iKN4-4PkdnuidbYcw_yEv0ZLbZV0gj6Ux_bbTwUJV0xc85YIWzi_ADyPxYA0-1TQA2cKliHLzS-lPdL6I8Mv5T0K9KPVdAPNRvtYKm8yPvT-7ak4UDwWi-PqBgEe6aTj-M8oP3d-49OvnjwWjuv_z3g-k4ig49Reo9vTPfyoA8xC8lSULzC-c-gUnuj4vgaH6_VoAbwS-v3wb3M85vtPBG_19z9xO-ucU7yjwJvQNkm-nw-b_KiFvW3GU9nCY4t0_zvDDHm_P3e7wyzFvRb6W-qPtMBW82Ld53prIPwR648KL_Rfqx6aAsyzQGsp-24RonHh8RoRj-xx8-NvLr1g-_POD62-ev7b5TO9C1M2HM9vAqH2_oc_b5cCDvemjQ_UoRS7Uv24xYDVInCI78mT8aK7_ahJz6TzO9BGc77gLhvzc5G_LvrD6S9xv8XMm8tMP_Be8tMB75kLxcAA4m_rvvwzANf32b23wnv_c7Us7vRYLExEv1T6e8sxRdtR8ivJb5e8y20D7dgPvxh2M-ejTB3B8sHzg_W8gfZp86_c2rr7TAtv4rz9y27MQOds-Lju5mOIfWKH28NAwHMi8GsXUsAzYfaW2ri9h6AGrirbnvLh-_o6H05oEfHy4igksJH7u9Mf0766DP3Ib7y-aiub2J_P3-c_J89StH0u-lM4XzHRrvv3FS_T87H_F9Jv_H8EyCfYD0Ggpfmhio83vyn-W-qf3x0a86Pfx93tmvm8PqCWv73URebPczx-9OaOzzZBWPkYBOS9f1ACmT2P_KNW-2vtby4_skapp89GfP3KZ8Av-D9j0If7LPoCIvPL9QDIvQ32i9OLT0qfcMftPNl-pfes-l9zCmXwwxHfv3Dx-bv0_Bu8Cft39u9cvnALHxMi-Xxx_pv0j10_xcR77ZxCfrnGe-2c6e3MJvfiFx8IKf170p_9PoGAKyPvNb5p8TPmpzN-gfc3z8_c2fz-K_4CS3yz2dvjG7Z-rfNAOt8ojW36i9DSa9H28UPIAFQ8YfsLyF9YoY79WjnfAqJd_Rki7530CPB3yjzM_W3Nd_3f6vHd_FfD31fNPfQP6wIg_MdJx98v331m9gPpTAD9zCIv1txi_dwwV8q_9qL6y-s4ryaZVvNr4aTPvAJy1t8jAs2Y9Bfii9--fvH-6ifuHl-9Fo5j4wprYGfTb_KgLfpOA_zVjDi92_4_BAIT_bDxP518bfO3xBzIfGNKh_Of1P8O9Yf0ZH29OY-H41mEfgaCqaM_UOztPP3rPxba2cif5O-Rfgv20H6QDDIIJK_CTB98_8_L8foe8xe7z98fE_XVNpwh79L_Pcf3y0xy_z3HJLA_0n43-yfbf6r9d_av5V-Q_Yr9D-3YsPxN_w_bY44OsHiP0hazfutvN8QfPj4t8ukFnwUCDjl20xt2fZ7Ai9bPR8lC_bfpP5H84fjn0BhZcgX_qaufZ0mT84fXnz58An_n2h-U_0L-b_9Fcf_agJ_HP1l9Z_7f2lvifQHIf8N_x3-9N0f6f1f-z3C5-RUn4e-f07-grwJE_Pxr-XHy_uZX0Ue5Xwh-Pfyq-UPxls-o29YKK0VQ1dw406HRMW2hza-OK3SmAy1Re3X31M231Iwrk3CU231eIc8xC0FAPSm4311-k33temAKsODbwd-YH1YBg91n-HrxGefjy4BAqA7eKqC7eK3xbWGMxe4G_yRe2_xJ-hvRum9PwTmE73rm2X3rmUFDS-bPwEBDDEUB4gP9e7_xUBovDL-vHz4BhTyK-MAKMBlL0e-GgN-4Cvz0Bu72qeNgMEBRfzEBkvycBmbxcBX3zcBqvz0BTfzMB0ZGsB2gNI-dgP8BoP3rm5GATmoQP8B4QJ9YlgJKAlgNQMrk21-c0A0-dRzrehALYB-nxPAjvx8B7AGd-ZK2g-uQMEBsHyV6ogPyBJM0kB_v19-rKDmeu_yyBKmxw-KHwp-VPyc0mH07GcgNSB471f-SgOT-0QL2GagLT-HgJjoWgN-4ygKCBs90e-rH36BwAMCBj_Al-9gLuGswJn43_Ru-NQJjo0AO6BngJGBoP1c4awKiBEwKtmn_x7WGwNHwWT2WBtgJZeJQNE-s4Dk-5wKQBIQO2B3rBumkQOCB4gJgewUziB6UwSBlr1QOu2w128Jy12bQMN-L6CwQ46h_eFvz_eVv2yOl2noBRwJnG-jCqynwIF6ISgf-VdiaggIIPQUmChBFYkn-yP2n-2wJyBywIOBCTEt6du2X-Nnz6okYBc4CgLKBRP2kBfvxRG1QITmfb0v-vny8gN_1D-Jv0f-VG3rmgwIu-ugMOBtQP2BdwPtQyX2uBFX12BgaFT-_wLCkHQL5BTP15Bj_Fy-JwJaYJT3mBWKBmBMoL7-KoIFe8wOMgFIPVBWoJlBjwNFBIoLmBEQO2BLwPEBbwK0wrANXmNYGwB5gDPAVCz0oBAKMeMz03-Nzz2A5j1Re_X0G-qLzsedAIceiQKfezAPUOIRyR-HAJR-pODxBeQPtQOS20OgC0QckYCj-2DH5s4TypBPvxpBlQP9-gUhf-LizYeNUGfuA82AeCv1XeEAKQBDDAr2PgzwG1ezb4sYPqetnB5-Av0peJgNs4ybx_4xYKGBpYPe-eawze7gIQBYb3B-yAL7-WKE1-MP3U-QYJH-A2w0OYYIyBnAMjBPAKg-AqAf4sYL0od4GZB0-H1oQf0QcuHz7wKYIieUgLv-O_wj-1aE3Bt6BD-x_0NIzQJVMLD1zBVdDI-sv1qWDTxb-nP07Be_0uBL4J2BrnArBg-yuOrTCIWYALmELHzz-1L3fBgaAl-fYO5-Re0MBRUmbBMv0QBg4PghmwLUeA_yJ6Y4Lh-yQJfeUwz64DECBBmSw9B7IKrsmRwA-ORwTOjkyn-3zxdIUYMXB-tGXB8AC8WxIId2a_17eF_zdCV_1-BLIJQ-aE13BaYKieGYNmeWYKPBe_w8-TIOv-9QMhed_yHemLmqBgkMaInnxYha4NZBTUhBBHIN2-8qAHOkW1Y2W1HPeXQLmEhYPi4woMgBz3FrB8b3_BeXxAhhf27Bn327-_YPAhVkI_BCEP7-pb3QBAr01gXXQBkHViRs4QEVeg3WVeKkDzuw1nVemrwJuOr0Ruer0WsWr3WAdoJvguWwMe6UicYxANpB2w1IBhpHIBAYIG-1ANDBCBn6-SQLQO5qy7uE_0de4YJxBc4LR-kHwx-_GiEBnqFx-ZIM9-3vx4hB4JkBKkNC--3yd6eYJgAKf1B2im3vBAoPl-L30mBZwN7BYP1shyv36mpOBHBg_1Qhw_2SBk4IyhBUJnBEYKd-84LKhrv0KBtY2KBDP24hNzAqBfELpBy9BPB4LwaB9_yaBNP0ahwzAQsGf1pgd4MfuHUNOMbfG8BrnCfBivzMh9nw7-_UOshg0KNB9kOGhd72QhPPQmhTAJH-GEKHYb7wgAOEJ1meEP1Mv7wI0u-whB1-1Jw9vzmhRUMDQlEOjBoEKJBln3t21n27e6kMaeBPzdBm314heMID-G4OYhlClYh2nx4EqH2Xuq92Re-mFBhFUjUh50MRQIAOPBiXz0hKSxK-xgLh2-G3C2sELehZYLshqAIZYTkKleVBGJONdwIA0UJfgZSDhsB-GdBqUOyh3wLUODR2m-WIMKh5EIWhJULn-Lvyx-9vWahMb1vB7_00BFH2e4sXx7BQ0L2G10PCAIn35hiEK-htYDGhKENV2Ov3butb2mhkfWnB2tnmhAqGRht41Rh2P2EBVULlwjEMRQ5PzEhjQP1MzQIdIOYP1hh320hYUmNhW3FNhlkIFhKwMthP4JThQ4IzhVoNGhP0KGeTsMDBaEJyhWn2LG-gwn0Am3fexvwhhpvx5oSIL0QhEOt-hPTo4HsL7us4KRhi0IdIgLygABuwQ-2MOehHn1EhA73EhYf0khAkNE-Hn2j-TUmC-J0NC--b0ZhF0MNhLTCDeZwiThdfybBXMOk2PMJshH0JthI0MDQZUK1-Q_3-h6EIBO4_x-48MM9hiMPtQPsO86a9EX-Vnys2Hv1uh-_yc-54OrWwHFoeXUJkhwkLYhiQFZBr8K8Esf1p-T0lnhQALf-mAAEeCcJNhVH1cBnMIS28O03hA0PNhdsOQR9sPDY1X0osrkPQgHVhxseHC8hoNxzuvkNVe_kM9uGr2LuQUKXgur2Osld0NetoLFhOALzYfuy1GhjzVUJAMrhyUK9BqUJ9BCUNseM0M5IWUPHByQKm--UPYBCMPVh3sPbh2sIX-y31X-NUMJhW0MJhT_1UhesOtsBsPARpTBwRNOyWB5YIL234NKYX4MghWiLHhXTCLBvUMehr0PehSCOzhO8M6e30LQB40Pzh8INdhGBynBqsNERxnzdeEiPlQy0P9hlUKF2u5FkR-4Jie3CJuYUkL2BMkIOhEkL9ciiOARyiNah4nw0RTX0bB2iIH2VYLBSNYJ0RBiIr-RiNxoDT3bBJYPMRliJQRRSIFetsNQRdiMdh7akYBLsIBh-v1ceMUyN-4MMNIX7xrh-ELrhlv2hhGJzb07zxUQasPcR3AM1hvAK8RDthWh8H1X-vcIkBa3zkRBMKqB3UhRYdQOD-ESOHhUSNHh0kIBgCkKheU8P1oDMNAROgLUROkNZhrL2OBfUIIQKPFSyKQCuBBkK24CSKghVRh0RqSPThv4IH2mSKSRFiO3hn0N3h9qH3ho4IcRCsPV2xcPbGunw7U58JbhXsI1h_NnR-HcOGRlYPRhJIMfh8cMmRgSJRewSLiesyIc-L8KHhTmlP-4yP5BX8Lkh1_2j-_8JiELUiARdPxARLUMyeeyOe4d0K24-kK3hDDGuRhiOSRle3uRtnH0RBgMZRbyOsRHyMzhw4LQRoP3IwMr0kAFNips7KGwYeCOKoEEBVeQ1gm6BdzGspCMmsKNmmsZp1ChXVBoRkUIeoi40tGv5hRIcUI6-mYJRGSUNRGKULG-k5HShoe0yh8sIERRcKeeDIhVhs0IvhYiP6R4KNKh8_z9hcKPWhCKPKB0yP4h08IsA9P3aB5KNjhlKJaYSkxoApTDwmEwG4mRE2th7yJQRGv1zhk2x-RVqMVhCPxcR9qJBRl8KdRhtgXBKMIKBPiKbQfiODhGz1xhiKMPBm9zmRHn0WRR0PD-vqPYA_qPtQc8PhWz91DRDyJQ46k0jRmk0Im2kxjRPKO5RfaNsRjC1-hSaMLhKaNH-IvQN-_kwaRSkIWK3QDN-rSLw07SPROgH020vCPSBDqL6RtYGvh5UJGRgcP8Ra9FlwtUM2h3qJ2h5aL2hTCDPBGKIjhx0LP-qyJsg6yLv-myJdI0cJURQaL264aOkmtNjb4EaIAmnaJ4mEyh7RWcLjRe6AdhQ6MqRzsNdGx8J_hp8NXRPSLcRM_wGROaP4BUiOhRS_wd27qPHeG0K3-9UORRNkFCRTEI8-B_2AwhKKxRxMKEheKJ_hf8MvRTSMARtaOfRrUObRH6LDRX6PbRP6NGGWk3_RcEN7RQGJzh5SMleWsDagVXgWwmgGoAjl28h4EByQBS1PQQIGJAVQG8AGQH4UWAB9ASCADQ__SPI2jRAA0Rk0xKmPDgc7wGSv9F2gjEA9Ev4EG4mAHJAU-DzA_sTbgdVF845QBBAcmMjU18AW4DOFkufXWMk_6E8YRZSloCIHg4zwRcwXFnNAslwAAejJkYjDgB2fG2hPGGi5T0IFj-RGUYwsROgO4PERu4DIR-4C5YArNFi8rmFjwsdiYtxHNRxqFTxT0Gi4IsVbp1XkFihoGFj4sePR9VAFCyEXpjAsbmdZEJVjisXDdsbr3cgsbmdUoGFiisTliWsRfAcbg5YObgViw4MFisZFliEsduosbn1j_bt3BabiHcveBlicAJ1jusVJdrMdaAysZlBQsez5RDklQ7MbgBAbpbARMT1YxMSAB87DDwNhK7loHAMdw5NZjfVOPYFAPIB5AEAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};"],"sourceRoot":""}