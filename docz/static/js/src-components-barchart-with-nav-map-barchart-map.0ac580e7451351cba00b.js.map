{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","name","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","BarchartWithNavMap","onResize","react_default","barchart","map","BarchartWithNavMap_barchartMap","provincesData","barchartMapEmbed_className","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","e","event1","CustomEvent","BARCHART_PREVIEW","event2","MAP_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onClick","onPreview","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode","map-title","loading-spinner","regionColor","Map","disableNavigation","drawGraph","selectionData","REGION_CHANGE","loading","react_loading__WEBPACK_IMPORTED_MODULE_8___default","color","nationalMapFile","fullRouteGeoJsonFile","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","process","h","getMainParties","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyAbbrByName","getMainPartyName","properties","SPROVINCE","PKLVDNUMBE","getMunicipalityiecId","topojson","projection","path","parties","availableCnt","party","b","legends","getLegendXY","center","projectionCenter","polylabel","labelElements","regions","overlapCnt","j","rect1","rect2","bottom","regionName","smunicipal","w","fo","muniImuniCodeD"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.e1314aa9.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"barchartMap_tooltip__3irZv\"};","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div>\n            <div className={className(\"barchart-container\")}>\n            <BarChart {...this.state} />\n            </div>\n            <div className={className(\"map-container\")}>\n            <Map {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event1 = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event1);\n\n        var event2 = new CustomEvent(events.MAP_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event2);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart-with-navigation-map\"}}>{`Race for Votes - Bar Chart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { SideNav, Nav } from \"react-sidenav\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  createTooltip\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    handleNavBarSelection(regionType, selectionData) {\n        var newState;\n        if (regionType == \"national\") {\n            newState = {regionType: regionType};\n            if (this.state.regionType == newState.regionType)\n                return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            if (this.state.regionType == newState.regionType && this.state.provinceName == newState.provinceName)\n                return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            if (this.state.regionType == newState.regionType \n                && this.state.provinceName == newState.provinceName\n                && this.state.newState == newState.muniName)\n                return;\n        }\n\n        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n        document.dispatchEvent(event);\n        this.setState(newState);\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")}>\n                {/* {\n                    !disableNavigation &&\n                        <div className={className(\"map-navbar\")}>\n                            <SideNav\n                                defaultSelectedPath=\"1\"\n                                theme={theme}\n                                onItemSelection={this.onItemSelection}\n                                className={className(\"map-navbar\")}\n                            >\n                                <Nav id=\"navbar-national\" onClick={this.handleNavBarSelection.bind(this, \"national\")}>\n                                    National\n                                </Nav>\n                                {\n                                    provincesData.map(province => {\n                                        return <Nav \n                                            key={province.abbreviation} \n                                            id={\"navbar-province-\"+province.abbreviation}\n                                            onClick={this.handleNavBarSelection.bind(this, \"province\", province)}>\n                                                { province.name }\n                                                {\n                                                    province.munis.map(muni => {\n                                                        return <Nav \n                                                            key={muni.muniCode} \n                                                            id={\"navbar-muni-\"+muni.muniCode}\n                                                            onClick={this.handleNavBarSelection.bind(this, \"municipality\", muni)}\n                                                            >\n                                                                {muni.muniName.split(\"-\")[1].split(\"[\")[0] }\n                                                            </Nav>\n                                                    })\n                                                }\n                                        </Nav>\n                                    })\n                                }\n                            </SideNav>\n                        </div> \n                } */}\n\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        console.log(\"process.env\", process.env)\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    function getMunicipalityCode(properties) {\n                        return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                    }\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr(\"class\", className(\"legend\"))\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            // if (self.state.regionType == \"province\") {\n            //    console.log(\"fetch muni Names and codes\", JSON.stringify(jsonDataFeatures.map(d => {\n            //         function getMunicipalityCode(properties) {\n            //             return properties.code || properties.smunicipal.split(\"-\")[0].replace(/\\s/g, \"\");\n            //         }\n            //         var newState = {\n            //             provinceName: self.state.provinceName,\n            //             muniName: d.properties.smunicipal,\n            //             muniCode: getMunicipalityCode(d.properties),\n            //         }\n            //         return newState;\n            //     })));\n            // }\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function(d) { \n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    })\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                var labelElements = document.getElementsByClassName(\"place-label\");\n\n                var regions = {};\n                var overlapCnt = {};\n                var i;\n\n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    regions[i] = labelElements[i].getBoundingClientRect();\n                }\n    \n                for (i = 0; i < jsonDataFeatures.length; i ++) {\n                    for (var j = 0; j < i; j ++) {\n                        var rect1 = regions[i];\n                        var rect2 = regions[j];\n                        var overlap = !(rect1.right < rect2.left || \n                            rect1.left > rect2.right || \n                            rect1.bottom < rect2.top || \n                            rect1.top > rect2.bottom);\n                        if (overlap) {\n                            overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n                        }\n                    }\n                    if (overlapCnt[i] > 2) {\n                        labelElements[i].setAttribute(\"opacity\", 0)\n                    } else if (overlapCnt[i] > 0){\n                        labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n                    } else {\n    \n                    }\n                }\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n                    function regionName() {\n                        if (self.state.regionType === \"national\") {\n                            return d.properties.SPROVINCE;\n                        } else if (self.state.regionType === \"province\") {\n                            return d.properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n                        } else {//municipality\n                            return d.properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n                        }\n                    }\n                    tooltipDiv.html(regionName() + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        function getMunicipalityCode(properties) {\n                            return properties.code || properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\");\n                        }\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        var event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        event = new CustomEvent(events.REGION_CHANGE, { detail: newState });\n                        document.dispatchEvent(event);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n\n        var redrawChart = function() {\n\n        };\n\n        window.addEventListener(\"resize\", redrawChart, 200);\n    }\n}\n\nexport default Map;\n"],"sourceRoot":""}