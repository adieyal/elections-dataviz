{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Math","event","svgToPng","refs","vizcontainer","childNodes","Promise","resolve","reject","uri","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","values","votesData","error","console","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","Chart","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","errorText","colorsData","partyColorByName","noXaxisByParty","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy"],"mappings":"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","file":"static/js/src-components-bar-chart-barchart.7a2fbdc8.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"race-for-votes-barchart.png\");\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}