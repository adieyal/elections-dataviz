{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVSeatCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchart.mdx","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","barchart_partyColorsData","chartOptions","topLabel","usedValue","yValue","d","seats","yValueFormat","dynamicYAxisFromValues","className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","d3groupbarchart","d3","react_default","a","createElement","config","chartType","ref","container","dataLoaders","getSeatsDataForComparison","desc","exec","partyColorsLoader","getPartyColors","values","seatsData","partyColorsData","error","console","data","chartData","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","edge","thing","index","t","abbreviation","e","options","i","l","length","selected","value","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","partyAbbr","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVSeatCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","__webpack_require__","__webpack_exports__","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","width","height","predefColors","svg","tooltipDiv","createTooltip","x","y","errorText","groupChartData","colorsData","partyColorByName","minMaxY","groupSvgs","groupSvg","YaxisOffset","subX","barSvg","barTextSvg","barAxisTextSvg","bars","getFillColor","getTooltipText","pageX","Number","barAxisTexts","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","toUpperCase","destroy"],"mappings":"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","file":"static/js/src-components-tv-seat-comp-barchart-barchart.fe411590.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparation-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-seats-comparison---bar-chart\"}}>{`TV Race for Seats Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", width)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", width)\n        .attr(\"y\", 40)\n        .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return options.yValue(d); })))\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}