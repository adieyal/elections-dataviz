{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVSeatCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchart.mdx","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","config","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","chart","barchart_partyColorsData","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbr","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","d3barchart","react_default","a","createElement","ref","dataLoaders","getSeatsDataForComparison","partyColorsLoader","getPartyColors","values","seatsData","error","console","data","parseSeatsComparisonData","TVSeatCompBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVSeatCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container"],"mappings":"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","file":"static/js/src-components-tv-seat-comp-barchart-barchart.e92c1ac6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparation-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-seats-comparison---bar-chart\"}}>{`TV Race for Seats Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};"],"sourceRoot":""}