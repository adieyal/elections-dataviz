{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchart.mdx","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","Chart","container","width","height","className","options","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","errorText","this","draw","groupChartData","colorsData","partyColorByName","partyColorsData","edge","minMaxY","dynamicYAxisFromValues","d","groupSvgs","barSvg","groupSvg","concat","partyAbbr","i","barTextSvg","length","chartData","data","bars","name","getFillColor","getTooltipText","pageX","Number","barTexts","partyName","getFillColorFromPartyName","noXaxisByParty","formatPartyName","l","toUpperCase","destroy","chart","barchart_partyColorsData","getProvincesData","barchart_className","originName","styles","refreshIntervalID","chartOptions","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","react_default","a","createElement","config","ref","dataLoaders","getVotesDataForComparison","partyColorsLoader","getPartyColors","values","votesData","error","console","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","onPartyAbbrsChange","party","onClick","onPreview","onExportAsPNG","JSON","replace","TVVoteCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container"],"mappings":"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","file":"static/js/src-components-tv-vote-comp-barchart-barchart.e4546ef7.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData);\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d, i) => `translate(\"${x.bandwidth()*i}, 0)`);\n\n      var barSvg = groupSvg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n      var barTextSvg = groupSvg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n\n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return x(d.name)+x.bandwidth()/20;\n            })\n            .attr(\"width\", x.bandwidth()*9/10)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n    \n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x(d.name)+x.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparation-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  {/* {fdsweger} */}\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-votes-comparison---bar-chart\"}}>{`TV Race for Votes Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJEsAA1PCRBgddoLQ-CCEkDwYPIcj-FVVABXtKCYLgmCLyIQIckQ9hkMkVD0M-DcaBw_DCNoEjqPIyRSNYkVzw47I6LtDV2CDKU3RNBVzXaZSHWAdhNB8eQNLldoAAEYCIEQBlQDCuh0gNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZzCgAWGL2AANhiuL1jAECADEfWgRIwv4ZxDkRR1MHYAAFIR-CWKyfjgRLEVymt8poZwIDcy52AARlS-L5HBJzqBcgBBOZfPYSN9Jo6B0HDdh5E5XyxDmmMZHYVFvJgbhgEPDyvOxeRt1rYBFqgZbggAMju8ZEnmShmmu27zG4L75TAUInJ7VB2nYAB-DYlvDSN1qud7w1GmspBkat3zMWEVMwMAwigKZIY2rb4emlca0TNSCBwArMhSa8CAu2s6xk8j2C3VdE3ptj5M4xmabrSQSbJimqYuqQCaRsxvxAfiMIzbDcIIoiJLItjKMktiAK0CgQP0BhGJUkmln09csKzYzuP4M0pSUhjIPYIwQjsdBkxMniQHti3tYdPafJNkAcE9VmRSVhWRQ-OA4Fdq3gFkghjfdZDPVEuWnVImjFftlIhFCGYqMD0QQHot2pjgVgUksShatnR3-AqVgYAtQuUgtfwLRmWcLd0qYYGr4SK-9z0fa9TuCFD3O26LVBIDnL2-773Rx7Dpj_PWM8xPgbVolcArhXXGDbGoeKLDPWq2MSRwoGFOA99HAh6t-NBETgVeCFcMxo5NWPJD72YIDnlSAoSmC4BgMvOAW9-hwGoA_Vw-pQhYwgOSGAh8RQQHgBfM84pnjUAAHI-iZKgF-SEe7v09OEaAQ96JmFYDBfsQg_hORXmvWaB9qG3zoY_SGZDUAUKOOgNe4oZTwDwJYAU3Q_LJkijbAa4VJHsN-v9GyPQoD-DgFg48kZhQQBCsomA61f4WC6AQPo5gPbwAANpqI0dggAuuwAAPtYvY_RzHHnonDchlDk4inopw_sR8T5nwgZ4yhXQ-FwDwA0PQAgKFQAaNqWa4V2FePcQQXUMwAZ2D8jojYbFLDPX6vwUUkpugbyOEAx0gpt5gIDCAC-iRJpYFsAAGVcIEKAVx-C1XPKKew54MGWEmgAcXPOwPCupLDnmcI1dYiQ8LxEZFcHI3BNroBwHCcguowBAOqdMqAjIilRAIFcSJjJcaHO6AAanlAAUg6i4pyCiQ7sD9u3LAoF0B2ANpmKYv9VzOTRKEKUwpIwDkoHcbRzNdoZyjECkF9FaYWAmLYHAqIsizQybC7xIoakeA8AIe47BjH8Emhg-wjUnbakmiS_g54CoFX4BYi-aKO76G1PAcg_QUk2VxfiomaLaz8CwQDPsl4tipMGgATnFRM7lPLGaSCdtfGh5AICCtgFKDlYqJVVLBWi_gQ12DTSOAAJkkaldg_KbLKuFTZSV0raaPCdrq_V7AjXhRNfK2-SqoDsCFaq6g1qbUWH4Aag1eqBxOskaK010RzWeu9QDP1_q7WBuDY651Ea3VOQ9V6lVcbNVSp5YG8KuqzW9hjdmq1ub_UWETSAI1ur02KotT6yp9KbUFoGhGjBk1LANF1J2-pXr6nnnsN23t8abXVtrWm0Uuo8INCJQ0Sa_bzyDuHT2jBY7aZ0q1ZOGA6DUDZPmK0kAqAo0lo3bWIFCqYCaKPeeiwRA_oQBvU7O97AH0MUcJgW9FaeVIPIA-b9YK4ZoogM0QFg44DLKPpNLFOLQV5rhYSRFj9aBQYxTB7FaSqHAsg4ldDsG4AwthcB2FoG5pQsg10PdB6tELwQwSBFSLUNUZsjR2aFGwy7tYzkojtMSO0zI-BnDyymG0M0fB6V8LINMf_Je5hmj2MQZEzfMT2DeO1n47WQTHH31PuwRJnlUnkNZBwLphTfkdOPs0epiwmmLDaaU7pz9tHUWwqMzJ0zj7nOKeE054sNnVpgoc8Jv9D4DNovcyh_8oX5nYbuDgGLAWbkRaQ6jEUk04C1QwX02aRm0sEAy1lvpOAPCqEjFJz8YK8tYCYoV7LABVfouXUs1Y1HVvpjWIAlbKxVgLRm_AYFgGgmyrFZzCIY5Bgb6AhtceoKNtI3WMDlcJJVvN_XKiwHqh3JBIxzwD2awiqbm2uh_BgLtgei3Hy9dXCR75mEPnai4PqNoNAcZfLzV4gBUBmh-Sk31pDy1XAjGWwis8jgaCuDQFGTkSxItZFW2ioJXQQlhNoBE-I0TZoAIIKjjIkTIw4wWXR6VX2wA4EB8D0np4xzg8flDgQkMlhU5k--NFShjg8JgMEgRQiEewsPKEKmOAkp7f0PU2woEoyMuEjgc8AANWqupRSWAAPpFdhy12rmXst89pgLoXIuB7i9ROkBn0vB44FFOePpa6Vf2AABKEoGRrw7G2YDDbmwNtIuvaz65PIbsXEvTeRnN5Bh3k1ldq6t7O88AB1F3k23dbdO-d_QPvku1kEobHUXB6szG4bQN7VWAeZGB0ZsHIFIcugZzDibxnaCs402NWmWePmx-gFAerqArJ_QIEXvNgnEnhdhYk8n8A0SUESGw7diTZqoGgVAJLYK_c0E41ZauouaDG8l2bgekH5eK8j-ruv-X2s-4sCv0mXR18wE3wQbfwfQ-W-t7b8P2XzwJ_wG7j3qB5taIC5fmvr8LfkbkHtXiHnvjgOHkftHg0HHp_kdvAidjtnfufvIhKAILjujlAJGEjvwlgZEtEuns3rWKftrh1v0P3mip9guD9hNgFnogYuwC6GMNfEQDSJGDIk2rgfAJQFANXEsF0OoMKsPrTHXCXGXCkIikXIVrOJ1pGFTkEpBn8G5LoHTtXh8DYDdBgsWHAMYuFHSv5OzlwQDJGH0BAKIbCsjnwdXGYf0IiuSC8E-IoG-MYgNBYmgbZmgWtOphnhYGQUVhAWnsTrCuIaXLOIiq4NXM4DIZlrOCDpRlzsob1GoVXhkJoUtDoeUPoYYcUJkIiBaPlAIBaKwERHABaIJDBKeqgBaFnIkpGAACTACoKzaoCaIJH15aJrTLKzjFDEGOS0yIE_5_5BE0CWFeIsGeTIp-Tm5j506L7F6MZjhTGF6TFRaN62YkEWCIHJ4oEDyjEEDjGUJrHTEwgXaYDzEBaD7kQbEj7kRj6ohCBT5oGz5-QsEODkQdEV4Q706M7MEL5LDz4JBLDkB3JKLYIgnkTJKpJoHubLFRaRgnEN43ZbGXy05pE14hG0yMECDmD2yIoLjCodFKE4AqGpH063F2Y8TcpTgZBzSWE4nmDRj0aJg7SgmKKaKHTskhztH8B1G0QgCcjnTbq0yxgcDcngnHhclgntEzzqJQHODOBR5UoNBy7sDnL8CJIWgxAECwD8BCliBXRQnsoTSaFZI5LGTzQtF7rtFw4N5rRXAIxxgim1hinUmVq1hBJ8AgBkmV7078DukenyIcnYLSkhkqKankS1FOCJD6nGQum0wSC7iyAulOkpn0aUmokU6RjknV5kgQZHFHCk4HaEZgpeKlG0D3xrz1KUCdh0l-RLxlEQJFIgI7yoBCbQplmUIF6uA1l1k4qzTGIVksK9m1nTgWLsIgZgYACEeGXkviOKEClhFgXic5x8fBZ8fZ04DCY4CC85G5OK0-9GPZW5GQuGeQeAgKPiB5cAp5Ag3hqJFgbBNIwuCQkYJ5Y5Z5nIOAEwdAnBf03BJycAnI-k265ZTZ9CfkQFORAWFga5C5VZj87G15p8i59Cti7A0F7hyo_q26VOFOfSmQMwl5uZGQ-ZOGSww5iFrgZIKFfia83h35cQBANEIeAgQgRwROzkfB_4GQHFbFHFnI_Rq4BFRFJFfpeZcW58HOj8tFGKCFS5WJsKCS5EECyFOKgCZRrZFSECUCMCcCe5SCcA75a85FnZAxv6M5Q-LprxzBZ2HxbEOZElZF_xwJrlUAIJMpEJmSIo0JHKnhPlpM2ZiSECcl-5qF1F_RNy-WxwXOmMzEsE5E9EYsEsre0s8c4kicys_sjy7M2QqsQEahms4E-cqkWoespSQkUweCTsZsOcecVscpE8McBC081As8w8ls88XgIgjxswnk-0dgXsPVg8aIswu4qIgIIclEL4fVMwpmaAwcpCI8RiQ1LVno_JbMCkSyZwy1XVKkoe3cU8nooe38ekq4Z4saNkd-58F1u5omd8oVd1V8dFOKI0R1vcnon8rc-1513KaI6iaQsEeQEQRAd-z8H1hCkgxCUAe1Y0q5D1I5O5V8iN1FR5ZgJhciEp7RZiaA9gXlx4w-jJ7AI1c1A12IpiDieNBNMAViGFq1lN6i1N4ZtNNidiuNv-NNziY0EpDyLE5EeVOQ2ALyby92rormd2qAjxfyEQDOFGy54KcIHZwFsFdeMmKKCZMIV4-gAGtVL4r6tM5uzKcArKsCqSVwXKQZvKIAxaJ6palqE06qoqBtPK1a9amaV1jt7aGqLaHpOqJqKaxqkaAq9tTaLtaK1aDqoazqrqD1HtZavqP6VtSaIahq4awd0aWaDtzamttqsqKdgd4UaacdjaOavtlabaJqttpd5a5dCa-dNahasdKmDaodZdud1tk6pqXaa6i6A6Q6I666SdQZE6haU6M6c69gC6S6K6g94d7AW6LJnprRNGR6cmtC8969iIz6_Ase4-GQ5g9gswTIw90qZm2C36ddsKfmX6L6p9v6Wwut_Am90GBGFtBKRKFKIAZKX9VKNKIAi9mthJTaN1Fti9Hp8QUAhl8AYD26mmfhRYUsNAj26Az2veVBPKNB32JZqtl1CdqAN1kMmtP5mw7ZmN1AJlj8Ct0qXiwDAMN1s0PZ-Kzsa8tKzDkDN1tKpmswIe6AaQuM2QaQzD5QptJplSHhHdFgzO8JWQ80dD11e-Phmt3RzFrFfFwouM3FsAOA6jZu7FwoQluDu5r1xltx0qJDf55D7ZPZ1DmDlCkD0DWGTD_APZbD_ADjbERlbjIAgj8AXDUQMwvD_DROvjzDPwmAtKZjlaHjiC8As0MTMQ8AOAkAWMUYIOs4Swqg2ATOtB60CykjpGEYPgX0fkVOkAGAYSagBOhxuMzJVt_qpMTS2K221Rvk308KERTTyB1RBTtMQlBTUT_q0jBAKxMA80CTRlPhraS9XhHw0Qaj-jnFm0WjvFizAlBjmZFlFgaVyDue-esjw-CD1Ad-xtojAMIxLmYFlCwKIqMxP5MEZ4OANzHKqt5ZMycTfkxiE526RRc0XiEAsSSwnqfkzzppsAs4EwOFALjA7Ai-nApypytjgmoLUtxiEAFiBJ2a2QtjK57z55ISqiYjeh6LpJ7zAVmx9GVJiGSxIzCJrm0qRtLKbK5tmFeLgZbOmzq41Ae5mKmGFzCtXiKLWG_4j8wUY4TzRLrzlCQFg53z9GvzkY_zgLsLs0QrOA4LKQkLnAdYsLULCLSLYGQraLGLX2wq2LSlNDeLyyF5hLqSxrpL2y_-LpVLgW9GcJtLsj9LPKa5GGOKBybLcDnL3K1AP-NG_LFrtYExZ2ozKKLG1Aq9MI9zYrpMJy8gqt7roziJ0b6xvhqJ3LyBZ2IeCtANmIGQ9gINkQd-BxYejuMB54Me8eatObKJWzewBDrW6W5BRbEbcKDiQN5bqIlb-xT-B-Suqux-dpTr3KVJq4tJRwGD1BlCIYk0c6s0TVOAy7c6UrRwXrDK2tNAD4V9htA8pzzLHKR7y91GOSSwFdMz2GV6miF796VmEJmtN9MAT7nAj9iwmtPrBGn78jxze-n7EzfjlLJZnRk5djRwvQAg9aMAalFmqNECyT0AaOkYLwlkuMmHRAOAJ6x4bT978m-mMF26xNdTNqYpXM0qSYqYqkBS7ARSQyZRlV5SLIpEDlDogt7AzgZz7AfSpurTlYqYmtbp2NoZV0NN0Y4AwoRAFoacbQMwcZ1HlajACizSYgQqVMjQMSUg6nC4Kn_qjAaAMw4Q7L9TcKOS3ptAzyAZvTmeNNYZPJ2C0nRRcnahQgUAcZ5nFn5IBSwwN0GQ3pWppFAgz9d70qnu7gaQh0wim0GbdLhJVMutIrDz4rqbQp9nVahnsKaZOXaKYnjnknLNrnsn8n6cSngpwpEXuX-nUAmn-2enTSBn9njApr6kD6-lsAwZznUpxXvXYz_AbnFRIEnn-ppydnIApy4nEZIAnXiTA8I3Px1e3nWXuLjrsXJ7TLZtHKLrQZUXY2h0RmQHTK23Yjf-l2CRBpa3tMu7FnsKgHBDkBATGHtAcoROd393PK5HjAKL7A2wMAiQh0OHxkJywPb350wAIPUgKLYggzX3Gm8PFne3lHfEdD-XuXyZGPopbJRXM3g3MnAgcnCnGcynrXdXYgP-VgOS3MFPrX7XUw-PTnkpBPw3HnfBq3NXdjG3wAcb-6FpN3B3MXwAx3qAobOSF3pWS2FW1XCPuXf3YP_AJ6Id4gyv0aMPYj2PQZv3YjrLG3_AW9J9YghvGvAMWvHpOvAMevjI3pumiqiUUALwsZIAYgdvsC8QTvpvNk5vqnCv7ztvj69vHvXkJR6A4gFZBQxwEu_QUoXv1APvopaP2aPveXHdn3NqPBV78w7A05fkSv1R8Q-p7AD0Pn9ThXLNzPvJhPxPFXZPXPlHFP8Hkax4TXGnN3rpDPPXLPlfLnQ3ZX7PXnVXpfcv63NvwAhvmiKPX3QvB0wAcXatMjhe4_iNz6qXybDrjIa0xkCf2vfv-vIA4gzgdD7APsOAcfqAO_Hp6fI_RHtC1Fxfj0hv1F3DgThvuM1_N_y9-iuJdYf3APQPy_Fuv-Hw4wBQe_vQAVejw7YJIehvKAceHkDn9L-9TNaO3zZyoDuYDPJATuERgd0p-l0ezpn24zZ9vo_AN3g7yd5F8Hoa3cvgNx76zdhuJPSrtd3r40cKeUCBiEH0d5eRm-MAVvi1xYE8o2ux_Jnv1xZ6lcieS3CfIPyFLD8R-YPYAOfXgHoDaYM_WLrjAS6etFB_UNfo8wy7b9lBrpPfjb2fou8j-2aE_j7EQEGCLAH_OXrB3g5qUS-9gxGih10yQYXuumd_tYJtTE1Lecif_odF0yeYGIk_a3rPyCFaDIeEQl9vAKsECCraKA-ITajwEW8k-wqLAdzBwE1cUhPbStIQPjY08SBc3QPu7y4GJBQ-lAu6NQNx4V9RBVfBgbXyq4ZDRSbAkoeQO4HOY-B9XdAcZ1QCmcpg3gryPMGs7C07OSQ6VCIPx7iD3Oo3DnkP28F-dEQAXacN6XsC1RLA4XT_spXAHvschVtVQXP3UFIZscmbBQV5mLBXAdB6Xd5lv1kFy8mYSQ1PtkLT4EC-ebGIoWQOD7lDWAYfQUg_2qFsAu-nJOob32r7ldFOdfLYWp2a71cxIkfR7I8ViBTAMEguQIAIC6HNDXSJnMzoMKs78AbOOcO4Qj0mFSc--Eggfpzy2G0xFhMAZYUF34CioAA7AAA5MokiAAKzsjNhVI0frPxix7D9uv-L3LP3n4aCl-MWS4Um10E3CZB3gh4XLyeEJCO6NA7viCPoFldGBkI-7tCI048seBcADEfZ2ADGB_IYAV5CMF3QZBjIvIAUYmE77zdYE3XEkSVzJEzCaAY3QUhNxABOxpupI4ofpU8bwBJBGJSkZ_3kF_tMMtonlAcNF48tfWwCYUZdxl7sBMRNg7waBzsAl8MxL_K8hii8HjDK0vgv_oD0Ohrl2GsGFpjmgsRgCeeZY9xhWL-A9MAGMAo-GE2wS0oEBkgWHt4MSFbCoxUgTAcqKx7KiahtAtUazw1GNDmBFnRgB4HCARBzAQwg6HyXnGJ022-NWINsCO5IZ8222M7EmJWzGRnRA3aTh4AICVJ1oGpb0QGXORTC-S54puP0CCjO91o50XYmdikBzibg8fIcVkKtoqjgRd4sEZqKaEFNZxq4xcXiJABfiFxYwuXnNkd47BtxCKY5h2wKzkEDxtgWUUkOPFiD7xF49Uk7CIm3i_RZ4mogOAFAwQXxq0TTmhL1R2Aisn4iCSn2HE1cAJEnICQ0IhGgSBBOogztx06GSA6evE0caqKAmWROIQILUV9za6JQL-wAYoG1z478RvSTRTdhgnkBehtqWkziKrHEADizmGQpScyzEAhJRg-SREEUiATyxI4FHG_oATwaWR9Ad4B8NJyaJJcda6AUaIKU_ZX9vBjLE2mewmhXAmiAAKWcC9pkMM4Z4GACnwBSzm_lJQN4LeE5Ij0TRFKfMG8m-T6mE_C-k7CaK5SlB99G_loLSlnCQh0A-ehZ3fZlTdhVU-phKPylQ9v2WUhYa_UwxlSIxOKbyegJ8IGSTJdQLoDSMjCSBowvAMLmYGsS8BJp00-8k8CIBLATBQpAcXJKQGKjterEozptJ5SbM4YMVdGPFT5qJUtqnEL8EoHFhoRJYVVHCI8gDij5dqhVDWGBG9jLpZ0AALRVxakdS3XDJF1EtAWj1EhAK4F4BuhEYCRDcR3ikFCg9B9AGQbmo5Flz1J3pKuFZPoFcBpALQdXEIn9NrinR-oLwD3uQHhlmBEZyMiIHwRiAzAF4ogBKJQHyAAwrgTSMBNsloCqhRA7M9YODI95QzoYsMgQGzN4AcyaZF-WwH51KicBUAjvF0LUVPg7ABZws7xF2AKBXB0oWAeWYLI1mdQQIVwAaAagyjEhyiACfoGAHVk1gqIOwEnhgCuAjAbArMzWSLNagKJxZaAKWTXA8CyztgRGLwAIGnBXBwoMUU2RYG9nTgLQmQFgHkCuDRQ1ZGsjmbTLQBo4LQoeK4D8BdDqyaZ8gFKpdJ2aDwZYy8eWIkmkDJhGBm1IOIBG0BFVnppVG2P4GOAOwvYLsTqqVSuhmhaAJcCmbAhqpvw-4MNOGi6DolWNOOfeULksFxDoAJgSwTYIDIICeUWaSwIVgZkEzTl55EbIViijTbrASMo8wsH5EZFSJ1gk8lIIQFmjOoiMoXTFsKkmhvlK4RcfUkAVsKrZVwXiOXK4DqRwA1kYAbHLNF3nqYvEAATRfm2B35n8vyEah_mUIBw2QLnAhUHJ8lHWX9RIAuFPgjAv6XQX4XK0fmUI64a7ZygIGFxzA6Aj4a-YUEFLbphcNwBnAb2Rx44YAGWeYFKHyQ9gv6WAfUGgF_ksLzAx4McPqVIXRA0Q0nFPDeG8Bf1IokUG8XNC3l4BTkz81-UArHCXiiJYiyMAfMICnJ_5MisAB_LkXw8PgYJbINJzriSD9AJKX5FO2lQYKjg5M_So9g4B-RWUEoVucIH0o5kaafOcxewGKa1zEUcQWANBCWxRMww0Xd3C9kfDGJpFgCjRdjhHlcAJgEjGsG4uSB-R8SJteIDAHFwugYIRDPNAErGyihglkYYxMounnsA1F4SzRQQA8JEY3FujSwMLSxxFw8F8wJbPwGIX-LeFFCkAGNSlpucv6nSuAAokLz8BTkkYCRZIANScgvR-4KbkopgBTzRl4y7hSQqyWzBGlhCjpaMMWVooyFfC_EcLQbhORhgYXKpE7HYJdg9SgpSpf9RLxA5ZoVjSMIwMjihUiwEVRSu9inJzRpy9y1SgxVyHVLhaP5YWtJ1nw9lOAdgH4FMCiKQ51OZygKoySSxa0AEPyxZjUueT_Lnk0nfUkvg-zgLXqd4czEYSg6Lsjg8FG8ohyeX0VH4qtbTCY0cGP9qVa8YRqwwAbsMEgjjbxr4yHgeFch1IulY_AZWPxvGGYtlXwz8YANkmwoc8JKEvK-N8xHpYlahVxXYJjEvjPDsWDgGs0ZiwqlVZgA-Abk-gqtPjPDwQYWAB5Z4AqB3gXLkxIgPLdomuUfacAFaxNOVcKAVXHhjEtq7BA4S4HSc-QgpHInTTsQQL0YCFNFhckDVQKby6rOgJqzwBys0BrbY1QBSt6mrzVB5d8pk1sbE1k1CQC1bKGtUuclka5MJPlDVXprMVYKE1WODbn6VkVfeRYPatyHIsiWKqsJXADvA8sM1Y4JgkshAGESAyR6QiWqymTvNdk0QW1hyhwBDrHW75QxnA3hXdB0-A8tztEDzUqIQBOLHdN_3MAgDPVThfgD6s5A5EfylAGshaNgiUhIYnGYaXyF4AeBppIwJ4EsFuVQAQKG6pglACPV544QR9ABDjF7HJCXSxNJdS9QxTtEC1R8ItZQDVXyK-1xEvYE2snU7JZOo6wdVskZDTqAqo0BWXxkfLuLyckQKvHcoq4PKGKAWLxOwVQD6gX5v8wcuFCWASIDCVxQ1k2vQCJB8OsQX-bUlsCWqiAqG-AArXI2UasAv8twlYkSXJhuGWAQjYp2I2yUjQiamyNOv8ivqf-KG95tOpwp_rsNeaRIHhqiBoBIwAmqjQ_KxVHBGBMRFIFhjrjnypQl8nAnUCzjgiM4fRcnGvCk0ZwZNrgNAmZqLiQZsAThbRb0peAKbtF6APoNUUjCiJwo2ioxK5w7wWhgUkoCgUcoGg1xMo2i6_MASPK0wuypmiruZoYR5afNOjcJJkvMbLKCF0nFpTwvIWAqwSJKeZJtGKAObGB7AJomBvwzYp5AfRardso6WZAulsnElGmvrVE5igvS_pQTyaK4AqIGACRZDCMAQB2cUWvogSsjaUIs4-WhsoVqkLlamlIAKrUspq2ak6tRyoCQ5tC76k0CXiLODWs22pBttDSirc0u4WHbetEpElGdrYi7KLtgpYzWigVZKs_IcSbVjC0-VsQUOGrLVgC31a5DVy7Uzivduk1fLeVJLLqdu0CqkqwdIoCBPax7KrbaYXibzXOFKb1KGetmyMPZpgiOb5qBU-HV1r-3QcSaMEO7UTus195kI52nBRiquZHAbtwtFnQ9oZ7ScSsX255MGP9LnKcNuLXnf_FmgbbSddDcnXUCaKfbDlQpZzT2RzLI7PNFy6VFnF811I-8SPE_oFtMLG7ycYW0wpFvN1tLpOzvR9fJooboB11xNKfFFv1WrQbdR2kAIUpJRRaXSyGfaLFoSDxa2oSWujalvN0Zb75qtVcNun13Fb0OxuiwI9r21dBzYGyytFsvaXvajlimriqRJghF8rxTOgQCrjEXdr9MxDW3fwCwAkoB5w2iwlyqsKdqf-kmyvYTVOTTbKgc2zkKMriTKNk9J_GvSAAkUkpu9s26JZeU5BGBRUkgCREPuz3B7B-SwNNU3qJxZqoAC5Rvf0zvZPN2ypAwYJZGAL17Hd1jdNdTPtn1MkldDK7vZyX38AEtiqLyH7pwDMjyWhmRxZTOsU_l-t9M4LTHLW4W7MgphZ1NyFjly9A9sAaTk_vD0n9RUlWCA_U0sXf62A-AYgDgTPBVrKZNanfUPvMYxb-AsAMADnFX34lZiiUNIHLmg0gAYo3CpA19ygME8IglXMg-JooPoyYA1Gi0E6nf29raDdeyXVhqDIoChZgBvfRQ0P15AYA-wU_bIid2goGDQZG_dmjv0CCH9IAWAy_uS0f6IsX-2BD_tN0AGlDFnYA-FrAPiHIDhBzQ2Hu0NLB3dV-_1JpptQaH7dcm-Q9Y3XW6JW95gN3boc93V7vdvuo5VFrMXcoXS8uqQmTrfLK7xxp4ovVVw12uaQqDFQI71pSYr65oda9fZtE33b7sju-j0r_vcD_6KGi-0LSAYU3W60j7Stww3ud3N7sSPhloJGBREKQGcqmqdc7pnV3tnDZWoIzMsPmkH3DTaLI14eU3mBCl7AHg1PjaNoix1ppBDWM26P-G-j-aJetdpgg1qsMfO55OZrZ1K6cAKuwvbmFs6JHvymulI1Q3UwRGtjwtA3f5uIZGGyjxDCo-FuqN76R9dRs_YptsETGWjoRng-yI91eFiG1hjI6HsS12HBoke4htHrGY-5bjAgbY4nuhyp7VlBIl7UUZH256Z5J4vkqLpziFGs9I-wQw7o8NjHGjX_Jgu3qg1d6Rdk-sedPtGUgmAjnx73VzP2XCgv6Jy6bCfUX0j6cZ-QPqF_V1l0HM9_qVw3Ie4ING_jruyMICfYDAnB9SJ27QruzSHHjjLo6CYSbjJJHWEVxzzU8YBW3LZTHdYmp0cQ1E9kN8G3jehtZNrHNlzx9suUct1VHJEAp73d8YpO_HzTzR2Y6iKjCWnljQldaECYdNRN4Gq4IzOUAnwJKRjZuiNlZvhNZam8NYDOedIlih5JAWTDQGrGAh6BnpPyVSC_l7R25Hc7-WaKbFaIVFhRFsYs9AXHawE48VZnQFGQgUp56zE0KYPqEmi1RlSDbVswE0fF7jkFnVYswAEV6sDQewAAGkVcVuZwPVnqSWAlStUZs7HlbMABHUIJuNDnwBoEg8Ec52YP7jQpaUwUdkfmyytn8sTcFuOOe7NeoFcY7FXEufaSihY80SAZOO2vN58fGaE2uBCgECjyzwd54hewn2lxVDzSlK3DbjLNv5ncq4RswObgLx5VwvZ_s-ufraoWW0U5mc_OcXPLnVzKF-AquEvM_m-kz8M6coFSrtV1EOZopgVXLlPSDA4EBJHReJ1KV-A6k_gEekIC3B7gjwCoB4HICJzXkp4NkO8AGBeh8G5RHsioTHT8B7AipZUgVFVK8WnYr0hoB9PC7RU6JB06C01WosXT0In8Bi2oCYvqxCzrFiCPPBSBbnPUXsNOLMDwAOXtS6M8Lk3NBJIIaAnc72BhDHjqJwuKMOic0WWL2LqKSwM8Ef2iDUUWyToNjrgiOqSB8iNcIorXAivhcYqYVggEAl0pRWxweVtePFbKSgJd4l8SjWgEcZ-XPQqVwosKBKJlEsroVrAwYn2CPLWruJdq8VeFC2abqNVyQJutkOnnsr0VoUGhwgQDXWolANDs1fng5Xr4aceAHAGskvYo4yVoFPXCopUBe8wVvufPArUXh8GhDAzMTW8sngdzGQKfK5kusCBxZ9lqAMUFXBesOGe-XISIyCnxrXWWm2mE9fTPvg9LB1s_ZfB5YIUMGZ1x3hdcZB3X5oq4W6_dYct_XbuYKDMT8uFVwB0-4TGAB_xAGa0umlYq1HeyoCnw-gzrOBkBhba_WN5ANsaDFUOvwc0aBmBGkAPv6fMwU6ffPseA0v8Bxc6oIUC7XrHNNGxOaI9PUgaD6gBbxQhiEPAtoBRaDK_dsUgB5vax-bmqKW3pi5tK2QAYt_UMmGTADRpj_HFuXST6QQBEg7gAFsYlNvm2GIFiCZOrecy8Web4tvWwNH4BKA5bhUk-ogGVt83KA9trQU7e1su3kwwaHg4RXsV0l6kY4JpK4DxTahdzFo2GtsFPivQ7bat99kHZ1t62DU7txQJ7YVua2fb2tlW_7YzsxDvbzt3W3rcNsR2sgRwSwG5HcBBBzAxiRu83boDp3JlmdrW9nb1t52C7QAzRFndLsB2K7WdkOyah4PQQLQtUPwOp2FAjA47xiOe_ECaSL3XAXd0gecIia93J7A9yhUPcVvF3ebQoVW93fHt73q77Iw25RvRAas8U9uSgNkFajogXgW9h28WAnvX2D78to-0Xd9tn2y7F9iqQA-Du63UoBtng1AnyAno8U-oZa2gE3tj2P0X9q-8mEge_2vbI9v2yg41uV3wHGDsO-wCgSPxuuxiUhykotCUb8g-QD-z3ZPsu3Uoud78IPYfbH3AHwKYB9vdAcEPs7qUB2DwesDQJsECiPFNYEoDDAbbJwUIPQ53t8OmHyYLB4Xb4ej3y7vD7-xg6nskPXA2wPwCcDxQ1ldzdgSwDH3ghjy5HqD3e4w4gepRlH_91R7g_Uf4PNH7IqBw8hJtoi5wxiQRTREFySB9QyQVeAIClkpBLHEAR2-g7cf2P2HYD0-1w7wfD2onxDyaCkHcDRd4HPFAgOoAgABPogCiBROE8ic2Pkw7Ilhx7cPuxPHHQDxJxw8IfsjBHJDnilZHIfMoMAQgWyI9m2BpPYARTtByU4acxPiOcTtRyA5cdRPtHtUDctsCXsug8UtUJBGjjgBzjgofT6x1XdKd2PWHlT4Z9U4SfOOknAzm-zwejvzBYAFoDBNsEFwzBLb0drwEve6eRBKAazhR7rc5FDPVMIzpx2M8OcbPMo7j6wLHbcgChSs4jvwFRGBccR0WeD4p387dvbO_7VTnBzU4Od1Ps7mUYh6c_nspK8Ul4R3qhH8AvPNHGLj59vTRejOeH4zkp5lG0fPZKAjz50N46wQ9UiAr93c-Uphf9O_nWzip4i92fIv9nPztFy7cyjHOmnLAFp-Q4wTeRHiwgIgES_QeivSX16cl988pe_PCHmUTKIbZvALhXAFoXV2I-MSx4YIHETsAq-peZRlXGr-J-ffVfCvdbmURkbfcoA9PdHFouByvZEDPAxwZ5dEHAAtd_PGR1r1Vyi6FdxPxbqURke4_PDEVqQcoZ7D0-6AUOYI7s7oPbkgaBvwHUb-F7y-we92KX6tm15G8ZHEPLwSqOwM9kHi1lYALAPFIRUoBpucU3CKAFm51tRvyn-dnZ5872d2ui3DrqN408o16PQgoWiYD6HRnL2MEKQJe_0EHjQvnHsL7N4yKUcIv83J9wt4HavtRvtHBUGO486sh4o93j8A9yODbclueXXbvlz24Fd9ut3NjqN2K7rto4rAbwWK8m5vB9AgacAIohRF1B4AHESKdAJIAlUm4f-lgN94PFpqcv1ny7rkQoDtt5okpeaDm8emPtOx9QpnKIAolnBPxip1tfG8LfLRHp9QtUSW24I0vGI2H_LrW5h8Fxr3cPtTsB6R9ETuPL5aIqYPUnCB4BoElty8KEBmdRoGIkgI-p5yQdZuWPhaEN8x6w8Me0nTHgh5J-If6gGQ2wbmUvdxdE8FwzzmD4p9qiiJO31Hm97R9k84f5PqL5j_p_ChDu9H1AAxyvcWdlVEmYACT1Z9Xd5uVHQduj9h-i54fw3en0RJM4gBYBYAyQWc3HaP4EdjEhEKANsFQgg1XPgX6T4p9M--eFPXnqz2K-juCe8UUxCMCKGoCJfwo8Hjzw468-pfGPFngL-FG1c8HHsDveAFGrxTQRvshwIr1a7XeeeTP9Hsz35_teWfREzr8O78HcAkPAg2wS2_bkBnVwboqkLgGkCK_BvOvZX7rz58q_-eMv-t9x8yigBRA7AxiHb3t8S8DRc3V79d_wG89ye-v_bgb7rMNvyQ17eAcFpbfbwEAZt2wY74Z-7dkuZPPXtL1V828DRGnnkRlFYBCQWjaA8DrgJgCgArOwnunwH-57O9dfi7l33r-l9o_6fdUPBh73o9cB9QGIzX2gv4A5eLuuXIAFj0NGS_le_v63_rwF4GhivrAEk2wNAGTezml7-oJ775-O8lfkfK31HxV_M8bfMf-t2r-wG1BHBwpTToQGp_gdjv1A6T47x19K9IvVvV3jH6j_08GoAX4LuO3BAtHQhjEbgUrNB7J-weWPOv6n-r_R8A_RfQaW-14AUhGuMEC4Nl-_YR_2-vv17n7yl9p_C_6fm3g1I0_qxEAcnGAS26RA4-FfPfWv0O0j6M---afa3gPzd4C8GptHlz_DcC7xRZ-ogwLxLxn-t-C__f13-9xd-19ivP3ISOcTsH6DCrmvF5Wv9sHr8LfY_Ff0OyV8Q9s5y6qH3G0gCdh9IwgoEYhRe0FvdMRbg_jYfh4DTq2ZbeKRPyq7AdD_wgUazX5SlnP1Z7vVzgQDx-e-4uSf9HDAFm_PCb_i__AFfyP_X8gA-klgZhzG6IC_R9_0Xi4HQCZqzgs3t_-_-f5v_D-1_dv4uy_8HfaBy4AKEPsAodAeDIAXFP_O_yDQf_S_3_8RfQANgDGnaOwAQ63YxHtwZlGHy8cYA5hwT9vvJfwIcEA-8yQCL_O_2ZF3HRNxxd7AJ3jxRZzdEG_cTgAQBmA8AygPgC__UgMD8tbL_2ZFiHfJAwA_pGZVbsBA9ACEC0ANgO99zvX_1X8uAtPyDteAxpz3pB2E9H6Bl7ZQIXFt4ZB3N9iAigIICffIgIUDOA0f24DkA1KGZFaXDIFcAuoOcFoDuBYxFE9YABcT-AEgM3zGcl3XgMvdF_DVxICTA-QK1tQpe3BvBDbOwOSBXodgFClJHdwBdBlnL9zxRIggbBiC4fLN0CCbwDgNkC_A8vxABVze3ENtLAcH2bsSHMcCEB5nPRDURtA9wPJ8cg92279iMXvxdJObb2ydgOfVwDeloEUIAuc14FfQaCQAQjyVRJ_fgFnM3pIejH85_Sj28C6nFoLaDtkToLIdr_c8EsBcgngxgBmfGZzQBLbBOwEAZtIoInwT_RYJ_8pg9oNmDC-AAMGDhgnX3cc8IER2PAnvEcAO9R3B4KzchgjBAuCDgpe2mCOg_lBOCyAkAGeCdfYh1D8TgQn2N8qAG4Dh8Y1dv1-Dzg3WTeDWgo4K-Dug_wOLs_goH0NtQ_NyEDM8UdEMDMng6EP0DpAw4JmCEQ6_xRDtHerCgRgXJexm19ER-xghkoeHx0Cg7UkNhCPg44MRCsglELFdzwYF1QAtzHimBCGgHkL5CoAD1wXdKg2D05CWQ-EK6CSQ6EPF8pvUrBNo8gR0EP8vXB0GcBNgO4AXE3AylyXcUQlX3581fZEPeDpQuYNOCoQl4J19DbUIBU88AJe3hQ8UE1xFBkgyEL-CrfZbyNDBgk0KJCZQ80LdDiHG0LGxgQp-1xAdgXEMtCpAlHy9C4Qn0LNCfgt0KHdhAAFkw9XodJ0ycZrfoFOwBAcMKDR8QqMN-DvQz4N9D4w84Iz9DbBoEFACFchwrCVlXp1dDSwrwMICNXQkKLC4w0wLODLQsVxU8_oULRz8HPX12tM53NyBdDGQrWzdC-fCYLAcWwtkNlDLQ8X31A8fM1w6ZLbI-krCfZUYFQAcwg1ANDJwgh2nDiQv0NLChvObxohmoHIGMRRQWIDwAzwrcKW9VfGj2NCYw1sO-D2wi0OD8y3IgHw5SseFEkBGkFjTgB2CQsGMQ_wxIAAi8QHMNDspQ2MJfCkQjsOD9GnSpl0d1A1wEhxhgGAA-96wl4P7sPQh8OjDWQg8JLCsIskKIBB4TYD7DzwVEB2sRQCCMbCDA5sMLCZww8KwixXXUDx9ufM1yJ9goFwLrDRw5EPODSnKCOfD2Qy-z4isI8XwrCqICF0KDgIumW2BgUCCJ3CmwyYIYiCI18L-DIHe7wwBBcN_3jsewoIBzDMHHCOM9Hw_COLC1I84OYdDbDBB3MaQ4xGsjwgWR0wiM_SMIF88I00JgiOQiyNpdYHNJ3mdIgDIEnwDI2iIJCVIsyNgi3w1KDFdQ_CPnrcugRIAiARgTcKcjIowSMYjCIg1DKcrIs7DiBUQKV2yiSfHiPFC9w84LKdUo1SPCi_ghp0NsYASjWmxAlYEPqw0QLYEIAcwwZyMik_McNCi2wiqJKjtHVeFQBUAPwGkMjge4NxJJQPglajgo_MP3CwozyJeD_naqITsFIeZ0xgbnAcNiDVnJyP-cyo2aJEi4IjFzRC57agBSANyPyNnA-CCoN1DyfP4JJd2owwM6inwtKPMj5oxpxgxXAHc22R8gPFDwg7rSeXQAcwzKDzDXIgsMejyouaO3CxXHQnOiogXP2Oj8NAGInClIqcK6iPIvaLfCtXNEO2QI_LEKxiWAAGMUi6I5SNBjdojRzHDzg6NzRCiAbnznFzbUJzTDjEB71nA8gMUKuiJQ8mNO9dwpkJRjhI0mNEiDUUt0NtIgnkMtsFw0ID6gcw0tx2juo8GJXc8gzYAeR1EJU0Y54gBFWghkgTAO2QnvUIAtEJYoGM9CQY0yOli0Yv4MZFtHe3HU5bAZewqgiAAHkKjWY4qJeDTYqWNRjeYuCMZEuw_RCohPY5e31BvY72IljEYwmORjiYo2Ndi3wygNvt8oU-D7CWg_UC8AvwlmM_s2Yl4PYC7o-iJDiXYqlzgi-A60K59-lHjz6g8US8PcRXkPmkSAcwvgOdieYrOPDjGnDBEfgzXT13rifQGbUuik4h2INRmRPWNwiDY9yOrjmw84IsDc4gp3x8-PMyR1inIiwKrjZwzuI9jhgVAEV9MwEWIXArIGJUnjA4kKIzj-4yYMHjxfS5w2wp3NT0Gw24hh2ziCYzeMNjM4geJeDRUKgMqAdIlNwjBbbJyNvjp4piINRRUYhxaCE7K5ybtcvR-DGxswl-Jcj9YmaNDia4v4NFQ649AAtEYE5NwwQ4EuBJzCoEt-PSjRUWlxctBcaBDuDKNYiiwTT4ZBKmjgYsBKvid4jBAEd3HMJBndk3ewC6Ap5GP14iOwihNQTnogRy_iNPNwAaj8vXAMwi2ElhJ6jyEmu3DtjbI4FnN6XID3oDxEx-H-jeE7CPvDjItyOgjt4qcOGCBHMkLnEnvGAECA3IC0TxQGgLAC4dwwtRP4S5ogRyiiiASFxHdtkLEIsSBQK522QjEgSIQ8gMeoKXpGg7mxtoNQfEA0DJbPoKbEj0DBFjxyPR9Hn8qPJGIIcdCEUG8Tx8a_0CTkwCmOgdhQX13Idh3WYBKNpErNziTo3H_0iTCwHxPNCsk5T07AIAQIHLgfHOdwDdIQwpJySvE9gHySfgrJMadRQEGjoA4fIuJaTUAEcKKig7RpJqSokupJiSCk2PHiTtHWczPANWTMKQQRosRLA9Mk4ZKdi04up1yTok1EFiT5krsLpk4mMRIATk3RNyXsAEOZPiSN4_MOWSBk1ZKGTkwCOJ4MGFEm1y8xwBRBOi7Y9uJ6Thk1OPkSOo4u1OT6k18LiSc4oRzgAl7SPgO89XOKO4idQ55K1tfkkBJ7ivkwZIaTXkod2sCIAAHjKTKNSABRSGQ7pMhSEUvpLyS4Un5NeS-ol4DAQvAXUmXtxcGiFAguk-2JeTLkohP1jYU85PhTLksV3yRV4kJAuAmnaAFrI8UN6SCB_XUnyxTPk15OOTgYxlNIMCU5ME_irIlJQwCfoxIGpSIU4VKlToUhRM8T-k75PCi4kqBNvsfQPICtiaIAGT6hiicUBdAAeQ5JQTFksB3FS1kqVO0dn3OkksAwgMpPFA2AblItT6UmFNqTNUrIO1TxfbLyXsLQGpUshpIuCFAQYgJXyqThk0VHPiTk71PxStU6NOPDtU51xrJvFEhzaEvhet2RBgQSQCmdH_PRAtS7ww0K9SNUhNN9TY8VKELRDbPCD5k4AZgKpkX_cJHrThQVgKjSq0jmPCSek-NKZSCUqtOIdLAU-Bmdk3KZxYpNgD-QnxIgOZP7TcUlZIlTE0qtMRTdSOmXpjZzWAAEA4vBtOnTrPWdLOT50itKrSMEnc0UQAWKbwSB9vWPD4IgoEoyA9t0nl1qC-MVxNwo0PIuydhyYIIB44osXxIbF-g4jzfTxkGf2OUQk8YK7Stbd9O6BRma_wKhnAAaAWiTnMcAARrwbxzESNFJBHECkoxhJABoM2DM7Sg4gh3AzP0rICgyYMg6J4MxEuSWOjxHWUDuBFU0-KwySM1VI-T-AAjMgzzQ7DMBiXXYYDU8ugXlJJ8OnLN3Yzu4tVJYyv0tjJIzM_WVI2CzsBDK3TIQ9jM9ThMroAgzRMn4OwyrknR3yBT4VABttl7ZnxCSAEDDKFTmMmDLeSS0xTI_TWM1TJMyB0-lw3ITo-OwlBsQMFIEzrMn_xEyiMsTIGgu4vIIBTtPM52Tcn7HDAyS5MkzKEymMrDKUzCM2gGIyvMjBOydwXJr2NcFwOSPlcQs2LLczIsyzNfC1MyGLXtmvEQD8BnMtLOZFRU_WPczoszzNvjDbI_mrcIgO5LNT4gFzPbRcM6QPKyT6KzPbRiHR7GpjEs3VwmBYATYFSzMM7DM_iMsizJUzssmDJ1SeDS5zHBayT11dSCANyCazLU95Puji7NrJiz0E3VJZkAWOOyOiZEbxwnNA047JPj5HIOxGyFM8LM2zKssVznttI2ACNcfoyBRWzSsnuJuyOsmNN1ThIBLUMdOwBVP60ZE4bKmzY04GI-zJs2tBdctzPwDl9jEBgOEBzzc1xCza0MbOUyPMqzKNQ64md2iB5YleyolKk4HMxzUcqLPayIcl1FvsEMyiQC47gtwGZlaM87LAznAI1Cuz1s5jMyyJs8KOgyjULsOsC3gZN3Jh3AbYF_cXM7nOJyss8KN7MMEb7LSc_obxxvBT4SyHQyJPQlBqCXE9mx6D-_I9FA80cQ-mPpv0oW1_TE6LXOJRAMyl1CTOYrW21yD6BwD1zzQm8HqwCoHV1CANFeIBHBQgg_xcgayDAAYSjMkAHtz_6NbI1crcn_iPp5geYPsAJEdx1XDMAHqliiUIjRQtBXUl0EFSaUy3IjypPK1IIdg83XLDzzQodAkRiHeXKORaEwoNyVV_XL38iNKC8xJ8T_dPMYzWckAGzybc3PJ-D886z3LDh0vsNCkSjOgCKzMMtvLCyG8pvNDzSc8KLbyMEo-OXtCKVwD8BWXBKMMzU84u3Hyf_YfNtzW89PMhi6o5aLVCpgS-T4Qgc33Lby3stVNXyW818LbzxfZwB7DXAUCLm9q4YpEgZAeegIgAN0kYGEAD8xfMpR080HP1jT80fKyC2848OghGxEo0dCO8UYCsgugWvIkRi0i3KXySfa3JHzw8iRGZFDbMRIxBl7e3Ho8paWTP7z085kRXyECkPLXzz89PIjQyMtoAtBwvIgBhi4cmCCCAZHEYGgKi6QgrA8c8__LRj88q0OgcPAPwA5S9Esd0SAl7aAvdDA8upz_zkC4AJIdeQ-j0b8bgDIDfyokkQvryg8ogvYLJCxp2fd2AWcxmVJEogDScRCwfNUK2C5vI4Kw4rgu0dJoKIG58HQ4330R5C3fxmUhsw_Ijyi_TPKDsJCvPNcK94-ywvINPFe2yAWAcFLoyuCn_J7jPC9fN1lk0uSNQA5IwIDxRL5WIGCKGcpfNcLYC0DPgKTCpAq8LdZVApmysAN9wSKYfSHEwARCggvcLLctQtMLkC_W3LDUAAoqohilMcEGzGihwLDlTgDCLwKgfFrPzCIi0gqB8B05mVmddMmCDU9b0yEPzzIIiosyKdc6opyKhExoFiLZnOIEydUmH4GgK5EszPCy-isfIjyMHQ2y488fBeMtsJzRkDoBB2RKI2KWc4wtmLsiyItKc6i-dzl9f5ZoqN9HASACIAKEKiA2Lj87YqqK7i_ouTBxfB7wURNE4EJAjGOLoCgKJivYrCKT8_4pILdioH2PDzwWcCoAvAXFzRLG3HTy6L4k1gtuLESgAr2K8injl0dCQXqF0SGYhIAGAU8pVK_ygfcorEKwHHYqJKhoGN1xj1gzJ17xGOJwJogMgaAsMimSrPIRKz8pEssieDI_hkK_sljSNtAeAUpULxCkUrMKa4_PIEcdshDMBSEix3iXtPUZZIFKjCxUqyLCSzgojzUoe1O3gYARtM_cxWZt1bSBS64sNKCS0UtZKqombN8K_4s9M9RjEAqAeSkUDRWgK2ooUo8KlS5AvZFJnFSE8gIgyRylo_I9UKmAEgqWgDKHS5kpDKcizkSsjpHB-PFwvAUophLGfX4qHzUyyIvZF5w24JoBT4PFFOKOIRyK6KSy_EsQLjS8wojz2RY8NnNI-E33oRV4KWRY0tEu4ND8UMM7Kscs85svSK8M4MqNLnSk0rNK74lDCQQUkteESYnkkIvsBpy-suILJypsrNKAQ2xM-K3gI3zQYswSaG8hQMFzxhKtytcvUKvCs0qHdSsJu09cbwXqEjS8C68ovK5i9fLNLM_R-He92g3Py_LBc9oNryPy18oBKtU3syyjYaFkEo0IwMRzVjYyi80d4m7QIDXjMMjBF7NVcpDyfTW0F9KaC-ULxIbKz8txN6Cf0_xKdhP6U3LGCB_MJLHLIUvCvXLlSjVyJQavdx1FAZze3FGRRQZwDwhl0GJB3zTUPglPhkK33MYrto6Ytwqok_Cvoqlk-wBq9iHTtDArZze3F1AGgXLwolZwLwE6KhK6StuigymivEq6K2JK0rRkyaH1A4CZwBvAOkHLCtsLSgnM0qavZMoiTaKy8oaStKsVwrNekQ0AcD4gGhCVRMklytnSJKgypq9xfWcwjxdQXUHYBFK3UD6R6kQlB4qBco2XpyhynpK0q4S8LOWSAqgpK0rWy-3AAAjhoGodJoPyIxguwfkqqSsq_yv0rMq8KAST2AerHtyekLf2i8kRcoL3TfK6qp6KxUxyrfKfk6SoFieDckIikbwA0DwhGqk-HgAeElCt6qFS61K6qQK31N6rGnc8H1BFgwlFClukZSuBS9UGCDaqV3Cqqcqeq6qqMqrcc8HMrRQSytE9VA0ogXy6Sm2l6r7K7tL0r9qrVN6rWU7pF1BnAditOrLKuew7xYEC4uuq6Mxivdi9q7querqq8X0WClq8yrFt7cQdEftgUObMuKyq8GpBq5qtGKBrjw5wAaAONSGv1AbwQqpXt4QOADU8dq0cukD0qyqucrqqkkqxqONIlHJCCawiiQRBPcYsmrqa1GsbKa4xivUyTKjpCh9SqtmtMy4CsSt_JKag6r-TtCldhz4-kCPAaBgguHKcLn7Gys_zbq8KErjRK9VNFqnq-arVrGnBSojxCqx3AaBnALEJucIWH3JVruag0pmrHq0Gp1qh4ng2nIFK88GNrYoxt3XSzJeSORqp4jWoprta9GukqSsvIOcBCUVc0mh8ajBEGQvXVED29EqiJ3J9uagsoYrZqzmoYrA64KplrRkepF1B2kOGoO8LbN3yudoANqtZEOajcq5rpKqrIlK-COqAURogYQmfz2jULzarX432pTry6tOqLous5FLSdl0spNIgU7J_I0CW66aocrbatGrDjGK6bJ0c0ncMG8cnQ8MGgDka1bK2KG8v2rtqA6oukmcuM2ZwCy2IAFPrsW6-6t0qtajesnqVytx0Fjn7GXw3IyksZLXs0nPGLKrIojqoZT26ySutSL64hxlqLQZwGtxe0OmoJrZzPoGwLfKyKNHqHq0-onqK6yKM0LjK_pANr6AnHJrLNK2BvQqe_dXMIrNcp2A0CMq0YL8SBgkAFjwTc0YIo9KK4WqIb96MWvCi1hSwBCC6A8IJHyrADcLxQmGkuCRrMM2hp_9cG6hqyDiGwtBnLgXNT1oLnszAAwBGsyEP4aTvbhqob_asOKkbiHewEgUtgjIG8c7A_1xbcs3BRpkaJyj-oIcpGxp11dgoSZLpIX_G6GWhQMLRukqgfHRqdK9GoOykbtHNwBuh3APwDLjHQ8fBVCXIWqDf8paERysam6WxrwbXwqRrFdnAWdzJSMAeB3iBjwDaPLjJG6xqTq6nHhrkaa4_hqkLXvAny8dWGi4GVqbq9JogatbFJrPq0m6SuD9DbSX10dzi2gDQAVomCFbcEm8KGD8gm3hrRj0mpxtoBXAzpLpkaIf-MQVWknpohDMM9ppabUmjV3Saq_JTJqgtkUL0dDhQO-DRwAmjKNGaSm8ZrKb_UwJWyaLwxtygCKkJZtSqG84puga1m6z118gge0LPIU7YQGaBPK2twtr8m6Sv1sVm45uSbHm4h11B78vqiiarbERIiqMgKIHnw8mujP4apinSuLsjm1OtebrPRpyYbUnaBD4LmvVBX8BcC33JBbra_RtkbVmqFv2KJSpO3BZuEOUB8cYIO6xbcYASQHCb-m8RrlAAmjB2ebIWsB34aNIsjOiCGPc8L_DbAQCKGbUW6SsFLV68ZsxaXmhlp5biHLAJDgYAY9MftsAhcC8ceYNgDPJSWgJuYc6Wjuqha1SxJLFbPUWCooc6ZL7DLjFW9FocaBW-lv0aeW-1JkMxWet3Na2_YZtNblW-xqKaeWliNHdSI4QB_5jEXUGdbPa3EkVakmhlqNaVWoVpdQgCl4BWAfmyOyOBaoJwKpTVGvVsaao3O1uv9GWkktnNtMuAE9cU20CJPRFWxkr5bkm_1vtbwW6SsvqTnKvAs02k4CNLaNozFJVr-G6Jw1qIWgNpNbivYh3qhmEPVFh8oA0oLQA7AdjygCAm0qPrb82xNqLbDGiUGdyVIDQKJ8wgX91arGmwMofS0zCwFqDHVZDjXhiZfaxUhDrBBwnxGbEIjI1igumVJVLafAWoqZi4JvCj_cp3JdyKy93IZjD_L3KBCs3f3LztnrDIt3oh280Nob6G7gUYbj6ZhsSjWGv9vYaAalIqUt1hF9u5QKG3wOv9Ug79rCDmgBIOiDxquIOMREOgaOQ7NozDNSCIO5G1PaL_YwOv8cgnzLtDCg7dpKDCaubLUCs3aoO_BX2vDpkCr_PPM39t_PoD38H47XKP8P8m6tP96sHDpPaL4vuPmDFg6qNWDcQYEM2DtgsjpxLD8_YNo7IOt9oizxs9HNfDJc6XOdS5chXMf8NYCQMhDJcvjrTF6OlkvRqwKmbLd9IK--Jgqb8uCqzRHypCq5bLatCoUB1gZduaNjwHdv8Rn4TOXQge5cy2wBLLAs1AgbLKuVtha5buAbkGqeeCapIaJqh-oB5bxXIAfGtCH0BIwGihJoF5MDA8BCOUI1cxiaAfXTM51JSnI5XASiCMB6Nb8giAzVGoEfAxlIjDhhAbTduBs8MABCKtWEHsjMpgKJSi8RkcQ82kpIAHFAvBhVMBSOAMpcbA4wRu9TEEwRuwjnz4VeP4S9Y-u1EHPAG_RJXpUXGRlQsRmVKABa8BKjlR0Z0bUjmnYCuybpXpChP80N4i-ebpfzFu5bpkpXAPlTw8Nu9xhZUS6LbsgZeqLhnZUDuvjCO6wMKbo-FM0soQu7y1K7oG6YuW7vu6BVBIHYFYgUoW273u0VU-6GNG7AK79IR4EpdOBJ3gqFTzf7RB6lu4JnB61u_lSZUnuqADhFZwBEQBopQOHsHgPu_bqR7p2VcEXkFu0Hq0QvWFZh0Y1mA3iPhbukFRhBBQLyGnJpybnTzRiaIEgWIGe1tgmJiwUlWZ68emADCY0HWNTW0iVI-HFAGQLGCwwsbHHS56MUNXp67aUNmmYJpe1bo6VgUPXqxhaUdTG66Ne9Si8hzeweGYZ2VS3tnYDzG3r8hrei3DAQRQf8g8MUupYA8BtEYmneAsbZZAyBVkdZBY4eDVwC1VZMMPrWQgEJRlbYPerDGT7EURCTGZaNKSjw5BcRxgZ1vDTdR3R1ei3Be5blLGwFZKEBcDnxiwBXt3slexHGaMcbPKQXBmGNcgFViKqsU_ZIkLgCARLhKAGYYu-9ACARaUT9hWR4-sol76W-uPoj7KyYft_ZwNMeEoAJ-nXu0MF2n60R512um0a7_4TSkrJtKcBFc02uqSiZtAkV3sHglgdlSIwuuk7uIEs-8bvWBjurPmEQ_zNXjPQ5u1cHZVGGE3tcZie3oISBqe3bov6N5H7rmg_us7sRoge7lA_6Vu3lUJ6Huzbvdp4gf_tp60gUsny63fboAf6iBJ_qAyOBUoSS1h8dlWgG7u2Ach6oAaHs4EkBhHvRtaulHplR0evAZD4fhbkX8J0bT_pgGWGInse7f-0nushye6PiRFKBjFkAH0zEgjh0MUFJjRwVcKAZhB0bHMWlUPuNxS17IKGQaEYleRXqG70UO3tP7Ne43vYG1ye3o5VDepQfYGWDe3ud6aSbQdt7EgAwcd70bLhgkGowOOyJxo-rGxb6j4NvoNymxUTSQ5hMLqR9wr-ovtmhk-r7q0xfu0_sLItaIIdP6a-k-jr7qTH_kxs8pYweIGfGAeG8YPrHbkTpwGG1FH7p-mBi1pJ-tCDH6Z-gBgvZC1BfqX7aDdwYAYKbCXqaMC-r1hAFk5XQZSHzcdIbO4O-sFFyGe-9gFo0uh-fvyhk5BfEptPdIjEdUj4BwbL12VVDlSYzcZbs2gOMeKU-tIMXMzWQgmYAX0wc-PyAtADbEvmVVyh_KC2H3KGm0chN-ikya6d--AD37UAXSkPNHReBEDFjKQ_vloQiFdt8H4ddwR4YupGVWV67KEYGvghwdJFP4KMdeW5QWCAEdwx4dKwd9Yrehvv6GOtAQHLoeyK4AuHVrUqzbIIEShlS7wRgshGHEheroQgt-jSkWtkcFay0o1rLEfa7j-o4Fl7Bu9YCv7H-nzHiw7-msEwGChYgWf6C-aQSUpaR_HucYOBuAZJ7BBvbpQGQh4yHQHOAMIcZGihc7rf7uUXkfGx-R7_q4GHGF7uFHEepXvFHYaDAalGsB6bvVsMe7Q2HwFRogYh6f-yBnIHYet7pp6qB0Ufp7bMWgbR6DRhge-FfhVcAVG2BlIeVHNusnpSAKemPgIB1Runs1H7-mcgVGQKSWmZlVmfikPslre5CooiwbkuBVbAPnpSREgQXuF76hpgjF7au0QeOIWhm5Vx7hVGIfMH1gYmmPa0xPNCaGnYdcCcDFIe-lRkaAaGHiAEusPuS7kh_vvQBXvPAAMHQ87_nrHDCDsf4AfhRwF2sAGGHCqwRAeIFHGmxo3swBten0nQAZxnOGyGW8Na2aH5xk3p-Fux3sdmB-xtBRuw9YMFGrHcKqYFrHfXX4XLpGx_ZEGhJEQ23i7EuxEFewhxxcZ3HtBvsb6ABxwEhaHOx5cciZy6CIDIdlxjcYQ4txpcbWtZ-vNB2tZxl8ZHGIJgBkNtYJrsbxBdxlJE_GDxuoYXpn4MaDtQzh0YwuHKrVAB5ZMR54YLI6MO1AEwZyGxnz7sxhfHogKJ34dllqiEuEIm9RdJFBGGJ6XRUH4AeidlQCdE_ulHb-6_pgBeJ7YSLINQFXGT6blH4zXJJJ7QfgxOJ2FFkngh_gCd6EJizCPg5Jovr0JVJuwdFUvevvFuVUugPvIm-JwsWaNg-1VW6HI-kIBj7Q-oobyHUBxSYNUzAZyfiHzAZSe0HRJrTUUm2R_ng5HOR2boUmzJhlFYHTRkgfNHnulug9QgxlAe8meUaYaKIJVViluVfGYKaDIpemqA1UFsLG3in_UZmyqcq-zAGYYmJqsTbFNbOVjcnCVTQesHLB0pgknk-xEmr7l-2qe0nImPKZtQxBryDxV9B7QdsGUBthgMISxn_tb6f-_v0qmQpm1FKnWMSgFYnWxL21E0ap6zFcnJplydshJprUYRU_J94RlHwBuUaqnuJpxi_71uzbstGHeWKZ4mVpm1ESnxVSVR97uCNKdMmMp_MaynuJmPo6nLWI4HfYip-XqINTgLweYYpJABg-nGdXqe0mscBqe0Gmp4qZamDB9qZwnVp0GaPgep1Xr6ndJgaaZUhptQdr63BjFG8ZxpkGbRRpp-Nlmmq8HlmMR32RafdUnEK6elREhRSc2n51atE-FAe08wOnpBpUZOmSe30f9GBB60YAHqB2mYSnZBpKbunUp4VXSmPSTKfGxlVXKaFn8pyhBiwfpkqf-myp_gBixzBg6f4mVe3XrqndoSGe0noZ36aqHdZtqfHH2ELWd-HqZ0btRntJ_qZFUNurGePRFe3GZX7yp2IcJnYUYmf3RSZqq1bEYsKmeRm1MeWeIx3wBmZDniab2ZYmyZo-FEmbkWm37kiRgBDmmMUEidMoj-kIkXlqJ_4xzH6RyhCjnfZoie572Jy_or7BZmsAZG9RnweZHhJojG2nTuwKejQIB0KZQHPRs0a4GWDRxjbU9poQfLmW5pJlFmUpn40en0-aWdmhZZ_zBdICp3Z2Vm_p5inLQuBgmannsVEDWwRZ503pmAeWbxlGnF5xWziGiZ1WZmmU5ryDdUVHQOdXmaZpD0bxGZyUZAHhJtpjAGgBZuYe4wpgnoFHvGTuceG7wM6a-FkBy6bzQbpgQGSnLycWe9xm9MeeyngBSeY2NKEb6beJmpkAG9nvGIGf3mxJpabXn4FmGY3mt5kaeqHd5iqY90C54-cSAKZ-R3Pnup4OavmgBiUeNEG6FmaS0wUDmeOnOB5hk_nYmVtSmReBv0f4GM9XubinGFkWdumh533pHnl5o4Cxtx5zVTlmYFo4CVnMF42aQWf-jWeBmxF9BYI55F1heBQcFrgZ3n3Z8wf9QiFmOYxQ0Wb9nIXEgZaaoWRBmsEjnD5kmeIWN-xOfOHt-mK0Hg052TReGMkLOe-Uc5uibzmjgJhfYHvRknpcWj6KAF6B-lDlD_nUBrib-6hJx_tLnhuvWemGXueQc2hXMCBbenpF7Wd2gIrWJAm7dR9kaf7G51_ssIAEWK3XmX-u2nqgDe85FcHqzPdBOC4hm-doXCA5gdrAylweHXm-eRpdzYLBhobBQOl26irGkhhBd0Xx_AmyyGrxgYcX65x42Z3m8RxvHWA7UVPoMn7p0whooTJjJAYmg-5hkGWDeqPt2XMrFRZrA7UP9WJoVl9PoVN2u7PqIBc-hxaBsnFjShcXgEBKzKsbhg_vTmPF0MfeVs50Xt8WK5sudbnwp9-cimoAEJZbGRHVJCiWElndEEmxu2ubzHEl8GcgXPhwJlSXOul6ZlmpF6BeyXBlvJcZ6Cl_yaKWnYSpZODSl3JY0WZu6NGqWEJ2pYQXulwfiaWUep0dlGBlildmXmGBlf0XF29yaTMIrcumrG6lk2bdnVJtIZ_6MhsRkgm0UA4ZmWhV-ZcwnuiSYZ4JAhonA960MLyAg1yxTwarFCODjD8H1gGYfQ4Pe3GEWGtuQKUyGpaBLCKY1htVbXUjhnYcWWTl2VBWWNQNZYU0NlgzG2WLJw5dit9lkIB9WbRpXtOXG8c5a8nsJ04ccX8J7fog8urcIDcXUur5dZGqJ7xb-WEgGFYLmY1n4DM4S5vxcOmYV2JfhX4l75fyEiVh-ZJWuR5-cNpX5zmZYWSehAde6EgeHr4X_5_ucgxB5kBeHmJZ8BcxXJFnKZxXOp8BRUd15xRfwWPZ1RZWRl4ZEzats1jlYN4w-ydczXhrCciJEM16dYIBT5hxypn51oiCnXY1ggCSxr54AZLWdpx-avRK10gmrXmFwUe4Gf5htZ27oVgRZQGxVIBbFnO1sBdHme1yBfenVFuBdnXEF2xfEZAZ9QfHXt1tHEXWZ1uVdA2MgcDZXGcKF0lXW910haHKt1tCAXW11g9eoXtR_yGZmAehhYAXL1wJa5nuBnmZ4XAx_mYfX8Np9fbW3VihlEWZF2Zd7WoFzAA91_mb9mHWAN7xmUXUF7JYnWd1mDfXneNsDbXXLeldYA2S4GDZMX_0f6PYwoN3dazX91oDGvmyx5owQ35N-5Ya7HlgBBg3myXqwSBCGUiZwx0un5ZTXmjXOYBX_FvudZZEluFaUwWR-zEJWdp8taCmlKAJa9GiNyBgunol1aCPXQBp2FlGCBgjbc3a17gfrXPNmgYlH65jkZwGYe9oWolXMVzfbnTpgHrC3MNraYc3Tu6LcNHXR89YS2IplUYSASNxESp7yN20ZbXvrQMmJpklnhlAXLmblAyWJ55jaqV9sSldSGjFcVY6GF5jQcE3oNtdYE3ZNmDZE2Xe_peGXjwS4QHgrx_reE2FV78iVX0V2WY9UIgE9TLZz1b8lWGwAZWh0YB4GjHWhc-aYwGgThkKweWo1p5fGssYFrtcBKRjOYyQvEBUfzX756ucSIi1pNbvnpR4pbtpz1j0eBWgl7gc82xRnzfu3T15hA-2ixvkavXSB0LZK3m1vQntHvNiLfS2ot-gdi3gd_rrl6vt9zah7ktyHZFGTEGHeaW6B50di2se90ZB3FRsHdBXCtynrI3G1wNex3odkMee3IwacnDHXMdnt0Z9FU7amBkxuwEsg0xjMcl0-l2ibTWN5RFdmWZekneGn0FaxeaMKxiNhPGQALZC4Bz0a8ebGwlx8fbGfx_ESnHSej3kH6mrUodF2TewCfiBrJEn0iZDx2XbylyoDnaV22x2cYfHbdvvBfHprNDiH79dl8aN2eB3ftN3xxkYcQ8CR6UGBtrSGyHaIWcbGWBtAgYf1AwkEVBgrsDNCu2HxBMLQStW1ANYYDIeDIvl22HV3IS0FZoJPcdld1b0XT3fVbChGH7NuaCT21t6TmYYdt7Yf23s9iu1z2K7HdXZ0QAavZCGKWLMZ_4tBXMYZ2PMXzapWSlwruaNyofYHxBJoGUFiA8PHvbL2FCKLE4xXtvzb2miaZow8wvbafdvnZ9kzH72Cd3-blHO98wAj3iESAGyBoekPbn2tBPnBIxBMPvYB3Mtl0ax7l9gvsP2YgY_Zj3eHTfdQwL9_gwtAxFDzESxhd3BATmjtpNWWI3gH_BtVBwKAKMomcdYkzmwMG_de23tslYjY3huEESZIMZwHXMJ6IlHPBwtrDev2590AcB2N6PfZb0C-qFCgOkmACIB6H-OLEoPpMFmeb3pOQ231IRNJg_4A29hjUDJmlx4HoWX9EXuaMKD9hZwBnAfUHqwMEGcwaBaoPuhL4hD9A5EOxDiQ6nppD-pHYPC9p2APV3CNQ84Pl1gA_92EzORDPBbaXUDg4VHD_dq2Z9hA6rmkD7kZy7h9kAAqhuPPVAn24gC2A73_jVfZUd1NwkYpM7FLIGwNYEZxRZpqR4cHbkZgfGhZo12KTnXZlLNcytw1LNUivEUDWBCxMN9hyTHAtObCDvAIjk8WSPwjlxRyJH9rtXE0hdWIzyOcjlnnp08DhFTsOC-lQyJI-SGMlvldtVZRkB6DMFA0NcTUI_0oKj8TEAMTDE_msMtDNwwcMrF_Q63bcN_ckwAOyeg9OtBDyA-EOgQQ3pmPhD6g9wGHeWg7kOjKRFEYP89lvZYPfVAwkvUFEREBGlppHCBSBFpA_l-1vDgPYpNIAZhVmBGkZpCwIAEKUAwYvEOrkyOu4RJVOBtI1fEckqYDhd6PQRGkUxkYRTMas3YVtVBzXzNvYHvyFEcI6zBYTriYgAoOBVgBYgdKFh1Yvj_dgtxIdPAGxOYdL1j55iWRadxOnJYSHtYzwQRR7CCgDcX0BxQd48v2SCDE7yWQdWFhhFvj_E6jUoddUkRYI2AHUoR1Adk5FOYWNE4Mh-T2xiv6pQA23d7WiMk5Y2T-qUGDR5TvdD0J1Abjd-HgCEJ1mBZoach4JZTsMCnkdWdPQIADUSNRINDev0yNPiDKYE2gzTi04cQj5DChtOCAAaBKwRAUGlNPhUC05YNrTmrjNOPT_04dPfTz0-_EiAD_WRYET2YHGMdTxE_sAaAY1lVYYzpE_XX0WUGFURUzxM_TOrEc5H22dZD3SpIqSaM4yAEzpM_RYUxJ1FsYKToE_tZscSaHIUSk1fxgNbDEY8jMj1-M9mAcz5M82gotdPlrPsIe1jQBq8Niv1B-0PyEHOqTklhHOMgMc9UO-lJIquWooGg1P43D4jBR6cNEjDq6gDjTdGMS2ftgrYwaYdgHg7Vc3AQQfQEI_Nw58eygHZQaKtnNw7VfSAuJIVMbf0ALzuUET6L8P46FwWAVqHmY8AB84HhVsDMxoss5MWmEhc5BOEFAk4KSBLl2IXSQelmLayy1g-hMzlcx9gV2WaHU5cNZ0ZtqJY9cw_zsWWBkPZdTESglZFKHYBRUHAHZEA5VcCCgQoP2V6Hbxui_lGQIWuF6h-oIH1YvaYV2QtBClHWRwBmHErMZF1MRQvQBaiM0G2BgZKS4hlxe2mHEuLQEYCIoZLiUG2AlL4UHQB1MYm2FArgAAGI9bZMHUxzZbp3TgMAEblQp9LsAHZFrL6y-MvNLjIB1l9ZPgi4B2APS_IAPL-y59kMgUOWKSI5dgFVl12zzBgRzccXWrwlKAS7DR_ZHwGnJ84dwAU3uUci_pCdZWi-jlADhGQdE5yIyjCu6SVzEiuq06K5z44rmgDIukoZWUGhUr5xC87JAMy3XYy5Ky0C6tYcOBDR-KygAZOjYbuFmBWriokhsaATy2av7cG4BmA0lXYD8surxtcxk0AdS_4tKuEeH0gwkBB0gLj4SVW6AxroUAmu4gPkotA0AY8CWu9rLxD7MGgFXHqwWK1sxmvBLGS2zo4ASdBwAsARIDcgngMSgcsfqMwGLNzrZE7-GWrxtfau-8VzCllpLz68GvbgEa_mhcgfoCuBDr465YqlgaQ2_MikU4oyAjKK4BMUJ5CUGnBcUOW1px9AINJyQYNdxjmBEJaokeuXLZ6-9FjINaBbRNrzYGTl7KBa-P07rI-j5LStNk0O2f4VcEhuTrhoEpver9OWquzLOq3StBl_zorkguq2Aetu4Zy2Io3LR-GIU5r96_WtJ4AKw6pdznw9GNorCKx03YIV5bbIFjKWiM3dbx7esOnNpudIOaJn_nlucAeG1hs80eGyuAHrJG1hR0-SBnBWwlyFY5Q7JHIc0m78FXFPYLVlXAaBcye4AH33twDIsAHLgQDvBEAZhgtBSVqABRlDlDwg_52VP4yxsXhevljvql-vi5X6-Ncj-Nj2cWjW4JVuNAEEoxXGwEECGwm2R4CmQ3jzvawMu6rvnhXozJskPMFAdvQTNAaw3UevicbVUkefaNvWliU3-MLbq269Zbb1IERtMG_1Gdv7FUJfCXqiYykN4VcG9H4AmiNVi9sspexGnBI76O65XxxpO_RsU7r-xq5a7jO7C4s71okL4c7o-Frv_CfbBvvfcDrd9QS7-znrv7uCu6fuG73zkRp771-6VFG7j0hR5iz1u5uwlN9K5Vu7jtW_CtYrTEeXl0livrNWEpFkBBYm1JYYtX8l95VQexGKJlhUCVuaDVZt92O_PWzb8wGHvoba623Qx7-2-3QP-ae-iBZ7t24mhcxLyBVxvb327EZi7dyQQfPrDe_Dvt7_gBjuuR-O8iY_jZO4KZU7-vh_uuRzO6-5s7r7lzu1uX-7fv2-yu_u4oxGu4Uf2xHCTWs7re-_zuaAXR_5xH7r60_uEeKMQFEchPARdYXWNu8R5kemhZlQZ9_B9v2B7qJkwereGYi4eLV444KRpOaukyM2kF7shO9HnUCMfx5zx7EZvH0475Qe6XtEXQv6LA9nR50OJ_52GUcJ_ceziU7nNWInoaROOCeQh6OVvvD1CCfeV0h6utrb6VEoeJ7-jBoeEgF27nvUkITCvQl7i-hXvgANe5UcN72SdYejHjh7n40nmyB4fvLiO9Kgd7i-8ZWIxmrlEf07o-4s5JHkOmkf7uWR_u55HpIUUeLOd--MfK0NR-_uNHrmy0fe8HR_b5zcAx71wjH9vijF3Dkx7_vrnrZ_Jt6MGx_bu1-27FQA-bm5xSsCkeq2KIqKYW5YsmruywcsJbp66gB3LWW9-pPkeW4GsYu081ZvVbkA9ysIKR-BKs8MHW9gfi1px4X3g75A9qOmCUp5htR7sh7tuqntFDu4PN_mfT4pnj0ixsRHu-4KYi7lR4AeO6MGZ66qTKtZQGf74sAMfrJmfqSE1yFl5tQ1npR-1X6X1R_s5zH3AQ7pvZvl4sABXumeUZm72V5bu80Gx7_Ub5nu_HVt9_zaH2C-3F_Iebbgl_HvHrSe55RVR6KcQH-Zj24Pn556gGafRt1p_aeHHHqQzJyXg-81oqXjumvPa7ul4_uRDRl9tnmX2u4pf7uN155ep-ofp5fuek5-YJNHm_g2e1uMx4KYLHiV4A2pXqN72ebnpw3leeUIB6VeQH1LZ1G8HptW32-DuLbcVf1tVm-mMKct6b29j5g6L2D1enqG2cXnm8tuyH8p9hRKnw15Q9t0C0cx3qd4yng2ANtXERobXy4Dtem1de4pQl6b2btwLhJqTqlsenaWb1A3_1AkXqXgu_r4vXzZ7jUraJl5t6A3l14EFg3uXl5f9IZOgLEZX-pljekhC5715u-pqxDeHJsN6-4xX-vnFeauSV9rupJdO-jf6mLTJSBh7f-9uel6Kx9qG0UZV8PW4dgt97ui3yY-y3Tboe-beR7sFA7eHn3IUgYKdgMf_6LXr2cHeGgb9l6e1WfkUneDFwd6dD0AFXFvWneGd6_Qx33u_nft0WxmXf-Xjl_deaXjd7OfAPj0g_eCmDWc4_K0Xd86X93tl5fuWP8N4xRI3i94ZeH38PqfeRX-vmMgiRNfozfgPu5-3fYUcD70PwHgw5ZBGySsl0oDb4fFoZ-npB7g1e7tx5sh0HxnfM_qAW4hwfuUNV9NICHitfg_iH-RB8tSYJD_owUP6h5dJSXvt-w_Un_QB9uen1p-s_ADhd-lQJnj0iY-V30T984_Xvd_s4Yv-piPe5BHXdk_j30N_veb-E9_QFFdgsWlef3mN-UfvXuXhvf43gQQTeCmbj4EF8vr7kk-s3t96k_lPhV-lRUP5w1VemNaD-ceDAoh4Q_3Plt7Ke7ubz-qffPqKYVQYp816AYB4YL6yeGZUL-M_wvz9mnfl7kAFXvx3jp7aW0UKL8rRkv6VFS-d3hL8E-kvg97l4DvhHgH6MvhHi5ewOHL4je8vsPgK_U3nBC2Er3m_nK_RXqr_r4avr7jq-g3or59e-P1r__VKWbdHa_KSTs8Leev4t76-yNeR1VYm1Ct_ZpEf6t8cJ9jut5CGwUCGwG_PPip_1eqH0b6Xoe39Y7Nf_P6b6C-2H-b7W--nzJ8QelvzWmnf4OEd4I-Nvh1-I_K0ad-cxapeR0df_UddT2-eUVd-rujvuwHvuBfyl7i-R-E9_qZ0BBr6to3vkfhvf1uO9-5ecvrL9V_THz78q_5P6r-Tf77r9_q-Afq2j_eAPq56A_mvkH-B-wPxTbsf8Drr_Vfof2D4f2UD5ox1e23tFBG_pUJ24K2uF3meK2yfu9nNxZvun96ewv1qTvZp3vD6k2Wf3u6I-CniP9I-6Qij9g_qP0d-p-q3oct5-bUfn9O-gyc764-9f-zl4-zf2VRF-U3lgeE_VnyX-Pfr72X6N-5PtX8ffsvzX5LuA0HX6B_GvlT9B_7nm34VX1gJZdlQ8JuF-PmjKAz5CIGJoz9p_PrBH7M_FvojAYnF5ML8bxFJuz6rQzJhz8tWnP5za2XJp7H6hshvgf55RPfhx-JfD_6VBNeJv0n526KOS2aD_KfmyFD_FvrP4Omdv2_9z_LZ6V8l-P_i9DL-d_-7kDfv_mihUvoADueCr9bvif9rvur9wASADpVvd8nVp_w_vjADBfj-8kAWigFfqgCeVhgCSMEgDsAYjNgfiACfvhACraIgC8Afy8UAaQC1Pt_9cAeb8iAcRgz_nQD4Adb9GAbY9mAZ18oPg78MXr19SDiv9Xfoh9W3n_8Pfvj8iXrQDKxmv8bUMT8Ytlf9eqDf8KARk8aAMH9PrI_8p_hatw_mICSPla9UAEO8gBMz9aPuOoJ3gu8X_uP9ZAQADZAZ_8aoAICgyAJ9RfvQCraCYCEeMADTAZ7c8xKe8gyDYD7AeQDP-OgDHAfgDvAaADddhr8MAXBQoAaHBmASY8cAfZw3AS18RAVNNC_qECgyAb9ogSu8PARZwTfskDAfmoCaAZbNqAT4DO_hkCqbHEC_1AxM2AQbc-7oUt9RjD9uAZNM4fgxA0EHioM_vg41DgcdNDkGtJpuz1T4CkASgSN055Cj9eHE1BH0LUD9MPP9EZnv9V8Lj9EgewBj_gdMLAef8ffjEA-BkVsqdtf9AyLf8Zvvf9qAEoDkGEY9VAeMCLANO8yPsn8SfmUJU_jH9x1PO9PVo4C7AVbQHAfdxCARgDi_jsDcgQ8DYAabN_XpECgyJcD7AV_9fAdKgVnnkCR-K_dAgbCgvAZ_xsgS38_gQkI2_uCDMgb4DQQVECsgW8D3DgdMHbm5NCgWZNqAfHMawEP9DDmOAR_vAAx_nA9_Fot8Z_uOowvpZ9pyEv8sfj4ZLPui9-7mh5t_pSDtXnwCD_l58hAZ28vfi6Q2Fugdu5kAJIwJz9tHokAWHqsCQvtT8w_n19W1ny8hft98ANvfc_vhZw5fgwCLOB7sTdqsl6-JyDEgPfdLvs39fOMED7OLl8CxLKD3AWm8R-Ar8S_jQCLflECrfgqCeUOD9bfmlt2AY58evpq8STrwCcfvwCKHqyDUPqICbUJyCjKN_NYPgF8cPhoCtAU09lxndZBQRT9hQZw9lAWIwN7gz9B3kz9Vvut9e7voD11EAxWBofdzAbr8NAQY8EgYb8jQV9xUgfmD0gcgYtdsqDhDB6Q1Qffdpfme8zvvX95fiV8t3pb97uJqCNftqCm_q2DiweaCmwZaClPup9e_t91IPp0DHfocD8BhGxqgRAABgeotTPqcDUfl6o09hocRNKrQRgR583QUvRj_uyC72D6D4AHeAMPkiIAwZa9qiCrh9gZR9mHkz9QwQKDunnN8H_gt9owQDBYwe-9E_j7IDgZICjgQmCWnun9WflU5tgQX8gwceCU_lz8mpPUDnMFn8-fny93XumCxHsWBy_rCxpQWtx7gaaCKwVota_mJ8vIBJ86wZe8GwXG8tfghDHgRaDcIdaDA2HiN-_i89MzJdIzLENZwgD88ULiVQxbgC8nLEC8QXv1d5rBC9krFC8SCFiCdPpWo11jA8iWIZ94HreC5EMg9Z_gJDqAGSCKQQIdN1NSCofpwD8ngyQXQfv88Xu6CrrIS82QTyhvflAw1RlN9A_kKCrwesCbwZsDdIeF8XSDt9_UOL9YUPn9-PpNs91lmDWmDKDHvnmCXvsgImvmaD8Ib2D8gRyxbQfm8hwZwCnQQyCm3q6DmQXj9lIQa9PQc3oJARQMtIdF8dISH99ISE9DId-CYgUGC3wba8PwcmDNvhF9F3vvdK_lcCoIbXdutnJtZDFKCNAdBDcwSl90ISR9ZwKb8nIR381Pj2CeVkwCPIYd1BwTSCygf90RwUaMxwbAt-gbug6gT0CGgTW95wawcS9vRhlwYN9FIWuCPQS6Qanp7sCgH79FgdIDFPnICCAAoCLVhsC4oXT8EodKg9gUn8TwQKDNEP7dA7r09dMJODQBGKDhZtlCUvtX9f3rEC5ePBDqoXI8rIfJsvvum9uwa5C-wZSxNmO4d1gBxDzAJ1Z5Nprc-rHvh8Qbg9vIbSDZIS79GQQFDxoUFC7rCpDQoepD_-llD4ABmDsbAUwPXvZxN3s9CcpI9DCoS9C6oW5D6oe9DGoQOC7fvaDN_o6Cl9hDD_IQpDdXjDCEbKpDT_kT9xvu6gpAYPB9wbWAVvu-CkwXoD0ocZCqTGZDaYJKCLOOjCBBJjD2_m2DyAGhtrITVCrQfjDytg1DQ5p5CN9i1DS1m1CXwaOC7uOODvMEJCZwUOVDevUDNEI0CMfg28RofJDRgauD_UOuC1IXjYMdocCsPotDeLvGDh3omC2np-DdnPeCUgYO8AIa096PnexxjALDzIVdDbAWx85eGLDn3rqCcYeEAsYV2C5YZc8CIR9ClYRv9Dbq1C_zMW9nfndxRoWMC6YXDCpoTbCZofMDKdlh8bIQDB_bvh9dAaaQ4_otIioYeC_we1CBQVz9y4ZatfYR6R_Ybn8coZgAxfiHCEeGHCG_ss9I4eWCXIXhDY4fLD44XTNIzBvJXnrk5ndljAqIY1caIf89HLC1RJbq5ZgXjLcmIT_AWIYrc2IRZQfoZfBnABzseITCQMVoSCRIZ9BpwaaRSQSDDyQYt9sHlSCQYSrDHNpi9bDn5DzbkyDoYUf9JoYT8p7n_1Iobt9ooYoDYoWsCjIUvQTIddM24ZWgLIUMwOdld9EIWQ4ywQUwlQel8tQUGRCARZwDQVcDyoW9Dh4XHDaobLCiYYrCmoaTDQYSnDF9k_MXPv18aYe7923p_CNwd_CNIaa871tIDyfvICgEWtCgEZtCeUJzCUodzDTSPoC-YUjCMbB3QhYfUxp4fC8OwbAjjdlpRTdqqDSwUgjxERz8boQjx0EWVCiwTHDXocPCQPj39LFiTC7QcQjVYanDYPmdCtYVBCdYaaQkfufCm4bOCC9k0CDumRwzYSuDAoTagrYYzCIGLbCXwfbC0Yf_DVoYAitgfVJdgU7DtAS7D7Xl-D2fsb8vYbO8fYTz8tvplDwIRdD24ajCBBKgj7uKVC5QZgiKof-80kVgjK0KIiYEUGQlQVIiVQV9xEEY7x_AeAC8YeoiskTgj8EcTCNMJD9uvpwC04UwNyEa583funxnEY7c84buD_ftf9PERGDDIWwjfEaHdAwYeCo_gBhG4SsMWpKEiUEY-DyPrtDjgeMjghPHVMACBDs_ny8A4YLCg4dMjioQY87oeUiPSDkjkEVbR8kV7tCkfdxikWACQgThDcERoiXSKFC1jNud1gJPDJAJtZGrJWRoJqTB6rgF1iqLZYVIOLd6ISTdV4R5ZTzF5YebpC8OLHtZd4YwhXXKSNVrOgxUXnVt-IQZC6fsSCL4XP8r4eJD99lJD6kWDDnPnJDIYZQjhvjQjrYUzDGEWzDmEctDWET4j4odEi-mAIiUYbXc4JrtZ6-NuMUJu-M9xuhNnIUPC8EQTCSgP2Dakc1DpIbSDfIRJDqYebDHEYIDgoQT9aEeIDmYRmhWYf29tIX0iYoSKCn_vPQuEWn8eEZas-ESAi6UUIjNkflNwJkyiLOCyiJgKhN9xpyiKkTyiR4e5CCEToivIQ_CMtojtd9hEMy3n1DvMJW8-oYbCBoeodWDjDsX4SQ834bTCP4ZKjhAS4iZUWQNe3j0jFUSwjIwTT8kUdw81UQEimnkEi3YT24PYQoigwd7Dqfs3DVkbqiauMIiraIyi-rsyjkJqai2UWhNUFBaibkd382vnyiHRgKjsUSQinUWUJ04f6i3PgSilIbDCQoT58SUV0j5oWSjo0RSjY0aKChkZH8y4alDx1JXDFodtCnwXMiG4ROizEVEiModt9-YeAjYvh3CCmEWiB4Qai3xtpMPxpWiZYVaiqkcej2ADaCFVmLA2oGp4FsJoBqAI9JqISAAMkO4kB_JqRdCCCBvAD5dfwHAg_UMOMzyH-l-AOFAcAABjwoN-jnYGc9n0SABCqvkA_wDCAsAD6A4ELFRyQJPg8wMzFy4HVQRuOUA30WWAQMXppKkEehczHpIf0C4xLSgQoEQF4wB_BLRBAFqAPEgAA9WDJv6HADwuFtAuMVdxHoajHsiHADUXRjFx6cWBREGuAGKRuDNwYhSsYj06pQBjFcY8IzQSWahjUSrhHoVdxMY_bRAvGjFDQBjEMYxSwKYgFGMQ8DHUYi04SIVTHD0fG7dXeW40Yi06iYmxr6Y3oLrXU-CTXWIr8XIa5KYmi5iYtTHjXKzFU3GuA7Xem7O8YTFCXHAByY7jFoY60BKYzKD0Y-Fx6HFKiYYnVSBWKQg3ol57IXOeEPonZS-gDzLF2Pw60AfczmgBuBzAd2wKAeQDyAIAA`} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Gecz\",\"multievent-container\":\"barchartEmbed_multievent-container__3zT9b\",\"multiparties-container\":\"barchartEmbed_multiparties-container__21kbR\"};"],"sourceRoot":""}