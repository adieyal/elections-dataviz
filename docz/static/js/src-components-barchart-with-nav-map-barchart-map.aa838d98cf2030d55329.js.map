{"version":3,"sources":["webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css"],"names":["module","exports","tooltip","className","originName","styles","BarchartWithNavMap","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","exportAsPNG","bind","Component","event","console","Promise","barchartInstance","exportAsPNGUri","mapInstance","values","zip","lib_default","a","imgs","base64","type","content","saveAs","error","document","events","_this2","react_default","createElement","ref","barchart","Object","assign","instance","map","BarchartWithNavMap_barchartMap","provincesData","getProvincesData","barchartMapEmbed_className","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","self","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","data","edge","e","setState","value","newState","triggerCustomEvent","CHART_PREVIEW","MAP_PREVIEW","EXPORT_SUPERWIDGET_PNG","DOMAIN","config","_this$state","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.2052f19b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"barchartMap_tooltip__3irZv\"};","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport JSZip from \"jszip\";\nimport {saveAs} from \"file-saver\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        console.log(this.barchartInstance, this.mapInstance);\n        Promise.all([\n            this.barchartInstance.exportAsPNGUri(),\n            this.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            console.log(\"exporting ...\");\n            var zip = new JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, \"barchartWithMap.zip\");\n                console.log(\"exporting ended successfully\");\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n        return (\n        <div ref=\"superwidget\" >\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart-with-navigation-map\"}}>{`Race for Votes - Bar Chart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};"],"sourceRoot":""}