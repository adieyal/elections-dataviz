{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/BarChartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.mdx","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js"],"names":["module","exports","ELVIZ_chart-title","ELVIZ_percentage-label","ELVIZ_tooltip","chart","barchart_partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","topLabel","usedValue","yValue","d","percOfVotes","yValueFormat","value","dynamicYAxisFromValues","BarChart","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","partyAbbrs","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","draw","getContainer","setInterval","document","events","clearInterval","Promise","resolve","reject","svgToPng","uri","event","refs","vizcontainer","childNodes","getRegionName","newState","detail","setState","d3deltabarchart","d3","react_default","a","createElement","ref","container","dataLoaders","getVotesDataForComparison","years","desc","exec","partyColorsLoader","getPartyColors","values","votesData","partyColorsData","error","console","data","chartData","parseVotesComparisonDataMultipleParties","TVVoteSwingBarchart_barchart","provincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","edge","thing","index","t","abbreviation","e","options","i","l","length","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onRegionTypeChange","multiple","onEventDescriptionChange","key","province","name","muni","onPartyAbbrsChange","party","formatPartyName","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVVoteSwingBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container","multiparties-container","Chart","width","height","predefColors","svg","tooltipDiv","createTooltip","x","y","errorText","groupChartData","colorsData","partyColorByName","newGroupChartData","_objectSpread","delta","partyAbbr","minMaxY","axisThick","groupSvgs","groupSvg","YaxisOffset","deltaData","barSvg","barTextSvg","bars","getFillColor","getTooltipText","pageX","Math","Number","barTexts","barTextYDelta","partyName","getFillColorFromPartyName","noXaxisByParty","destroy"],"mappings":"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","file":"static/js/src-components-tv-vote-swing-barchart-barchart.7f647257.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__3M_9O\",\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__3tHup\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__2StQf\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbrs) {\n        this.state.partyAbbrs = props.partyAbbrs;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (chart) {\n        chart.destroy();\n        chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className={className(\"barchart\")}>\n            {/* <div className={className(config.CSS_PREFIX + \"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onPartyAbbrsChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            partyAbbrs: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs}\n                        onChange={this.onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"abbreviation\"]} value={party[\"abbreviation\"]}>{formatPartyName(party[\"name\"])}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: \"${partyAbbrs}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes-swing---bar-chart\"}}>{`Race for Votes Swing - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3iHSi\",\"multievent-container\":\"barchartEmbed_multievent-container__3dDi0\",\"multiparties-container\":\"barchartEmbed_multiparties-container__2Ln06\"};","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => item.data[0].delta)) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => item.data[0].delta)) - 1\n      }\n      y.domain(minMaxY);\n\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"black\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${d.partyAbbr}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${partyAbbr}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}