{"version":3,"sources":["webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css"],"names":["module","exports","ELVIZ_tooltip","className","originName","styles","BarchartWithNavMap","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","Component","event","self","Promise","exportAsPNGUri","values","console","zip","lib_default","a","imgs","base64","type","content","saveAs","concat","getRegionName","error","document","events","_this2","react_default","createElement","ref","barchart","Object","assign","instance","barchartInstance","map","mapInstance","BarchartWithNavMap_barchartMap","provincesData","getProvincesData","barchartMapEmbed_className","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","data","edge","e","setState","value","newState","triggerCustomEvent","CHART_PREVIEW","MAP_PREVIEW","EXPORT_SUPERWIDGET_PNG","DOMAIN","config","_this$state","curProvinceData","item","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","onExportAsPNG","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.faf55705.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__tgFvS\"};","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport JSZip from \"jszip\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.iecId) {\n            this.state.iecId = props.iecId;\n        }\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            console.log(\"exporting ...\");\n            var zip = new JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n                console.log(\"exporting ended successfully\");\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n        return (\n        <div ref=\"superwidget\" >\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart-with-navigation-map\"}}>{`Race for Votes - Bar Chart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};"],"sourceRoot":""}