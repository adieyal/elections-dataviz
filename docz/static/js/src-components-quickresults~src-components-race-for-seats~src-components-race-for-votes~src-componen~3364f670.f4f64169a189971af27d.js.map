{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/race-for-seats.js","webpack:///./src/api/race-for-votes.js","webpack:///./src/api/turnout.js","webpack:///./src/api/spoilt.js","webpack:///./src/api/prog-votescount.js","webpack:///./src/api/index.js","webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css","webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/mapEmbed.css","webpack:///./src/components/NavBar/navbar.css","webpack:///./src/components/ProgVotesCountPiechart/piechart.css","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.css","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.css","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.css","webpack:///./src/components/RaceForSeatDonut/piechart.css","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.css","webpack:///./src/components/SeatCompBarchart/barchartEmbed.css","webpack:///./src/components/SeatHorseShoeChart/horseshoe.css","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.css","webpack:///./src/components/SplitNatProv/barchartEmbed.css","webpack:///./src/components/SpoiltBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.css","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css","webpack:///./src/components/TurnoutMap/mapEmbed.css","webpack:///./src/components/VoteCompBarchart/barchartEmbed.css","webpack:///./src/components/VotePredictionLineChart/voteprediction.css","webpack:///./src/components/embedBase.js","webpack:///./src/components/BarChart/barchartEmbed.js","webpack:///./src/components/RaceForSeatBarchart/barchartEmbed.js","webpack:///./src/components/SpoiltBarchart/barchartEmbed.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/TurnoutMap/mapEmbed.js","webpack:///./src/components/TurnoutBarchart/barchartEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidgetEmbed.js","webpack:///./src/components/ProgVotesCountPiechart/piechartEmbed.js","webpack:///./src/components/SeatCompBarchart/barchartEmbed.js","webpack:///./src/components/SeatHorseShoeChart/horseshoeEmbed.js","webpack:///./src/components/VoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.js","webpack:///./src/components/TVSeatSwingBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteCompBarchart/barchartEmbed.js","webpack:///./src/components/TVVoteSwingBarchart/barchartEmbed.js","webpack:///./src/components/RaceForSeatDonut/piechartEmbed.js","webpack:///./src/components/SplitNatProv/barchartEmbed.js","webpack:///./src/components/embed.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/RaceForSeatBarchart/barchart.js","webpack:///./src/components/SpoiltBarchart/barchart.js","webpack:///./src/components/Map/map.js","webpack:///./src/components/TurnoutMap/map.js","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/ProgVotesCountPiechart/d3piechart.js","webpack:///./src/components/ProgVotesCountPiechart/piechart.js","webpack:///./src/components/RaceForSeatDonut/piechart.js","webpack:///./src/components/VoteCompBarchart/barchart.js","webpack:///./src/components/SeatCompBarchart/barchart.js","webpack:///./src/components/SeatHorseShoeChart/d3horseshoe.js","webpack:///./src/components/SeatHorseShoeChart/horseshoe.js","webpack:///./src/components/VotePredictionLineChart/d3voteprediction.js","webpack:///./src/components/VotePredictionLineChart/voteprediction.js","webpack:///./src/components/SplitNatProv/d3groupbarchart.js","webpack:///./src/components/SplitNatProv/barchart.js","webpack:///./src/components/NavBar/navbar.js","webpack:///./src/components/QuickResultsWidget/quickResultsWidget.js","webpack:///./src/components/TVVoteCompBarchart/d3groupbarchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/d3deltabarchart.js","webpack:///./src/components/TVSeatSwingBarchart/barchart.js","webpack:///./src/components/TVVoteCompBarchart/barchart.js","webpack:///./src/components/TVVoteSwingBarchart/barchart.js","webpack:///./src/components/index.js","webpack:///./src/config/index.js","webpack:///./src/events/index.js","webpack:///./src/utils/index.js"],"names":["client","ApolloClient","link","bundle_esm","uri","useGETForQueries","headers","Content-Type","cache","inMemoryCache","getSeatsDataForComparison","options","query","gql","_templateObject","_templateObject2","provinceName","getSeatsData","eventDescription","_templateObject3","_templateObject4","getVotesPredictionData","race_for_votes_templateObject","race_for_votes_templateObject2","getVotesDataForComparison","race_for_votes_templateObject3","race_for_votes_templateObject4","muniCode","_templateObject5","_templateObject6","iecId","getVotesDataForAllEvents","_templateObject7","_templateObject8","_templateObject9","_templateObject10","getVotesDataM","_templateObject11","_templateObject12","_templateObject13","_templateObject14","getMainParties","_templateObject15","_templateObject16","_templateObject17","getTurnoutData","turnout_templateObject","turnout_templateObject2","turnout_templateObject3","getTurnoutDataForOneEvent","turnout_templateObject4","turnout_templateObject5","turnout_templateObject6","turnout_templateObject7","getTurnoutDataForAllEvents","turnout_templateObject8","turnout_templateObject9","turnout_templateObject10","turnout_templateObject11","getSpoiltData","spoilt_templateObject","spoilt_templateObject2","spoilt_templateObject3","spoilt_templateObject4","getProgressVotesCount","prog_votescount_templateObject","prog_votescount_templateObject2","prog_votescount_templateObject3","prog_votescount_templateObject4","getElectionEvents","api_templateObject","getPartyColors","api_templateObject2","getProvincesData","provincesData","name","abbreviation","munis","muniName","a","b","localeCompare","getMetrosData","module","exports","ELVIZ_percentage-label","ELVIZ_tooltip","ELVIZ_grouprect","ELVIZ_barchart","ELVIZ_stylesheet-tv","ELVIZ_chart-title","ELVIZ_chart-body","ELVIZ_groupbarchart","ELVIZ_deltabarchart","embedcode","barchart-map","ELVIZ_map-title","ELVIZ_loading-spinner","map-widget","legend","ELVIZ_stylesheet-web","ELVIZ_stylesheet-none","ELVIZ_menu-widget","piechart","ELVIZ_component-transition-menu","label","active","quickresultswidget","quick-results-title","race-for-seats","ELVIZ_row","ELVIZ_col-md-2","ELVIZ_col-md-4","ELVIZ_col-md-8","ELVIZ_current-progress","ELVIZ_current-turnout","ELVIZ_current-counting-progress","ELVIZ_current-spoilt-votes","donutchart","multievent-container","horseshoechart","multiparties-container","ELVIZ_vote-prediction-title","ELVIZ_projected-turnout","ELVIZ_prediction-time","ELVIZ_CSIR-bottom-label","votepredictionlinechart","line-container","graph-points","axes","axis-text","graph-labels","line","EmbedBase","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","loadScriptsForEmbedMode","Component","react_default","createElement","className","originClassName","bootstrapStyles","styles","BarChartEmbed","barchartEmbed_classCallCheck","barchartEmbed_possibleConstructorReturn","barchartEmbed_getPrototypeOf","state","elementId","regionType","numParties","electionEvents","stylesheetFor","componentID","self","data","error","console","e","setState","value","newState","triggerCustomEvent","events","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","onEventDescriptionChange","bind","key","description","onRegionTypeChange","nationalEventSelected","province","muni","onClick","onPreview","onExportAsPNG","concat","replace","BarChart_barchartEmbed","barchartEmbed_className","RaceForSeatBarchart_barchartEmbed_classCallCheck","RaceForSeatBarchart_barchartEmbed_possibleConstructorReturn","RaceForSeatBarchart_barchartEmbed_getPrototypeOf","disabled","components_RaceForSeatBarchart_barchartEmbed","SpoiltBarchart_barchartEmbed_className","SpoiltBarchart_barchartEmbed_classCallCheck","SpoiltBarchart_barchartEmbed_possibleConstructorReturn","SpoiltBarchart_barchartEmbed_getPrototypeOf","components_SpoiltBarchart_barchartEmbed","mapEmbed_className","MapEmbed","mapEmbed_classCallCheck","mapEmbed_possibleConstructorReturn","mapEmbed_getPrototypeOf","disableNavigation","loadCanvg","MAP_PREVIEW","checked","Map_mapEmbed","TurnoutMap_mapEmbed_className","TurnoutMap_mapEmbed_classCallCheck","TurnoutMap_mapEmbed_possibleConstructorReturn","TurnoutMap_mapEmbed_getPrototypeOf","components_TurnoutMap_mapEmbed","TurnoutBarchart_barchartEmbed_className","TurnoutBarchart_barchartEmbed_classCallCheck","TurnoutBarchart_barchartEmbed_possibleConstructorReturn","TurnoutBarchart_barchartEmbed_getPrototypeOf","eventType","components_TurnoutBarchart_barchartEmbed","barchartMapEmbed_className","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","JSON","EXPORT_SUPERWIDGET_PNG","BarchartWithNavMap_barchartMapEmbed","quickResultsWidgetEmbed_className","QuickResultsWidgetEmbed","quickResultsWidgetEmbed_classCallCheck","quickResultsWidgetEmbed_possibleConstructorReturn","quickResultsWidgetEmbed_getPrototypeOf","electionYear","nationalEventDescription","provincialEventDescription","eventDescriptionsSplitNatProv","electionYearsSplitNatProv","electionYears","year","exec","values","i","l","length","selected","yearFilter","nationalFilter","provincialFilter","QUICK_RESULTS_PREVIEW","onEventYearChange","onNatEventDescriptionChange","onProvEventDescriptionChange","multiple","onEventYearSplitNatProvChange","QuickResultsWidget_quickResultsWidgetEmbed","piechartEmbed_className","PieChartEmbed","piechartEmbed_classCallCheck","piechartEmbed_possibleConstructorReturn","piechartEmbed_getPrototypeOf","ProgVotesCountPiechart_piechartEmbed","SeatCompBarchart_barchartEmbed_className","SeatCompBarchart_barchartEmbed_classCallCheck","SeatCompBarchart_barchartEmbed_possibleConstructorReturn","SeatCompBarchart_barchartEmbed_getPrototypeOf","eventDescriptions","partyAbbr","partyIecId","allParties","Object","api","then","edge","filter","thing","index","t","catch","party","components_SeatCompBarchart_barchartEmbed","horseshoeEmbed_className","HorseShoeEmbed","horseshoeEmbed_classCallCheck","horseshoeEmbed_possibleConstructorReturn","horseshoeEmbed_getPrototypeOf","SeatHorseShoeChart_horseshoeEmbed","VoteCompBarchart_barchartEmbed_className","VoteCompBarchart_barchartEmbed_classCallCheck","VoteCompBarchart_barchartEmbed_possibleConstructorReturn","VoteCompBarchart_barchartEmbed_getPrototypeOf","components_VoteCompBarchart_barchartEmbed","TVSeatCompBarchart_barchartEmbed_className","TVSeatCompBarchart_barchartEmbed_classCallCheck","TVSeatCompBarchart_barchartEmbed_possibleConstructorReturn","TVSeatCompBarchart_barchartEmbed_getPrototypeOf","partyAbbrs","partyIecIds","partyIdx","onPartyAbbrsChange","formatPartyName","components_TVSeatCompBarchart_barchartEmbed","TVSeatSwingBarchart_barchartEmbed_className","TVSeatSwingBarchart_barchartEmbed_classCallCheck","TVSeatSwingBarchart_barchartEmbed_possibleConstructorReturn","TVSeatSwingBarchart_barchartEmbed_getPrototypeOf","event","components_TVSeatSwingBarchart_barchartEmbed","TVVoteCompBarchart_barchartEmbed_className","TVVoteCompBarchart_barchartEmbed_classCallCheck","TVVoteCompBarchart_barchartEmbed_possibleConstructorReturn","TVVoteCompBarchart_barchartEmbed_getPrototypeOf","components_TVVoteCompBarchart_barchartEmbed","TVVoteSwingBarchart_barchartEmbed_className","TVVoteSwingBarchart_barchartEmbed_classCallCheck","TVVoteSwingBarchart_barchartEmbed_possibleConstructorReturn","TVVoteSwingBarchart_barchartEmbed_getPrototypeOf","components_TVVoteSwingBarchart_barchartEmbed","RaceForSeatDonut_piechartEmbed_className","RaceForSeatDonut_piechartEmbed_classCallCheck","RaceForSeatDonut_piechartEmbed_possibleConstructorReturn","RaceForSeatDonut_piechartEmbed_getPrototypeOf","components_RaceForSeatDonut_piechartEmbed","SplitNatProv_barchartEmbed_className","SplitNatProv_barchartEmbed_classCallCheck","SplitNatProv_barchartEmbed_possibleConstructorReturn","SplitNatProv_barchartEmbed_getPrototypeOf","numPartiesSplitNatProv","components_SplitNatProv_barchartEmbed","__webpack_require__","d","__webpack_exports__","Chart","container","width","height","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","offset","predefColors","svg","createSvg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","createErrorText","draw","chartData","colorsData","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getFillColor","noXaxisByParty","_typeof","minMaxY","dynamicYAxisFromValues","maxValue","parseFloat","customizeDynamicMaxValue","bars","getTooltipText","pageX","Number","barTexts","showLegend","parties","_ref","partyInfo","legends","xydata","parseInt","getLegendXY","destroy","barchart_partyColorsData","barchart_className","originName","cn","chartOptions","maxVal","Math","BarChart","comp","fetchDataFromOBJ","chart","refreshIntervalID","exportAsPNG","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","getContainer","setInterval","document","clearInterval","detail","targetState","svgToPng","refs","vizcontainer","childNodes","getRegionName","Promise","resolve","reject","ref","dataLoaders","partyColorsLoader","votesData","partyColorsData","parseVotesData","fetchLocationTrackFromVDdata","needUpdate","REGION_CHANGE","BarChart_barchart","RaceForSeatBarchart_barchart_partyColorsData","seats","RaceForSeatBarchart_barchart_className","barchart_cn","barchart_classCallCheck","barchart_getPrototypeOf","barchart_assertThisInitialized","getNationOrProvinceName2","barchart_chartOptions","seatsData","parseSeatsData","RaceForSeatBarchart_barchart","percent","SpoiltBarchart_barchart_className","SpoiltBarchart_barchart_cn","SpoiltBarchart_barchart_classCallCheck","SpoiltBarchart_barchart_possibleConstructorReturn","SpoiltBarchart_barchart_getPrototypeOf","SpoiltBarchart_barchart_assertThisInitialized","SpoiltBarchart_barchart_chartOptions","spoiltData","parseSpoiltVotesData","Valid","Spoilt","SpoiltBarchart_barchart","map_partyColorsData","regionColor","map_className","map_cn","Map","map_classCallCheck","map_getPrototypeOf","map_assertThisInitialized","drawGraph","selectAll","remove","prevProps","prevState","rect","rendercanvas","window","ignoreDimensions","scaleWidth","scaleHeight","canvg","canvas","filename","lnk","createEvent","fireEvent","loading","react_loading_default","color","fullRouteGeoJsonFile","getRegionFileName","h","geoJsonLoader","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","getMainPartyName","SPROVINCE","getMunicipalityCode","properties","getMunicipalityiecId","topojson","projection","path","availableCnt","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","undefinedText","mainPartyName","subRegionName","tooltipText","smunicipal","appendSpan","foDiv","regionName","addSub","appendLink","setRegionType","fo","currentRegionName","setTimeout","alert","Map_map","TurnoutMap_map_className","TurnoutMap_map_cn","TurnoutMap_map_classCallCheck","TurnoutMap_map_getPrototypeOf","TurnoutMap_map_assertThisInitialized","all","locationToTurnout","parseTurnoutData","getFillColorFromTurnout","turnout","getTurnout","it","turnoutData","TurnoutMap_map","percVoterTurnout","TurnoutBarchart_barchart_className","TurnoutBarchart_barchart_cn","TurnoutBarchart_barchart_classCallCheck","TurnoutBarchart_barchart_possibleConstructorReturn","TurnoutBarchart_barchart_getPrototypeOf","TurnoutBarchart_barchart_assertThisInitialized","TurnoutBarchart_barchart_chartOptions","parseTurnoutDataForAllEvents","TurnoutBarchart_barchart","barchartMap_className","BarchartWithNavMap","barchartMap_classCallCheck","barchartMap_getPrototypeOf","barchartMap_assertThisInitialized","zip","JSZip","imgs","base64","content","saveAs","assign","instance","barchartInstance","mapInstance","BarchartWithNavMap_barchartMap","d3piechart_Chart","margin","variable","category","floatFormat","colour","radius","pie","arc","totalSvg","transformX","labelSvg","toolTip","selection","tip","toolTipHTML","arcTween","_current","colorsDataP","updatePath","data0","data1","m","k","j","findPreceding","startAngle","endAngle","n","findFollowing","findNeighborArc","piechart_className","piechart_cn","PieChart","piechart_classCallCheck","piechart_getPrototypeOf","piechart_assertThisInitialized","piechart_chartOptions","progressVotesData","parseProgressVotesCount","Completed","Not Completed","ProgVotesCountPiechart_piechart","piechart_partyColorsData","viewBox","RaceForSeatDonut_piechart_className","RaceForSeatDonut_piechart_cn","DonutChart","RaceForSeatDonut_piechart_classCallCheck","RaceForSeatDonut_piechart_getPrototypeOf","RaceForSeatDonut_piechart_assertThisInitialized","getNationOrProvinceName","RaceForSeatDonut_piechart_chartOptions","components_RaceForSeatDonut_piechart","VoteCompBarchart_barchart_partyColorsData","VoteCompBarchart_barchart_className","VoteCompBarchart_barchart_cn","VoteCompBarchart_barchart_classCallCheck","VoteCompBarchart_barchart_getPrototypeOf","VoteCompBarchart_barchart_assertThisInitialized","VoteCompBarchart_barchart_chartOptions","parseVotesComparisonData","VoteCompBarchart_barchart","SeatCompBarchart_barchart_partyColorsData","SeatCompBarchart_barchart_className","SeatCompBarchart_barchart_cn","SeatCompBarchart_barchart_classCallCheck","SeatCompBarchart_barchart_getPrototypeOf","SeatCompBarchart_barchart_assertThisInitialized","SeatCompBarchart_barchart_chartOptions","parseSeatsComparisonData","SeatCompBarchart_barchart","d3horseshoe_Chart","mainSvg","originChartData","largest","rest","totalSeats","rows","poslist","J","R","angle","Totals","PI","onMouseMove","onMouseOut","Counter","partySvg","pythonConvertedCode","horseshoe_partyColorsData","horseshoe_className","horseshoe_cn","HorseShoeChart","horseshoe_classCallCheck","horseshoe_getPrototypeOf","horseshoe_assertThisInitialized","undefined","has_drawn","horseshoe_chartOptions","SeatHorseShoeChart_horseshoe","d3voteprediction_Chart","showPoints","pointRadius","showPointLabels","pointLabelOffset","top","bottom","left","right","getPartyColour","PartyColours","radiusScale","axisContainer","lineContainer","legendContainer","eventCaptureContainer","valueline","map","idx","voteprediction_partyColorsData","voteprediction_className","voteprediction_cn","VotePredictionLineChart","voteprediction_classCallCheck","_isMounted","voteprediction_getPrototypeOf","voteprediction_assertThisInitialized","voteprediction_chartOptions","Date","hr","getHours","min","getMinutes","currentTimeText","getDate","getMonth","getFullYear","predictionData","parseVotesPredictionData","VotePredictionLineChart_voteprediction","d3groupbarchart_Chart","XaxisOffset","groupChartData","groupSvgs","groupSvg","formatClassNameFromString","_loop","subX","_ref2","SplitNatProv_barchart_partyColorsData","SplitNatProv_barchart_className","SplitNatProv_barchart_cn","topLabel","usedValue","SplitNatProv_barchart_classCallCheck","SplitNatProv_barchart_getPrototypeOf","SplitNatProv_barchart_assertThisInitialized","SplitNatProv_barchart_chartOptions","parseVotesDataForAllEvents","SplitNatProv_barchart","cssPrefix","metrosData","CustomLink","navbar_classCallCheck","navbar_possibleConstructorReturn","navbar_getPrototypeOf","navbar_assertThisInitialized","React","hasSubMenu","toggleSubMenu","activateMe","newLocation","to","selectedMenuLabel","children","NavBar","activeLinkId","handleNavBarSelection","navbar","addEventListener","removeEventListener","classList","iconClass","lastClass","electionType","passInfo","enableMap","enableTurnoutProgressSpoilt","selectionData","SEATS_ELECTEDS_EVENT","icon","_toConsumableArray","metro","join","lib_default","LinkComponent","navbar_CustomLink","NavBar_navbar","quickResultsWidget_className","quickResultsWidget_cn","QuickResultsWidget","quickResultsWidget_classCallCheck","quickResultsWidget_getPrototypeOf","enableBarChart","national","provincial","currentTurnout","currentCountingProg","currentSpoiltVotes","quickResultsWidget_assertThisInitialized","fetchCurrentResultData","newProps","progVotesData","parsedSpoiltData","parsedTurnoutData","parseTurnoutDataForOneEvent","parsedProgVotesData","parsedVotesData","voteItem","parsedSeatsData","seatItem","zipfileName","imageLoadPromises","quickResultsWidget_toConsumableArray","barchartInstances","element","triggerState","_this$state2","_this$state3","getRegionName2","getRegionName3","_this$state4","mapState","_this3","_this$state5","Array","onShowVDResult","href","vdInput","components","QuickResultsWidget_quickResultsWidget","TVVoteCompBarchart_d3groupbarchart_Chart","bandwidth","YaxisOffset","barAxisTextSvg","barAxisTexts","TVSeatCompBarchart_barchart_partyColorsData","TVSeatCompBarchart_barchart_className","TVSeatCompBarchart_barchart_cn","TVSeatCompBarchart_barchart_classCallCheck","TVSeatCompBarchart_barchart_getPrototypeOf","TVSeatCompBarchart_barchart_assertThisInitialized","TVSeatCompBarchart_barchart_chartOptions","desc","parseSeatsComparisonDataMultipleParties","TVSeatCompBarchart_barchart","d3deltabarchart_Chart","newGroupChartData","_objectSpread","delta","deltaData","barTextYDelta","axisThick","TVSeatSwingBarchart_barchart_partyColorsData","TVSeatSwingBarchart_barchart_className","TVSeatSwingBarchart_barchart_cn","TVSeatSwingBarchart_barchart_classCallCheck","TVSeatSwingBarchart_barchart_getPrototypeOf","TVSeatSwingBarchart_barchart_assertThisInitialized","TVSeatSwingBarchart_barchart_chartOptions","years","TVSeatSwingBarchart_barchart","TVVoteCompBarchart_barchart_partyColorsData","TVVoteCompBarchart_barchart_className","TVVoteCompBarchart_barchart_cn","TVVoteCompBarchart_barchart_classCallCheck","TVVoteCompBarchart_barchart_getPrototypeOf","TVVoteCompBarchart_barchart_assertThisInitialized","TVVoteCompBarchart_barchart_chartOptions","parseVotesComparisonDataMultipleParties","TVVoteCompBarchart_barchart","TVVoteSwingBarchart_barchart_partyColorsData","TVVoteSwingBarchart_barchart_className","TVVoteSwingBarchart_barchart_cn","TVVoteSwingBarchart_barchart_classCallCheck","TVVoteSwingBarchart_barchart_getPrototypeOf","TVVoteSwingBarchart_barchart_assertThisInitialized","TVVoteSwingBarchart_barchart_chartOptions","TVVoteSwingBarchart_barchart","CSS_PREFIX","calcPercent","toFixed","results","edges","shortenedNatProv","nodeData","partyResults","longEventDescription","node","el","validVotes","edge1","edge2","edge1Year","edge2Year","firstEdge","locationResult","result","partyfilter_edges","reverse","new_results","available","totalCount","count","getTopPartyNameFromNode","lineData","percVds","prediction","predictionEdges","predictionEdge","predictionNodeData","predictedPercent","partyIndex","actualPercent","cleaned_name","oneLine","beautifiedMuniName","toLocaleLowerCase","tooltipClassName","labelElements","regions","overlapCnt","rect1","rect2","eventName","eventParam","CustomEvent","toUpperCase","PKLVDNUMBE","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","loadScript","id","scriptURL","callback","script","str","xOffset","yOffset","partyColours","partyColourByName"],"mappings":"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","file":"static/js/src-components-quickresults~src-components-race-for-seats~src-components-race-for-votes~src-componen~3364f670.4cca3841.js","sourcesContent":["import { ApolloClient } from \"apollo-client\"\nimport { HttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\n// var API_URI = \"https://elections2019.xyz/graphql\";\nvar API_URI = \"https://eds.elections.sabc.co.za/graphql\";\n\n\nconst client = new ApolloClient({\n    link: new HttpLink({ uri: API_URI, useGETForQueries: true, headers: {\"Content-Type\" : \"application/graphql\" } }),\n    cache: new InMemoryCache()\n  })\n\nexport {\n    API_URI,\n    client\n}","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getSeatsDataForComparison(options) {\n  if (options.regionType === \"national\") {\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            eventType:\"National Election\" \n            orderBy:[\"-seats\"]){\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  } else { //  if (options.regionType === \"province\")\n    return client.query({\n      query: gql`\n      {\n          allSeatCalculations(\n            province:\"${options.provinceName}\", \n            orderBy:[\"-seats\"]\n          ) {\n            edges{\n              node\n              {\n                nationalPr\n                regional\n                party{\n                  event {\n                    description\n                  }\n                  name\n                  abbreviation\n                  iecId\n                }\n                province{\n                  name\n                }\n              }\n            }\n          }\n      }\n      `\n    })\n  }\n}\n\n\nexport function getSeatsData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(\n              event:\"${eventDescription}\", \n              orderBy:[\"-seats\"]\n            ) {\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    } else { //  if (options.regionType === \"province\")\n      eventDescription = eventDescription.replace(\"National\", \"Provincial\");\n      eventDescription = eventDescription.replace(\"NATIONAL\", \"PROVINCIAL\");\n      eventDescription = eventDescription.replace(\"national\", \"provincial\");\n      return client.query({\n        query: gql`\n        {\n            allSeatCalculations(\n              province:\"${options.provinceName}\", \n              event:\"${eventDescription}\", \n              orderBy:[\"-seats\"]\n            ) {\n              edges{\n                node\n                {\n                  nationalPr\n                  regional\n                  party{\n                    name\n                    abbreviation\n                    iecId\n                  }\n                  province{\n                    name\n                    country{\n                      event{\n                        description\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        }\n        `\n      })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n\nexport function getVotesPredictionData(options) {\n    // return [[1, 3], [5,7], [7, 9]]\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          predictedResults(areaType:\"National\") {\n            edges{\n              node{\n                percVds\n                prediction{\n                  edges{\n                    node{\n                      party{           \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      predictedPercent\n                      actualPercent\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }`\n      })\n    } else { // regionType == \"province\"\n      return client.query({\n        query: gql`\n        {\n          predictedResults(areaType:\"Provincial\", province: \"Western Cape\") {\n            edges{\n              node{\n                percVds\n                prediction{\n                  edges{\n                    node{\n                      party{              \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      predictedPercent\n                      actualPercent\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }`\n      })\n    }\n}\n\nexport function getVotesDataForComparison(options) {\n  if (options.regionType === \"national\") {\n    return client.query({\n      query: gql`\n      {\n        allBallots{\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType === \"province\") {\n    return client.query({\n      query: gql`\n      {\n        allProvincialBallots(\n          province:\"${options.provinceName}\"\n        ){\n          edges{\n            node{\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    percOfVotes\n                    party {\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n              location {\n                name\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType === \"municipality\") {\n    var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n    return client.query({\n      query: gql`\n      {\n        allMunicipalBallots(\n          province:\"${options.provinceName}\", \n          municipalCode: \"${muniCode}\"\n        ) {\n          edges{\n            node {\n              event {\n                description\n              }\n              partyResults {\n                edges{\n                  node{\n                    party {               \n                      name\n                      abbreviation\n                      iecId\n                    }\n                    validVotes\n                    percOfVotes\n                  }\n                }\n                \n              }\n              location {\n                code\n                name\n                longName\n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  } else if (options.regionType === \"municipality-vd\") {\n    return client.query({\n      query: gql`\n      {\n        allVotingDistrictBallots(\n          iecId:\"${options.iecId}\", \n        ) {\n          edges{\n            node{\n              event {\n                description\n              }\n              location {\n                iecId\n              }\n              partyResults {\n                edges{\n                  node{\n                    party{\n                      name\n                    }\n                    percOfVotes\n                  }\n                }  \n              }\n            }\n          }\n        }\n      }\n      `\n    })\n  }\n}\n\nexport function getVotesDataForAllEvents(options) {\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            province:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            province:\"${options.provinceName}\", \n            municipalCode: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            iecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                location {\n                  iecId\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\nexport function getVotesDataM(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                  \n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                partyResults {\n                  edges{\n                    node{\n                      validVotes\n                      percOfVotes\n                      party {\n                        id\n                        name\n                        abbreviation\n                        iecId\n                      }\n                    }\n                  }\n                }\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\", \n            municipalCode: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                partyResults {\n                  edges{\n                    node{\n                      party {               \n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }\n                  \n                }\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event:\"${eventDescription}\",\n            iecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                location {\n                  iecId\n                  ward {\n                    municipality {\n                      code\n                      province {\n                        name\n                      }\n                    }\n                  }\n                }\n                partyResults {\n                  edges{\n                    node{\n                      party{\n                        name\n                        abbreviation\n                        iecId\n                      }\n                      validVotes\n                      percOfVotes\n                    }\n                  }  \n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }\n\n  export function getMainParties(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByProvince(event:\"${eventDescription}\") {\n            edges {\n              node {\n                location{\n                  id\n                  name\n                }\n                totalVotesCast\n                topParty{\n                  validVotes\n                  percOfVotes\n                  party {\n                      id\n                      name\n                      abbreviation\n                      iecId\n                  }\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          topPartiesByMunicipality(\n            event:\"${eventDescription}\", \n            province:\"${options.provinceName}\") {\n            \n            edges {\n              node {\n                location{\n                    code\n                    name\n                    longName\n                }\n                totalVotesCast\n                topParty{\n                  party {               \n                    name\n                    abbreviation\n                    iecId\n                  }\n                  validVotes\n                  percOfVotes\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { //if (options.regionType === \"municipality\") {\n        return client.query({\n          query: gql`\n          {\n            topPartiesByVotingDistrict(\n              event:\"${eventDescription}\", \n              province:\"${options.provinceName}\",\n              municipalCode: \"${options.muniCode}\"\n            ) {\n              \n              edges {\n                node {\n                  location{\n                    iecId\n                  }\n                  topParty{\n                    party{\n                      name\n                      abbreviation\n                      iecId\n                    }\n                  }\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n\n\n  export function getTurnoutData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                percVoterTurnout\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                percVoterTurnout\n                location {\n                  code\n                  name\n                  longName\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else { // municipality or municipality-vd\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots( \n              event:\"${eventDescription}\",\n              municipalCode:\"${options.muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    }\n  }\n  \n  export function getTurnoutDataForOneEvent(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ) {\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\"\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n              event:\"${eventDescription}\"\n              province:\"${options.provinceName}\", \n              municipalCode: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType === \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              event:\"${eventDescription}\"\n              iecId:\"${options.iecId}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n\n  export function getTurnoutDataForAllEvents(options) {\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots{\n            edges{\n              node{\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                event {\n                  description\n                  eventType {\n                    description\n                  }\n                }\n                percVoterTurnout\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n              province:\"${options.provinceName}\", \n              municipalCode: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType === \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              iecId:\"${options.iecId}\" \n            ) {\n              edges{\n                node{\n                  event {\n                    description\n                    eventType {\n                      description\n                    }\n                  }\n                  percVoterTurnout\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\n  export function getSpoiltData(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n      return;\n    if (options.regionType === \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ) {\n            edges{\n              node {\n                spoiltVotes\n                totalVotesCast\n                totalValidVotes\n                location {\n                    id\n                    name\n                }\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType === \"municipality\") {\n        var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n\n        return client.query({\n          query: gql`\n          {\n            allMunicipalBallots( \n                event:\"${eventDescription}\",\n                province:\"${options.provinceName}\", \n                municipalCode: \"${muniCode}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    code\n                    name\n                    longName\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n    } else if (options.regionType === \"municipality-vd\") {\n        return client.query({\n          query: gql`\n          {\n            allVotingDistrictBallots(\n              event:\"${eventDescription}\",\n              iecId:\"${options.iecId}\"\n            ) {\n              edges{\n                node{\n                  location {\n                    iecId\n                  }\n                  spoiltVotes\n                  totalVotesCast\n                  totalValidVotes\n                }\n              }\n            }\n          }\n          `\n        })\n      }\n  }\n  ","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport function getProgressVotesCount(options) {\n    var eventDescription = options.eventDescription;\n    if (!eventDescription)\n    return;\n    if (options.regionType == \"national\") {\n      return client.query({\n        query: gql`\n        {\n          allBallots(\n            event:\"${eventDescription}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"province\") {\n      return client.query({\n        query: gql`\n        {\n          allProvincialBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\"\n          ){\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality\") {\n      var muniCode = options.muniCode || options.muniName.split(\" - \")[0];\n  \n      return client.query({\n        query: gql`\n        {\n          allMunicipalBallots(\n            event:\"${eventDescription}\",\n            province:\"${options.provinceName}\", \n            municipalCode: \"${muniCode}\"\n          ) {\n            edges{\n              node {\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    } else if (options.regionType == \"municipality-vd\") {\n      return client.query({\n        query: gql`\n        {\n          allVotingDistrictBallots(\n            event:\"${eventDescription}\",\n            iecId:\"${options.iecId}\"\n          ) {\n            edges{\n              node{\n                vdCount\n                vdWithResultsCaptured\n              }\n            }\n          }\n        }\n        `\n      })\n    }\n  }","import gql from \"graphql-tag\"\nimport {client} from \"./config\"\n\nexport {getSeatsData, getSeatsDataForComparison} from \"./race-for-seats\"\nexport {getVotesPredictionData, getVotesDataM, getVotesDataForAllEvents, getVotesDataForComparison, getMainParties} from \"./race-for-votes\"\nexport {getTurnoutData, getTurnoutDataForOneEvent, getTurnoutDataForAllEvents} from \"./turnout\"\nexport {getSpoiltData} from \"./spoilt\"\nexport {getProgressVotesCount} from \"./prog-votescount\"\n\nexport function getElectionEvents() {\n  return client.query({\n    query: gql`\n    {\n      allEvents {\n        description\n        eventType {\n          description\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getPartyColors() {\n  return client.query({\n    query: gql`\n    {\n      allParties {\n        edges{\n          node{\n            name\n            abbreviation\n            colour\n            iecId\n          }\n        }\n      }\n    }\n    `\n  })\n}\n\nexport function getProvincesData() {\n  var provincesData = [\n      {\n          \"name\": \"Limpopo\",\n          \"abbreviation\": \"LIM\",\n          \"munis\": [{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM331 - Greater Giyani [Giyani]\",\"muniCode\":\"LIM331\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM332 - Greater Letaba [Duiwelskloof]\",\"muniCode\":\"LIM332\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM333 - Greater Tzaneen [Tzaneen]\",\"muniCode\":\"LIM333\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM334 - Ba-Phalaborwa [Phalaborwa]\",\"muniCode\":\"LIM334\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM335 - Maruleng [Hoedspruit]\",\"muniCode\":\"LIM335\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM341 - Musina [Messina]\",\"muniCode\":\"LIM341\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM342 - Mutale [Mutale-Masisi]\",\"muniCode\":\"LIM342\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM343 - Thulamela [Thohoyandou]\",\"muniCode\":\"LIM343\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM344 - Makhado [Louis Trichardt]\",\"muniCode\":\"LIM344\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM351 - Blouberg [Bochum/My Darling]\",\"muniCode\":\"LIM351\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM352 - Aganang [Moletji/Matlala]\",\"muniCode\":\"LIM352\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM353 - Molemole [Dendron/Dikgale]\",\"muniCode\":\"LIM353\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM354 - Polokwane [Pietersburg]\",\"muniCode\":\"LIM354\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM355 - Lepele-Nkumpi [Lebowakgomo]\",\"muniCode\":\"LIM355\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM361 - Thabazimbi [Thabazimbi]\",\"muniCode\":\"LIM361\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM362 - Lephalale [Ellisras]\",\"muniCode\":\"LIM362\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM364 - Mookgopong [Naboomspruit]\",\"muniCode\":\"LIM364\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM365 - Modimolle [Nylstroom]\",\"muniCode\":\"LIM365\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM366 - Bela-Bela [Warmbad]\",\"muniCode\":\"LIM366\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM367 - Mogalakwena [Potgietersrus]\",\"muniCode\":\"LIM367\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM471 - Ephraim Mogale [Marble Hall]\",\"muniCode\":\"LIM471\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM472 - Elias Motsoaledi [Groblersdal]\",\"muniCode\":\"LIM472\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM473 - Makhuduthamaga [Ngwaritsi]\",\"muniCode\":\"LIM473\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM474 - Fetakgomo [Fetakgomo ]\",\"muniCode\":\"LIM474\"},{\"provinceName\":\"Limpopo\",\"muniName\":\"LIM475 - Greater Tubatse [Burgersfort/Ohrigstad/Eastern Tubatse]\",\"muniCode\":\"LIM475\"}]\n      },\n      {\n          \"name\": \"Mpumalanga\",\n          \"abbreviation\": \"MP\",\n          \"munis\": [{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP301 - Albert Luthuli [Elukwatini/Carolina]\",\"muniCode\":\"MP301\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP302 - Msukaligwa [Ermelo]\",\"muniCode\":\"MP302\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP303 - Mkhondo [Piet Retief]\",\"muniCode\":\"MP303\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP304 - Pixley Ka Seme [Volksrust]\",\"muniCode\":\"MP304\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP305 - Lekwa [Standerton]\",\"muniCode\":\"MP305\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP306 - Dipaleseng [Balfour]\",\"muniCode\":\"MP306\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP307 - Govan Mbeki [Highveld Ridge]\",\"muniCode\":\"MP307\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP311 - Delmas [Delmas]\",\"muniCode\":\"MP311\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP312 - Emalahleni [Witbank]\",\"muniCode\":\"MP312\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP313 - Steve Tshwete [Middelburg]\",\"muniCode\":\"MP313\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP314 - Emakhazeni [Belfast]\",\"muniCode\":\"MP314\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP315 - Thembisile [KwaMhlanga]\",\"muniCode\":\"MP315\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP316 - Dr JS Moroka [Mdutjana]\",\"muniCode\":\"MP316\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP321 - Thaba Chweu [Sabie]\",\"muniCode\":\"MP321\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP322 - Mbombela [Nelspruit]\",\"muniCode\":\"MP322\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP323 - Umjindi [Barberton]\",\"muniCode\":\"MP323\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP324 - Nkomazi [Nkomazi]\",\"muniCode\":\"MP324\"},{\"provinceName\":\"Mpumalanga\",\"muniName\":\"MP325 - Bushbuckridge [Bushbuckridge]\",\"muniCode\":\"MP325\"}]\n      },\n      {\n          \"name\": \"Gauteng\",\n          \"abbreviation\": \"GT\",\n          \"munis\": [{\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT421 - Emfuleni [Vereeniging]\",\"muniCode\":\"GT421\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT422 - Midvaal [Meyerton]\",\"muniCode\":\"GT422\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT423 - Lesedi [Heidelberg]\",\"muniCode\":\"GT423\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT481 - Mogale City [Krugersdorp]\",\"muniCode\":\"GT481\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT482 - Randfontein [Randfontein]\",\"muniCode\":\"GT482\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT483 - Westonaria [Westonaria]\",\"muniCode\":\"GT483\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"GT484 - Merafong City [Carletonville]\",\"muniCode\":\"GT484\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},{\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"}]\n      },\n      {\n          \"name\": \"KwaZulu-Natal\",\n          \"abbreviation\": \"KZN\",\n          \"munis\": [{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN211 - Vulamehlo [Dududu]\",\"muniCode\":\"KZN211\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN212 - Umdoni [Scottburgh]\",\"muniCode\":\"KZN212\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN213 - Umzumbe [Umzumbe]\",\"muniCode\":\"KZN213\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN214 - UMuziwabantu [Harding]\",\"muniCode\":\"KZN214\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN215 - Ezinqoleni [Izinqolweni]\",\"muniCode\":\"KZN215\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN216 - Hibiscus Coast [Port Shepstone]\",\"muniCode\":\"KZN216\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN221 - uMshwathi [Wartburg]\",\"muniCode\":\"KZN221\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN222 - uMngeni [Howick]\",\"muniCode\":\"KZN222\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN223 - Mooi Mpofana [Mooirivier]\",\"muniCode\":\"KZN223\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN224 - Impendle [Impendle]\",\"muniCode\":\"KZN224\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN225 - Msunduzi [Pietermaritzburg]\",\"muniCode\":\"KZN225\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN226 - Mkhambathini [Camperdown]\",\"muniCode\":\"KZN226\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN227 - Richmond [Richmond]\",\"muniCode\":\"KZN227\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN232 - Emnambithi/Ladysmith [Ladysmith]\",\"muniCode\":\"KZN232\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN233 - Indaka [Waaihoek]\",\"muniCode\":\"KZN233\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN234 - Umtshezi [Estcourt]\",\"muniCode\":\"KZN234\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN235 - Okhahlamba [Bergville]\",\"muniCode\":\"KZN235\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN236 - Imbabazane [Loskop]\",\"muniCode\":\"KZN236\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN241 - Endumeni [Dundee]\",\"muniCode\":\"KZN241\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN242 - Nqutu [Nqutu]\",\"muniCode\":\"KZN242\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN244 - Msinga [Pomeroy]\",\"muniCode\":\"KZN244\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN245 - Umvoti [Greytown]\",\"muniCode\":\"KZN245\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN252 - Newcastle [Newcastle]\",\"muniCode\":\"KZN252\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN253 - eMadlangeni [Utrecht]\",\"muniCode\":\"KZN253\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN254 - Dannhauser [Durnacol]\",\"muniCode\":\"KZN254\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN261 - eDumbe [Paulpietersburg]\",\"muniCode\":\"KZN261\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN262 - UPhongolo [Pongola]\",\"muniCode\":\"KZN262\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN263 - Abaqulusi [Vryheid]\",\"muniCode\":\"KZN263\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN265 - Nongoma [Nongoma]\",\"muniCode\":\"KZN265\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN266 - Ulundi [Ulundi]\",\"muniCode\":\"KZN266\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN271 - Umhlabuyalingana [Emangusi]\",\"muniCode\":\"KZN271\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN272 - Jozini [Mkuze]\",\"muniCode\":\"KZN272\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN273 - The Big 5 False Bay [Hluhluwe]\",\"muniCode\":\"KZN273\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN274 - Hlabisa [Somkele]\",\"muniCode\":\"KZN274\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN275 - Mtubatuba [Mtubatuba]\",\"muniCode\":\"KZN275\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN281 - Mfolozi [KwaMbonambi]\",\"muniCode\":\"KZN281\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN282 - uMhlathuze [Richards Bay]\",\"muniCode\":\"KZN282\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN283 - Ntambana [Ntambana]\",\"muniCode\":\"KZN283\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN284 - uMlalazi [Eshowe]\",\"muniCode\":\"KZN284\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN285 - Mthonjaneni [Melmoth]\",\"muniCode\":\"KZN285\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN286 - Nkandla [Nkandla]\",\"muniCode\":\"KZN286\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN291 - Mandeni [Mandeni]\",\"muniCode\":\"KZN291\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN292 - KwaDukuza [Stanger]\",\"muniCode\":\"KZN292\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN293 - Ndwedwe [Ndwedwe]\",\"muniCode\":\"KZN293\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN294 - Maphumulo [Maphumulo]\",\"muniCode\":\"KZN294\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN431 - Ingwe [Creighton]\",\"muniCode\":\"KZN431\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN432 - Kwa Sani [Underberg]\",\"muniCode\":\"KZN432\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN433 - Greater Kokstad [Kokstad]\",\"muniCode\":\"KZN433\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN434 - Ubuhlebezwe [Ixopo]\",\"muniCode\":\"KZN434\"},{\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"KZN435 - Umzimkhulu [Umzimkulu]\",\"muniCode\":\"KZN435\"}]\n      },\n      {\n          \"name\": \"North West\",\n          \"abbreviation\": \"NW\",\n          \"munis\": [{\"provinceName\":\"North West\",\"muniName\":\"NW371 - Moretele [Makapanstad]\",\"muniCode\":\"NW371\"},{\"provinceName\":\"North West\",\"muniName\":\"NW372 - Madibeng [Brits]\",\"muniCode\":\"NW372\"},{\"provinceName\":\"North West\",\"muniName\":\"NW373 - Rustenburg [Rustenburg]\",\"muniCode\":\"NW373\"},{\"provinceName\":\"North West\",\"muniName\":\"NW374 - Kgetlengrivier [Koster]\",\"muniCode\":\"NW374\"},{\"provinceName\":\"North West\",\"muniName\":\"NW375 - Moses Kotane [Mogwase]\",\"muniCode\":\"NW375\"},{\"provinceName\":\"North West\",\"muniName\":\"NW381 - Ratlou [Setlagole]\",\"muniCode\":\"NW381\"},{\"provinceName\":\"North West\",\"muniName\":\"NW382 - Tswaing [Delareyville]\",\"muniCode\":\"NW382\"},{\"provinceName\":\"North West\",\"muniName\":\"NW383 - Mafikeng [Mafikeng]\",\"muniCode\":\"NW383\"},{\"provinceName\":\"North West\",\"muniName\":\"NW384 - Ditsobotla [Lichtenburg]\",\"muniCode\":\"NW384\"},{\"provinceName\":\"North West\",\"muniName\":\"NW385 - Ramotshere Moiloa [Zeerust]\",\"muniCode\":\"NW385\"},{\"provinceName\":\"North West\",\"muniName\":\"NW392 - Naledi [Vryburg]\",\"muniCode\":\"NW392\"},{\"provinceName\":\"North West\",\"muniName\":\"NW393 - Mamusa [Schweizer-Reneke]\",\"muniCode\":\"NW393\"},{\"provinceName\":\"North West\",\"muniName\":\"NW394 - Greater Taung [Reivilo]\",\"muniCode\":\"NW394\"},{\"provinceName\":\"North West\",\"muniName\":\"NW396 - Lekwa-Teemane [Christiana]\",\"muniCode\":\"NW396\"},{\"provinceName\":\"North West\",\"muniName\":\"NW397 - NW397 Local Municipality [Ganyesa/Pomfret]\",\"muniCode\":\"NW397\"},{\"provinceName\":\"North West\",\"muniName\":\"NW401 - Ventersdorp [Ventersdorp]\",\"muniCode\":\"NW401\"},{\"provinceName\":\"North West\",\"muniName\":\"NW402 - Tlokwe [Potchefstroom]\",\"muniCode\":\"NW402\"},{\"provinceName\":\"North West\",\"muniName\":\"NW403 - Matlosana [Klerksdorp]\",\"muniCode\":\"NW403\"},{\"provinceName\":\"North West\",\"muniName\":\"NW404 - Maquassi Hills [Wolmaransstad]\",\"muniCode\":\"NW404\"}]\n      },\n      {\n          \"name\": \"Free State\",\n          \"abbreviation\": \"FS\",\n          \"munis\": [{\"provinceName\":\"Free State\",\"muniName\":\"FS161 - Letsemeng [Koffiefontein]\",\"muniCode\":\"FS161\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS162 - Kopanong [Trompsburg]\",\"muniCode\":\"FS162\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS163 - Mohokare [Zastron]\",\"muniCode\":\"FS163\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS164 - Naledi [Dewetsdorp]\",\"muniCode\":\"FS164\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS181 - Masilonyana [Theunissen]\",\"muniCode\":\"FS181\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS182 - Tokologo [Dealesville]\",\"muniCode\":\"FS182\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS183 - Tswelopele [Hoopstad]\",\"muniCode\":\"FS183\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS184 - Matjhabeng [Welkom]\",\"muniCode\":\"FS184\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS185 - Nala [Bothaville]\",\"muniCode\":\"FS185\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS191 - Setsoto [Senekal]\",\"muniCode\":\"FS191\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS192 - Dihlabeng [Bethlehem]\",\"muniCode\":\"FS192\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS193 - Nketoana [Reitz]\",\"muniCode\":\"FS193\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS194 - Maluti a Phofung [Qwa-Qwa]\",\"muniCode\":\"FS194\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS195 - Phumelela [Vrede]\",\"muniCode\":\"FS195\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS196 - Mantsopa [Ladybrand]\",\"muniCode\":\"FS196\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS201 - Moqhaka [Kroonstad]\",\"muniCode\":\"FS201\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS203 - Ngwathe [Parys]\",\"muniCode\":\"FS203\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS204 - Metsimaholo [Sasolburg]\",\"muniCode\":\"FS204\"},{\"provinceName\":\"Free State\",\"muniName\":\"FS205 - Mafube [Frankfort]\",\"muniCode\":\"FS205\"},{\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"}]\n      },\n      {\n          \"name\": \"Eastern Cape\",\n          \"abbreviation\": \"EC\",\n          \"munis\": [{\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC101 - Camdeboo [Graaff-Reinet]\",\"muniCode\":\"EC101\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC102 - Blue Crane Route [Somerset East]\",\"muniCode\":\"EC102\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC103 - Ikwezi [Jansenville]\",\"muniCode\":\"EC103\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC104 - Makana [Grahamstown]\",\"muniCode\":\"EC104\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC105 - Ndlambe [Port Alfred]\",\"muniCode\":\"EC105\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC106 - Sundays River Valley [Kirkwood]\",\"muniCode\":\"EC106\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC107 - Baviaans [Willowmore]\",\"muniCode\":\"EC107\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC108 - Kouga [Humansdorp]\",\"muniCode\":\"EC108\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC109 - Kou-Kamma [Kareedouw]\",\"muniCode\":\"EC109\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC121 - Mbhashe [Idutywa]\",\"muniCode\":\"EC121\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC122 - Mnquma [Butterworth]\",\"muniCode\":\"EC122\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC123 - Great Kei [Komga]\",\"muniCode\":\"EC123\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC124 - Amahlathi [Stutterheim]\",\"muniCode\":\"EC124\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC126 - Ngqushwa [Peddie]\",\"muniCode\":\"EC126\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC127 - Nkonkobe [Alice]\",\"muniCode\":\"EC127\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC128 - Nxuba [Adelaide]\",\"muniCode\":\"EC128\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC131 - Inxuba Yethemba [Cradock]\",\"muniCode\":\"EC131\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC132 - Tsolwana [Tarkastad]\",\"muniCode\":\"EC132\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC133 - Inkwanca [Molteno]\",\"muniCode\":\"EC133\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC134 - Lukhanji [Queenstown]\",\"muniCode\":\"EC134\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC135 - Intsika Yethu [Cofimvaba]\",\"muniCode\":\"EC135\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC136 - Emalahleni [Lady Frere]\",\"muniCode\":\"EC136\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC137 - Engcobo [Engcobo]\",\"muniCode\":\"EC137\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC138 - Sakhisizwe [Elliot]\",\"muniCode\":\"EC138\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC141 - Elundini [Mount Fletcher]\",\"muniCode\":\"EC141\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC142 - Senqu [Lady Grey]\",\"muniCode\":\"EC142\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC143 - Maletswai [Aliwal North]\",\"muniCode\":\"EC143\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC144 - Gariep [Burgersdorp]\",\"muniCode\":\"EC144\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC153 - Ngquza Hill [Flagstaff]\",\"muniCode\":\"EC153\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC154 - Port St Johns [Port St Johns]\",\"muniCode\":\"EC154\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC155 - Nyandeni [Libode]\",\"muniCode\":\"EC155\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC156 - Mhlontlo [Qumbu]\",\"muniCode\":\"EC156\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC157 - King Sabata Dalindyebo [Umtata]\",\"muniCode\":\"EC157\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC441 - Matatiele [Matatiele]\",\"muniCode\":\"EC441\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC442 - Umzimvubu [Mount Ayliff]\",\"muniCode\":\"EC442\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC443 - Mbizana [Bizana]\",\"muniCode\":\"EC443\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"EC444 - Ntabankulu [Ntabankulu]\",\"muniCode\":\"EC444\"},{\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}]\n      },\n      {\n          \"name\": \"Northern Cape\",\n          \"abbreviation\": \"NC\",\n          \"munis\": [{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC061 - RICHTERSVELD [Port Nolloth]\",\"muniCode\":\"NC061\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC062 - NAMA KHOI [Springbok]\",\"muniCode\":\"NC062\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC064 - KAMIESBERG [Garies]\",\"muniCode\":\"NC064\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC065 - HANTAM [Calvinia]\",\"muniCode\":\"NC065\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC066 - KAROO HOOGLAND [Fraserburg]\",\"muniCode\":\"NC066\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC067 - KHâI-MA [Pofadder]\",\"muniCode\":\"NC067\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC071 - UBUNTU [Victoria West]\",\"muniCode\":\"NC071\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC072 - UMSOBOMVU [Colesberg]\",\"muniCode\":\"NC072\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC073 - EMTHANJENI [De Aar]\",\"muniCode\":\"NC073\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC074 - KAREEBERG [Carnarvon]\",\"muniCode\":\"NC074\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC075 - RENOSTERBERG [Phillipstown]\",\"muniCode\":\"NC075\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC076 - THEMBELIHLE [Hopetown]\",\"muniCode\":\"NC076\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC077 - SIYATHEMBA [Prieska]\",\"muniCode\":\"NC077\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC078 - SIYANCUMA [Griekwastad]\",\"muniCode\":\"NC078\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC081 - MIER [Mier]\",\"muniCode\":\"NC081\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC082 - KAI !GARIB [Keimoes]\",\"muniCode\":\"NC082\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC083 - KHARA HAIS [Upington]\",\"muniCode\":\"NC083\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC084 - !KHEIS [Groblershoop]\",\"muniCode\":\"NC084\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC085 - TSANTSABANE [Postmasburg]\",\"muniCode\":\"NC085\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC086 - KGATELOPELE [Danielskuil]\",\"muniCode\":\"NC086\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC091 - Sol Plaatje [Kimberley]\",\"muniCode\":\"NC091\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC092 - Dikgatlong [Barkley West]\",\"muniCode\":\"NC092\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC093 - Magareng [Warrenton]\",\"muniCode\":\"NC093\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC094 - Phokwane [Hartswater]\",\"muniCode\":\"NC094\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC451 - Joe Morolong [Kgalagadi]\",\"muniCode\":\"NC451\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC452 - GA-SEGONYANA [Kuruman]\",\"muniCode\":\"NC452\"},{\"provinceName\":\"Northern Cape\",\"muniName\":\"NC453 - GAMAGARA [Kathu]\",\"muniCode\":\"NC453\"}]\n      },\n      {\n          \"name\": \"Western Cape\",\n          \"abbreviation\": \"WC\",\n          \"munis\": [{\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC011 - Matzikama [Vredendal]\",\"muniCode\":\"WC011\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC012 - Cederberg [Citrusdal]\",\"muniCode\":\"WC012\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC013 - Bergrivier [Velddrif]\",\"muniCode\":\"WC013\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC014 - Saldanha Bay [West Coast Peninsula]\",\"muniCode\":\"WC014\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC015 - Swartland [Malmesbury]\",\"muniCode\":\"WC015\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC022 - Witzenberg [Ceres]\",\"muniCode\":\"WC022\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC023 - Drakenstein [Paarl]\",\"muniCode\":\"WC023\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC024 - Stellenbosch [Stellenbosch]\",\"muniCode\":\"WC024\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC025 - Breede Valley [Worcester]\",\"muniCode\":\"WC025\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC026 - Langeberg [Robertson]\",\"muniCode\":\"WC026\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC031 - Theewaterskloof [Caledon]\",\"muniCode\":\"WC031\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC032 - Overstrand [Greater Hermanus]\",\"muniCode\":\"WC032\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC033 - Cape Agulhas [Bredasdorp]\",\"muniCode\":\"WC033\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC034 - Swellendam [Barrydale/Swellendam ]\",\"muniCode\":\"WC034\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC041 - Kannaland [Ladismith]\",\"muniCode\":\"WC041\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC042 - Hessequa [Heidelberg/Riversdale]\",\"muniCode\":\"WC042\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC043 - Mossel Bay [Mossel Bay]\",\"muniCode\":\"WC043\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC044 - George [George]\",\"muniCode\":\"WC044\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC045 - Oudtshoorn [Oudtshoorn]\",\"muniCode\":\"WC045\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC047 - Bitou [Greater Plettenberg Bay]\",\"muniCode\":\"WC047\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC048 - Knysna [Knysna]\",\"muniCode\":\"WC048\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC051 - Laingsburg [Laingsburg]\",\"muniCode\":\"WC051\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC052 - Prince Albert [Prins Albert]\",\"muniCode\":\"WC052\"},{\"provinceName\":\"Western Cape\",\"muniName\":\"WC053 - Beaufort West [Beaufort West]\",\"muniCode\":\"WC053\"}]\n      }\n  ]\n  provincesData.sort(function(a, b) {\n    return ('' + a.name).localeCompare(b.name);\n  })\n  return provincesData;\n}\n\nexport function getMetrosData() {\n  var metrosData = [\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"BUF - Buffalo City [East London]\",\"muniCode\":\"BUF\"},\n    {\"provinceName\":\"Western Cape\",\"muniName\":\"CPT - City of Cape Town [Cape Town]\",\"muniCode\":\"CPT\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"JHB - City of Johannesburg [Johannesburg]\",\"muniCode\":\"JHB\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"TSH - Tshwane Metro [Pretoria]\",\"muniCode\":\"TSH\"},\n    {\"provinceName\":\"Gauteng\",\"muniName\":\"EKU - Ekurhuleni [East Rand]\",\"muniCode\":\"EKU\"},\n    {\"provinceName\":\"KwaZulu-Natal\",\"muniName\":\"ETH - eThekwini [Durban Metro]\",\"muniCode\":\"ETH\"},\n    {\"provinceName\":\"Free State\",\"muniName\":\"MAN - Mangaung [Bloemfontein]\",\"muniCode\":\"MAN\"},\n    {\"provinceName\":\"Eastern Cape\",\"muniName\":\"NMA - Nelson Mandela Bay [Port Elizabeth]\",\"muniCode\":\"NMA\"}\n  ]\n  return metrosData;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_percentage-label\":\"barchart_ELVIZ_percentage-label__11KBU\",\"ELVIZ_tooltip\":\"barchart_ELVIZ_tooltip__1VYEb\",\"ELVIZ_grouprect\":\"barchart_ELVIZ_grouprect__cJukT\",\"ELVIZ_barchart\":\"barchart_ELVIZ_barchart__2b9Oe\",\"ELVIZ_stylesheet-tv\":\"barchart_ELVIZ_stylesheet-tv__1lclY\",\"ELVIZ_chart-title\":\"barchart_ELVIZ_chart-title__1mhdP\",\"ELVIZ_chart-body\":\"barchart_ELVIZ_chart-body__1VZnA\",\"ELVIZ_groupbarchart\":\"barchart_ELVIZ_groupbarchart__3gmZo\",\"ELVIZ_deltabarchart\":\"barchart_ELVIZ_deltabarchart__ag53R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__PswXQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"barchartMap_ELVIZ_tooltip__1F46X\",\"barchart-map\":\"barchartMap_barchart-map__2u5lR\",\"ELVIZ_stylesheet-tv\":\"barchartMap_ELVIZ_stylesheet-tv__1-UbB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__2_Wo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_map-title\":\"map_ELVIZ_map-title__KNJ39\",\"ELVIZ_loading-spinner\":\"map_ELVIZ_loading-spinner__2GzFO\",\"ELVIZ_tooltip\":\"map_ELVIZ_tooltip__3YG38\",\"map-widget\":\"map_map-widget__1YpIc\",\"ELVIZ_stylesheet-tv\":\"map_ELVIZ_stylesheet-tv__2wWa7\",\"legend\":\"map_legend__1asN6\",\"ELVIZ_stylesheet-web\":\"map_ELVIZ_stylesheet-web__306Nb\",\"ELVIZ_stylesheet-none\":\"map_ELVIZ_stylesheet-none__2s44d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__2g8_I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_menu-widget\":\"navbar_ELVIZ_menu-widget__2UYFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__2oxiY\",\"piechart\":\"piechart_piechart__2tkNw\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__1Sy81\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__1_IsI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_tooltip\":\"quickResultsWidget_ELVIZ_tooltip__Bsr0u\",\"ELVIZ_component-transition-menu\":\"quickResultsWidget_ELVIZ_component-transition-menu__3N2HT\",\"label\":\"quickResultsWidget_label__3pk0G\",\"active\":\"quickResultsWidget_active__3aFN4\",\"quickresultswidget\":\"quickResultsWidget_quickresultswidget__1x9Ta\",\"ELVIZ_stylesheet-tv\":\"quickResultsWidget_ELVIZ_stylesheet-tv__1Nxtj\",\"quick-results-title\":\"quickResultsWidget_quick-results-title__3pCUn\",\"race-for-seats\":\"quickResultsWidget_race-for-seats__3EH6s\",\"ELVIZ_row\":\"quickResultsWidget_ELVIZ_row__2DmsC\",\"ELVIZ_col-md-2\":\"quickResultsWidget_ELVIZ_col-md-2__3ze8n\",\"ELVIZ_col-md-4\":\"quickResultsWidget_ELVIZ_col-md-4__3-2wP\",\"ELVIZ_col-md-8\":\"quickResultsWidget_ELVIZ_col-md-8__3xjQ7\",\"ELVIZ_current-progress\":\"quickResultsWidget_ELVIZ_current-progress__1LisK\",\"ELVIZ_current-turnout\":\"quickResultsWidget_ELVIZ_current-turnout__1GWzr\",\"ELVIZ_current-counting-progress\":\"quickResultsWidget_ELVIZ_current-counting-progress__1FcXo\",\"ELVIZ_current-spoilt-votes\":\"quickResultsWidget_ELVIZ_current-spoilt-votes__2Z2aT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"quickResultsWidgetEmbed_embedcode__1Rhdr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2fRjA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"piechart_ELVIZ_chart-title__3Buem\",\"ELVIZ_tooltip\":\"piechart_ELVIZ_tooltip__yC8kA\",\"donutchart\":\"piechart_donutchart__ZTyvg\",\"ELVIZ_stylesheet-tv\":\"piechart_ELVIZ_stylesheet-tv__1Lomg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"piechartEmbed_embedcode__2Lc6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__3-Yfc\",\"multievent-container\":\"barchartEmbed_multievent-container__3pAXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"horseshoe_ELVIZ_chart-title__2LEig\",\"ELVIZ_tooltip\":\"horseshoe_ELVIZ_tooltip__1oNUW\",\"horseshoechart\":\"horseshoe_horseshoechart__1EvOs\",\"ELVIZ_stylesheet-tv\":\"horseshoe_ELVIZ_stylesheet-tv__4J58K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"horseshoeEmbed_embedcode__3Da6m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__jSgq1\",\"multievent-container\":\"barchartEmbed_multievent-container__K8YGQ\",\"multiparties-container\":\"barchartEmbed_multiparties-container__1K3Ei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2P1A1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__-0R0Q\",\"multievent-container\":\"barchartEmbed_multievent-container__cY35Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__-1k1S\",\"multievent-container\":\"barchartEmbed_multievent-container__YZQwz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2ig81\",\"multievent-container\":\"barchartEmbed_multievent-container__2fDyw\",\"multiparties-container\":\"barchartEmbed_multiparties-container__CqxMC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__1Z7jS\",\"multievent-container\":\"barchartEmbed_multievent-container__3WXCe\",\"multiparties-container\":\"barchartEmbed_multiparties-container__bBj1f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__26LtM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__g7FGq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__2b7PV\",\"multievent-container\":\"barchartEmbed_multievent-container__2pcWk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ELVIZ_chart-title\":\"voteprediction_ELVIZ_chart-title__3Igd5\",\"ELVIZ_tooltip\":\"voteprediction_ELVIZ_tooltip__6F4Bm\",\"ELVIZ_vote-prediction-title\":\"voteprediction_ELVIZ_vote-prediction-title__22uW8\",\"ELVIZ_projected-turnout\":\"voteprediction_ELVIZ_projected-turnout__4jxv3\",\"ELVIZ_prediction-time\":\"voteprediction_ELVIZ_prediction-time__1OI8T\",\"ELVIZ_CSIR-bottom-label\":\"voteprediction_ELVIZ_CSIR-bottom-label__2bvs8\",\"votepredictionlinechart\":\"voteprediction_votepredictionlinechart__2xkJf\",\"line-container\":\"voteprediction_line-container__wVs44\",\"graph-points\":\"voteprediction_graph-points__2LPGi\",\"axes\":\"voteprediction_axes__3LSHC\",\"axis-text\":\"voteprediction_axis-text__9PTvd\",\"graph-labels\":\"voteprediction_graph-labels__1IU05\",\"line\":\"voteprediction_line__1JDOR\",\"ELVIZ_stylesheet-tv\":\"voteprediction_ELVIZ_stylesheet-tv__327Z7\"};","import React, { Component } from \"react\";\n\nimport {\n    loadScriptsForEmbedMode\n} from \"../utils\";\n\nexport default class EmbedBase extends Component {\n    constructor(props) {\n        super(props);\n        loadScriptsForEmbedMode();\n    }\n\n    render () {\n        return (\n            <div></div>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 1\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 6\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForSeatsBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 9\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSpoiltBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    loadCanvg\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();        \n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,  \n            stylesheetFor,    \n            eventDescription,      \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    loadCanvg,\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n    }\n\n    componentDidMount() {\n        loadCanvg();\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,       \n            stylesheetFor,     \n            disableNavigation,\n            eventDescription,\n            regionType,\n            provinceName,\n            muniName,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showTurnoutMap(document.getElementById(\"${elementId}\"),{\n                            stylesheetFor: \"${stylesheetFor}\",\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 10\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 2\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var newState = JSON.parse(JSON.stringify(this.state));\n        newState.componentID = -1000;\n        triggerCustomEvent(events.CHART_PREVIEW, newState);\n        triggerCustomEvent(events.MAP_PREVIEW, newState);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n            <div>\n                Way to customize size and position of Bar Chart and Map.<br/>\n                For bar chart, you can use .barchart-container\n                <div className={className(\"embedcode\")}>\n                    {`.barchart-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n                For Map, you can use .map-container\n                <div className={className(\"embedcode\")}>\n                    {`.map-container {\n                        width: 1000px;\n                        height: 300px;\n                        margin-left: 100px;\n                    }`}\n                </div>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./quickResultsWidgetEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass QuickResultsWidgetEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"none\",\n            numParties: 5,\n\n            electionYear: 2014,\n\n            nationalEventDescription: \"2014 National Election\",\n            provincialEventDescription: \"2014 Provincial Election\",\n            eventDescriptionsSplitNatProv: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            electionYearsSplitNatProv: [2009, 2014],\n\n            electionEvents: [],\n            electionYears: [],\n            componentID: 5\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"];\n                var electionYears = [];\n                electionEvents.forEach((item) => {\n                    var eventDescription = item.description;\n                    var year = /(19|20)\\d{2}/g.exec(eventDescription)[0];\n                    item.year = year;\n                    if (electionYears.indexOf(year) == -1) {\n                        electionYears.push(year);\n                    }\n                })\n                self.setState({electionEvents, electionYears});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onNatEventDescriptionChange(e) {\n        this.setState({nationalEventDescription: e.target.value, eventDescription: e.target.value });\n    }\n\n    onProvEventDescriptionChange(e) {\n        this.setState({provincialEventDescription: e.target.value });\n    }\n\n    onEventYearSplitNatProvChange(e) {\n        var {electionEvents} = this.state;\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        var yearFilter = electionEvents.filter(item => values.indexOf(item.year) != -1);\n        this.setState({\n            electionYearsSplitNatProv: values,\n            eventDescriptionsSplitNatProv: yearFilter.map(item => item.description)\n        });\n        // console.log(\"yearFilter.map(item => item.description)\", yearFilter.map(item => item.description));\n    }\n\n    onEventYearChange(e) {\n        var electionYear = e.target.value;\n        var nationalEventDescription, provincialEventDescription;\n        var {\n            electionEvents\n        } = this.state;\n\n        var yearFilter = electionEvents.filter(item => item.year == electionYear);\n        var nationalFilter = yearFilter.filter(item => item.eventType.description == \"National Election\");\n        var provincialFilter = yearFilter.filter(item => item.eventType.description != \"National Election\");\n\n\n        if (nationalFilter.length) {\n            nationalEventDescription = nationalFilter[0].description;\n        } else {\n            nationalEventDescription = yearFilter[0].description;\n        }\n        if (provincialFilter.length) {\n            provincialEventDescription = provincialFilter[0].description;\n        } else {\n            provincialEventDescription = yearFilter[0].description;\n        }\n\n        this.setState({\n            electionYear, \n            nationalEventDescription, \n            provincialEventDescription,\n            eventDescription: nationalEventDescription\n         });\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, this.state);\n    }    \n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_SUPERWIDGET_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            nationalEventDescription,\n            provincialEventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents,\n            electionYears,\n            electionYear,\n            electionYearsSplitNatProv\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Quick Results Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Election Year </label>\n                  <select className={className(\"form-control\")} \n                     value={electionYear}\n                     onChange={this.onEventYearChange.bind(this)}>\n                        {\n                            electionYears.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>National Event </label>\n                  <select className={className(\"form-control\")} \n                     value={nationalEventDescription}\n                     onChange={this.onNatEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.year == electionYear)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Provincial Event </label>\n                  <select className={className(\"form-control\")} \n                     value={provincialEventDescription}\n                     onChange={this.onProvEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.year == electionYear)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties for Bar Chart</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Election Year For Split (Nat/Prov)</label>\n                  <select multiple className={className(\"form-control\")} \n                     value={electionYearsSplitNatProv}\n                     onChange={this.onEventYearSplitNatProvChange.bind(this)}>\n                        {\n                            electionYears.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>              \n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showQuickResultsWidget(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default QuickResultsWidgetEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    nationalEventSelected\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 4\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Progress on Votes Count Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            nationalEventSelected(this.state) && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showProgVotesPiechart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 7\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties\n                // .filter(party => party.event.description == )\n                .filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`                 \n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatsComparisonBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./horseshoeEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass HorseShoeEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2019 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 8\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatHorseShoeChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default HorseShoeEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n            partyIecId: null,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 16\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            partyIecId,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr+\"\\x22\"+partyIecId}\n                        onChange={e => this.setState({\n                            partyAbbr: e.target.value.split(\"\\x22\")[0],\n                            partyIecId: e.target.value.split(\"\\x22\")[1],\n                        })} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option \n                                            key={party[\"name\"]} \n                                            value={party[\"abbreviation\"] + \"\\x22\" + party[\"iecId\"]}>\n                                                {party[\"name\"]}\n                                        </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showVoteComparisonBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            partyIecId: ${partyIecId}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 12\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents\n                            .filter(item => item.eventType.description.toLowerCase().indexOf(regionType==\"national\"?\"national\":\"provincial\") != -1)\n                            .map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"national\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 13\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVSeatSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div> \n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 14\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 4);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteCompBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n    onPartyAbbrsChange\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\"],\n            partyIecIds: [null, null, null],\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 15\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        values = values.slice(0, 2);\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbrs,\n            partyIecIds,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>First Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[0]}\n                     onChange={(event) => {\n                        this.setState({eventDescriptions: [event.target.value, eventDescriptions[1]]})\n                    }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Second Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescriptions[1]}\n                     onChange={(event) => {\n                         this.setState({eventDescriptions: [eventDescriptions[0], event.target.value]})\n                     }}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Names</label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multiparties-container\")} \n                        value={partyAbbrs.map((partyAbbr, partyIdx) => partyAbbr+\"\\x22\"+partyIecIds[partyIdx])}\n                        onChange={onPartyAbbrsChange.bind(this)} >\n                        {\n                            allParties && allParties.map((party, partyIdx) => {\n                                return <option \n                                            key={partyIdx} \n                                            value={party[\"abbreviation\"]+ \"\\x22\" + party[\"iecId\"]}>\n                                                {formatPartyName(party[\"name\"])}\n                                    </option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTVVoteSwingBarchart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbrs: ${JSON.stringify(partyAbbrs)},\n                            partyIecIds: ${JSON.stringify(partyIecIds)}\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./piechartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass PieChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: [],\n            stylesheetFor: \"web\",\n            componentID: 17\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1) {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({\n                eventDescription: e.target.value,\n                regionType: \"national\"\n            });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n    \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n\n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSeatDonutChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\"\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default PieChartEmbed;","import React, {Component} from \"react\";\nimport EmbedBase from \"../embedBase\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    formatPartyName,\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends EmbedBase {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            numPartiesSplitNatProv: 3,\n\n            electionEvents: [],\n            allParties: [],\n            stylesheetFor: \"web\",\n            componentID: 18\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"]\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.iecId == thing.iecId\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            stylesheetFor,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents,\n            allParties,\n            numPartiesSplitNatProv\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n\n            <div className={className(\"form-group\")}>\n                  <label>Stylesheet</label>\n                  <select className={className(\"form-control\")} \n                     value={stylesheetFor}\n                     onChange={e => this.setState({stylesheetFor: e.target.value})}>\n                        <option value=\"tv\">TV</option>\n                        <option value=\"web\">Web</option>\n                        <option value=\"none\">None</option>\n                  </select>\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Events </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item.description} value={item.description}>{item.description}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"province\">province</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numPartiesSplitNatProv}\n                    onChange={e => this.setState({numPartiesSplitNatProv: e.target.value})} />\n              </div>\n\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`\n                    <div id=\"${elementId}\"></div>\n                    <script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showSplitNatProvChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            stylesheetFor: \"${stylesheetFor}\",\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;\n","export {default as BarChartEmbed} from \"./BarChart/barchartEmbed\";\nexport {default as RaceForSeatsBarChartEmbed} from \"./RaceForSeatBarchart/barchartEmbed\";\nexport {default as SpoiltBarChartEmbed} from \"./SpoiltBarchart/barchartEmbed\";\nexport {default as MapEmbed} from \"./Map/mapEmbed\";\nexport {default as TurnoutMapEmbed} from \"./TurnoutMap/mapEmbed\";\nexport {default as TurnoutBarChartEmbed} from \"./TurnoutBarchart/barchartEmbed\";\nexport {default as BarchartWithNavMapEmbed} from \"./BarchartWithNavMap/barchartMapEmbed\";\nexport {default as QuickResultsWidgetEmbed} from \"./QuickResultsWidget/quickResultsWidgetEmbed\";\nexport {default as ProgVotesCountPiechartEmbed} from \"./ProgVotesCountPiechart/piechartEmbed\";\nexport {default as RaceForSeatsComparisonBarChartEmbed} from \"./SeatCompBarchart/barchartEmbed\";\nexport {default as SeatHorseShoeChartEmbed} from \"./SeatHorseShoeChart/horseshoeEmbed\";\nexport {default as VoteComparisonBarchartEmbed} from \"./VoteCompBarchart/barchartEmbed\";\n\nexport {default as TVSeatCompBarchartEmbed} from \"./TVSeatCompBarchart/barchartEmbed\";\nexport {default as TVSeatSwingBarchartEmbed} from \"./TVSeatSwingBarchart/barchartEmbed\";\nexport {default as TVVoteCompBarchartEmbed} from \"./TVVoteCompBarchart/barchartEmbed\";\nexport {default as TVVoteSwingBarchartEmbed} from \"./TVVoteSwingBarchart/barchartEmbed\";\n\nexport {default as SeatDonutChartEmbed} from \"./RaceForSeatDonut/piechartEmbed\";\nexport {default as SplitNatProvEmbed} from \"./SplitNatProv/barchartEmbed\";","import * as d3 from \"d3\";\nimport {createTooltip, createSvg, createErrorText} from \"../../utils\";\nimport { type } from \"os\";\nimport config from \"../../config\";\nimport {\n  formatPartyName\n} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  var offset = {\n    width: 70,\n    height: 20\n  }\n\n  width = 700;\n  height = 200;\n\n  var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n  var svg = createSvg(container, width + offset.width, height + offset.height + (options.showLegend ? 50 : 0))\n  var tooltipDiv = createTooltip(className);\n\n  var x = d3.scaleBand()\n    .rangeRound([offset.width, width])\n\n  var y = d3.scaleLinear()\n    .rangeRound([height, offset.height]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+offset.height/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(config.CSS_PREFIX + \"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + offset.width +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n\n    var errorText = createErrorText(svg, width / 2, height / 2);\n\n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        barSvg.selectAll('rect').remove();\n        barTextSvg.selectAll('text').remove();\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n      var partyAbbrByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        if (colorsData && colorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          colorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        var maxValue = d3.max(chartData, function(d) { return parseFloat(options.yValue(d)); });\n        if (options.customizeDynamicMaxValue) {\n          minMaxY[1] = options.customizeDynamicMaxValue(maxValue);\n        } else {\n          minMaxY[1] = maxValue + 1;\n        }\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n        \n        if (options.showLegend) {\n          var parties = [];\n          var partyIecIds = [];\n          chartData.forEach(({partyInfo}) => {\n            var party = partyInfo.name;\n            if (partyIecIds.indexOf(partyInfo.iecId) === -1 && partyInfo.iecId) {\n                parties.push(party);\n                partyIecIds.push(partyInfo.iecId);\n            }\n          })\n          console.log(\"parties\", parties, chartData);\n          \n          function getLegendXY(i) {\n            \n            var xydata = [offset.width + (i%5)*100, height + 30 + parseInt(i/5) * 40];\n            if (parties.length < 6) {\n              xydata[0] += 100 * ( 6 - parties.length) / 2;\n            }\n            return xydata;\n          }\n          svg.selectAll(`.${className(\"legend\")}`).remove();\n          var legends = svg.selectAll(`.${className(\"legend\")}`)\n              .data(parties)\n              .enter()\n              .append('g')\n              .attr(\"class\", className(\"legend\"))\n              .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n          legends\n              .append(\"rect\")\n              .attr('width', 10)\n              .attr('height', 10)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr(\"fill\", (party, i) => {\n                  return getFillColorFromPartyName(party);\n              })\n          legends.append('text')\n              .attr('x', 30)\n              .attr('y', 10)\n              .style('font-size', '12px')\n              .text(party => partyAbbrByName[party])\n        }\n        \n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange,\n  triggerCustomEvent,\n  fetchLocationTrackFromVDdata\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  dynamicYAxisFromValues: true,\n  customizeDynamicMaxValue: (maxVal) => Math.min(100, maxVal * 1.5),\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        comp: \"votes-default\",\n        numParties: 5,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 1\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID !== this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n        console.log(d3);\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID !== -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n\n        if (props.comp === \"votes-myvd\") {\n          var newState;\n          if (chartData) {\n            newState = fetchLocationTrackFromVDdata(data);\n          } else {\n            newState = {iecId: \"\"}\n          }\n          var needUpdate = false;\n          Object.keys(newState).forEach(key => {\n            if (props[key] !== newState[key]) {\n              needUpdate = true;\n            }\n          })\n          if (needUpdate) {\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n          }\n        }\n       \n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName2,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 6\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-barchart(${getNationOrProvinceName2(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n        \n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName2(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSpoiltData\n} from \"../../api\";\nimport {\n  parseSpoiltVotesData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Spoilt vs Valid Votes',\n  yAxisLabel: 'PERCENTAGE VOTES',\n  noXaxisByParty: true,\n  yValue: d => d.percent,\n  yValueFormat: value => value + '%'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 9\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID !== this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `spoilt-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID !== -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var spoiltDataLoader = getSpoiltData(props);\n      var dataLoaders = [spoiltDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var spoiltData = values[0];\n        self.drawGraph(container, props, spoiltData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseSpoiltVotesData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Valid\": \"rgb(0,255,0)\",\n          \"Spoilt\": \"rgb(255,0,0)\"\n        });\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2019 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            disableNavigation: false,\n            stylesheetFor: \"web\",\n            componentID: 3\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    // componentWillReceiveProps(newProps) {\n    //     var newState = JSON.parse(JSON.stringify(this.state));\n    //     fetchDataFromOBJ(newState, newProps);\n    //     this.setState(newState);\n    // }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID !== this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        if (!this.state.disableNavigation) {\n            var newState = event.detail;\n            this.setState(newState)\n        }\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID !== -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        // var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n        var dataLoaders = [mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        geoJsonLoader.then(function(value) {\n            var geoJsonData = value;\n            Promise.all(dataLoaders).then(function(values){ \n                var locationToMainParty = parseMainPartyData(values[0], props);\n                partyColorsData = partyColorsData || values[1];  \n    \n                var partyColorByName = {};\n                var partyAbbrByName = {};\n                if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                  partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.name] = edge.node.colour;\n                    partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n                  })\n                }            \n    \n                function getFillColorFromPartyName(partyName) {\n                  if (!partyName)\n                    return regionColor;\n                  return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n                }\n    \n                function getMainPartyName(d, i) {\n                    var partyName;\n                    var regionType = self.state.regionType;\n                    if (regionType === \"national\") {\n                        var provinceName = d.properties.SPROVINCE;\n                        partyName = locationToMainParty[provinceName];\n                    } else if (regionType === \"province\") {\n                        var muniCode = getMunicipalityCode(d.properties);\n                        partyName = locationToMainParty[muniCode];\n                    } else if (regionType === \"municipality\"){// \"municipality\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        partyName = locationToMainParty[iecId];\n                    } else {// \"municipality-vd\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        partyName = locationToMainParty[iecId];\n                    }\n                    return partyName;\n                }\n                function getMainPartyColorFromRegion(d, i) {\n                    var partyName = getMainPartyName(d, i);\n                    var partyColor = getFillColorFromPartyName(partyName);\n                    return partyColor;\n                }\n    \n                var jsonDataFeatures;\n                if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                    var regionType = self.state.regionType\n                    if (regionType == \"municipality\") {\n                        if (!geoJsonData.objects[self.state.muniCode])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                    } else { // \"municipality-vd\"\n                        if (!geoJsonData.objects[self.state.iecId])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                    }\n                }\n    \n                jsonDataFeatures = geoJsonData.features;\n    \n                var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n                var path = d3.geoPath().projection(projection);\n    \n                // fill region with regionColor\n                svg.selectAll(`.${className(\"region\")}`)\n                    .data(jsonDataFeatures)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", className(\"region\"))\n                    .attr(\"stroke\", regionBorderColor)\n                    .attr(\"fill\", getMainPartyColorFromRegion)\n                    .attr(\"id\", function(d, i) {\n                        return `region-${i}`;\n                    })\n                    .attr(\"d\", path);\n                \n                var parties = [];\n                var availableCnt = [];\n                jsonDataFeatures.forEach((d, i) => {\n                    var party = getMainPartyName(d, i);\n                    if (parties.indexOf(party) == -1) {\n                        parties.push(party);\n                        availableCnt.push(1);\n                    } else {\n                        availableCnt[parties.indexOf(party)] ++;\n                    }\n                })\n    \n                parties.sort(function(a, b){\n                    return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n                })\n    \n                function getLegendXY(i) {\n                    return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n                }\n                var legends = svg.selectAll(`.${className(\"legend\")}`)\n                    .data(parties)\n                    .enter()\n                    .append('g')\n                    .attr(\"class\", className(\"legend\"))\n                    .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n                legends\n                    .append(\"rect\")\n                    .attr('width', 20)\n                    .attr('height', 20)\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr(\"fill\", (party, i) => {\n                        return getFillColorFromPartyName(party);\n                    })\n                legends.append('text')\n                    .attr('x', 30)\n                    .attr('y', 16)\n                    .text(party => partyAbbrByName[party])\n                \n                if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                    svg.selectAll(\".place-label\")\n                        .data(jsonDataFeatures)\n                    .enter().append(\"text\")\n                        .attr(\"class\", \"place-label\")\n                        .attr(\"font-size\", \"12px\")\n                        .attr(\"transform\", function(d) { \n                            var center, projectionCenter;\n                            if (d.geometry.type === \"Polygon\") {\n                                center = polylabel(d.geometry.coordinates);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 12;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            } else { //\"MultiPolygon\"\n                                center = polylabel(d.geometry.coordinates[0]);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 5;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            }\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .text(d => getSubRegionName(d.properties, self.state))\n                }\n    \n                if (self.state.regionType.indexOf(\"municipality\") == -1) {\n                    fixMapLabelIntersect();\n                }\n    \n                //hidden area for catching events\n                svg.selectAll(\".eventLayer\")\n                    .data(jsonDataFeatures)\n                .enter()\n                    .append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"eventLayer\")\n                    .attr(\"id\", function(d, i) {\n                        return `eventLayer-${i}`;\n                    })\n                    .attr(\"fill\", \"transparent\")\n                    .on(\"mouseover\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 3)\n                            .style(\"fill-opacity\", 0.8);\n                    })\n                    .on(\"mousemove\", function(d, i) {\t\n                        // if (self.state.regionType === \"municipality\") return;\n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 1);\n    \n                        var undefinedText;\n                        if (self.state.regionType === \"province\") {\n                            undefinedText = \"New municipality - no previous results available\"\n                        } else {\n                            undefinedText = \"New voting district - no previous results available\"\n                        }\n                        var mainPartyName = getMainPartyName(d, i);\n                        var subRegionName = getSubRegionName(d.properties, self.state);\n                        var tooltipText = (typeof mainPartyName !== \"undefined\")? \n                                    (subRegionName + \" : \" + mainPartyName) : undefinedText;\n    \n                        tooltipDiv.html(tooltipText)\t\n                            .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                            .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                    })\n                    .on(\"mouseout\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 1)\n                            .style(\"fill-opacity\", 1);\n                        \n                        if (self.state.regionType === \"municipality\") return;\n    \n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                    })\n                    .on(\"click\", function(d, i) {                  \n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                        \n                        var regionType = self.state.regionType;\n                        var newState, event;\n                        if (regionType === \"national\") {\n                            newState = {\n                                regionType: \"province\",\n                                provinceName: d.properties.SPROVINCE\n                            }\n                        } else if (regionType === \"province\") {\n                            newState = {\n                                regionType: \"municipality\", \n                                provinceName: self.state.provinceName,\n                                muniName: d.properties.smunicipal,\n                                muniCode: getMunicipalityCode(d.properties),\n                            }\n                        } else if (regionType === \"municipality\"){ // \"municipality\"\n                            var newState = {\n                                regionType: \"municipality-vd\", \n                                provinceName: self.state.provinceName,\n                                muniName: self.state.muniName,\n                                muniCode: self.state.muniCode,\n                                iecId: getMunicipalityiecId(d.properties),\n                            }\n                        } else { // \"municipality-vd\"\n                            return;\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        if (self.state.disableNavigation) {\n                            return;\n                        }\n                        self.setState(newState);\n                    })\n                if (!self.state.disableNavigation) {\n                    var fo = svg.append(\"foreignObject\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", 10)\n                        .attr(\"width\", 500)\n                        .attr(\"height\", 30)\n                        .attr(\"class\", \"map-controls\")\n                    \n                    function setRegionType(regionType) {\n                        var newState;\n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        newState.regionType = regionType;\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    }\n    \n                    function appendSpan(foDiv, regionName, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"span\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"default\")\n                            .html(regionName);\n                    }\n    \n                    function appendLink(foDiv, regionName, regionType, addSub) {\n                        if (addSub) foDiv.append(\"span\").html(\" > \");\n                        foDiv.append(\"a\")\n                            .style(\"height\", \"30px\")\n                            .style(\"cursor\", \"pointer\")\n                            .html(regionName)\n                            .on(\"click\", function() {\n                                setRegionType(regionType);\n                            });\n                    }\n                    \n                    var foDiv = fo.append(\"xhtml:div\");\n                    var regionType = self.state.regionType;\n                    if (regionType == \"national\") {\n                        appendSpan(foDiv, \"South Africa\", false);\n                    } else {\n                        appendLink(foDiv, \"South Africa\", \"national\", false);\n                        if (regionType == \"province\") {\n                            appendSpan(foDiv, self.state.provinceName, true);\n                        } else {\n                            appendLink(foDiv, self.state.provinceName, \"province\", true);\n                            if (regionType == \"municipality\") {\n                                appendSpan(foDiv, self.state.muniCode, true);\n                            } else {\n                                appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                appendSpan(foDiv, self.state.iecId, true);\n                            }\n                        }\n                    }\n                }\n                self.getLoadingSpinner()\n                    .style(\"display\", \"none\");\n            }).catch(error => {\n                console.error(error);\n                console.log(`failed to get data from server`);\n            })\n        }).catch(error => {\n            console.error(error);\n\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            \n            if (self.state.disableNavigation) {\n                return;\n            }\n\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                if (regionType == \"national\" || regionType == \"province\") {\n                  console.log(`Can't get map data for $currentRegionName`)\n                } else {\n                    alert(`${currentRegionName} has been disestablished`); \n                }\n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"../Map/map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getTurnoutData,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseTurnoutData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent,\n  getMunicipalityiecId,\n  getRegionFileName,\n  fetchDataFromOBJ\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2019 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 11\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.draw(this.getContainer(), this.state);\n        this.refreshIntervalID = setInterval(() => {\n          self.draw(self.getContainer(), self.state)\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n        this.getContainer().selectAll(\"svg\").remove();\n        document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(prevState) !== JSON.stringify(this.state))\n            this.draw(this.getContainer(), this.state)\n    }\n\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n\n            if (!window.canvg) {\n                return reject(\"canvg module not available\");\n            }\n\n            window.canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        if (!window.canvg) {\n            return console.error(\"canvg module not available\");\n        }\n\n        window.canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        var canvas = rendercanvas, filename = `turnout-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        var {\n            disableNavigation,\n            stylesheetFor,\n            componentID\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                {\n                    componentID != -1000 && <div className={cn(\"map-title\")}>{getRegionName(this.state)}</div>\n                }\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={cn(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n \n    drawGraph(container, props) {\n        var self = this;\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName(self.state);\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var turnoutDataLoader = getTurnoutData(props);\n        // var dataLoaders = [geoJsonLoader, turnoutDataLoader];\n        var dataLoaders = [turnoutDataLoader];\n\n        geoJsonLoader.then(function(value) {\n            var geoJsonData = value;\n            Promise.all(dataLoaders).then(function(values){ \n                var locationToTurnout = parseTurnoutData(values[0], props);      \n    \n                function getMergedColorWithWhite(percent) {\n                    var originRGB = {\n                        R: 0,\n                        G: 255,\n                        B: 0\n                    }\n                    var mixedR = (originRGB.R * (percent) + 255 * (100-percent))/100;\n                    var mixedG = (originRGB.G * (percent) + 255 * (100-percent))/100;\n                    var mixedB = (originRGB.B * (percent) + 255 * (100-percent))/100;\n                    return `rgb(${mixedR},${mixedG},${mixedB})`;\n                }\n                function getFillColorFromTurnout(turnout) {\n                  if (turnout > 65)\n                    return \"#39711D\";//getMergedColorWithWhite(100);//\"rgb(0,165,138)\";\n                  if (turnout >= 60)\n                    return \"#458923\";//getMergedColorWithWhite(90);//\"rgb(4,68,95)\";\n                  if (turnout >= 55)\n                    return \"#53B025\";//getMergedColorWithWhite(80);//\"rgb(4,98,138)\";\n                  if (turnout >= 50)\n                    return \"#4BDC02\";//getMergedColorWithWhite(70);//\"rgb(4,117,164)\";\n                  if (turnout >= 45)\n                    return \"#7CE547\";//getMergedColorWithWhite(60);//\"rgb(4,136,191)\";\n                  if (turnout >= 40)\n                    return \"#93E968\";//getMergedColorWithWhite(50);//\"rgb(0,154,216)\";\n                  if (turnout >= 35)\n                    return \"#A6ED83\";//getMergedColorWithWhite(40);//\"rgb(77,174,224)\";\n                  if (turnout >= 30)\n                    return \"#C5F3AF\";//getMergedColorWithWhite(30);//\"rgb(124,194,231)\";\n                  return \"#D3F6C3\";//regionColor;\n                }\n    \n                function getTurnout(d, i) {\n                    var turnout;\n                    var regionType = self.state.regionType;\n                    if (regionType === \"national\") {\n                        var provinceName = d.properties.SPROVINCE;\n                        turnout = locationToTurnout[provinceName];\n                    } else if (regionType === \"province\") {\n                        var muniCode = getMunicipalityCode(d.properties);\n                        turnout = locationToTurnout[muniCode];\n                    } else if (regionType === \"municipality\"){// \"municipality\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        turnout = locationToTurnout[iecId];\n                    } else {// \"municipality-vd\"\n                        var iecId = getMunicipalityiecId(d.properties);\n                        turnout = locationToTurnout[iecId];\n                    }\n                    return turnout;\n                }\n                function getFillColorFromRegion(d, i) {\n                    var turnout = getTurnout(d, i);\n                    var fillColor = getFillColorFromTurnout(turnout);\n                    return fillColor;\n                }\n                var jsonDataFeatures;\n                if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for munis and muni-vds\n                    var regionType = self.state.regionType\n                    if (regionType == \"municipality\") {\n                        if (!geoJsonData.objects[self.state.muniCode])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n                    } else { // \"municipality-vd\"\n                        if (!geoJsonData.objects[self.state.iecId])\n                            return;\n                        geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.iecId]);\n                    }\n                }\n    \n                jsonDataFeatures = geoJsonData.features;\n    \n                var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n                var path = d3.geoPath().projection(projection);\n    \n                // fill region with regionColor\n                svg.selectAll(`.${className(\"region\")}`)\n                    .data(jsonDataFeatures)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", className(\"region\"))\n                    .attr(\"stroke\", regionBorderColor)\n                    .attr(\"fill\", getFillColorFromRegion)\n                    .attr(\"id\", function(d, i) {\n                        return `region-${i}`;\n                    })\n                    .attr(\"d\", path);\n                \n                var turnoutColors = [{\n                    text: \"More than 65%\",\n                    turnout: 66\n                },{\n                    text: \"60% - 65%\",\n                    turnout: 60\n                },{\n                    text: \"55% - 60%\",\n                    turnout: 55\n                },{\n                    text: \"50% - 55%\",\n                    turnout: 50\n                },{\n                    text: \"45% - 50%\",\n                    turnout: 45\n                },{\n                    text: \"40% - 45%\",\n                    turnout: 40\n                },{\n                    text: \"35% - 40%\",\n                    turnout: 35\n                },{\n                    text: \"30% - 35%\",\n                    turnout: 30\n                },{\n                    text: \"Less than 30%\",\n                    turnout: 15\n                }];\n                \n                function getLegendXY(i) {\n                    return [(i%5)*170, h + 10 + parseInt(i/5) * 40];\n                }\n                var legends = svg.selectAll(`.${className(\"legend\")}`)\n                    .data(turnoutColors)\n                    .enter()\n                    .append('g')\n                    .attr(\"class\", className(\"legend\"))\n                    .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n                legends\n                    .append(\"rect\")\n                    .attr('width', 20)\n                    .attr('height', 20)\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr(\"fill\", (it) => {\n                        return getFillColorFromTurnout(it.turnout);\n                    })\n                legends.append('text')\n                    .attr('x', 30)\n                    .attr('y', 16)\n                    .text(it => it.text)\n                \n                if (self.state.regionType !== \"municipality\") {\n                    svg.selectAll(\".place-label\")\n                        .data(jsonDataFeatures)\n                    .enter().append(\"text\")\n                        .attr(\"class\", \"place-label\")\n                        .attr(\"font-size\", \"12px\")\n                        .attr(\"transform\", function(d) { \n                            var center, projectionCenter;\n                            if (d.geometry.type === \"Polygon\") {\n                                center = polylabel(d.geometry.coordinates);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 12;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            } else { //\"MultiPolygon\"\n                                center = polylabel(d.geometry.coordinates[0]);\n                                projectionCenter = projection(center);\n                                projectionCenter[1] -= 5;\n                                return \"translate(\" + projectionCenter + \")\"; \n                            }\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .text(d => getSubRegionName(d.properties, self.state))\n                }\n    \n                if (self.state.regionType !== \"municipality\") {\n                    fixMapLabelIntersect();\n                }\n    \n                //hidden area for catching events\n                svg.selectAll(\".eventLayer\")\n                    .data(jsonDataFeatures)\n                .enter()\n                    .append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"eventLayer\")\n                    .attr(\"id\", function(d, i) {\n                        return `eventLayer-${i}`;\n                    })\n                    .attr(\"fill\", \"transparent\")\n                    .on(\"mouseover\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 3)\n                            .style(\"fill-opacity\", 0.8);\n                    })\n                    .on(\"mousemove\", function(d, i) {\n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 1);\n                        \n                        var undefinedText;\n                        if (self.state.eventDescription.indexOf(\"2019\") == -1) {\n                            if (self.state.regionType === \"province\") {\n                                undefinedText = \"New municipality - no previous results available\"\n                            } else {\n                                undefinedText = \"New voting district - no previous results available\"\n                            }\n                        } else {\n                            undefinedText = \"votes not counted yet\";\n                        }\n    \n                        var turnoutData = getTurnout(d, i);\n                        var subRegionName = getSubRegionName(d.properties, self.state);\n                        var tooltipText = (typeof turnoutData !== \"undefined\")? \n                                    (subRegionName + \" : \" + turnoutData + \"%\") : undefinedText;\n    \n                        tooltipDiv.html(tooltipText)\t\n                            .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                            .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                    })\n                    .on(\"mouseout\", function(d, i) {\n                        d3.select(`#region-${i}`)\n                            .attr(\"stroke-width\", 1)\n                            .style(\"fill-opacity\", 1);\n                        \n                        if (self.state.regionType === \"municipality\") return;\n    \n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                    })\n                    .on(\"click\", function(d, i) {\n                        if (self.state.disableNavigation) {\n                            return;\n                        }\n                        tooltipDiv.transition()\t\t\n                            .duration(200)\t\t\n                            .style(\"opacity\", 0);\t\n                        \n                        var regionType = self.state.regionType;\n                        var newState;\n                        if (regionType === \"national\") {\n                            newState = {\n                                regionType: \"province\",\n                                provinceName: d.properties.SPROVINCE\n                            }\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n                            self.setState(newState);\n                        } else if (regionType === \"province\") {\n                            newState = {\n                                regionType: \"municipality\", \n                                provinceName: self.state.provinceName,\n                                muniName: d.properties.smunicipal,\n                                muniCode: getMunicipalityCode(d.properties),\n                            }\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n                            self.setState(newState);\n                        } else { // \"municipality\"\n                            var newState = {\n                                regionType: \"municipality-vd\", \n                                provinceName: self.state.provinceName,\n                                muniName: self.state.muniName,\n                                muniCode: self.state.muniCode,\n                                iecId: getMunicipalityiecId(d.properties),\n                            }\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n    \n                            self.setState(newState);\n                        }\n                    })\n                    if (!self.state.disableNavigation) {\n                        var fo = svg.append(\"foreignObject\")\n                            .attr(\"x\", 0)\n                            .attr(\"y\", 10)\n                            .attr(\"width\", 500)\n                            .attr(\"height\", 30)\n                            .attr(\"class\", \"map-controls\")\n                        \n                        function setRegionType(regionType) {\n                            var newState;\n                            var newState = {\n                                regionType: self.state.regionType, \n                                provinceName: self.state.provinceName,\n                                muniName: self.state.muniName,\n                                muniCode: self.state.muniCode,\n                                iecId: self.state.iecId,\n                            }\n                            newState.regionType = regionType;\n                            triggerCustomEvent(events.REGION_CHANGE, newState);\n                            self.setState(newState);\n                        }\n        \n                        function appendSpan(foDiv, regionName, addSub) {\n                            if (addSub) foDiv.append(\"span\").html(\" > \");\n                            foDiv.append(\"span\")\n                                .style(\"height\", \"30px\")\n                                .style(\"cursor\", \"default\")\n                                .html(regionName);\n                        }\n        \n                        function appendLink(foDiv, regionName, regionType, addSub) {\n                            if (addSub) foDiv.append(\"span\").html(\" > \");\n                            foDiv.append(\"a\")\n                                .style(\"height\", \"30px\")\n                                .style(\"cursor\", \"pointer\")\n                                .html(regionName)\n                                .on(\"click\", function() {\n                                    setRegionType(regionType);\n                                });\n                        }\n                        \n                        var foDiv = fo.append(\"xhtml:div\");\n                        var regionType = self.state.regionType;\n                        if (regionType == \"national\") {\n                            appendSpan(foDiv, \"South Africa\", false);\n                        } else {\n                            appendLink(foDiv, \"South Africa\", \"national\", false);\n                            if (regionType == \"province\") {\n                                appendSpan(foDiv, self.state.provinceName, true);\n                            } else {\n                                appendLink(foDiv, self.state.provinceName, \"province\", true);\n                                if (regionType == \"municipality\") {\n                                    appendSpan(foDiv, self.state.muniCode, true);\n                                } else {\n                                    appendLink(foDiv, self.state.muniCode, \"municipality\", true);\n                                    appendSpan(foDiv, self.state.iecId, true);\n                                }\n                            }\n                        }\n                        // foDiv\n                        //     .append(\"button\")\n                        //     .attr(\"class\", \"go-back\")\n                        //     .style(\"height\", \"30px\")\n                        //     .style(\"color\", \"black\")\n                        //     .html(\"go back\")\n                        //     .on(\"click\", function() {\n                        //         var regionType = self.state.regionType;\n                        //         var newState, event;\n            \n                        //         var newState = {\n                        //             regionType: self.state.regionType, \n                        //             provinceName: self.state.provinceName,\n                        //             muniName: self.state.muniName,\n                        //             muniCode: self.state.muniCode,\n                        //             iecId: self.state.iecId,\n                        //         }\n                                \n                        //         if (regionType === \"province\") {\n                        //             newState.regionType = \"national\";\n                        //         } else if (regionType === \"municipality\") {\n                        //             newState.regionType = \"province\";\n                        //         } else if (regionType === \"municipality-vd\") {\n                        //             newState.regionType = \"municipality\";\n                        //         }\n            \n                        //         triggerCustomEvent(events.REGION_CHANGE, newState);\n                        //         self.setState(newState);\n                        //     });\n                    }\n                self.getLoadingSpinner()\n                    .style(\"display\", \"none\");\n            }).catch(error => {\n                console.error(error);\n                console.log(`failed to get data from server`);\n            })\n        }).catch(error => {\n            console.error(error);       \n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n            var currentRegionName = getRegionName(this.state);\n            var regionType = self.state.regionType;\n            var newState, event;\n\n            var newState = {\n                regionType: self.state.regionType, \n                provinceName: self.state.provinceName,\n                muniName: self.state.muniName,\n                muniCode: self.state.muniCode,\n                iecId: self.state.iecId,\n            }\n            \n            if (regionType === \"province\") {\n                newState.regionType = \"national\";\n            } else if (regionType === \"municipality\") {\n                newState.regionType = \"province\";\n            } else if (regionType === \"municipality-vd\") {\n                newState.regionType = \"municipality\";\n            }\n\n            triggerCustomEvent(events.REGION_CHANGE, newState);\n            self.setState(newState);\n            setTimeout(() => {\n                if (regionType == \"national\" || regionType == \"province\") {\n                  console.log(`Can't get map data for ${currentRegionName}`);\n                } else {\n                    alert(`${currentRegionName} has been disestablished`); \n                }\n            }, 300);    \n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 10\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n    \n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `turnout-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport styles from \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getRegionName,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2019 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"web\",\n            componentID: 2\n        }      \n\n        fetchDataFromOBJ(this.state, props);\n\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var self = this;\n        Promise.all([\n            self.barchartInstance.exportAsPNGUri(),\n            self.mapInstance.exportAsPNGUri()\n        ]).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(\"export-images\");\n            imgs.file(\"barchart.png\", values[0], {base64: true});\n            imgs.file(\"map.png\", values[1], {base64: true});\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `race-for-votes-barchart-map(${getRegionName(self.state)}).zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n  \n    componentWillUnmount() {\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n    }\n\n    render() {\n      const {\n        stylesheetFor\n      } = this.state;\n\n        return (\n        <div ref=\"superwidget\" className={className(\"barchart-map\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div className={className(\"barchart-container\")} ref=\"barchart\">\n                <BarChart \n                    ref={instance => { this.barchartInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n            <div className={className(\"map-container\")}>\n                <Map \n                    ref={instance => { this.mapInstance = instance; }} \n                    {...this.state}\n                    componentID={-1000} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import * as d3 from \"d3\";\nimport {createTooltip, createSvg, createErrorText} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n    var data = [],\n        width = 700,\n        height = 300,\n        margin = {top: 10, right: 10, bottom: 10, left: 10},\n        variable = options.variable,\n        category = options.category,\n        padAngle = 0.015,\n        transTime = 750,\n        floatFormat = d3.format('.4r'),\n        cornerRadius = 3,\n        colorsData = null;\n\n\n        \n\n    function colour(key) {\n        if (colorsData && colorsData[key]) {\n            return colorsData[key];\n        }\n        return 'rgb(' + Math.random()*250 + ',' + Math.random()*250 + ',' + Math.random()*250 + ')';\n    }\n\n    var radius = Math.min(width, height) / 2;\n\n    var pie = d3.pie()\n        .value(function(d) { return floatFormat(d[variable]); })\n        .sort(null);\n\n    var arc = d3.arc()\n        .outerRadius(radius * 0.8)\n        .innerRadius(radius * 0.6)\n        .cornerRadius(cornerRadius)\n        .padAngle(padAngle);\n\n    var totalSvg = createSvg(container, width + margin.left + margin.right, height + margin.top + margin.bottom);\n    \n    \n    var transformX = height / 2, transformY = height / 2;\n    if (options.chartType === 'Progress on Votes Count') {\n    } else {\n        transformX = width / 2;\n    }\n    var svg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + transformX + ',' + transformY + ')');\n    \n    var labelSvg = totalSvg\n        .append('g')\n        .attr('transform', 'translate(' + height * 6 / 5 + ',' + height / 2 + ')');\n\n    svg.append('g').attr('class', 'slices');\n    svg.append('g').attr('class', 'lines');\n\n    var path = svg.select('.slices')\n        .selectAll('path')\n        .data(pie(data))\n        .enter().append('path')\n        .attr('fill', function(d) { return colour(d.data[category]); })\n        .attr('d', arc);\n\n    var errorText = createErrorText(svg);\n\n    this.destroy = function() {\n        container.selectAll(\"svg\").remove();\n    }\n    this.draw = function(value, colorsDataP) {\n        if (!value) {\n            errorText.text(\"chart data is not available\");\n            return;\n        } else {\n            errorText.text(\"\");\n        }\n\n        if (options.chartType === 'Progress on Votes Count') {\n            colorsData = colorsDataP;\n        } else {\n            var partyColorByName = {};\n\n            var partyColorsData = colorsDataP;\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n                partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                    partyColorByName[edge.node.abbreviation] = edge.node.colour;\n                })\n            }\n            colorsData = partyColorByName;\n        }\n        \n        data = value;\n\n        if (options.chartType === 'Progress on Votes Count') {\n            labelSvg.selectAll('text').remove();\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', -15)\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle')\n                .text('Completed' + ': ' + data[0][\"percent\"] + '%');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .text('Captured Votes' + ': ' + data[0][\"count\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n            labelSvg.append('text')\n                .attr('x', 0)\n                .attr('y', 15)\n                .text('Total' + ': ' + data[0][\"totalCount\"])\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n        }\n\n        var updatePath = d3.select('.slices').selectAll('path');\n\n        var data0 = path.data(),\n            data1 = pie(data);\n\n        updatePath = updatePath.data(data1, key);\n\n        updatePath.enter().append('path')\n            .each(function(d, i) { this._current = findNeighborArc(i, data0, data1, key) || d; })\n            .attr('fill', function(d) {  return colour(d.data[category]); })\n            .attr('d', arc);\n\n        updatePath.exit()\n            .transition()\n            .duration(transTime)\n            .attrTween(\"d\", arcTween)\n            .remove();\n\n        updatePath.transition().duration(transTime)\n            .attrTween('d', arcTween);\n\n        d3.selectAll('.labelName text, .slices path').call(toolTip);\n\n    };\n\n    function toolTip(selection) {\n\n        selection.on('mouseenter', function (data) {\n            svg.append('text')\n                .attr('class', 'toolCircle')\n                .attr('dy', -15)\n                .html(toolTipHTML(data))\n                .style('font-size', '.7em')\n                .style('text-anchor', 'middle');\n\n            svg.append('circle')\n                .attr('class', 'toolCircle')\n                .attr('r', radius * 0.55)\n                .style('fill', colour(data.data[category]))\n                .style('fill-opacity', 0.35);\n\n        });\n\n        selection.on('mouseout', function () {\n            d3.selectAll('.toolCircle').remove();\n        });\n    }\n\n    function toolTipHTML(data) {\n\n        if (options.chartType === 'Progress on Votes Count') {\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Progress' + ': ' + data.data[\"percent\"] + '%' + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Captured Votes' + ': ' + data.data[\"count\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Total' + ': ' + data.data[\"totalCount\"] + '</tspan>';\n        } else { //'Race for Seats Donut chart'\n            var tip = '';\n            tip += '<tspan x=\"0\">' + 'Seats' + ': ' + data.data[\"seats\"] + '</tspan>';\n            tip += '<tspan x=\"0\" dy=\"1.2em\">' + 'Party' + ': ' + data.data[\"name\"] + '</tspan>';\n        }\n        return tip;\n    }\n\n    function arcTween(d) {\n        var i = d3.interpolate(this._current, d);\n        this._current = i(0);\n        return function(t) { return arc(i(t)); };\n    }\n\n    function findNeighborArc(i, data0, data1, key) {\n        var d;\n        return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}\n            : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}\n                : null;\n    }\n\n    function findPreceding(i, data0, data1, key) {\n        var m = data0.length;\n        while (--i >= 0) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n\n    function key(d) {\n        return d.data[category];\n    }\n\n    function findFollowing(i, data0, data1, key) {\n        var n = data1.length, m = data0.length;\n        while (++i < n) {\n            var k = key(data1[i]);\n            for (var j = 0; j < m; ++j) {\n                if (key(data0[j]) === k) return data0[j];\n            }\n        }\n    }\n}","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"./d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getProgressVotesCount\n} from \"../../api\";\nimport {\n  parseProgressVotesCount,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Progress on Votes Count',\n  variable: 'percent',\n  category: 'name'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\n\nclass PieChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 4\n      }     \n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `progress-on-votes-piechart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n   \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"piechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var progressVotesDataLoader = getProgressVotesCount(props);\n      var dataLoaders = [progressVotesDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var progressVotesData = values[0];\n        self.drawGraph(container, props, progressVotesData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data) {\n        var chartData = parseProgressVotesCount(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, {\n          \"Completed\": \"#15707C\",\n          \"Not Completed\": \"#CCCCCC\"\n        });\n    }\n}\n\nexport default PieChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./piechart.css\";\nimport {Chart} from \"../ProgVotesCountPiechart/d3piechart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Donut Chart',\n  variable: 'seats',\n  category: 'name',\n  viewBox: '170 0 360 320'\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass DonutChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 17\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID !== this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-donutchart-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"donutchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID !== -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default DonutChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonData,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  chartType: \"Race For Votes Comparison\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  showLegend: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 16\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n              componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonData(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        partyIecId: null,\n        eventDescriptions: [\n            \"National Elections 1999\",\n            \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            \"2019 PROVINCIAL ELECTION\",\n\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 7\n      }\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      \n      return (\n          <div className={cn(\"barchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, createSvg, createErrorText} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  } \n\n  width = 360;\n  height = 185;\n\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = createSvg(container, width, height);\n\n\n    var tooltipDiv = createTooltip(className);\n\n    var mainSvg = svg.append(\"g\");\n    var errorText = createErrorText(svg, width / 2, height / 2);\n\n    this.draw = function(originChartData, colorsData) {\n      var chartData = [];\n      if (!originChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n\n      chartData = originChartData;\n      var largest = chartData[0];\n      var rest = chartData.slice(1);\n\n\n      rest.push(largest);\n      chartData = rest;\n\n      var partyColorByName = {};\n\n      var partyColorsData = colorsData;\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n          })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n\n      var totalSeats = 0;\n      for (var i = 0; i < chartData.length; i ++) {\n        totalSeats += chartData[i].seats;\n      }\n\n      function pythonConvertedCode(totalSeats, mainSvg) {\n        var Totals=[\n              3, 15, 33, 61, 95, 138, 189, 247, 313, 388, 469, 559, 657, 762, 876, 997,\n              1126, 1263, 1408, 1560, 1722, 1889, 2066, 2250, 2442, 2641, 2850, 3064, 3289, 3519,\n              3759, 4005, 4261, 4522, 4794, 5071, 5358, 5652, 5953, 6263, 6581, 6906, 7239, 7581,\n              7929, 8287, 8650, 9024, 9404, 9793, 10187, 10594, 11003, 11425, 11850, 12288, 12729,\n              13183, 13638, 14109, 14580, 15066, 15553, 16055, 16557, 17075, 17592, 18126, 18660,\n              19208, 19758, 20323, 20888, 21468, 22050, 22645, 23243, 23853, 24467, 25094, 25723,\n              26364, 27011, 27667, 28329, 29001, 29679, 30367, 31061\n        ]\n    \n        if (totalSeats > Totals[Totals.length-1]){\n            console.error(\"total seats >\", Totals[Totals.length-1]);\n        }\n    \n        if (totalSeats < 1) {\n          console.error(\"total seats < 1\");\n        }\n        var rows;\n        var radius;\n        var poslist;\n        var J, R, angle;\n          // Figure out how many rows are needed:\n          for (var i = 0; i < Totals.length; i++) {\n              if (Totals[i] >= totalSeats) {\n                  rows = i + 1;\n                  break\n              }\n          }\n          // Maximum radius of spot is 0.5/rows; leave a bit of space.\n          radius = 0.4/rows;\n    \n          // Create list of centre spots\n          poslist = []\n\n          for (var i = 1; i < rows; i ++) {\n            // Each row can contain pi/(2asin(2/(3n+4i-2))) spots, where n is the number of rows and i is the number of the current row.\n            J = parseInt((totalSeats)/Totals[rows-1]*Math.PI/(2*Math.asin(2.0/(3.0*rows+4.0*i-2.0))));\n            // The radius of the ith row in an N-row diagram (Ri) is (3*N+4*i-2)/(4*N)\n            R = (3.0*rows+4.0*i-2.0)/(4.0*rows);\n            if (J === 1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n            } else {\n              for (var j = 0; j < J; j ++){\n                // The angle to a spot is n.(pi-2sin(r/Ri))/(Ni-1)+sin(r/Ri) where Ni is the number in the arc\n                // x=R.cos(theta) + 1.75\n                // y=R.sin(theta)\n                angle = (j)*(Math.PI-2.0*Math.sin(radius/R))/(J-1.0)+Math.sin(radius/R);\n                poslist.push({\n                  angle,\n                  x: R*Math.cos(angle)+1.75,\n                  y: R*Math.sin(angle)\n                });\n              }\n            }\n          }\n          J=totalSeats-poslist.length\n          R=(7.0*rows-2.0)/(4.0*rows)\n          if (J===1) {\n              poslist.push({\n                angle: Math.PI/2.0,\n                x: 1.75*R,\n                y: R\n              })\n          }\n          else {\n              for (var j = 0; j < J; j ++) {\n                  angle=(j)*(Math.PI-2.0*Math.sin(radius/R))/((J)-1.0)+Math.sin(radius/R)\n                  poslist.push({\n                    angle,\n                    x: R*Math.cos(angle)+1.75,\n                    y: R*Math.sin(angle)\n                  })\n              }\n          }\n\n          poslist.sort(function(a,b) {\n            function value(x) {\n              return x.angle - Math.PI/2;\n            }\n            return value(b) - value(a);\n          })\n\n          function onMouseMove(svg, i){\n            svg\n              .attr(\"opacity\", 0.8);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", .9);\t\t\n            tooltipDiv.html(getTooltipText(chartData[i], i))\n                .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n          }\n          function onMouseOut(svg) {\n            svg\n              .attr(\"opacity\", 1);\n            tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n          }\n          \n          mainSvg.append('text')\n            .attr('x', 175)\n            .attr('y', 175)\n            .attr('style', \"font-size:36px;font-weight:bold;text-align:center;text-anchor:middle;font-family:sans-serif\")\n            .text(totalSeats);\n\n          var Counter=0 //How many spots have we drawn?\n          for (var i = 0; i < chartData.length; i ++){\n            //Make each party's blocks an svg group\n            var partySvg = mainSvg.append('g')\n              .attr(\"fill\", getFillColorFromPartyName(chartData[i].partyInfo.name, i))\n              .attr(\"id\", chartData[i].name);\n            \n            partySvg.on(\"mousemove\", onMouseMove.bind(this, partySvg, i))\t\t\t\t\t\n              .on(\"mouseout\", onMouseOut.bind(this, partySvg))\n            \n            for (var j = 0; j < chartData[i].seats; j++, Counter++) {\n              partySvg.append('circle')\n                .attr('cx', poslist[Counter].x*100.0+5.0)\n                .attr('cy', 100.0*(1.75-poslist[Counter].y)+5.0)\n                .attr('r', radius*100.0)\n            }\n          }\n      }\n      pythonConvertedCode(totalSeats, mainSvg);\n\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./horseshoe.css\";\nimport {Chart} from \"../SeatHorseShoeChart/d3horseshoe\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getSeatsData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseSeatsData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats HorseShoe Chart',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass HorseShoeChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 8\n      }\n\n      fetchDataFromOBJ(this.state, props);\n      this.state[\"numParties\"] = 100;\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      if (this.has_drawn === undefined) {\n        this.draw(this.getContainer(), this.state)\n        this.has_drawn = true;\n      } else {\n        // Hack to prevent drawing horseshoe twice\n        this.has_drawn = undefined;\n      }\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID !== this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n      return (\n          <div className={className(\"horseshoechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID !== -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsData(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default HorseShoeChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, createSvg, createErrorText, PartyColours} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n    options = {};\n  }\n\n  var showPoints = options.showPoints || true;\n  var pointRadius = options.pointRadius || 2;\n  var showPointLabels = options.showPointLabels || false;\n  var pointLabelOffset = options.pointLabelOffset || 4;\n  var showCurrentLine = options.showCurrentLine || true;\n\n  width = 600;\n  height = 400;\n\n  var margin = {\n      top: 20,\n      right: 20,\n      bottom: 50,\n      left: 40\n  }\n\n  var canvas = {\n    top : margin.top,\n    bottom : height - margin.bottom - margin.top,\n    left : margin.left,\n    right : width - margin.right - margin.left\n  }\n\n  //var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n  var svg = createSvg(container, width, height);\n\n  var tooltipDiv = createTooltip(className);\n\n  var mainSvg = svg\n    .append(\"g\")\n\n  var errorText = createErrorText(svg, width / 2, height / 2);\n\n  this.draw = function(originChartData, colorsData) {\n    var chartData = [];\n    var getPartyColour = PartyColours(colorsData);\n\n    if (!originChartData) {\n      errorText.text(\"chart data is not available\");\n      return;\n    }\n\n    var x = d3.scaleLinear()\n      .domain([0, 100])\n      .range([canvas.left, canvas.right]);\n\n    var y = d3.scaleLinear()\n      .domain([0, 100])\n      .range([canvas.bottom, canvas.top]);\n\n    var radiusScale = d3.scaleLinear()\n      .domain([0, 100])\n      .range([0, 100]);\n    \n    mainSvg.selectAll(\"g\").remove();\n\n    var axisContainer = mainSvg\n      .append(\"g\")\n        .classed(\"axes\", true)\n\n    axisContainer.append(\"g\")\n      .attr(\"transform\", \"translate(0, \" + canvas.bottom + \")\")\n      .classed(\"x-axis\", true)\n      .call(d3.axisBottom(x));\n\n    axisContainer.append(\"g\")\n      .attr(\"transform\", \"translate(\" + canvas.left + \", 0)\")\n      .classed(\"y-axis\", true)\n      .call(d3.axisLeft(y));\n\n    axisContainer.append(\"text\")\n      .text(\"% VDs declared\")\n      .attr(\"transform\", \"translate(\" + x(50) + \", \" + y(-10) + \")\")\n      .style(\"fill\", \"white\")\n      .attr(\"text-anchor\", \"middle\")\n      .classed(\"x-axis-text\", \"true\")\n      .classed(\"axis-text\", \"true\")\n\n    axisContainer.append(\"text\")\n      .text(\"% Party support\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", \"rotate(-90) translate(-180, 10)\")\n      .style(\"fill\", \"white\")\n      .classed(\"y-axis-text\", \"true\")\n      .classed(\"axis-text\", \"true\")\n\n    var data = null;\n    var party = null;\n    var lineContainer = null;\n    var legendContainer = null;\n    var eventCaptureContainer = null;\n    var cleaned_party_name = null;\n    var valueline = null;\n\n    originChartData.map(function(party) {\n      valueline = d3.line()\n        .x(function(d) { return x(d.x); })\n        .y(function(d) { return y(d.y); });\n\n      data = party.data;\n      var colour = getPartyColour(party.name);\n\n      lineContainer = mainSvg.append(\"g\")\n        .classed(\"line-container\", true)\n        .classed(party.cleaned_name, true);\n      \n      legendContainer = mainSvg.append(\"g\")\n        .classed(\"ledgends\", true)\n\n      eventCaptureContainer = mainSvg.append(\"g\")\n        .classed(\"event-capture-container\", true)\n        .classed(party.cleaned_name, true);\n\n      lineContainer.append(\"path\")\n        .data([data])\n          .attr(\"class\", \"line\")\n          .attr(\"d\", valueline)\n          .style(\"stroke\", colour)\n\n      if (showPoints) {\n        lineContainer.selectAll(\"circle\")\n          .data(data)\n          .enter()\n          .append(\"circle\")\n            .attr(\"cx\", function(d) { return x(d.x) })\n            .attr(\"cy\", function(d) { return y(d.y) })\n            .attr(\"r\", function(d) { return radiusScale(pointRadius) })\n            .style(\"fill\", colour)\n            .classed(\"graph-points\", true)\n        \n        eventCaptureContainer.selectAll(\"circle\")\n          .data(data)\n          .enter()\n          .append(\"circle\")\n            .attr(\"cx\", function(d) { return x(d.x) })\n            .attr(\"cy\", function(d) { return y(d.y) })\n            .attr(\"r\", function(d) { return radiusScale(pointRadius) * 3 })\n            .style(\"fill\", \"transparent\")\n            .classed(\"graph-points\", true)\n            .on(\"mousemove\", function(d, i) {\t\t\n              console.log(\"tooltip mousemove\");\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(d.y + \"%\")\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n            })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n              console.log(\"tooltip mouseout\");\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 0);\t\n            })\n      }\n\n      if (showPointLabels) {\n        lineContainer.selectAll(\"text\")\n          .data(data)\n          .enter()\n          .append(\"text\")\n            .text(function(d) { return d.y})\n            .attr(\"transform\", function(d) {\n              return \"translate(\" +  x(d.x - radiusScale(pointRadius / 2)) + \", \" + y(d.y + pointLabelOffset) + \")\"\n            })\n            .classed(\"graph-labels\", true)\n      }\n\n      // if (options.showLegend) \n      {\n        var parties = [];\n        var partyAbbrs = [];\n        var partyIecIds = [];\n        originChartData.forEach((partyInfo) => {\n          var party = partyInfo.name;\n          if (partyIecIds.indexOf(partyInfo.iecId) === -1 && partyInfo.iecId) {\n              parties.push(party);\n              partyAbbrs.push(partyInfo.abbreviation)\n              partyIecIds.push(partyInfo.iecId);\n          }\n        })\n        \n        function getLegendXY(i) {\n          \n          var xydata = [30 + (i%5)*100, height - 30 + parseInt(i/5) * 40];\n          if (parties.length < 6) {\n            xydata[0] += 100 * ( 6 - parties.length) / 2;\n          }\n          return xydata;\n        }\n        legendContainer.selectAll(`.${className(\"legend\")}`).remove();\n        var legends = legendContainer.selectAll(`.${className(\"legend\")}`)\n            .data(parties)\n            .enter()\n            .append('g')\n            .attr(\"class\", className(\"legend\"))\n            .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n        legends\n            .append(\"rect\")\n            .attr('width', 10)\n            .attr('height', 10)\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr(\"fill\", (party, i) => {\n                return getPartyColour(party);\n            })\n        legends.append('text')\n            .attr('x', 30)\n            .attr('y', 10)\n            .style('font-size', '12px')\n            .text((party, idx) => partyAbbrs[idx])\n      }\n\n    })\n\n\n\n\n\n     /*\n\n      function getTooltipText(d, i) {\n          return d.name;\n      }\n      */\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./voteprediction.css\";\nimport {Chart} from \"../VotePredictionLineChart/d3voteprediction\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesPredictionData,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesPredictionData,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Votes prediction line charts',\n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass VotePredictionLineChart extends Component {\n    constructor(props) {\n      this._isMounted = false;\n      super(props);\n      this.state = {\n        numParties: 100,\n        eventDescription: \"2019 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 8\n      }\n\n      fetchDataFromOBJ(this.state, props);\n      this.state[\"numParties\"] = 100;\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      this._isMounted = true;\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state);\n    }\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n\n      // TODO not sure what to change race-for-seats-horseshoe.... to\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-horseshoe-chart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      if (this._isMounted) {\n        var newState = event.detail;\n        if (this.chart)\n          this.chart.destroy();\n        this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n        this.setState(newState)\n      }\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor,\n        componentID\n      } = this.state;\n\n      var d = new Date();\n      var hr = d.getHours();\n      var min = d.getMinutes();\n      if (min < 10) {\n          min = \"0\" + min;\n      }\n\n      var date = d.getDate();\n      var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      var month = months[d.getMonth()];\n      var year = d.getFullYear();\n\n      var currentTimeText = hr + \":\" + min + \" on \" + date + \" \" + month + \" \" + year;\n\n      return (\n          <div className={className(\"votepredictionlinechart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {\n                componentID != -1000 && <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            }\n            <div className={cn(\"vote-prediction-title\")}>\n              <div className={cn(\"projected-turnout\")}> \n                Projected turnout: <span ref=\"currentCountingProg\">10%</span>\n              </div>\n              <div className={cn(\"prediction-time\")}> \n                Predictions at <span ref=\"currentCountingProg\">{currentTimeText}</span>\n              </div>\n            </div>\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n              <div className={cn(\"CSIR-bottom-label\")}><b>CSIR's election prediction  model</b><br/>The CSIR produces predictions of the final results of the election based on a statistical model. The model can provide scientific predictions even if only a small number of voting districts have been declared and therefore can give a reliable early indication of what the final percentages for each party and the voter turnout rates would be.</div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var predictionDataLoader = getVotesPredictionData(props);\n      var dataLoaders = [predictionDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var predictionData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, predictionData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesPredictionData(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default VotePredictionLineChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, createSvg, formatPartyName, formatClassNameFromString} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 250;\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 50;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    // TODO not sure what options.viewBox is below - don't see it being used anywhere\n    /*\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n    */\n\n    var svg = createSvg(container, width + XaxisOffset, height + YaxisOffset);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n\n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n    svg.selectAll(\".topLabel\").remove();\n    svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n    if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n    } else {\n        errorText.text(\"\");\n    }\n    var partyColorByName = {};\n    var partyAbbrByName = {};\n    if (colorsData && colorsData[\"data\"][\"allParties\"][\"edges\"]) {\n      colorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n        partyColorByName[edge.node.name] = edge.node.colour;\n        partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n      })\n    }   \n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.eventDescription));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = Math.min(100, d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) * 1.5);\n      }\n      y.domain(minMaxY);\n\n      var availableParties = \n \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(4)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n\n      svg.selectAll(`.bar-group`).remove();\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.eventDescription)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.eventDescription) + x.bandwidth()*1/20}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var eventDescription = groupChartData[i].eventDescription;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*9/10])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(eventDescription)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n\n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n          \n          var parties = [];\n          var partyIecIds = [];\n          groupChartData.forEach(({data: chartData}) => {\n            chartData.forEach(({partyInfo}) => {\n              var party = partyInfo.name;\n              if (partyIecIds.indexOf(partyInfo.iecId) == -1) {\n                  parties.push(party);\n                  partyIecIds.push(partyInfo.iecId);\n              }\n            })\n          })\n          \n          function getLegendXY(i) {\n              return [XaxisOffset + (i%5)*100, height + 30 + parseInt(i/5) * 40];\n          }\n          svg.selectAll(`.${className(\"legend\")}`).remove();\n          var legends = svg.selectAll(`.${className(\"legend\")}`)\n              .data(parties)\n              .enter()\n              .append('g')\n              .attr(\"class\", className(\"legend\"))\n              .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n          legends\n              .append(\"rect\")\n              .attr('width', 10)\n              .attr('height', 10)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr(\"fill\", (party, i) => {\n                  return getFillColorFromPartyName(party);\n              })\n          legends.append('text')\n              .attr('x', 30)\n              .attr('y', 10)\n              .style('font-size', '12px')\n              .text(party => partyAbbrByName[party])\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../SplitNatProv/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForAllEvents,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesDataForAllEvents,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: false\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        numPartiesSplitNatProv: 3,\n        eventDescriptionsSplitNatProv: [\n          // \"National Elections 1999\",\n          // \"Provincial Elections 1999\",\n          // \"14 Apr 2004 National Election\",\n          // \"14 Apr 2004 Provincial Election\",\n          \"22 Apr 2009 National Election\",\n          \"22 Apr 2009 Provincial Election\",\n          \"2014 National Election\",\n          \"2014 Provincial Election\",\n          // \"2019 NATIONAL ELECTION\",\n          // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"province\",\n        provinceName: \"Western Cape\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 18\n      }\n\n      console.log(\"SplitNatProv state and props\", this.state, props)\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForAllEvents(props);\n      var dataLoaders = [votesDataLoader];\n\n      chartOptions.topLabel = `${getRegionName(props)} Race for Votes - Split (Nat/Prov)`;\n      if (this.state.componentID == -1000) {\n        chartOptions.topLabel = ``;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesDataForAllEvents(data, props);\n        // console.log(\"SplitNatProvProps\", props);\n        // console.log(\"SplitNatProvData\", data);\n        // console.log(\"SplitNatProvParsed\", chartData);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport MetisMenu from 'react-metismenu';\n\nimport config from '../../config'\nimport styles from \"./navbar.css\";\nimport events from \"../../events\";\nimport {\n    getProvincesData,\n    getMetrosData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent,\n    fetchDataFromOBJ\n} from \"../../utils\";\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cssPrefix(originName) {\n    return config.CSS_PREFIX+originName;\n}\n\nvar provincesData = getProvincesData();\nvar metrosData = getMetrosData();\n\nclass CustomLink extends React.Component {\n    constructor() {\n      super();\n  \n      this.onClick = this.onClick.bind(this);\n    }\n  \n    onClick(e) {\n      if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\n      else {\n        this.props.activateMe({\n          newLocation: this.props.to,\n          selectedMenuLabel: this.props.label,\n        });\n      }\n    }\n  \n    render() {\n      if (this.props.hasSubMenu) {\n        return (\n          <div className=\"metismenu-link\" onClick={this.onClick}>\n            {this.props.children}\n          </div>\n      )} else {\n        return (\n          <div className=\"metismenu-link metismenu-end\" onClick={this.onClick}>\n            {this.props.children}\n          </div>\n        );\n      }\n    }\n  };\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventDescription: \"2019 National Election\",\n            nationalEventDescription: \"2019 National Election\",\n            provincialEventDescription: \"2019 Provincial Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            comp: \"Race for Votes\",\n            activeLinkId: ''\n        }\n\n        fetchDataFromOBJ(this.state, props);\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        this.handleNavBarSelection = this.handleNavBarSelection.bind(this);\n    }\n\n    componentDidMount() {\n        if(!document.getElementById('navbarcss')) {\n            var link = document.createElement('link');\n            link.id = 'navbarcss';\n            link.rel = 'stylesheet';\n            link.href = config.DOMAIN + '/navbar.css';\n            document.head.appendChild(link);\n        }\n\n        if(!document.getElementById('font-awesome')) {\n            var link = document.createElement('link');\n            link.id = 'font-awesome';\n            link.rel = 'stylesheet';\n            link.href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\";\n            document.head.appendChild(link);\n        }\n\n        this.refs.navbar.addEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentWillUnmount() {\n        this.refs.navbar.removeEventListener(\"click\", this.handleNavBarSelection);\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleNavBarSelection(e) {\n        if (e.target.className.indexOf(\"metismenu-link\") == -1) {\n            return;\n        }\n        var iconClass = e.target.childNodes[0].className;\n        var classList = iconClass.split(' ');\n        var lastClass = classList[classList.length - 1];\n        console.log(\"handleNavBarSelection\", lastClass);\n        var passInfo = lastClass.split('-');\n        var enableMap = true;\n        var enableTurnoutProgressSpoilt = true;\n\n        var eventDescription, electionType, regionType, selectionData = {}, chartType = \"\";\n        var activeLinkId = passInfo.slice(1, passInfo.length).join('-');\n\n        if (passInfo[1] == '1') {\n            eventDescription = this.state.nationalEventDescription;\n            regionType = \"national\";\n            if (passInfo[2] == '1') {\n                switch (passInfo[3]) {\n                    case '1':\n                        chartType = \"votes-default\";\n                        break;\n                    case '2':\n                        chartType = \"votes-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"votes-predictions\";\n                        enableMap = false;\n                        enableTurnoutProgressSpoilt = false;\n                        if (passInfo[4] > 0) {\n                            regionType = \"province\";\n                            selectionData = provincesData[passInfo[4]-1];\n                        }\n                        break;\n                    case '4':\n                        chartType = \"votes-progress\";\n                        break;\n                    case '5':\n                        chartType = \"votes-turnout\";\n                        break;\n                    case '6':\n                        chartType = \"votes-myvd\";\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[2] == '2') {\n                switch (passInfo[3]) {\n                    case '1':\n                        chartType = \"seats-default\";\n                        enableMap = false;\n                        break;\n                    case '2':\n                        chartType = \"seats-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"seats-electeds\";\n                        break;\n                    case '4':\n                        chartType = \"seats-women\";\n                        break;\n                    case '5':\n                        chartType = \"seats-age\";\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[3] == '4') {\n                // Main page for National Assembly\n                chartType = \"votes-default\";\n            } else {\n                return;\n            }\n        } else if (passInfo[1] == '2') {\n            eventDescription = this.state.provincialEventDescription;\n            regionType = \"province\";\n            selectionData = provincesData[passInfo[2]];\n            if (passInfo[3] == '1') {\n                switch (passInfo[4]) {\n                    case '1':\n                        chartType = \"votes-default\"; // done\n                        break;\n                    case '2':\n                        chartType = \"votes-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"votes-progress\"; // done\n                        break;\n                    case '4':\n                        chartType = \"votes-turnout\";// done\n                        break;\n                    case '5':\n                        chartType = \"votes-split\";\n                        break;\n                    case '6':\n                        chartType = \"votes-predictions\";\n                        enableMap = false;\n                        enableTurnoutProgressSpoilt = false;\n                        break;\n                    default:\n                        return;\n                }\n            } else if (passInfo[3] == '2') {\n                switch (passInfo[4]) {\n                    case '1':\n                        chartType = \"seats-default\"; // done\n                        break;\n                    case '2':\n                        chartType = \"seats-comparisons\";\n                        break;\n                    case '3':\n                        chartType = \"seats-electeds\";\n                        break;\n                    case '4':\n                        chartType = \"seats-women\";\n                        break;\n                    case '5':\n                        chartType = \"seats-age\";\n                        break;\n                    default:\n                        return;\n                }\n\n            } else if (passInfo[3] == '4') {\n                // Main page for National Legislature\n                regionType = \"national\";\n                chartType = \"votes-default\";\n            } else {\n                return;\n            }\n        } else if (passInfo[1] == '3') { // metros\n            eventDescription = this.state.nationalEventDescription;\n            regionType = \"municipality\"\n            selectionData = metrosData[passInfo[2]];\n            chartType = \"votes-default\";\n        } else {\n            return;\n        }\n\n        if (!chartType)\n            return;\n\n        if (eventDescription)\n            if (eventDescription.toLowerCase().indexOf(\"provincial\") > 0) {\n                electionType = \"provincial\"\n            }\n        else {\n            electionType = \"national\"\n        }\n\n        e.preventDefault();\n        var newState;\n        if (regionType == \"national\") {\n            newState = {\n                regionType: regionType\n            };\n            // if (this.state.regionType == newState.regionType \n            //     && this.state.comp == chartType)\n            //     return;\n        } else if (regionType == \"province\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.name\n            };\n            // if (this.state.regionType == newState.regionType \n            //     && this.state.provinceName == newState.provinceName \n            //     && this.state.comp == chartType)\n            //     return;\n        } else if (regionType == \"municipality\") {\n            newState = {\n                regionType: regionType,\n                provinceName: selectionData.provinceName,\n                muniName: selectionData.muniName,\n                muniCode: selectionData.muniCode,\n            }; \n            // if (this.state.regionType == newState.regionType \n            //     && this.state.provinceName == newState.provinceName\n            //     && this.state.muniName == newState.muniName\n            //     && this.state.comp == chartType)\n            //     return;\n        }\n        newState.eventDescription = eventDescription;\n        newState.electionType = electionType\n        newState.comp = chartType;\n        newState.enableMap = enableMap;\n        newState.enableTurnoutProgressSpoilt = enableTurnoutProgressSpoilt;\n\n        console.log(\"newState\", newState);\n\n        if (newState.comp == \"votes-myvd\") {\n            newState.regionType = \"municipality-vd\";\n            newState.iecId = \"\";\n        }\n\n        if (newState.comp == \"seats-electeds\" || newState.comp == \"seats-women\" || newState.comp == \"seats-age\") {\n            triggerCustomEvent(events.SEATS_ELECTEDS_EVENT, newState);\n            return;\n        }\n\n        triggerCustomEvent(events.QUICK_RESULTS_PREVIEW, newState);\n        // triggerCustomEvent(events.REGION_CHANGE, newState);\n        // triggerCustomEvent(events.MAP_PREVIEW, newState);\n\n        newState.activeLinkId = activeLinkId;\n        this.setState(newState);\n    }\n      \n    render () {\n        var content = [\n            {\n                label: 'National Assembly',\n                icon: `1-3-4-1`,\n                content: [\n                    {\n                        label: \"Race for votes\",\n                        content: [\n                            {\n                                icon: `1-1-1`,\n                                label: `National assembly`,\n                                to: `1-1-1`,\n                            },\n                            {\n                                icon: `1-1-2`,\n                                label: `Comparisons`,\n                                to: `1-1-2`,\n                            },\n                            {\n                                label: `CSIR predictions`,\n                                content: [\n                                    {\n                                        icon: `1-1-3-0`,\n                                        label: `National Assembly`,\n                                        to: `1-1-3-0`,\n                                    },\n                                    ...provincesData.map((province, i) => {\n                                        return {\n                                            icon: `1-1-3-${i+1}`,\n                                            label: province.name,\n                                            to: `1-1-3-${i+1}`,\n                                        }\n                                    })\n                                ]\n                            },\n                            {\n                                icon: `1-1-4`,\n                                label: `Counting progress`,\n                                to: `1-1-4`,\n                            },\n                            {\n                                icon: `1-1-5`,\n                                label: `Turnout`,\n                                to: `1-1-5`,\n                            },\n                            {\n                                icon: `1-1-6`,\n                                label: `My voting District`,\n                                to: `1-1-6`,\n                            },\n                            {\n                                label: `Metros`,\n                                icon: `3-2`, // Setting default metros view to JHB\n                                content: metrosData.map((metro, i) => {\n                                    return {\n                                        icon: `3-${i}`,\n                                        label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                                        to: `3-${i}`,\n                                    }\n                                })\n                            },\n                        ]\n                    },\n                    {\n                        label: \"Race for seats\",\n                        content: [\n                            {\n                                icon: `1-2-1`,\n                                label: `National assembly`,\n                                to: `1-2-1`\n                            },\n                            {\n                                icon: `1-2-2`,\n                                label: `Comparisons`,\n                                to: `1-2-2`,\n                            },\n                            {\n                                icon: `1-2-3`,\n                                label: `Electeds`,\n                                to: `1-2-3`,\n                            },\n                            // {\n                            //     icon: `1-2-4`,\n                            //     label: `Women`,\n                            //     to: `1-2-4`,\n                            // },\n                            // {\n                            //     icon: `1-2-5`,\n                            //     label: `Age`,\n                            //     to: `1-2-5`,\n                            // }\n                        ]\n                    }\n                ]\n            },\n            {\n                label: 'Provincial Legislature',\n                icon: `2-3-4-1`,\n                content: provincesData.map((province, i) => {\n                    return {\n                        label: province.name,\n                        content: [\n                            {\n                                label: \"Race for votes\",\n                                content: [\n                                    {\n                                        icon: `2-${i}-1-1`,\n                                        label: `Provincial legislature`,\n                                        to: `2-${i}-1-1`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-2`,\n                                        label: `Comparisons`,\n                                        to: `2-${i}-1-2`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-3`,\n                                        label: `Counting progress`,\n                                        to: `2-${i}-1-3`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-4`,\n                                        label: `Turnout`,\n                                        to: `2-${i}-1-4`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-5`,\n                                        label: `Split (Nat/Prov)`,\n                                        to: `2-${i}-1-5`,\n                                    },\n                                    {\n                                        icon: `2-${i}-1-6`,\n                                        label: `CSIR Predictions`,\n                                        to: `2-${i}-1-6`,\n                                    },\n                                ]\n                            },\n                            {\n                                label: \"Race for seats\",\n                                content: [\n                                    {\n                                        icon: `2-${i}-2-1`,\n                                        label: `Provincial legislature`,\n                                        to: `2-${i}-2-1`,\n                                    },\n                                    {\n                                        icon: `2-${i}-2-2`,\n                                        label: `Comparisons`,\n                                        to: `2-${i}-2-2`,\n                                    },\n                                    {\n                                        icon: `2-${i}-2-3`,\n                                        label: `Electeds`,\n                                        to: `2-${i}-2-3`,\n                                    },\n                                    // {\n                                    //     icon: `2-${i}-2-4`,\n                                    //     label: `Women`,\n                                    //     to: `2-${i}-2-4`,\n                                    // },\n                                    // {\n                                    //     icon: `2-${i}-2-5`,\n                                    //     label: `Age`,\n                                    //     to: `2-${i}-2-5`,\n                                    // }\n                                ]\n                            }\n                        ]\n                    }\n                })\n            },\n            // {\n            //     icon: '',\n            //     label: 'Metros',\n                // content: metrosData.map((metro, i) => {\n                //     return {\n                //         icon: `4-${i}`,\n                //         label: metro.muniName.split(\"-\")[1].split(\"[\")[0],\n                //         to: `4-${i}`,\n                //         // content: toShowCharts.map((toshowchart, chartIdx) => {\n                //         //     return {\n                //         //         icon: `4-${i}-${chartIdx}`,\n                //         //         label: toshowchart,\n                //         //         to: `4-${i}-${chartIdx}`,\n                //         //     }\n                //         // })\n                //     }\n                // })\n            // }\n        ];\n\n        \n        return (\n            <div className={[className(cssPrefix(\"menu-widget\")), cssPrefix(\"menu-widget\")].join(\" \")} ref=\"navbar\">\n                <MetisMenu activeLinkId={this.state.activeLinkId} content={content} LinkComponent={CustomLink}/>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport styles from \"./quickResultsWidget.css\";\n\nimport config from '../../config'\nimport events from \"../../events\";\n\nimport BarChart from '../BarChart/barchart';\n\nimport ProgressVotesPieChart from '../ProgVotesCountPiechart/piechart';\n\nimport RaceForSeatDonut from '../RaceForSeatDonut/piechart';\nimport VoteCompBarchart from '../VoteCompBarchart/barchart';\nimport SeatCompBarchart from '../SeatCompBarchart/barchart';\nimport SeatHorseShoeChart from \"../SeatHorseShoeChart/horseshoe\";\nimport VotePredictionLineChart from \"../VotePredictionLineChart/voteprediction\";\n\nimport SpoiltBarChart from '../SpoiltBarchart/barchart';\nimport SplitNatProvChart from '../SplitNatProv/barchart';\n\nimport TurnoutBarchart from '../TurnoutBarchart/barchart';\nimport TurnoutMap from '../TurnoutMap/map';\n\nimport NavBar from '../NavBar/navbar';\nimport Map from '../Map/map';\n\nimport {saveAs} from \"file-saver\";\n\nimport {\n    getSpoiltData,\n    getTurnoutDataForOneEvent,\n    getProgressVotesCount,\n    getVotesDataM,\n    getSeatsData\n} from \"../../api\";\n\nimport {\n    getRegionName,\n    getRegionName2,\n    getRegionName3,\n    triggerCustomEvent,\n    fetchDataFromOBJ,\n    handleRegionChange,\n\n    parseSpoiltVotesData,\n    parseTurnoutDataForOneEvent,\n    parseProgressVotesCount,\n    parseVotesData,\n    parseSeatsData,\n} from \"../../utils\";\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n    return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n    return className(config.CSS_PREFIX + originName);\n}\n\nclass QuickResultsWidget extends Component {\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2019 National Election\",\n            nationalEventDescription: \"2019 National Election\",\n            provincialEventDescription: \"2019 Provincial Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"65010035\", // regionIecId\n            comp: \"votes-default\",\n            stylesheetFor: \"web\",\n            componentID: 5,\n            enableBarChart: true,\n            enableMap: true,\n            enableTurnoutProgressSpoilt: true,\n\n            partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n            partyIecIds: [null, null, null, null],        \n            eventDescriptions: {\n                national : [\n                    \"2019 NATIONAL ELECTION\",\n                    \"2014 National Election\",\n                    \"22 Apr 2009 National Election\",\n                    \"14 Apr 2004 National Election\",\n                    //\"National Elections 1999\",\n                ],\n                provincial : [\n                    // \"Provincial Elections 1999\",\n                    \"2019 PROVINCIAL ELECTION\",\n                    \"2014 Provincial Election\",\n                    \"22 Apr 2009 Provincial Election\",\n                    \"14 Apr 2004 Provincial Election\",\n                ]\n            },\n            eventDescriptionsSplitNatProv: [\n                // \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                // \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                \"2014 Provincial Election\",\n                // \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            currentTurnout: 0,\n            currentCountingProg: 0,\n            currentSpoiltVotes: 0\n        }\n        fetchDataFromOBJ(this.state, props);\n\n        this.refreshIntervalID = 0;\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handleRegionChange = handleRegionChange.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        var self = this;\n        this.refreshIntervalID = setInterval(() => {\n            self.fetchCurrentResultData();\n        }, dataRefreshTime);\n\n        document.addEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.addEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n\n        document.addEventListener(events.SEATS_ELECTEDS_EVENT, this.handleSeatsElectedsEvent); // \"seats-electeds-event\"\n\n        this.fetchCurrentResultData();\n    }\n  \n    componentWillUnmount() {\n        this._isMounted = false;\n        document.removeEventListener(events.EXPORT_SUPERWIDGET_PNG, this.exportAsPNG);\n        document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n        document.removeEventListener(events.QUICK_RESULTS_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      this.fetchCurrentResultData()\n    }\n\n    handleSeatsElectedsEvent(event) {\n    }\n\n    fetchCurrentResultData() {\n        var self = this;\n        var newProps = JSON.parse(JSON.stringify(this.state));\n        var {comp, iecId} = this.state;\n\n        function dataLoadCallback(values) {\n            var spoiltData = values[0];\n            var turnoutData = values[1];\n            var progVotesData = values[2];\n\n            var parsedSpoiltData = parseSpoiltVotesData(spoiltData, newProps);\n            var parsedTurnoutData = parseTurnoutDataForOneEvent(turnoutData, newProps);\n            var parsedProgVotesData = parseProgressVotesCount(progVotesData, newProps);\n\n            var newState;\n            if (parsedTurnoutData[0] && parsedProgVotesData[0] && parsedSpoiltData[1]) {\n                newState = {            \n                    currentTurnout: parsedTurnoutData[0].percVoterTurnout,\n                    currentCountingProg: parsedProgVotesData[0].percent,\n                    currentSpoiltVotes: parsedSpoiltData[1].percent\n                };\n            } else {\n                newState = {            \n                    currentTurnout: 0,\n                    currentCountingProg: 0,\n                    currentSpoiltVotes: 0\n                };\n            }\n\n            if (comp == 'votes-comparisons') {\n                var votesData = values[3];\n                var parsedVotesData = parseVotesData(votesData, newProps);\n                newState.partyAbbrs = parsedVotesData.map(voteItem => voteItem.name);\n                newState.partyIecIds = parsedVotesData.map(voteItem => voteItem.iecId);\n            } else if (comp == 'seats-comparisons') {\n                var seatsData = values[3];\n                var parsedSeatsData = parseSeatsData(seatsData, newProps);\n                newState.partyAbbrs = parsedSeatsData.map(seatItem => seatItem.name);\n                newState.partyIecIds = parsedSeatsData.map(seatItem => seatItem.iecId);\n            }\n\n            if (newState.partyIecIds && newState.partyIecIds.join(\" \") != self.state.partyIecIds.join(\" \")) {\n                self.setState(newState);\n            } else {\n                if (self.refs.currentTurnout) {\n                    self.refs.currentTurnout.innerHTML = newState.currentTurnout + \"%\";\n                }\n                if(self.refs.currentCountingProg) {\n                    self.refs.currentCountingProg.innerHTML = newState.currentCountingProg + \"%\";\n                } \n                if (self.refs.curCountingProg && self.refs.curCountingProg.innerHTML  && self._isMounted) {\n                    console.log(\"self.refs.curCountingProg\", self.refs.curCountingProg, self._isMounted);\n                    // self.refs.curCountingProg.innerHTML = newState.currentCountingProg + \"%\";\n                }\n                if (self.refs.currentSpoiltVotes) {\n                    self.refs.currentSpoiltVotes.innerHTML = newState.currentSpoiltVotes + \"%\";\n                }\n            }\n        }\n\n        if (newProps.regionType == \"municipality-vd\" && (!iecId || !iecId.length)) {\n            self.refs.currentTurnout.innerHTML = \"0%\";\n            self.refs.currentCountingProg.innerHTML = \"0%\";\n            self.refs.currentSpoiltVotes.innerHTML = \"0%\";\n            return;\n        }\n\n        // newProps.eventDescription = \"2019_mock1\";\n        var dataLoaders = [\n            getSpoiltData(newProps), \n            getTurnoutDataForOneEvent(newProps),\n            getProgressVotesCount(newProps),\n        ];\n\n        if (comp == 'votes-comparisons') {\n            dataLoaders.push(getVotesDataM(newProps));\n        }\n        if (comp == 'seats-comparisons') {\n            dataLoaders.push(getSeatsData(newProps));\n        }\n\n        Promise.all(dataLoaders)\n            .then(dataLoadCallback)\n            .catch(error => console.error(\"catched error\", error));\n    }\n\n    exportAsPNG(event) {\n        var targetState = event.detail;\n        if (targetState.componentID != this.state.componentID)\n          return;\n        var {\n            comp\n        } = this.state;\n        var self = this;\n        var zipfileName = `quick-results-widget-${comp.replace(/\\s/gi, '-')}(${getRegionName(self.state)})`;\n        var imageLoadPromises = [];\n        if (comp == 'votes-comparisons' || comp == 'seats-comparisons') {\n            imageLoadPromises = [\n                ...this.barchartInstances.map(instance => instance.exportAsPNGUri()),\n                this.mapInstance.exportAsPNGUri()\n            ];\n        } else {\n            imageLoadPromises = [\n                this.barchartInstance.exportAsPNGUri(), \n                this.mapInstance.exportAsPNGUri()\n            ];\n        }\n        Promise.all(imageLoadPromises).then(values => {\n            var zip = new window.JSZip();\n\n            var imgs = zip.folder(zipfileName);\n            values.forEach((element, idx) => {\n                imgs.file(`image${idx+1}.png`, element, {base64: true});\n            });\n\n            zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n                saveAs(content, `${zipfileName}.zip`);\n            });\n        }).catch(error => {\n            console.error(\"export error\", error);\n        })\n    }\n\n    handlePreviewEvent(event) {\n\n      if (this._isMounted) {\n        var newState = event.detail;\n        if (newState.regionType == \"national\" && this.state.comp == \"votes-split\") {\n            newState.regionType = \"province\";\n            newState.provinceName = this.state.provinceName || \"Western Cape\";\n        }\n        this.setState(newState);\n\n        var triggerState = JSON.parse(JSON.stringify(newState));\n        triggerState.componentID = -1000;\n\n        triggerCustomEvent(events.CHART_PREVIEW, triggerState);\n        triggerCustomEvent(events.MAP_PREVIEW, triggerState);\n      }\n    };\n\n    renderTurnoutProgressSpoilt() {\n        var {\n            currentTurnout,\n            currentCountingProg,\n            currentSpoiltVotes,\n        } = this.state;\n\n        return (\n            <div className={cn(\"current-progress\")}>\n                <div className={cn(\"current-turnout\")}>\n                    <div>Turnout</div>\n                    <div ref=\"currentTurnout\">{currentTurnout}%</div>\n                </div>\n                <div className={cn(\"current-counting-progress\")}>\n                    <div>Counting Progress</div>\n                    <div ref=\"currentCountingProg\">{currentCountingProg}%</div>\n                </div>\n                <div className={cn(\"current-spoilt-votes\")}>\n                    <div>Spoilt Votes</div>\n                    <div ref=\"currentSpoiltVotes\">{currentSpoiltVotes}%</div>\n                </div>\n            </div>\n        )\n    }\n\n    renderQuickResultsTitle() {\n        var {\n            comp,\n            currentCountingProg\n        } = this.state;\n        var self = this;\n        if (comp == 'votes-default') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    RACE FOR VOTES: <span className=\"regionName\">{getRegionName2(self.state)}</span>\n                </div>\n            );\n        }\n        if (comp == 'seats-default') {\n            return (\n                <div className={className(\"quick-results-title\")+\" \"+className(\"race-for-seats\")}>\n                    RACE FOR SEATS: <span className=\"regionName\">{getRegionName(self.state)}</span>(#SEATS)\n                </div>\n            );\n        }\n        if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    RACE FOR VOTES: TURNOUT - {getRegionName3(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-progress') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    COUNTING PROGRESS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-comparisons') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    VOTES COMPARISONS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'seats-comparisons') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    SEATS COMPARISONS: {getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-myvd') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    Voting District //{getRegionName(self.state)}\n                </div>\n            );\n        }\n        if (comp == 'votes-split') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                    {getRegionName(self.state)} Race for Votes - Split (Nat/Prov)\n                </div>\n            )\n        }\n        if (comp == 'votes-predictions') {\n            return (\n                <div className={className(\"quick-results-title\")}>\n                     CSIR predictions for final results, with <span ref=\"curCountingProg\">{currentCountingProg}%</span> VDs counted\n                </div>\n            )\n        }\n        return null;\n    }\n\n    renderMap() {\n        var {\n            comp,\n            iecId,\n            muniCode\n        } = this.state;\n        var mapState = JSON.parse(JSON.stringify(this.state));\n        if (comp == 'votes-myvd') {\n            if (iecId && iecId.length && muniCode && muniCode.length) {\n                mapState.disableNavigation = true;\n                return (\n                    <div className={className(\"map-container\")}>\n                        <Map\n                            ref={instance => { this.mapInstance = instance; }}\n                            key={comp}\n                            {...mapState}\n                            componentID={-1000}\n                        />\n                    </div>\n                );\n            }\n            return null;\n        }\n        if (comp == 'votes-split') {\n            mapState.disableNavigation = true;\n            mapState.regionType = \"national\";\n            return (\n                <div className={className(\"map-container\")}>\n                    <Map\n                        ref={instance => { this.mapInstance = instance; }}\n                        key={comp}\n                        {...mapState}\n                        componentID={-1000}\n                    />\n                </div>\n            );\n        } else if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"map-container\")}>\n                    <TurnoutMap\n                        ref={instance => { this.mapInstance = instance; }}\n                        key={comp}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        } else {\n            return (\n                <div className={className(\"map-container\")}>\n                    <Map\n                        ref={instance => { this.mapInstance = instance; }}\n                        key={comp}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n    }\n\n    renderBarchart() {\n        var {\n            comp,\n            partyIecIds,\n            partyAbbrs,\n            iecId\n        } = this.state;\n        if (comp == 'votes-default' || (comp == 'votes-myvd' && iecId && iecId.length)) {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <BarChart \n                        key={comp}\n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state} \n                        componentID={-1000}/>\n                </div>\n            );\n        }\n        if (comp == 'seats-default') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <SeatHorseShoeChart\n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-turnout') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <TurnoutBarchart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-progress') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <ProgressVotesPieChart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-predictions') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <VotePredictionLineChart\n                        ref={instance => { this.barchartInstance = instance; }}\n                        {...this.state}\n                        componentID={-1000} />\n                </div>\n            );\n        }\n        if (comp == 'votes-comparisons') {\n            var {numParties} = this.state;\n            this.barchartInstances = new Array(numParties);\n            return (\n                <div className={className(\"barchart-container\")}>\n                    {\n                        partyIecIds.map((partyIecId, partyIdx) => {\n                            return <VoteCompBarchart \n                                ref={instance => { this.barchartInstances[partyIdx] = instance; }} \n                                key={partyIdx}\n                                {...this.state}\n                                partyAbbr={partyAbbrs[partyIdx]}\n                                partyIecId={partyIecId}\n                                componentID={-1000}\n                            />\n                        })\n                    }\n                </div>\n            );\n        }\n        if (comp == 'seats-comparisons') {\n            this.barchartInstances = new Array(numParties);\n            return (\n                <div className={className(\"barchart-container\")}>\n                    {\n                        partyIecIds.map((partyIecId, partyIdx) => {\n                            return <SeatCompBarchart \n                                ref={instance => { this.barchartInstances[partyIdx] = instance; }} \n                                key={partyIdx}\n                                {...this.state}\n                                partyAbbr={partyAbbrs[partyIdx]}\n                                partyIecId={partyIecId}\n                                componentID={-1000}\n                            />\n                        })\n                    }\n                </div>\n            );\n        }\n        if (comp == 'votes-split') {\n            return (\n                <div className={className(\"barchart-container\")}>\n                    <SplitNatProvChart \n                        ref={instance => { this.barchartInstance = instance; }} \n                        {...this.state}\n                        componentID={-1000}\n                    />\n                </div>\n                \n            )\n        }\n        return null;\n    }\n\n    renderMyVDEnterForm() {\n        var {comp} = this.state;\n        if (comp != 'votes-myvd') {\n            return null;\n        }\n        return (\n            <div className=\"voting-district-enter-form\">\n                <input ref=\"vdInput\" type=\"text\" placeholder=\"Enter your VD number\"/>\n                <button onClick={this.onShowVDResult.bind(this)}> Show Result</button>\n                <p className=\"iec-link\">Look up your voting district number at the <a href=\"http://maps.elections.org.za/vsfinder/\">IEC</a>.</p>\n            </div>\n        )\n    }\n\n    onShowVDResult() {\n        if (this.refs.vdInput.value.length == 0) {\n            alert(\"please enter valid vd number\");\n            return;\n        }\n        var newState = {\n            regionType: \"municipality-vd\",\n            iecId: this.refs.vdInput.value,\n            muniCode: \"\"\n        }\n        triggerCustomEvent(events.REGION_CHANGE, newState);\n    }\n\n    render() {\n        var {\n            stylesheetFor,\n        } = this.state;\n\n        var components = [];\n        components.push(this.renderQuickResultsTitle())\n        if (this.state.enableTurnoutProgressSpoilt) {\n            components.push(this.renderTurnoutProgressSpoilt())\n        }\n        components.push(this.renderMyVDEnterForm())\n\n        if (this.state.enableBarChart)\n          components.push(this.renderBarchart())\n\n        if (this.state.enableMap)\n          components.push(this.renderMap())\n\n        return (\n            <div className={className(\"quickresultswidget\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n                <div className={cn(\"row\")}>\n                    <div className={cn(\"col-md-4\")+\" \"+className(\"main-left-part\")}>\n                        <NavBar {...this.state}/>\n                    </div>\n                    <div className={cn(\"col-md-8\")+\" \"+className(\"main-right-part\")}>\n                        {components}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuickResultsWidget;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nimport config from \"../../config\"\n\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", options.viewBox || (\"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset)))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      // svg.append(\"text\")\n      //   .attr(\"text-anchor\", \"end\")\n      //   .attr(\"x\", width)\n      //   .attr(\"y\", 40)\n      //   .text(options.usedValue);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(groupChartData.map(item => d3.max(item.data, function(d) { return parseFloat(options.yValue(d)); }))) + 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(groupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append('rect')\n        .attr('class', className(config.CSS_PREFIX + \"grouprect\"))\n        .attr('x', -x.bandwidth()*1/12)\n        .attr('y', YaxisOffset - 85)\n        .attr('width', x.bandwidth()*5/6)\n        .attr('height', 120 + height - YaxisOffset);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"baraxistext-container\");\n      \n      for (var i = 0; i < groupChartData.length; i ++) {\n        var partyAbbr = groupChartData[i].partyAbbr;\n        var chartData = groupChartData[i].data;\n\n        var subX = d3.scaleBand()\n          .rangeRound([0, x.bandwidth()*2/3])\n          .domain(chartData.map(function (d) {\n            return d.name;\n          }));\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n        var barAxisTextSvg = groupSvg.select(\".baraxistext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n    \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", function (d, i) {\n              return subX(d.name)+subX.bandwidth()/4;\n            })\n            .attr(\"width\", subX.bandwidth()*1/2)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d)));\n            })\n            .attr(\"height\", function (d) {\n              return height - y(Number(options.yValue(d)));\n            })\n            \n\n          var barAxisTexts = barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barAxisTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barAxisTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) + 18;\n            })\n          barAxisTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return /(19|20)\\d{2}/g.exec(d.name)[0];\n            });\n            \n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return subX(d.name)+subX.bandwidth()/2;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"7px\")\n            .attr(\"y\", function(d) {\n              return y(0) - 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n            .text(function(d) {\n              return options.yValueFormat(options.yValue(d));\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return y(Number(options.yValue(d))) - 5;\n            })\n      }\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true,\n  viewBox: '45 0 655 340'\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 12\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparison-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n      \n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Seats Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Seats Comparison - ${getNationOrProvinceName(props)}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\nimport {createTooltip, formatPartyName, formatClassNameFromString} from \"../../utils\";\nexport function Chart(container, width, height, className, options) {\n  if (!options) {\n      options = {};\n  }\n  width = 700;\n  height = 300;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 120;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(groupChartData, colorsData) {\n\n      svg.selectAll(\".topLabel\").remove();\n      svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"topLabel\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", 20)\n        .text(options.topLabel);\n\n      if (!groupChartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n            partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n            })\n        }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(d.delta);\n        } else {\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(d.delta);\n        }\t\n      }\n\n      var newGroupChartData = groupChartData.map(item => {\n        var chartData = item.data;\n        return {\n          ...item,\n          data: [{\n            ...chartData[1],\n            delta: options.yValue(chartData[1]) - options.yValue(chartData[0])\n          }]\n        }\n      });\n\n      x.domain(groupChartData.map(item => item.partyAbbr));\n\n      var minMaxY = [-100, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(newGroupChartData.map(item => parseFloat(item.data[0].delta))) + 1\n        minMaxY[0] = d3.min(newGroupChartData.map(item => parseFloat(item.data[0].delta))) - 1\n      }\n      y.domain(minMaxY);\n\n      var groupSvgs = svg.selectAll(`.bar-group`).data(newGroupChartData);\n      groupSvgs.exit()\n        .transition()\n        .duration(300)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n    \n      var groupSvg = groupSvgs.enter()\n        .append(\"g\")\n        .attr(\"class\", d => `bar-group ${formatClassNameFromString(d.partyAbbr)}`)\n        .attr(\"transform\", (d) => `translate(${x(d.partyAbbr)}, 0)`);\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"groupname-container\")\n        .attr(\"transform\", `translate(${x.bandwidth()*1/3}, ${YaxisOffset - 50})`)\n        .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .text(d => d.partyAbbr)\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bar-container\");\n\n      groupSvg.append(\"g\")\n        .attr(\"class\", \"bartext-container\");\n      \n      for (var i = 0; i < newGroupChartData.length; i ++) {\n        var partyAbbr = newGroupChartData[i].partyAbbr;\n        var deltaData = newGroupChartData[i].data;\n\n        var groupSvg = svg.selectAll(`.bar-group.${formatClassNameFromString(partyAbbr)}`);\n\n        var barSvg = groupSvg.select(\".bar-container\");\n        var barTextSvg = groupSvg.select(\".bartext-container\");\n\n        var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData);\n\n        bars.exit()\n          .transition()\n          .duration(300)\n          .attr(\"height\", 0)\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n        \n        bars.enter()\n            .append(\"rect\")\n            .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n            .attr(\"x\", x.bandwidth()/6)\n            .attr(\"width\", x.bandwidth()*1/3)\n            .attr(\"fill\", (d,i) => getFillColor(d, i))\n            .on(\"mousemove\", function(d, i) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 0.8);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", .9);\t\t\n                tooltipDiv.html(getTooltipText(d, i))\n                    .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\t\t\t\t\t\n            .on(\"mouseout\", function(d) {\t\t\n                d3.select(this)\n                  .attr(\"opacity\", 1);\n                tooltipDiv.transition()\t\t\n                    .duration(200)\t\t\n                    .style(\"opacity\", 0);\t\n            })\n            .attr(\"y\", function(d) {\n              return y(0);\n            })\n            .attr(\"height\", 0)        \n    \n          barSvg.selectAll(`.${className(\"bar\")}`).data(deltaData)\n            .attr(\"fill\", (d, i) => getFillColor(d, i))\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              return Math.min(y(Number(d.delta)), y(0));\n            })\n            .attr(\"height\", function (d) {\n              return Math.abs(y(Number(d.delta)) - y(0));\n            })\n    \n          var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData);\n          barTexts.exit()\n            .transition()\n            .duration(300)\n            .style(\"fill-opacity\", 1e-6)\n            .remove();\n    \n          barTexts.enter().append(\"text\")\n            .attr(\"class\", className(\"bartext\"))\n            .attr(\"x\", function (d) {\n              return x.bandwidth()/3;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"y\", function(d) {\n              if (d.delta > 0)\n                return y(0) - 5;\n              return y(0) + 5;\n            })\n          barTextSvg.selectAll(`.${className(\"bartext\")}`).data(deltaData)\n            .text(function(d) {\n              return options.yValueFormat(d.delta);\n            })\n            .transition()\n            .duration(300)\n            .attr(\"y\", function (d) {\n              var barTextYDelta = 0;\n              if (d.delta > 0) {\n                barTextYDelta = -5;\n              } else {\n                barTextYDelta = 15;\n              }\n              return y(Number(d.delta)) + barTextYDelta;\n            })\n      }\n\n      svg.selectAll(\".xAxisLine\").remove();\n      var axisThick = 2;\n      svg.append('line')\n        .attr('class', 'xAxisLine')\n        .attr('stroke-width', axisThick)\n        .attr('stroke', \"currentColor\")\n        .attr('x1', XaxisOffset)\n        .attr('y1', y(0)-axisThick/2)\n        .attr('x2', width)\n        .attr('y2', y(0)-axisThick/2)\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonDataMultipleParties,\n  getNationOrProvinceName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014\",\n  usedValue: \"SEATS COUNTED\",\n  yValue: d => d.seats,\n  yValueFormat: seats => seats,\n  dynamicYAxisFromValues: true\n}\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 13\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      this.chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-swing-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getNationOrProvinceName(props)}: Swing ${years}`;\n      }\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonDataMultipleParties(data, props);\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        \n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteCompBarchart/d3groupbarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 14\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-comparison-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"groupbarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      chartOptions.topLabel = `${props.regionType.toUpperCase()} ASSEMBLY: ${props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\", \")}`\n      \n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = \"Race for Votes Comparison - National Assembly\";\n      } else {\n        chartOptions.topLabel = `Race for Votes Comparison - ${getRegionName(props)}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"../BarChart/barchart.css\";\nimport {Chart} from \"../TVVoteSwingBarchart/d3deltabarchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport config from \"../../config\";\nimport {\n  getVotesDataForComparison,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesComparisonDataMultipleParties,\n  getRegionName,\n  fetchDataFromOBJ,\n  handleRegionChange\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nfunction cn(originName) {\n  return className(config.CSS_PREFIX + originName);\n}\n\nvar partyColorsData;\n\nvar chartOptions = {\n  topLabel: \"NATIONAL ASSEMBLY: 2009, 2014, 2019\",\n  usedValue: \"% VDS COUNTED\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => (value > 0? '+': '') + (value.toFixed(2)) + '%',\n  dynamicYAxisFromValues: true\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbrs: [\"ANC\", \"DA\", \"EFF\", \"ID\"],\n        partyIecIds: [null, null, null, null],\n        eventDescriptions: [\n            // \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            // \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            // \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n        stylesheetFor: \"web\",\n        componentID: 15\n      }\n\n      fetchDataFromOBJ(this.state, props);\n\n      this.chart = null;\n      this.refreshIntervalID = 0;\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      this.refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = null;\n      }\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(this.refreshIntervalID);\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      var targetState = event.detail;\n      if (targetState.componentID != this.state.componentID)\n        return;\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-votes-swing-barchart(${getRegionName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (this.chart)\n        this.chart.destroy();\n      this.chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      const {\n        stylesheetFor\n      } = this.state;\n      return (\n          <div className={cn(\"deltabarchart\") + \" \" + cn(`stylesheet-${stylesheetFor}`)}>\n            {/* <div className={cn(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div> */}\n            <div \n              ref=\"vizcontainer\" \n              className={cn(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var votesDataLoader = getVotesDataForComparison(props);\n      var dataLoaders = [votesDataLoader];\n      \n      var years = props.eventDescriptions.map(desc => /(19|20)\\d{2}/g.exec(desc)[0]).join(\"/\");\n      if (props.regionType == \"national\") {\n        chartOptions.topLabel = `National Assembly: Swing ${years}`;\n      } else {\n        chartOptions.topLabel = `${getRegionName(props)}: Swing ${years}`;\n      }\n      \n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesComparisonDataMultipleParties(data, props);\n\n        if (!this.chart)\n          this.chart = new Chart(container, null, null, className, chartOptions);\n        this.chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","export {default as BarChart} from \"./BarChart/barchart\";\nexport {default as RaceForSeatsBarChart} from \"./RaceForSeatBarchart/barchart\";\nexport {default as SpoiltBarChart} from \"./SpoiltBarchart/barchart\";\nexport {default as Map} from \"./Map/map\";\nexport {default as TurnoutMap} from \"./TurnoutMap/map\";\nexport {default as TurnoutBarChart} from \"./TurnoutBarchart/barchart\";\nexport {default as BarchartWithNavMap} from \"./BarchartWithNavMap/barchartMap\";\nexport {default as QuickResultsWidget} from \"./QuickResultsWidget/quickResultsWidget\";\nexport {default as ProgVotesCountPiechart} from \"./ProgVotesCountPiechart/piechart\";\nexport {default as RaceForSeatsComparisonBarChart} from \"./SeatCompBarchart/barchart\";\nexport {default as SeatHorseShoeChart} from \"./SeatHorseShoeChart/horseshoe\";\nexport {default as VoteComparisonBarchart} from \"./VoteCompBarchart/barchart\";\n\nexport {default as TVSeatCompBarchart} from \"./TVSeatCompBarchart/barchart\";\nexport {default as TVSeatSwingBarchart} from \"./TVSeatSwingBarchart/barchart\";\nexport {default as TVVoteCompBarchart} from \"./TVVoteCompBarchart/barchart\";\nexport {default as TVVoteSwingBarchart} from \"./TVVoteSwingBarchart/barchart\";\n\nexport {default as SeatDonutChart} from \"./RaceForSeatDonut/piechart\";\nexport {default as SplitNatProv} from \"./SplitNatProv/barchart\";","var config = {\n    \"DOMAIN\": \"https://sabc-eds.github.io/elections-dataviz\",\n    // \"DOMAIN\": \"http://127.0.0.1:8080\",\n    \"CSS_PREFIX\": \"ELVIZ_\"\n}\n\nexport default config;","const REGION_CHANGE = \"region-change\";\nconst CHART_PREVIEW = \"chart-preview\";\nconst SEATS_ELECTEDS_EVENT = \"seats-electeds-event\";\nconst MAP_PREVIEW = \"map-preview\";\nconst QUICK_RESULTS_PREVIEW = \"quick-results-preview\"\nconst EXPORT_PNG = \"export-png\";\nconst EXPORT_SUPERWIDGET_PNG = \"export-superwidget-png\";\n\nexport default {\n    REGION_CHANGE,\n    CHART_PREVIEW,\n    SEATS_ELECTEDS_EVENT,\n    MAP_PREVIEW,\n    QUICK_RESULTS_PREVIEW,\n    EXPORT_PNG,\n    EXPORT_SUPERWIDGET_PNG,\n};","import * as d3 from \"d3\";\nimport config from \"../config\";\n\nfunction calcPercent(a, b) {\n  if (b == 0) {\n    return 0;\n  } else {\n    return (a/b*100).toFixed(2);\n  }\n}\n\nexport function getShortenedEventDescription(event) {\n  var year = /(19|20)\\d{2}/g.exec(event[\"description\"])[0];\n  var shortenedNatProv = (event[\"eventType\"][\"description\"] == \"National Election\"? \"Nat\": \"Prov\");\n  return `${year} ${shortenedNatProv}`;\n}\n\nexport function parseVotesDataForAllEvents(data, props) {\n    var results, edges;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      edges = data[\"data\"][\"allBallots\"].edges;\n    } else if (regionType == \"province\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n    } else if (regionType == \"municipality\") {\n      edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n    } else { //\"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n    }\n\n    console.log(\"props\", props)\n    return edges.map(edge => {\n      var nodeData = edge[\"node\"];\n\n      var eventDescription = getShortenedEventDescription(nodeData[\"event\"]); //nodeData[\"event\"][\"description\"];\n      var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n      results = partyResults[\"edges\"];\n      results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n      results = results.slice(0, props.numPartiesSplitNatProv);\n\n      return {\n        longEventDescription: nodeData[\"event\"][\"description\"],\n        eventDescription,\n        data: results.map(function(node) {\n          var el = node[\"node\"];\n          return {\n              name: el[\"party\"][\"abbreviation\"],\n              iecId: el[\"party\"][\"iecId\"],\n              validVotes: el[\"validVotes\"].toFixed(2),\n              percOfVotes: el[\"percOfVotes\"].toFixed(2),\n              partyInfo: el[\"party\"]\n          }\n        })\n      }\n    }).filter(edge => props.eventDescriptionsSplitNatProv.indexOf(edge.longEventDescription) != -1)\n    .sort(function(edge1, edge2) {\n      var edge1Year = parseInt(/(19|20)\\d{2}/g.exec(edge1.eventDescription)[0]);\n      var edge2Year = parseInt(/(19|20)\\d{2}/g.exec(edge2.eventDescription)[0]);\n      if (edge1Year == edge2Year) {\n        if (edge1.eventDescription > edge2.eventDescription) {\n          return 1;\n        }\n        return -1;\n      }\n      return edge1Year - edge2Year;\n    })\n}\n \nexport function parseVotesData(data, props) {\n    var results, firstEdge;\n    var regionType = props.regionType;\n    if (regionType == \"national\") {\n      firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n    } else if (regionType == \"province\") {\n      firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n    } else if (regionType == \"municipality\") {\n      firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n    } else { //\"municipality-vd\"\n      firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n    }\n    if (!firstEdge){\n      console.error(\"party data is empty!!\");\n      return null;\n    }\n\n    var nodeData = firstEdge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"];\n    results = results.sort(function(a, b) {return b.node.percOfVotes - a.node.percOfVotes});\n\n    results = results.slice(0, props.numParties);\n\n    return results.map(function(node) {\n        var el = node[\"node\"];\n        return {\n            name: el[\"party\"][\"abbreviation\"],\n            iecId: el[\"party\"][\"iecId\"],\n            validVotes: el[\"validVotes\"].toFixed(2),\n            percOfVotes: el[\"percOfVotes\"].toFixed(2),\n            partyInfo: el[\"party\"]\n        }\n    });\n}\n\nexport function fetchLocationTrackFromVDdata(data) {\n  var firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  var nodeData = firstEdge[\"node\"];\n  var locationResult = nodeData[\"location\"];\n  var newState = {\n    regionType: \"municipality-vd\",\n    iecId: locationResult[\"iecId\"],\n    muniCode: locationResult[\"ward\"][\"municipality\"][\"code\"],\n    provinceName: locationResult[\"ward\"][\"municipality\"][\"province\"][\"name\"],\n  };     \n  return newState;      \n}\n\nexport function parseVotesComparisonData(data, props) {\n  var results, edges;\n\n  var regionType = props.regionType;\n  var eventDescriptions = props.eventDescriptions[\"national\"]\n  if (props.electionType === \"provincial\")\n    eventDescriptions = props.eventDescriptions[\"provincial\"]\n\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges= data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else { //\"municipality-vd\"\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n\n  var partyfilter_edges = edges.map(edge => {\n    var nodeData = edge[\"node\"];\n    var partyResults = nodeData[\"partyResults\"] || nodeData[\"topResult\"];\n    results = partyResults[\"edges\"]\n      .filter(a => props.partyIecId\n        ? (a.node[\"party\"][\"iecId\"] == props.partyIecId) \n        : (a.node[\"party\"][\"abbreviation\"] == props.partyAbbr));\n    var result = results[0];\n    if (result) {\n      var el = result[\"node\"];\n      return {\n          name: nodeData[\"event\"][\"description\"],\n          percOfVotes: el[\"percOfVotes\"].toFixed(2),\n          partyInfo: el[\"party\"]\n      }\n    }\n    return {\n      name: nodeData[\"event\"][\"description\"],\n      percOfVotes: 0,\n      partyInfo: {\n        name: props.partyAbbr,\n        abbreviation: props.partyAbbr,\n      }\n    }\n  });\n  var results = partyfilter_edges.filter(edge => eventDescriptions.indexOf(edge.name) != -1).reverse();\n\n  var new_results = [];\n  for(var i = 0; i < eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: eventDescriptions[i],\n        percOfVotes: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n  return new_results;\n}\n\nexport function parseVotesComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseVotesComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseProgressVotesCount(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"progress votes count data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Completed\",\n      percent: calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdWithResultsCaptured\"]\n    }, {\n      name: \"Not Completed\",\n      percent: 100 - calcPercent(nodeData[\"vdWithResultsCaptured\"], nodeData[\"vdCount\"]),\n      totalCount: nodeData[\"vdCount\"],\n      count: nodeData[\"vdCount\"] - nodeData[\"vdWithResultsCaptured\"]\n    }\n  ]\n}\n\n// export function parseMainPartyData(data, props) {\n//     if (!data)  return null;\n//     var locationToMainParty = {};\n//     var edges;\n//     var regionType = props.regionType;\n//     var sort_results = function(party_results) {\n//         party_results[\"edges\"] = party_results[\"edges\"].sort(function(a, b) {\n//             return b.node.percOfVotes - a.node.percOfVotes;\n//         })\n//         return party_results;\n//     }\n//     if (regionType === \"national\") {\n//         edges = data[\"data\"][\"allProvincialBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var provinceName = node[\"location\"][\"name\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[provinceName] = partyName;\n//         })\n//     } else if (regionType === \"province\") {\n//         edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var muniCode = node[\"location\"][\"code\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[muniCode] = partyName;\n//         })\n//     } else {// \"municipality\"\n//         edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n//         edges.forEach(function(edge) {\n//             var node = edge.node;\n//             var iecId = node[\"location\"][\"iecId\"];\n//             var partyResults = sort_results(node[\"partyResults\"]);\n\n//             var partyName = partyResults[\"edges\"][0][\"node\"][\"party\"][\"name\"];\n//             locationToMainParty[iecId] = partyName;\n//         })\n//     }\n//     return locationToMainParty;\n// }\n\nfunction getTopPartyNameFromNode(node) {\n  if (node && node[\"topParty\"] && node[\"topParty\"][\"party\"] && node[\"topParty\"][\"party\"][\"name\"])\n      return node[\"topParty\"][\"party\"][\"name\"];\n  return \"\";\n}\n\nexport function parseMainPartyData(data, props) {\n  if (!data)  return null;\n  var locationToMainParty = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"topPartiesByProvince\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          locationToMainParty[provinceName] = getTopPartyNameFromNode(node);\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"topPartiesByMunicipality\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          locationToMainParty[muniCode] = getTopPartyNameFromNode(node);\n      })\n  } else {// \"municipality\"\n      edges = data[\"data\"][\"topPartiesByVotingDistrict\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          locationToMainParty[iecId] = getTopPartyNameFromNode(node);\n      })\n  }\n  return locationToMainParty;\n}\n\nexport function parseSeatsData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"abbreviation\"],\n      iecId: node[\"party\"][\"iecId\"],\n      partyInfo: node[\"party\"],\n    }\n  })\n  \n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return results.slice(0, props.numParties);\n}\n\nexport function parseVotesPredictionData(data, props) {\n  // TODO actually implement a function that removes hypens and .s\n  var edges = data[\"data\"][\"predictedResults\"].edges;\n  var partyIecIds = [];\n  var lineData = [];\n  edges.forEach(function(edge) {\n    var nodeData = edge.node;\n    var percVds = nodeData.percVds;\n    var prediction = nodeData.prediction;\n    var predictionEdges = prediction.edges;\n    predictionEdges.forEach(function(predictionEdge) {\n      console.log(\"predictionEdge\", predictionEdge);\n      var predictionNodeData = predictionEdge.node;\n      var partyInfo = predictionNodeData.party;\n      if (!partyInfo) {\n        return;\n      }\n      var predictedPercent = predictionNodeData.predictedPercent;\n      var actualPercent = predictionNodeData.actualPercent;\n\n      var partyIndex = partyIecIds.indexOf(partyInfo.iecId);\n      if (partyIndex == -1) {\n        partyIecIds.push(partyInfo.iecId);\n        lineData.push({\n          name: partyInfo.name,\n          iecId: partyInfo.iecId,\n          abbreviation: partyInfo.abbreviation,\n          cleaned_name: partyInfo.abbreviation.replace(/[^a-zA-Z0-9]+/g, ''),\n          data: []\n        });\n        partyIndex = partyIecIds.length - 1;\n      }\n      lineData[partyIndex].data.push({\n        'x': percVds,\n        'y': predictedPercent\n      })\n    })\n  })\n  lineData.forEach(oneLine => {\n    oneLine.data.sort(function(a, b) {\n      return a.x - b.x;\n    })\n  })\n  console.log(\"parsedLineData\", lineData);\n  // var lineData = [{\n  //     name : \"AFRICAN NATIONAL CONGRESS\",\n  //     cleaned_name : \"anc\",\n  //     data : [\n  //       {'x': 3, 'y': 51.6},\n  //       {'x': 6, 'y': 59.3},\n  //       {'x': 12, 'y': 55.4},\n  //       {'x': 20, 'y': 56},\n  //       {'x': 27, 'y': 59.5},\n  //       {'x': 33, 'y': 59.8},\n  //       {'x': 39, 'y': 61.2},\n  //       {'x': 45, 'y': 61.8},\n  //       {'x': 51, 'y': 62.7},\n  //       {'x': 57, 'y': 63.1},\n  //       {'x': 63, 'y': 63.6},\n  //       {'x': 69, 'y': 62.7},\n  //       {'x': 69, 'y': 62.7},\n  //       {'x': 75, 'y': 62.3},\n  //       {'x': 81, 'y': 62.9},\n  //       {'x': 87, 'y': 63},\n  //       {'x': 93, 'y': 62.8},\n  //       {'x': 100, 'y': 62.8},\n  //     ]\n  //   },\n  //   {\n  //     name : \"DEMOCRATIC ALLIANCE\",\n  //     cleaned_name: \"da\",\n  //     data : [\n  //       {'x': 3, 'y': 31.6},\n  //       {'x': 6, 'y': 39.3},\n  //       {'x': 12, 'y': 35.4},\n  //       {'x': 20, 'y': 36},\n  //       {'x': 27, 'y': 39.6},\n  //       {'x': 33, 'y': 39.8},\n  //       {'x': 39, 'y': 31.2},\n  //       {'x': 45, 'y': 31.4},\n  //       {'x': 51, 'y': 22.7},\n  //       {'x': 57, 'y': 33.1},\n  //       {'x': 63, 'y': 23.6},\n  //       {'x': 69, 'y': 32.7},\n  //       {'x': 69, 'y': 32.7},\n  //       {'x': 75, 'y': 22.3},\n  //       {'x': 81, 'y': 32.9},\n  //       {'x': 87, 'y': 33},\n  //       {'x': 93, 'y': 22.8},\n  //       {'x': 100, 'y': 22.8},\n  //     ]\n  //   }\n  // ];\n\n  return lineData;\n}\n\nexport function parseSeatsComparisonData(data, props) {\n  if (!data)  return null;\n  var edges = data[\"data\"][\"allSeatCalculations\"].edges;\n  var regionType = props.regionType;\n  var eventDescriptions = props.eventDescriptions[\"national\"]\n  if (props.electionType === \"provincial\")\n    eventDescriptions = props.eventDescriptions[\"provincial\"]\n\n  var results = edges.map(edge => {\n    var node = edge.node;\n    var seats = 0;\n    if (regionType === \"national\") {\n      seats = node[\"nationalPr\"] + node[\"regional\"];\n    } else {//\"province\"\n      seats = node[\"regional\"];\n    }\n    return {\n      seats,\n      name: node[\"party\"][\"event\"][\"description\"],\n      partyInfo: node[\"party\"]\n    }\n  }).filter(result => eventDescriptions.indexOf(result.name) != -1)\n  .filter(result => \n    props.partyIecId\n    ? (result.partyInfo[\"iecId\"] == props.partyIecId)\n    : (result.partyInfo[\"abbreviation\"] == props.partyAbbr)\n  )\n\n  var new_results = [];\n  for(var i = 0; i < eventDescriptions.length; i ++) {\n    var available = false;\n    for (var j = 0; j < results.length; j ++) {\n      if (results[j].name == eventDescriptions[i]) {\n        var available = true;\n        new_results.push(results[j]);\n        break;\n      }\n    }\n    if (!available) {\n      new_results.push({\n        name: props.eventDescriptions[i],\n        seats: 0,\n        partyInfo: {\n          name: props.partyAbbr,\n          abbreviation: props.partyAbbr,\n        } \n      })\n    }\n  }\n      // name: nodeData[\"event\"][\"description\"],\n      // percOfVotes: 0,\n      // partyInfo: {\n      //   name: props.partyAbbr,\n      //   abbreviation: props.partyAbbr,\n      // }\n  // results.sort(function(a,b) {\n  //   return b[\"seats\"] - a[\"seats\"];\n  // })\n  return new_results;\n}\n\nexport function parseSeatsComparisonDataMultipleParties(data, props) {\n  return props.partyAbbrs.map((partyAbbr, partyIdx) => {\n    var newProps = {...props};\n    newProps.partyAbbr = partyAbbr;\n    newProps.partyIecId = props.partyIecIds[partyIdx];\n    return {\n      partyAbbr,\n      data: parseSeatsComparisonData(data, newProps)\n    }\n  })\n}\n\nexport function parseTurnoutData(data, props) {\n  if (!data)  return null;\n  var locationToTurnout = {};\n  var edges;\n  var regionType = props.regionType;\n  if (regionType === \"national\") {\n      edges = data[\"data\"][\"allProvincialBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var provinceName = node[\"location\"][\"name\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[provinceName] = percVoterTurnout;\n      })\n  } else if (regionType === \"province\") {\n      edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var muniCode = node[\"location\"][\"code\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[muniCode] = percVoterTurnout;\n      })\n  } else {// \"municipality\" or \"municipality-vd\"\n      edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n      edges.forEach(function(edge) {\n          var node = edge.node;\n          var iecId = node[\"location\"][\"iecId\"];\n          var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n          locationToTurnout[iecId] = percVoterTurnout;\n      })\n  }\n  return locationToTurnout;\n}\n\nexport function parseTurnoutDataForAllEvents(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var eventType = node[\"event\"][\"eventType\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      eventType: eventType,\n      percVoterTurnout\n    }\n  }).filter(edge => edge.eventType.toLowerCase().indexOf(props.eventType) != -1)\n  .sort(function(edge1, edge2) {\n    var edge1Year = parseInt(/(19|20)\\d{2}/g.exec(edge1.name)[0]);\n    var edge2Year = parseInt(/(19|20)\\d{2}/g.exec(edge2.name)[0]);\n    return edge2Year - edge1Year;\n  })\n}\n\nexport function parseTurnoutDataForOneEvent(data, props) {\n  if (!data)  return null;\n  var edges;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    edges = data[\"data\"][\"allBallots\"].edges;\n  } else if (regionType == \"province\") {\n    edges = data[\"data\"][\"allProvincialBallots\"].edges;\n  } else if (regionType == \"municipality\") {\n    edges = data[\"data\"][\"allMunicipalBallots\"].edges;\n  } else if (regionType == \"municipality-vd\") {\n    edges = data[\"data\"][\"allVotingDistrictBallots\"].edges;\n  }\n  \n  return edges.map(function(edge) {\n    var node = edge.node;\n    var event = node[\"event\"][\"description\"];\n    var percVoterTurnout = node[\"percVoterTurnout\"].toFixed(2); \n    return {\n      name: event,\n      percVoterTurnout\n    }\n  })\n}\n\nexport function parseSpoiltVotesData(data, props) {\n  var firstEdge;\n  var regionType = props.regionType;\n  if (regionType == \"national\") {\n    firstEdge = data[\"data\"][\"allBallots\"].edges[0];\n  } else if (regionType == \"province\") {\n    firstEdge = data[\"data\"][\"allProvincialBallots\"].edges[0];\n  } else if (regionType == \"municipality\") {\n    firstEdge= data[\"data\"][\"allMunicipalBallots\"].edges[0];\n  } else { //\"municipality-vd\"\n    firstEdge = data[\"data\"][\"allVotingDistrictBallots\"].edges[0];\n  }\n  if (!firstEdge){\n    console.error(\"spoilt data is empty!!\");\n    return null;\n  }\n\n  var nodeData = firstEdge[\"node\"];\n\n  return [\n    {\n      name: \"Valid\",\n      percent: calcPercent(nodeData[\"totalValidVotes\"], nodeData[\"totalVotesCast\"])\n    }, {\n      name: \"Spoilt\",\n      percent: calcPercent(nodeData[\"spoiltVotes\"], nodeData[\"totalVotesCast\"])\n    }\n  ]\n}\n\nexport function getRegionName(state) {\n  function beautifiedMuniName(muniName) {\n    if (muniName.indexOf(\" - \") != -1) {\n        muniName = muniName.split(\" - \")[1];\n    }\n    if (muniName.indexOf(\"[\") != -1) {\n        muniName = muniName.split(\"[\")[0];\n    }\n    return muniName;\n  }\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  if (state.regionType == \"province\") {\n    return state.provinceName;\n  }\n  if (state.regionType == \"municipality\") {\n    return beautifiedMuniName(state.muniName);\n  }\n  if (state.regionType == \"municipality-vd\") {\n    return beautifiedMuniName(state.muniName) + \"-\" + state.iecId;\n  }\n}\n\nexport function getRegionName2(state) {\n  if (state.regionType == \"national\") {\n    var event = state.eventDescription.toLocaleLowerCase()\n\n    if (event.indexOf(\"national election\") >= 0) {\n      return \"National Assembly\"\n    }\n    else if (event.indexOf(\"provincial election\") >= 0) {\n      return \"Results for Provincial Legislatures\"\n    }\n    else\n      return \"\"\n  }\n  else\n      return getRegionName(state);\n}\n\nexport function getRegionName3(state) {\n  if (state.regionType == \"national\")\n    return \"NATIONAL\";\n  return getRegionName(state);\n}\n\n\n\nexport function getNationOrProvinceName(state) {\n  if (state.regionType == \"national\") {\n    return \"South Africa\";\n  }\n  return state.provinceName;\n}\n\nexport function getNationOrProvinceName2(state) {\n  if (state.regionType == \"national\") {\n    return \"National Assembly\";\n  }\n  return state.provinceName;\n}\n\nexport function createTooltip(className) {\n  var tooltipClassName = className(config.CSS_PREFIX + \"tooltip\")\n  if (document.getElementsByClassName(tooltipClassName)[0]) {\n    return d3.select(`.${tooltipClassName}`);\n  } else {\n    return d3.select(\"body\").append(\"div\")\t\n      .attr(\"class\", tooltipClassName)\t\t\t\t\n      .style(\"opacity\", 0);\n  }\n}\n\n\n\nexport function fixMapLabelIntersect() {\n  var labelElements = document.getElementsByClassName(\"place-label\");\n  var regions = {};\n  var overlapCnt = {};\n  var i;\n\n  for (i = 0; i < labelElements.length; i ++) {\n      regions[i] = labelElements[i].getBoundingClientRect();\n  }\n\n  for (i = 0; i < labelElements.length; i ++) {\n      for (var j = 0; j < i; j ++) {\n          var rect1 = regions[i];\n          var rect2 = regions[j];\n          var overlap = !(rect1.right < rect2.left || \n              rect1.left > rect2.right || \n              rect1.bottom < rect2.top || \n              rect1.top > rect2.bottom);\n          if (overlap) {\n              overlapCnt[i] = overlapCnt[i]? (overlapCnt[i] + 1): 1;\n          }\n      }\n      if (overlapCnt[i] > 2) {\n          labelElements[i].setAttribute(\"opacity\", 0)\n      } else if (overlapCnt[i] > 0){\n          labelElements[i].innerHTML = labelElements[i].innerHTML.slice(0, 3) + \"...\";\n      } else {\n\n      }\n  }\n}\n\nexport function triggerCustomEvent(eventName, eventParam) {\n  var event = new CustomEvent(eventName, { detail: eventParam });\n  document.dispatchEvent(event);\n}\n\nexport function formatPartyName(name) {\n  return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n}\n\nexport function getSubRegionName(properties, state) {\n  if (state.regionType === \"national\") {\n      return properties.SPROVINCE;\n  } else if (state.regionType === \"province\") {\n      return properties.smunicipal && properties.smunicipal.split(\" - \")[1].split(\"[\")[0]; \n  } else {//municipality\n    return getMunicipalityiecId(properties);\n    // if (properties.Municipali) {\n    //   return properties.Municipali.split(\" - \")[1].split(\"[\")[0];\n    // }\n    // return properties.SMUNICIPAL && properties.SMUNICIPAL.split(\" - \")[1].split(\"[\")[0]; \n  }\n}\n\nexport function getMunicipalityCode(properties) {\n  return properties.code || (properties.smunicipal && properties.smunicipal.split(\" - \")[0].replace(/\\s/g, \"\"));\n}\n\nexport function getMunicipalityiecId(properties) {\n  return properties.VDNumber || properties.PKLVDNUMBE;\n}\n\nexport function getRegionFileName(state) {\n  var nationalMapFile = \"province_lo-res.geojson\";\n  function getProvinceFileName(provinceName) {\n      var provinceNameToFileMap = {\n          \"Limpopo\": \"lim_lo-res.geojson\",\n          \"Mpumalanga\": \"mp_lo-res.geojson\",\n          \"Gauteng\": \"gt_lo-res.geojson\",\n          \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n          \"North West\": \"nw_lo-res.geojson\",\n          \"Free State\": \"fs_lo-res.geojson\",\n          \"Eastern Cape\": \"ec_lo-res.geojson\",\n          \"Northern Cape\": \"nc_lo-res.geojson\",\n          \"Western Cape\": \"wc_lo-res.geojson\",\n      }\n      return provinceNameToFileMap[provinceName];\n  }\n  switch(state.regionType) {\n      case \"national\":\n          return nationalMapFile;\n      case \"province\":\n          return getProvinceFileName(state.provinceName);\n      case \"municipality\":\n          return state.muniCode + \".topojson\";//\".geojson\";\n      case \"municipality-vd\":\n          return \"vd-data/\" + state.muniCode + \"-\" + state.iecId + \".topojson\"; //\".geojson\";\n      default:\n          return null;\n  }\n}\n\nexport function loadScript(id, scriptURL, callback) {\n  if (document.getElementById(id))\n    return;\n  var script = document.createElement('script');\n  script.onload = function () {\n    if(callback) {\n      callback();\n    }\n  };\n  script.id = id;\n  script.src = scriptURL;\n\n  document.head.appendChild(script);\n}\n\nexport function loadCanvg() {\n  loadScript(\"canvgScript\", \"https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js\", function() {\n    console.log(\"canvgScript load finished\");\n  });\n}\n\nexport function loadJSZip() {\n  loadScript(\"jsZipScript\", \"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js\", function() {\n    console.log(\"loadJSZip load finished\");\n  });\n}\n\nexport function loadScriptsForEmbedMode() {\n  loadCanvg();\n  loadJSZip();\n}\n\n\nexport function handleRegionChange(event) {\n  var newState = JSON.parse(JSON.stringify(event.detail));\n  delete newState.componentID;\n  this.setState(newState)\n}\n\nexport function fetchDataFromOBJ(state, props) {\n  Object.keys(state).forEach(key => {\n    if (props[key]) {\n      state[key] = props[key];\n    }\n  })\n}\n\nexport function formatClassNameFromString(str) {\n  return \"formedClass_\" + str.replace(/[^a-zA-Z0-9]+/g, '');\n}\n\nexport function onPartyAbbrsChange(e) {\n    var options = e.target.options;\n    var values = [];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        values.push(options[i].value);\n      }\n    }\n    values = values.slice(0, 4);\n    this.setState({\n        partyAbbrs: values.map(value => value.split(\"\\x22\")[0]),\n        partyIecIds: values.map(value => value.split(\"\\x22\")[1]),\n    })\n}\n\nexport function nationalEventSelected(state) {\n  for (var i = 0; i < state.electionEvents.length; i ++) {\n    if (state.electionEvents[i].description == state.eventDescription) {\n      if (state.electionEvents[i].eventType.description.toLowerCase().indexOf(\"national\") != -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function createSvg(container, width, height) {\n  container.selectAll(\"svg\").remove();\n  var svg = container.append(\"svg\")\n      .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      .attr(\"viewBox\", \"0 0 \" + (width) + \" \" + (height))\n      .classed(\"svg-content\", true);\n\n  return svg;\n}\n\nexport function createErrorText(container, xOffset, yOffset) {\n  if (xOffset === undefined) xOffset = 0;\n  if (yOffset === undefined) yOffset = 0;\n\n  var errorText = container.append(\"g\")\n    .attr(\"transform\", \"translate(\"+ xOffset + \",\" + yOffset + \")\")\n    .append(\"text\")\n    .attr(\"text-anchor\", \"middle\");\n\n  return errorText;\n}\n\nexport function PartyColours(partyColours) {\n  var partyColourByName = {};\n\n  if (partyColours && partyColours[\"data\"][\"allParties\"][\"edges\"]) {\n      partyColours[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n        partyColourByName[edge.node.name] = edge.node.colour;\n      })\n  }\n\n  // TODO should used cleaned name\n  function getFillColourFromPartyName(partyName, i) {\n    // console.log(partyColourByName[partyName])\n    // console.log(partyColourByName)\n    return partyColourByName[partyName];\n    //return partyColourByName[partyName.split(\"/\")[0]] || predefColours[i%predefColours.length];\n  }\n\n  return getFillColourFromPartyName;\n}\n\n"],"sourceRoot":""}