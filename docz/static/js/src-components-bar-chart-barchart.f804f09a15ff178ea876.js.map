{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/BarChartEmbed.js","webpack:///./src/components/BarChart/barchart.mdx","webpack:///./src/components/BarChart/barchartEmbed.css","webpack:///./src/components/BarChart/d3barchart.js"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","getProvincesData","className","originName","styles","refreshIntervalID","chartOptions","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","iecId","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","event","newState","detail","setState","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","provincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","edge","e","value","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onEventDescriptionChange","key","onRegionTypeChange","province","name","muni","onClick","onPreview","concat","replace","BarChart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","predefColors","svg","tooltipDiv","createTooltip","x","y","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy"],"mappings":"kHACAA,EAAAC,QAAA,CAAkBC,cAAA,8BAAAC,cAAA,8BAAAC,aAAA,6BAAAC,mBAAA,mCAAAC,MAAA,wBAAAC,MAAA,wBAAAC,eAAA,+BAAAC,UAAA,0BAAAC,kBAAA,kCAAAC,QAAA,0BAAAC,KAAA,6yCCelB,IAUAN,EACAO,EAXoBC,cAIpB,SAAAC,EAAAC,GACE,OAAOC,QAAPD,EAOF,IAAIE,EAAJ,EAEIC,EAAe,iBAObC,cAEF,SAAAA,EAAAC,GAAmB,IAAAC,+FAAAC,CAAAC,KAAAJ,GACjBE,wEAAAG,CAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAAH,IACQO,IAARN,IA4BA,GA3BAA,EAAAO,MAAa,CACXC,WADW,EAEXC,iBAFW,yBAGXC,WAHW,WAIXC,aAJW,GAKXC,SALW,GAMXC,SANW,GAOXC,MAPF,IASIf,EAAJS,aACER,EAAAO,MAAAC,WAAwBT,EAAxBS,YAEET,EAAJW,aACEV,EAAAO,MAAAG,WAAwBX,EAAxBW,YAEEX,EAAJY,eACEX,EAAAO,MAAAI,aAA0BZ,EAA1BY,cAEEZ,EAAJa,WACEZ,EAAAO,MAAAK,SAAsBb,EAAtBa,UAEEb,EAAJc,WACEb,EAAAO,MAAAM,SAAsBd,EAAtBc,UAEEd,EAAJe,QACEd,EAAAO,MAAAO,MAAmBf,EAAnBe,OAEEf,SAAeA,EAAnBgB,OACEf,EAAAO,MAAAS,MAAmBjB,EAAnBiB,MACAhB,EAAAO,MAAAQ,OAAoBhB,EAApBgB,WACK,KAAAE,EAIDjB,EAJCkB,6BAEHC,EAFGF,EAAAE,OAGHC,EAHGH,EAAAG,OAKLpB,EAAAO,MAAAS,MAAAG,EACAnB,EAAAO,MAAAQ,OAAAK,EAvCe,OAyCjBpB,EAAAqB,mBAA0BrB,EAAAqB,mBAAAC,KAAAhB,IAA1BN,KACAA,EAAAuB,mBAA0BvB,EAAAuB,mBAAAD,KAAAhB,IAA1BN,KACAA,EAAAwB,YAAmBxB,EAAAwB,YAAAF,KAAAhB,IAAnBN,KA3CiBA,yPAFAyB,kEA6DjB,IAAIC,EAAJxB,KACAA,KAAAyB,KAAUzB,KAAV0B,eAA+B1B,KAA/BK,OACAX,EAAoBiC,YAAY,WAC9BH,OAAUA,EAAVA,eAA+BA,EAA/BA,QAnFc,KAqFhBI,0BAA0BC,IAA1BD,cAAgD5B,KAAhD4B,oBACAA,0BAA0BC,IAA1BD,iBAAmD5B,KAAnD4B,oBACAE,iCAAkC9B,KAAlC8B,8DAIA9B,KAAAyB,KAAUzB,KAAV0B,eAA+B1B,KAA/BK,sDAIA0B,gCACAjD,OACA8C,6BAA6BC,IAA7BD,cAAmD5B,KAAnD4B,oBACAA,6BAA6BC,IAA7BD,iBAAsD5B,KAAtD4B,oBACAE,oCAAqC9B,KAArC8B,aACAE,sEAIA,IAAIf,EAASgB,aAAcL,0BAA3B,KAIA,OAHIA,0BAAJ,MACEX,EAASW,0BAATX,IAEK,CACLA,OADKA,EAELC,OAHWD,EAAb,uFAkBiBiB,GACjB,IAAIC,EAAWD,EAAfE,OACApC,KAAAqC,SAAAF,8CAGiBD,GACjB,IAAIC,EAAWD,EAAfE,OACAtD,GACEA,YACFA,EAAQ,IAAAwD,EAAA,EAAUtC,KAAV0B,eAA+B1B,KAAAK,MAA/BS,MAAiDd,KAAAK,MAAjDQ,OAAR/B,GACAkB,KAAAqC,SAAAF,0CAIA,OAAOI,IAAUvC,KAAAwC,KAAjBC,+CAIA,OACIC,EAAAC,EAAAC,cAAA,OAAKrD,UAAL,YACEmD,EAAAC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,gBAA2CI,EAA3C,KAAqEkD,YAAc7C,KAAnFK,OADF,OAEEqC,EAAAC,EAAAC,cAAA,OACEE,IADF,eAEEvD,UAAWA,EALnB,8CAWGwD,EAAWlD,GACdkC,mCACA,IAAIP,EAAJxB,KAEIgD,EAAc,CADIC,YAAtBpD,IAGA,IAAAR,EAAsB,CACpB,IAAI6D,EAAoBC,cACxBH,UAGFI,oBAA8B,SAAAC,GAC5B,IAAIC,EAAYD,EAAhB,GACAhE,EAAkBA,GAAmBgE,EAArChE,GACAmC,uBAHF4B,MAIS,SAAAG,GAAK,OAAIxB,cAAJwB,uCAGNR,EAAWlD,EAAO2D,EAAMnE,GAC9B,IAAIoE,EAAYC,YAAcF,EAA9B3D,GAEIiB,EAAQ6C,SAAS9D,EAArBiB,OACID,EAAS8C,SAAS9D,EAAtBgB,QACA/B,IACEA,EAAQ,IAAAwD,EAAA,EAAAS,EAAAjC,EAAAD,EAAR/B,IACFiD,iCACAjD,iDAIR8E,EAAA,mwEC/LA,IAAIC,EAAgBvE,cAEpB,SAAAC,EAAAuE,GACI,OAAOC,QAAoCtE,IAApCsE,IAAPD,EAGEE,kBAEF,SAAAA,EAAAnE,GAAmB,IAAAC,EAAA,mGAAAC,CAAAC,KAAAgE,IACflE,EAAAG,EAAAD,KAAAE,EAAA8D,GAAA7D,KAAAH,KAAAH,KACAQ,MAAa,CACT4D,UADS,OAET1D,iBAFS,yBAGTC,WAHS,WAITC,aAJS,eAKTC,SALS,GAMTC,SANS,GAOTC,MAPS,GAQTN,WARS,EAUT4D,eAVJ,IAFepE,yPAFKyB,kEAmBpB,IAAIC,EAAJxB,KACAmE,mBACU,SAAAX,GACF,IAAIU,EAAiBV,EAAI,KAAJA,cAA8B,SAAAY,GAAI,OAAIA,EAAI,cAC/D5C,WAAc,CAAC0C,eAAf1C,MAHR2C,MAIa,SAAAZ,GAAK,OAAIxB,cAAJwB,oGAMGc,IACjBA,qDAAJ,YACQrE,KAAAK,MAAAG,WACJR,KAAAqC,SAAc,CAAC9B,iBAAkB8D,SAAnBC,MAAmC9D,WAAnC,WAA2DC,aAAzE,iBAEAT,KAAAqC,SAAc,CAAC9B,iBAAkB8D,SAAjCC,mDAIWD,GACf,IAAIlC,EAAW,CAAC3B,WAAY6D,SAA5BC,OACAtE,KAAAqC,SAAAF,qCAGMkC,GACN,IAAInC,EAAQ,IAAAqC,YAAgB1C,IAAhB2C,iBAAyC,CAAEpC,OAAQpC,KAA/DK,QACAuB,2DAGM,IAAA6C,EAAAzE,KACF0E,EAASC,IAAbD,OADME,EAYF5E,KAZEK,MAGF4D,EAHEW,EAAAX,UAIF1D,EAJEqE,EAAArE,iBAKFC,EALEoE,EAAApE,WAMFC,EANEmE,EAAAnE,aAOFC,EAPEkE,EAAAlE,SAQFC,EAREiE,EAAAjE,SASFC,EATEgE,EAAAhE,MAUFN,EAVEsE,EAAAtE,WAWF4D,EAXEU,EAAAV,eAcFW,EAAkBhB,SAAqB,SAAAiB,GAAI,OAAIA,QAAJrE,IAA/C,GACA,OACEsE,EAAApC,EAAAC,cAAA,WACEmC,EAAApC,EAAAC,cAAA,UADF,sDAEEmC,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,eAEImC,EAAApC,EAAAC,cAAA,SACIoC,KADJ,OAEIzF,UAAWA,EAFf,gBAGI0F,YAHJ,kBAIIC,SAAU,SAAAb,GAAC,OAAII,EAAApC,SAAc,CAAC4B,UAAWI,SAA9BC,YAGjBS,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,UAEImC,EAAApC,EAAAC,cAAA,UAAQrD,UAAWA,EAAnB,gBACG+E,MADH/D,EAEG2E,SAAUlF,KAAAmF,yBAAA/D,KAFbpB,OAIUkE,MAAmB,SAAAY,GACf,OAAQC,EAAApC,EAAAC,cAAA,UAAQwC,IAARN,EAAmBR,MAAnBQ,GAARA,OAKlBC,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,gBAEImC,EAAApC,EAAAC,cAAA,UAAQrD,UAAWA,EAAnB,gBACG+E,MADH9D,EAEG0E,SAAUlF,KAAAqF,mBAAAjE,KAFbpB,QAIUO,wCACAwE,EAAApC,EAAAC,cAAA,UAAQ0B,MAAR,YALV,YAOMS,EAAApC,EAAAC,cAAA,UAAQ0B,MAAR,YAPN,YAQMS,EAAApC,EAAAC,cAAA,UAAQ0B,MAAR,gBARN,gBASMS,EAAApC,EAAAC,cAAA,UAAQ0B,MAAR,mBAlCd,qBAsCQ,YAAC9D,GACCuE,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,iBAEImC,EAAApC,EAAAC,cAAA,UAAQrD,UAAWA,EAAnB,gBACI+E,MADJ7D,EAEIyE,SAAU,SAAAb,GAAC,OAAII,EAAApC,SAAc,CAAC5B,aAAc4D,SAAjCC,UAEPT,GAAiBA,MAAkB,SAAAyB,GAC/B,OAAOP,EAAApC,EAAAC,cAAA,UAAQwC,IAAKE,EAAbC,KAA4BjB,MAAOgB,EAAnCC,MAAmDD,EAA1DC,UAOlB,gBAAC/E,GACCuE,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,qBAEImC,EAAApC,EAAAC,cAAA,UAAQrD,UAAWA,EAAnB,gBACI+E,MADJ5D,EAEIwE,SAAU,SAAAb,GAAC,OAAII,EAAApC,SAAc,CAAC3B,SAAU2D,SAA7BC,UAEPO,GAAmBA,YAA0B,SAAAW,GACzC,OAAOT,EAAApC,EAAAC,cAAA,UAAQwC,IAAKI,EAAb9E,SAA4B4D,MAAOkB,EAAnC9E,UAAmD8E,EAA1D9E,cAOlB,mBAACF,GACCuE,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,qBAEImC,EAAApC,EAAAC,cAAA,SACIoC,KADJ,OAEIzF,UAAWA,EAFf,gBAGI0F,YAHJ,MAIIX,MAJJ3D,EAKIuE,SAAU,SAAAb,GAAC,OAAII,EAAApC,SAAc,CAAC1B,SAAU0D,SAA7BC,YAKrB,mBAAC9D,GACCuE,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,0BAEImC,EAAApC,EAAAC,cAAA,SACIoC,KADJ,OAEIzF,UAAWA,EAFf,gBAGI0F,YAHJ,WAIIX,MAJJ1D,EAKIsE,SAAU,SAAAb,GAAC,OAAII,EAAApC,SAAc,CAACzB,MAAOyD,SAA1BC,YAIzBS,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,qBAEImC,EAAApC,EAAAC,cAAA,SACEoC,KADF,SAEEzF,UAAWA,EAFb,gBAGE0F,YAHF,IAIEX,MAJFhE,EAKE4E,SAAU,SAAAb,GAAC,OAAII,EAAApC,SAAc,CAAC/B,WAAY+D,SAA/BC,YAEjBS,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACEwF,EAAApC,EAAAC,cAAA,UAAQoC,KAAR,SAAsBS,QAASzF,KAAA0F,UAAAtE,KAA/BpB,MAA0DT,UAAWA,aAAyBA,EAA9F,gBAvGN,YAyGIwF,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,eACIwF,EAAApC,EAAAC,cAAA,aADJ,cAEImC,EAAApC,EAAAC,cAAA,OAAKrD,UAAWA,EAAhB,cACEwF,EAAApC,EAAAC,cAAA,YAAO,gBAAA+C,OAAAjB,EAAA,6HAAAiB,OAAA1B,EAAA,mFAAA0B,OAAApF,EAAA,iDAAAoF,OAAAnF,EAAA,mDAAAmF,OAAAlF,EAAA,+CAAAkF,OAAAjF,EAAA,+CAAAiF,OAAAhF,EAAA,4CAAAgF,OAAA/E,EAAA,iDAAA+E,OAAArF,EAAA,+HAAAsF,QAAA,iBA7GnB,6CAiIRC,EAAA,4wDCxMqBC,kBACnB,SAAAA,EAAAjG,GAAmB,IAAAC,EAAA,mGAAAiG,CAAA/F,KAAA8F,IACjBhG,EAAAkG,EAAAhG,KAAAiG,EAAAH,GAAA3F,KAAAH,KAAAH,KACAqG,OAAA,KAFiBpG,yPADmBqG,IAAM5E,kDAKnC,IAAA6E,EAC0BpG,KAD1BH,MACCwG,EADDD,EAAAC,WACgBxG,EADhByG,EAAAF,EAAA,gBAGP,OAAOrB,EAAApC,EAAAC,cAAA2D,EAAA,QACEhB,KADF,UAGEc,WAHFA,GAIXtB,EAAApC,EAAAC,cAAA2D,EAAA,QAAQhB,KAAR,KAAkBc,WAAlBA,EAA0CxG,MAAO,CAAC2G,GAAlD,+BAJW,8BAKXzB,EAAApC,EAAAC,cAAA2D,EAAA,QAAQhB,KAAR,IAAiBc,WAAjBA,GALW,wOAMXtB,EAAApC,EAAAC,cAAA6D,EAAA,GAAYC,cAAZ,ot8BAAgv8BC,WAAhv8B,EAA+v8BC,OAA/v8B,2DAAu08BC,QAAS,CAAChH,MAAOG,KAAOA,KAAPH,MAARA,EAAkCD,SAAlCkH,EAAA,EAA2C9C,cAA338B6B,IACId,EAAApC,EAAAC,cAAAkE,EAAA,GAAUhG,MAAV,MAAsBD,OAD1B,QAEIkE,EAAApC,EAAAC,cAAAiD,EARA,gLCjBJrH,EAAAC,QAAA,CAAkBsI,UAAA,0GCDlBC,EAAAC,EAAArD,EAAA,sBAAAsD,IAAA,IAAAC,EAAAH,EAAA,8BAAAI,EAAAJ,EAAA,wBAGO,SAAAE,EAAAnE,EAAAjC,EAAAD,EAAAtB,EAAA8H,GAGLA,IACEA,MAEGA,EAALC,YACED,8BAEGA,EAALE,aACEF,iCAEGA,EAALG,SACEH,SAAiB,SAAAJ,GACf,OAAOA,EAAPQ,cAGCJ,EAALK,eACEL,eAAuB,SAAA/C,GACrB,OAAOA,EAAP,MAMJvB,4BAEE,IAEI4E,EAAe,iBAAnB,OAEIC,EAAM7E,+GAEW,eAFXA,uBAAV,GAKI8E,EAAaC,YAAjBvI,GAEIwI,EAAIxF,iBACM,CAZd,GAJFzB,MAkBMkH,EAAIzF,iBACM,CAlBhB1B,IAIE,KAgBA+G,+BACqB,qBADrBA,4BAGiBrI,EAHjBqI,0DAKQP,EALRO,yCAQAA,sDAEqB,oBAErBA,sDAEqB,oBAErB,IAAIK,EAASL,2BACIrI,EADjB,kBAEI2I,EAAaN,2BACArI,EADjB,sBAGAS,KAAAyB,KAAY,SAAAgC,EAAApE,GACV,IAAI8I,EAAJ,GAOA,SAAAC,EAAAC,EAAAC,GACE,OAAOH,EAAiBE,aAAjBF,KAA6CR,EAAaW,EAAEX,EAAnEY,QAPElJ,GAAmBA,EAAe,KAAfA,kBACrBA,EAAe,KAAfA,yBAAuD,SAAA+E,GACrD+D,EAAiB/D,OAAjB+D,MAAmC/D,OAAnC+D,SAOJJ,SAAStE,MAAc,SAAAwD,GACnB,OAAOA,EAAP1B,QAEJ,IAAIiD,EAAU,GAAd,KACInB,EAAJoB,yBACED,KAAajG,MAAkB,SAAA0E,GAAc,OAAOI,SAAPJ,MAE/Ce,YAEAJ,oDAAsDrF,IAAtDqF,IACAA,oDAAsDrF,2BAExC,SAAA0E,GAAc,OAAOI,eAAPJ,MAG5B,IAAIyB,EAAOT,uBAAqB1I,EAArB0I,cAAXxE,GAEAiF,6CAGa,SAAAzB,GACT,OAAOe,EAAP,KAJJU,qDAUAA,sCAEmBnJ,EAFnBmJ,iBAGe,SAAAzB,GACT,OAAOc,EAAEd,EAAFc,MAAUA,cAAjB,KAJNW,aAMmBX,gBANnBW,gBAOkB,SAAAzB,EAAAqB,GACZ,OAAOF,EAA0BnB,YAAD1B,KAAhC+C,KARNI,eAUqB,SAAAzB,GAMb,IAAA1B,EALAhD,6BAEAsF,iDAMAA,QAHAtC,EAGgC0B,YAAhB0B,KAFPpD,8CAAkD,SAAAqD,GAAa,OAAOA,EAAPC,gBAExDF,MAA4CtB,eAAqBA,SAAjFQ,mBACoBtF,IAADuG,MADnBjB,kBAEmBtF,UAAD,GAFlBsF,QAnBRa,cAuBoB,SAAAzB,GACZ1E,4BAEAsF,kDA1BRa,SA8Be,SAAAzB,GACT,OAAOe,EAAP,KA/BNU,iBAmCET,uBAAqB1I,EAArB0I,6BACgB,SAAAhB,EAAAqB,GAAA,OAAUF,EAA0BnB,YAAD1B,KAAnC+C,KADhBL,oCAIa,SAAAhB,GACT,OAAOe,EAAEe,OAAO1B,SAAhBJ,OALJgB,cAOkB,SAAAhB,GACd,OA1HVpG,IA0H0BmH,EAAEe,OAAO1B,SAAzBJ,OAGJ,IAAI+B,EAAWd,uBAAyB3I,EAAzB2I,kBAAfzE,GAEAuF,6CAGa,SAAA/B,GACT,OAAOe,KAAP,IAJJgB,oCASAA,sCACiBzJ,EADjByJ,qBAEa,SAAA/B,GACT,OAAOc,EAAEd,EAAFc,MAAUA,cAAjB,IAHJiB,+DAOa,SAAA/B,GACT,OAAOe,KAAP,IAEJE,uBAAyB3I,EAAzB2I,0BACQ,SAAAjB,GACJ,OAAOI,eAAqBA,SAA5BJ,MAFJiB,oCAMa,SAAAjB,GACT,OAAOe,EAAEe,OAAO1B,SAATW,KAAP,KAGRhI,KAAAiJ,QAAe,WACbrB","file":"static/js/src-components-bar-chart-barchart.971b6477.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors,\n  getProvincesData\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nvar chartOptions = {\n  chartType: \"Race For Votes\",\n  yAxisLabel: \"PERCENTAGE VOTES\",\n  yValue: d => d.percOfVotes,\n  yValueFormat: value => value + '%'\n}\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n\n      // if (this.state.width && this.state.height) {\n\n      // } else {\n      //   var {\n      //     modifW,\n      //     modifH\n      //   } = this.getWidthHeightByScreenSize();\n      //   this.state.width = modifW;\n      //   this.state.height = modifH;\n      // }\n\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      // var {\n      //   modifW,\n      //   modifH\n      // } = this.getWidthHeightByScreenSize();\n      // if (chart)\n      //   chart.destroy();\n      // chart = new Chart(this.getContainer(), modifW, modifH, className);\n      // this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        if (e.target.value.toLowerCase().indexOf(\"national\") == -1 &&\n                this.state.regionType == \"national\") {\n            this.setState({eventDescription: e.target.value, regionType: \"province\", provinceName: \"Western Cape\"});\n        } else {\n            this.setState({eventDescription: e.target.value });\n        }\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            numParties,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Votes Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        { \n                            eventDescription.toLowerCase().indexOf(\"national\") != -1 && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---bar-chart\"}}>{`Race for Votes - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJGg2D4IISQPBg8gCP4VVUAFe0oJguCYIvIhAhyRD2GQyRUPQz4NxoHC8LokVcNogjz0Y7JyLtDV2CDKU3RNBVzXaCSHWAdhNB8eRZLldoAAEYCIEQBlQDCukUgNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZ28gAWQL2AANkC4L1jAECADEfWgRJvP4ZxDkRR1MHYAAFIR-CWfSfjgMLESSmsUpoZwIGsy52AARiikL5HBczqEsgBBOYnPYSMVNI6B0HDdh5E5JyxGGmMZHYVEHJgbhgEPWz7OxeRt1rYAxqgCbggAMmO8ZEnmShmgOo7zG4e75TAUJzJ7VB2nYAB-DZxvDSMZquG7wy6mspBkat3zMWFJMwMAwigKY_tm-aQYGlca0TaSCBwVLMhSa8CF22s6z4gj8y4CY-BAOKfJ8_hfBgCAUkISmACYWdpkB2C3VdExJ-iRKYrnCbrSRMex3H8d2qRUfBsxvxADiMIzbDBPw-iiJIgiAK0CgQP0BgqMkzGlhU9csKzDSWP4M0pXEyjIPYIwQjsdBk001iQFdu3DYdZbHKtkBPWItCtbOOBvYd4B-IIS33WQz0-YE13g9I-i7aUqYYFYbD3fjyQcE9LPsIj6iXPWM8ADURHgbVolcfUQosM8ivoxJHCgYU4Eb0cCBK340EROBa4IVwzFjk084LyRZggEvJNc0KYLgGAq9oIe6-7s9xWeagADkfSZVBx6QwPPSn8JoHDkAKLMVgYP7IQ_nMmu66G5vH4Hl-R7-m_UDvo50B13FDKeAeBLACm6M5ZMfknatRpj5X-T0XqGR6FAfwcB97HkjMKRmaBMEwBmgvCwXQCB9HMH7eAABtHBnl8EAF12AAB9GF7H6LQg-FFgbdVvvfVOIoKL_37K3dundh6uAEffLoIC4B4AaHoAQd8oANG1ENBB3VBF8IILqGYr07DOSIRseilgLotX4KKSU3RUrCnYKveAZV1iJD6lgWwAAZVwgQoBXH4EVc8op7Dnl3pYPqABxc8NjdSWHPM4exNZEgV3iIyK4ORuBzXQDgOE5BdRgFsV3Bx8SoCMisQIKIBAriKMZEjcp3QADU8oACkpkuHmTQXAOwidM5YFAugOwZtMxTAXquCyaJQhSmFJGAclA7iEJ5ktUIcJxmDjgJ-GZgjl5QGaM5CYtgKJEwsFsuAOBURZCGgY3Z7BUChCIC3EUEB4BXAAKzdzOUXGg2p4DkH6DowyXiQDs3auwfer0-yXi2K9GJZziEwB3qgYx8wfmoGiIZeI4KIUTKfoifBPyUVnKIM9CAmKPbYt2biyijhMBYpAE83ZtzyAPgpVSiwwMzkQGaAsyZByLlXPorcpZZd0a7P2YcketAcCcuuTEeAQ0Jl3FFZc8VPKdm7KZdS1l0qDldGhbCghfKIUElsEKrIYYoWGS1VKxZRrNUmMVUTZVRMWXDTVekj-z98HTP5UTQVRyRVos_vgs17KnX9xdRwmZtraz2rZTKkl-KD5ut1Z64V_5o1-uco65NIb3VTRmRGtNeKyXatOQKwkBqRXRvzf6qNebizWtrGGiwObzU0ofHGiFCbDVNuSQ_ANHaa2Muzaq81uJ0CFlOl2mVmxGaEBbWcttIqh2FlTYO8meBe21lnf-CdTMpiLoDZuwgq6NILmXjqiFgjC04qcCygA6gy4ll6wAAAkZmMqGoKs8V7l0PoZluu8zgPlBFQI1ZqP9n16oOV6_8878TOX0iwMAV7V17OLRB_A37CBDVgyyh9B6ZmCr8BgWA29DJ0VnJAsD-BKiEeNdQEjaQcAeFUJGfZyzM14cozAEqWdbkjHPNnLMmzi34fQLATjfwYA8b41jBjGAmOEhYzO4tXQJquBGNHV9insiZFU1raTj5mM1uVYMzCfTtRcH1G0GgiMBmZseJwVl66cBQfYKOhze6CBupmbZw9UBj3nq5pIWsZ7PMBaJph-Dt7bOhfvU-mzIWprqf1e-z9aGCC_v_XQIDMAQOxbXchxNjnl0YfvQh4LuX9Uobc0VuD2HStNLOashcGywOrsFcpkYsnEtjkcDQVwaAoyciWOu-TuypFdBkXI2gCj4jKKGsvAgE2MiKMjIjFJJ6zlrLADgNrkYNuni6yBXrLoBB_SWLtiD74zlKGOEAmA0iwEQOG0TQ8lyTzhV4_oFxthQJRheQQA5opzzBIaLqXeAB9ewD6-q71CYNwT7GiM0fw2kR7tZnv4xwG9yTn3UTpGO79g5N4-p-Mh6KSwoOioA4rg0c8N7yNCZE10MTEn9Ao4sLiDAowMddnezQbH33jvW3gE1JklLyNKa09HJY7MfIo7q7WLi5sdRcAAKozEAbQKzuHi3bbfftnrfXjsDfI-d1ccuLAK76R-hIyvUD6WegQTXmaLKUFgDgDuKRowgBTqTZ6duaD8FZ4Yh0zkLkJFXWjk8XR9LZx5wQPnuPIz45wADoHIPweQ-h-eWH-r6cwAR6gWjBDw-nBezQI10eYCx_j0dxPkmCdE4h0TsnFPzxU5p9ng5ufRPcdj4H9nJwRjl9-JXrHX2E-C_yM1MqYvNMqejoH8gFIBALam1ASMo3QEr8Uco2X3UiZJeHXgL9k7UuJD_V0DLwvHf1fvmFq9Q19TRDwDgIgaBIwAA44FLAj2Xrw6BEgfBQC3I0AfqH4Wj-T3Iy6roRo_5SZOAAGL7AEECgGFiMDsAADs6B9yF2EKd-Q0sB9G8BgBSBKB-I4BkBq6giYWD6VW16kgyYOA9yq6JCZCa2d6cGN6oG1Boapue-tY4uc-BE1-uytmQWOWFgd-EWcW3BOWGkAmnWyByWJ-aWF-gGV-getmEamiOBRMkWQeWM5QaIlAiQ2WZytmmiQ0LoYw0cHWByZ43WI8BuJ27AkhLh0WSwi-6Crqq6tmnqY4dkWQI0UGVwrhbmIR0W00Bmv8RMue-eheteLObBFggiVhARtAQ0v2W2Y4vWUALWyG_hiakYqRiaOhWaZkMR7G3e4mseCRNA06gW98xRxyzkmRmAjhuR_aw02hoGmiWRqIQgJhC-pMIe4mDgQhuuBADhh2_WHeJakGy6sxFWKWHhLSGCsaeR5WBRgRTRtApRZuPcUxTh9RkKpCAg5grshyC4oKthRqYAByfw1kugjhR2exMyq4U4GQw0xxk4Y4rB0YmaRMsYHAnhrS-ClM3uacIAwsuqQJqCXhB8a0IJaxWC_AmiFoMQBAsAAeO0-0BE2iuiHwBEWqGkI0W81GqA-CNx5200VwoMcYoGgJi0DJI2t2lMDxTx0xAgdMzJRMSJYJ-0qxlJqJBEFof-iQ2JrEAJEKEgu4sgzJdJcpUprx5RqOWmkYHJBuZIiy3xzuru7unubWBQ7ABc9GmskJgeDW6yCWcAlB98rA1c68I8LilAnYnxzklcDpYi-okaSytpACdczprpAgei7AlC9pa8YigZ04dC0RKqw0AAhGFCKG3C7qInXN8ckffEmfZCIsGVGW6T3OKimR3MGaYRCurq4PmcGeknkHgOMsIqmXmS6dOIHvsRYH3K_svBjgkJGBWVWUsjgBMHQJGEglKIZJGFUksipKBoIuGV_K4ENJOZQj5DGaBtmcWWmSPFKg2SWY6QucwuwEua1DGbqhYKBrtm1sEpkDMHWRqUdlqeyksHOXuWSDuZua4K2ZyB8NEKRIngIEIEcKtrqf-BkABX-QBZyLviqRYJedebeQdpqWOl3NdiPK-cmbmXuRmYebwgRGItucGSvJ6XXL2RvEhYHpKbqoIk5qmkvDABNj6QVofuRdhUcJVjRQRfRY6m5sxRGvGd0VKebsMecqMTYXeRkEsFBksG5isfCceMxcBW7pQB7sKfREWMrP7qLvxbqr0dtpomImhTmY2ZhQZmPN1FDA6DDHDDRGrPwnLEoArGhErNxH9qrNHK5cJKJGkoBNoE8frOBD7JqOaCbI6OpVMMfB7DbKINfBnEWKgJAHOAHFPFPLoPFXPA6F4CIP0bMHZCtHYAHBlX9miLMLuKiICK0kRC-FlTMC_mgB8K0mlVMBQnlXHIHBrCHPzJ5XVVfBRAFTCHXrnKfPnIXHXg1WwWeCCmOdQLHrkvyu_EGoPGImPANUlZ6DPOnGZIIj6s_HuW_GOH3OivOdlmYKOa9HCaCQfNgmwmgPYIKbGmwSwWcewAVVVTldiNQldQXrdceAwgeU1e9bgp9bJTAD9SwjQtdV9TAJwt1EiewO0gLHmNgF0j0sZq6IWkZqgP0SMhEMdmqlhQyPMrjYhsbomicjyTCFePoHShFS-ESrqr9m8nAB8hAF8tQD8n8lFACoir2FAOwBNWCpSmTRqiaiYj8ltYiLTais6higfD8levAJNuYPYLMCLrejinigSvwBLWraSsWPSmTR2nrQJbWGKtyncuwI8nwaeeTaCoZNNVcJQnQqBmGvsRbvoKZugOZvbsITfkcBttaUTeNbAJNagNNX9GTYOZsKgCOc9MHSRSPFhZRffFccHdNfgXXJQvwBWfwHQhnSAPEFANNdnS_rMInugGkEjNkGkLneUEzSzQGCAHQqUVbRYGdlsRrsAMna9NNZEWTdNN-QQL-aBdYkBb1C7iBf-WMkPQIJBSZdBWpc5e7arurllvUfsVNZJgzbXa9PEQWqBhGv-CPB5GODgFUoOZQM6SMBkErcvH9DgKoNgFkp7gikClAAHk5M5BaK1M5sdGTR6nloakLdQKag9PwM_Uiq_SAAnWVuBm3Vlh3Rve8p8q9FcAfTBGeCfQkjAEsIAzCiLR7GLSrV2gdRrSAHLTjo9UrfMPwD3VKd5r5mTX4QQGkXA_TYg8zcgzCIOWg8fVUlNMxc7ZbXsKgPnlqjvVhSkeJswycjg1qig1w0fVjFUvIETYw8w0UZIyUbPauNQFUe1rvVKYIr9pYSJXkBEEQDUUnoTsTk3uTpTtTrTipG0TkVcOunw0TQQSwFVD-XgBY5JlBWcu8XQNOF8UkQ0UcCGH1A0LvENClYzDgBE1E0TWIc3dbfjA-Krbsqw4zUg4ZBk0TDIyYksM3WTQQ_gnk7WOmseOUxIVWpgNU5wFsOk2TSbTcvAPU53bbSNbQ9aXMbGT7T0H0PtZ_HhTugdXuTgJAPDFGC8HpEjDM0QKKgfO_UQ76rGsuauVKQ9eYP8VbUCdCRCkmKmFJBYuwEUjYg6bDffGpvDTkOfuw-wMErjlzeYJWKmGTbCXyQiQKUDZ7ilMUhaCkEIHMtifs7s2gh4mICCvjI0ColIOCwuKC6eYwGgDMOEBRSk62iYpTLQJ0tyUbVbZ88eIiRDb88KEQBaE8UIBA5yBpL_aimgoiMMIdBkJTGiWJVySAHS2coju4GkGtJAnNKo4UR3RTTQFTagwoxgwUjANNHWhixYNzPiyLGDHSx8xDcSz8_wH8-S4C20DMCC1y7WIwPC1AJC5JiLCa4i7s2sqCmdciatN8-dSieAGSxSyBFSxKYa7slUvywg9k-w4ZHK_K0I4XmtIKuvW7Ww3XYXvRoxsxjtF6xCn5sGxCh0xGzxMXTMJGPM0jMmym6eVs8NIwJMqddsDAIkGtPMxpD68AFW2ILW7QEQPIFICW4ZGIE3fm5dh2520G83VIDa1KFa7sgqUO4yWwHa_yYS1llq667q8C5Awm0q2csa-4gi_nlYCYha6u6a4m4wAO1MFOxq069Oy6_85Sy7p60u4ndK2tAU_ML2xizy6RmG8WtQCIyYjG7prYTS6Oxi9OVe_K1k1vYZGfRfVfZSLfffVgI_aA888ipA-wPGR_V_aOom7s62yyD67By_eIGA9zS23Xb-ykw-8G8W3XdhTe_wAQ-IAQwR69ER32xh-YFhyANGuQMzfEC8OKVCWxxx0AfZHR222h8O0xxR4yJTLx2FPx4kBaKwOgOIOGUaZ42iLEAQIJ9QAx4CexJ3QxyO3S3m1bevuSaakhx7HhwitS9_ei522q0DUe_a6S_83O_qwu5p0i5a0M8_JzceHC9u25zCfuxO181O45-S-e9S7SwBxizW6UwfCR520-3yx3UjEK4EcALF8eHI4feg0ozS-wP583QZ527sgQztaOqV2Ipm2ygdbm8Jym4W2R6W-W2tAQ4s8eNW5gy11Lf-Aiu1_W6171zK-p6gAV_K9NHVxCvFxi_2zp8J3p1e1NxYEV7qkZ5avMMs_wJJ5x_ZG_adHN4tIe46w5zO050Cy5z-xN4mJa_qHiux1J1x95zAL5xC5d3WIF4dyFyd2F-6xewu9Z8Vzfje8AJUzK690TIlw6wK8brAyNCD1l9w4o5g7K_l2D3tKj2cr0AIJ54iHhaOpj9jzAJV9GgclEFm9GrV1FwDw16J2WxW8D3ii_urXF2Jw69Goz5RPgjiWzyD825IEx6Nxi-N5T83Yt329p0HQTHN7KQx6L8txCqt8LetyA6x7d3x1x7J_Jwh3t8L4mAd-q0d0Kaezq2dwazr8O9d6r_d_ZAVE95IJa698i6gKi1MOj-dPMNi4jXiwD9pfr590b26zQB63967-SBYky9OJTPYEVJYJrWb9e-J_TzrZgKL_KxD_yyl_kUw8K2WrrZw9lzw0j3l674qwD_N2N_p4mwr0A5u8r1t9Jxr7tz_Wb7Z8e_Z4b9qwCyb65w75a6vEaaZv0apwCpcoEAIM9wiw7yi2i67_ZO7_wDi1Ff997_Lr7yS19wH0YRF0v8v_2AyzAOHyy_wAAJzoHv7Uw-T3L3Kx87_eude1uNPoAp-PsF5I6Q8Z-bFZ9pcG158I9SuMjI_F8BeZfQXqqz152cDeF1dfs51N42dLWu8Efp8SyTFRTacAcfju2F6O9ne2_eVrP1WigMEBHLbARiw-5r9_e4XS9gD1D6MsXcEffgFf05Zm8a2LTCVHACf7g8X-vLN_qtlS7t1mBPKeHpK1y4aQS-03aXqAPHYkDNW_vaAd3yi6MAPA4QCIOYFwHglFB1AOmDRiAI7AX2-qHRozm4yxsZM8bILkSwgHOsPABAeujNFqTclOYtSP3hYNQAWgBwAoGCNxxmg7RdGUgBQTcA06qsxBV7Fvvazb6QDpBXfC7hgMtY3MbeaAgrkEMnakC9ITEIEDAOK57swoI3YAMUD3Zb0loaESmAABJgACTXePIC9CeVyhTEbWOIH7Zb0gB_rHRGIBkSjB2kOzHfgQUDp6R9Ad4B8J7iKFXE0mj_APPUxSZy8U2QHHJqzQ9j9C_WwHagF1AFpx8IUd7UxCACKErCFhIw4Nhl1WFFCdhmw13nD2mGJ8Y07XLWt7xz7kpjhlw0HosJv52oH-PyIoR2gOFLCzkfAs2vwCKEfDWB5wgHsEXig0wth8rMIuwDZi0w3hbjWoUgzEB1AugVArLJIGjC8AuSZgRhLwDREYjp6TwIgEsE1oLt-2GQuIQEPlbACYSJIiFMqWBjmUpgllUIPDEuY2UGITEL8PZUViu0eI7ldWBCRFBdUgIvlMCIHDRImsT09US0JPhaitRGCekRVEARdAWhQRPwYpPEEVRUASyVwDwAy22BQ0zIhJeiOiReCwBRRIEC0JfRPwaiaBOoswHqJFCil4CfKJpOkgyCIgesaQC0CKIMRiiLQFCK4C8E47kArRqAG0Y1VYBzgDEw-AQGAA7gjAyktgCAJqO6DxkAq7gAgIGODFu5uGJ6UEVFBpiBQ0xMnVwM4jgDujt2J6EYDYFoDejqoLUH4CMGvL5iSxHiMsRWJgBViLEVwWsfWNMpmRXYYAcgN6NDFLRBx4Y7OJGOjGxj8gCYxDsmJoBpj3APwYVIZHdF9Z8u7AOUd0E9HQAoAFoSZJKC45XA1ENYfopQDLZXAAAxEf0vGKpjxZbU0cuiuCtRrxRhW8YAhkQwRMgWUfyEsGTBpiIgLuGIDMDLiiBQolAfIBw3cRwAXc4QSGrwFEBwT1gC_C0JxxSBeQeg-gDIKqHgnwSawnjUPp-LQDrjRSHcHYJhNgnrAwoXYAoFcBihYBSJWE5KCBAfEsxYoxIYscvH6BgA6J6wYiDsDnYYArg5YmZqRJwm2A8Jvo1AIRM1GnBtR3E4UNOAPF5iyJwEiwF4AEDTgLQmQFgHkCuABRaJSksiSBLQCTYLQ-ODsVhC4nATHRgLLgCejVHCgrggLctpwnljsiUanI9pNIGTA8isY3lXWHoEFG9UnY_gY4G7ADhexoq9sUuPtDNC0BLAwgeGMzXCqTxPQF8HzOtRpFGgY6p1USghXvJkxD8UlZYiYKwZ7A66vKazOsF4pMdyp2jMqScmUbrBIu9aVlPGWqnBitU9RNqZomAYexzE-UM5jkjth9oawVUsqTgEcRFi3EHiTqWNImmuJSxzkbxL4n8SBIQkYSCuBEiiRDSyizUhMm1LiSYMZpBJA6dKyGgnVxy6Ab4oWzSQZIskOSWesNN2mRhWps0_JIUjJbRAjphkA5CdPenKjt0mU5BNQAnKHTQmhbXhrUnaANIHpZRdYNRQwI0xFUbFMEYjPWDstLiEvPqD2X4BwBQxAeIfNnCOr8pBEAADULG2AskdxMcENHQKHiiYgiAAJrky4AlMubENHZg1pNqSmW7BhSGi51NRjIafPwESALhoxQswQGJAbp9MWKQ4ucM5HRmzB5gMmHGXjMgagYMcNwAXCAAHDwBFsMAPqFVFBTmIew4srAPqDQAMzzZ5gY8GOHxkUJPcPE7YHxPQBusSy9iEAGeLABezvZAedWdEDRCe4mcN4bwOLL8h-Q6YtSSMFBmqRkyixrMscNYI9hJzI5bmapEzLjley5skFdWUiWyCe5cZKQDfvoGnzDIi8oGVcIIj_EJSZgpmDgPLJikwA4p_45muqQhrDYK598HwM5AuKM14gMAaCDJg7ZhhOBooCzI-EoSxyKZmcscBJWXSN11gHco4MkG7kMFe5sAT7C6Bghh1M0w80jKPOejjzpK7AdOVPKpkEBG6iqVcAXIxxzAgmnuQoGrJ3n-ytZRVDGtq3Fmvy4AaCDXOzH3AgBqkkYNzJIBZhpzmZ8cwiCzE5DVJfZj8s5DfKVmPh5-nvWBbsg1kBzUSqxafH7wyT6BXAbok1gHiHnPzPcn89-aLmtgiBAiFoI_jLl9k7yF-2CWaU4nmnTSZkaCl-YjSQnmRhgHLPEaxy4DCYRc7c_lNfMVl3z-AD8ohZrM9xIlTZIQIsXQrgXEL5-mQN-WSw_mqKv5gRHyH_PYC1JKsNgtWSgqvmhj4F4ikAJIrYXKKdAmC8hSAGSDMzFFqC6xaQvUV2LP538k9novYCTyWZ08qYNAtFy0LjFxM--MHGcCDjnIoi2-crIsVOKiY7CmRbYpkrHsHZMEDfpyUIWcywlMESwIjQiVyzZZZi2JZYqfnSKMF6CLBaQODiIT2WWShefylaxaYzpWU8cnpVIrrkMKYib4ptTfICA7wKaFyA1MzQ5o-lZXM6J0qMpiJq6dcbOrnXzryo7EDdXOpXSWWN1QmFgSZbuWmWZ1Zlyy_gAspQFzL-Aqyq-HQgmbChzwkoOsqsop5W0tlwoAZQfEoSrLRUxYNrsDQyJl0eu7yuyX0CJpC9LsgjCwOdJZBnhUoW43MjjEiBFlKS65MppwCwqFsHl_SxIPgkoTwqD4hyckC8E9x8hIG6zEGg_GyA8yjKlCCAHUh1kwwMKbuOgCkAmAbMgVmaXANaEOzqlcKdcKrqCu2aXSNl_BX4o9TSSDcAVM9FZLfjQCP4sADMvmTorag0xGVcZRhQSX_y9dYgDM5hXAGhVEA3p8ALCq_lQCSqGZlCY8vgQYJRAsA7K-iPpUBmx1eVKkQtvtJ1W9lPwfDHgpmgAKsq38-qw1cIvWymL92nuHALgEcWQNBymil4OOS_LoA-gzzSMNAhlzfkeyFxZmcHN8FEBIwWAUVZmmvkBrkIABENV-U_kRrgZUamNa9DjU0wvycQJNQwWZkuJbsDuRIN22NIxAdgcASMHFGbWDlYg2wIpCUmjpAyo6dqn4qcXMCOrMGfa6IM6uVCurM0OBMVUcGDghlwl_qzuljLXx1AihDgmCNiWKBRriK7S-OpfMzRLqcA2AXFV2qLXlqu10azIOWvjVdrrF3HJYNyudV8qTirBEwlASdqPrylIANzNPloVSkhUK0X5luJ3HVQuO0-VqK2M7Xqyo8w-MsjMlPXoTDczJYpYgolm2wUFuqRJRUvqqaVqlO6yBs2osB4aQAWAafNyuGh2rBaAq8wBaqFWxpqkuAYiBgCgx_RgFdM08oCtPLkaoM0-VjZUA42cgjAR_SQHAlI3GlrFkzCBksF7KKAIAM0VbHL0LbgrIVjZLVbCouo3TW4ciFKB8qWBKaiajKKTTgGBmbdBgekYfFRtaXAzaN2E-Vj3M7rftDW5G3cexx25BKcA7-ZijOnikATa5Ya9wGBMjX6TheW2MteOWlzchHN-bEDbAE9weaoNouHAEf2WRxaUm1G7VtEG01YJBuUDM5IW0G7Yr-OeKgPOs1A6jBwON9L8vCL36Rg-QvADwBiJGBPAX1dmqOlAE5D2r6Na4s-qrjhDX0V6s68vleyrmBa2A-AYgGvhy29xW4lJXTcmX02UAPlicumD8m8XjrpWk6h3NtsZDOrs5EW-2fwFgBgAoq8mi4pkTChpASZ627WZRrVmZbg2CWk9hEBc6XaGC12vBTAGlXgEWYvm7xVR0e0Za6W43eic9rgUWbWOVm_YLZsHVvrXIkO08s5ol6uaou7myDV5qWCtQ_NAqALczSC1XqwtyOlJpFrvXRbK14Wztq9qS1Y7n17Ab9cpJ41man18O21YVpHWfrIw36o2rxtw3WKANQSmaBCgaW6oV1KQDGaCnXWRhN1Zgk9sHF3X7rv4h6j8uhpk1bjp8CmxFUjHU0JAoVsoPLVliW32QVthmxFWZuJ0lr0Nt62NQ-vV1_qGd1GxHXRtHUtBIw8A0SMdn23G7IKeO_nRCnI1C6Otg6mjZzsLaVZwCJhT3aPyVXfTxpTqy6VmqtoB6AmBjHJQIDyWdJl1uS_Jausxk9k5d263MLiwXZ7qtsB6jlUerF0Qpg4Wev7GeucQO5Ld4a69Tbqi3Az7dRtcjU7s60u6lWhbL9TNHIImbRtfGk7eAHA3JbsdbUWDWZoQ2EzfVte3PdnrPXyJb6Yi2JQv3iWB7rFsiwjVIJqXIKjtVtcjY9pD3B0w976_lW7sY1raWNppdjcuk40sxR9qe5xX-sQnuBSIwocWa_i7BYkcNu-v9V6IlHizWozEkHQ7vQX2L2d5a2jQPr61D72AI-5ku_pUkr6mG-e6XYXpwBbqiNJeqKjS3L0VlLVIobpehoYWvqEDKTB1a9InUfS9t9B6Vodrf0t6QtxaqOmZtt33qqd3etnaLmd00Hm6g-j3QQLj29QE9mDQ7cPvNpsHeCjS7XPLQGItKEd3xa-QvpXowz5ALkxyvjkkBQdtY_IvWIKKGRSRAcwOMHI3kzxDRBc0KClq_zthmGrGjeUnLY1bz2NbDXuM0raJ1lM4nDvUKYPqD6hFR3Dbee_ItNY6zBnB-g8TOlKwClw6RDIwtCnksPp4ocMOVcC4ZJzN47G7eVcMEdCMt5wjY8VkcoEVgzwDDEYDQDrGAj-SDA_lSOOwAGgu4O4N1JAvFgDizBWjlAClkAWLkMDeqKkB9DcBmAbzdgSUvOkKASC9G5R2wBUaMdj5DHGgBq6zQIDbjXLugkx7ozMYpabGLQaAY8PpHWNLGHYKQAAI480A4gLWYHgEuPok8FsfSGAkfnhnhnAEoP7GIkmOehMgiIC0H829EfGr4zxqKR6QjJ1wG4PcR_GgEWWsDlqkgX462IBPPlY-GU4AGeEsBkJ9gXx-E6Orh0MCeERwEIw0FBzK5RQDQLw4QFuD3BHgabDGn8iP5BrEg1kJ4HBUuMBGMaB7fo_xmEpjAWjMx9o_oBGjrA5jHY0YiMduDjGRouQfoFcGJOknyTSwPIDAFCSWAikAARUZDwh7g4wdECVM2BBkdTrkEAA4X0AWgtUG2j2IrK0HPNWTtx9k5zA0jTRu4cQUiDWNGJyJ9QaxjY26e3lC8QTkkajZ0JTp15hChbRAieHONamTChaKMxkE_EXGoAxQVcH5nzqp082NdSYXPUem1pVwyZmsELyaQZSgze1MZWGb60Rmy8cZ9Y8Kf5TVmEzlx_M0TFTMJBYTfK05UVx-CYA5eg3Mmu4g8D6DnmZNP5VyT51O03VNqPM41PfBFmXjCETrYWW657lhCXM-avOT5kzIiusHY8PwB-SfZ1QQoP4VaY8ADmuMQ5pAB7BcQNB9QR5zbniivj21jTOw3c_wH3NChDzAtFXhzwPgvmQAV5_UMmGTBf1wCV5D458WCQQBEg7gCAKGQgtQXKIjtT8zcN_P_nALrUahooCfPdd8EKFw2B-b_kg8UL15wCyzBQMPMG5RwetSPGIihltQoQCAJfR8zbAO4V0RCwRdqYi5EAr54i8mBZgYWsLa5nC0gFfN4XKA7swi8Jb_M8W3YIFii1YGsjuAAMoZSwApfbCoA2Ld5pPpxe4sAXAL_FqjthZ_OSW3zkyMS0haZ47njLPFjmuAWggWgiofgcFsKBGALlKEDl-IO4mcuuANLX5iAPmiIu6Woo-l7WYZcstcW_zol8SxZe0tSXdL9yMi4_nRCwBZwoZB9JQGyBVR0QLwHy8hastxXgrz54y5FfMvfmwrOl5MFFGAvsAbu-QBFKGS9OtI0A3lqK1pYCsVX0L34AS8QyMvhWTL-FzS6cJiuoWoopF8AjdxHhGjKE41vuRaEfz5B8gOVji21ZGsFXQrQ14q-xdKtDXiLUUGS1YDwD0iD4aCZS8MGGDwWTgoQRa61bysVXkwq1wSz1ZEsHmzLm1wa8tZsvVXXA2wPwCcFDLOl6LdgSwP0D4TDorrfl4sO9fuvdWyrEV56y1bes3X7kVVm8B3DeAZA5wlCYOaREuSSB9QyQWuAIDlEpAwb_lxGx1aUBdXVmMNvqy9YGtCXerxF-5KNeaMpB3AvLeq2PQIDqAIAuN6IGgjQQk2IbiNvi51YMsPXqbG1um49divJh7ke18zFeDHq0WgmQgIyKZidl9zBbmANq3LahtU31rcNkqwjYZsAX7kH1oqKmW2AuWXQoZIqLckmxwAFBHkLW9tdNtBXRbIV8WwbffO03fL9N8q5fzIv1r5gsAC0LvG2CXIZgMFyhPWq8AuWnZkQSgC7Z1v0CKbYt6G97dMvw3_bMtuKFVesDuJXA1kAUAxhOuF3i7jECAMnZut529bwaCW4bdes53ULcUZm8Hcct9zQyl4IAqhH8DV2TbyYVu3XeloN2fb2d6Wy3Y-vmYTxKQUyylcoT7wMqRATK_RfPnw3SbA9uKO7bTue2M7uFxu1LepvEW4o8Vsa5en0gJBugC9hyMeMiD93yrJ94ezAGbuS2_bE94-3FDIs3gFwrgC0N_eOuUIr0MERiJ2Hvu524oT9l-wfbftH2ALcUdAglaUoeWrbdAVyxbYIDPAxwGQVCHkDAct30CkDie6_Yksm2oo6BKq-eBvLUg5Q5mVm5NcStTiH0-dPB9ebIfk3ML6d_W_vbHtG3m7rD9AszcvAQBgp5mP7C6VgAsBYLQgBMcGUARQAWH-oMhyLZ3uFXerxD6KwFbIfy2vrB16NRMB9B4LXLu8FIC5f6B_Yq769oW6Q_QJ3WPbqjp6zw6bvv3FH6BD66lGyIJ39IoZdxyPE8cjgFHZD7exw93tcOir0DkhzpbIen3yLYFo4JieIh_Yr7N4PoGkGDJ_NCIuoPAGwiOToBJAVy8huYHifRBl4ATrAtQ0dqZolAm55ktuc4sex9QqLKIGglnCjw7hp5A5SecHP80fk-oIqLed8sPnQylN-uzFYaeXIPLLT8ezDd6fQIqrWM0flMBcThADrQBLuwUituIpKIkgJWlSyatgOZnPkdh8M5HujPGnEz1m1M9GdFRoEzN_UAyG2DISXLXd4pAuCTuWPtbklg58o-Cf2OQAYzpp7y1adOPpn1znyPLe-vUBfrbl-21JDHC3IwA-z0F7Y5UdrXfz_z850C8PtXPoE5tiAFgFgDJAAA0guXePHhQyVcKANsBweohEXOLwh9M7OfNOLnvD6Wwc-if1qNnoZAIhGBFDUBaXF_el6c_GdMvMXMD7Fz5E_vgFTMUnXWfPegjrJDg_LiB3Y9RefPGXgLy52i9BcIOQLvwdwNVcCDbBo7D6SdNnEOhSQuAaQflwQ5Vde20X6ryZyy5BdAWqrbyKAFEDsCUI3XHr2l61COecORn9r4Vxq6dfYuIDZFkSB5bwDJXo7H6AgGxu2C-vvnxz5-6y4dfMvgXYbva3ZCLhWAZEl9dIlNYEULgnbxN951m8FdBuAXjrzN1q6AsfXI331ou3QGjv_3YYNL8t3W_aiVu1Xwbmt1i67fRPrASQuMZNcJcuX9Q0bwF769Ts_PVX4V9FyK81efPrnrUSV-wG1BHAAAUs4GqvCgTxrl_UHo_UBs3fXyrlF3a97fVuM3A7ld7xfzt-AaLcES-tCEoRuAGMwNTt3e5Zj-uQngbq9xi-XcLvrnbMBK14FEgAPd4R6AcKvdpdswe3C79N6K4id_OQPe15XEQG5sYBW3MEBZ3y6_fAfeLyLud5e8Q99ub3YrutyzA-vh3IgRd6O7R6iDF24PQTlNzncXchva3376J8k5kQKCdg_Qb5aGV494B-P2wQT1a4I_8AZnLMVOxU8uy3otzIAXsxef4DBIwgoEB-eUw6enm_g55n5MEhj5tPdUA1wZ5QjY_S31P0E2cEB_4DnhCXyuCNxHYEArOW3Xd_wGKEqBgP7PyuBD2p4090rbPIAQzyNYodEAnoMb8lxcBbeeQy3Rtje2p8sChe_PwXgLzZ9De_mQvoHsa1wDvh9gpr5bDIEoLAdZfk3Abk55l7S9afb34VrL3tfrXLxJHlCY_JgCgCj84vr1hL8F6S8sxiPFnmG1Z809BeQvn-RB3Q-6D2AHulCQl-iFSdwATgAgGYCV6S-f4Uvg3wLxl8ksjfmb5iDAGKIZjmBKEu39APt7QDLeoo7-Mr3-4q9beqvw3lb3tbIZKCYIwj0Mk997D9Bmr8Xqx4l4u99fyvqbgb3d82-1eVvU9jIK4HqhzhJv1vShDs9gBKC_gl987-_lY8A-c7639L1x_CtbuH0N4MizD-SBXR2AW7ygPhhdCO2UnoZUn-T_gCluwHuPm8Gt-B_Y_-AlgZwDQXAKWB83il6q2OCEC22SEOCL7515-8gB2fT6BQPJ6VSKeanynnqx7HHeuAAAWvSNCBh264cmuX_2a6eGRdziv5X7vH6fE99f5n9H9LaV-q-CkGvia0F_PCWBOfMIYd1bbQDR26LAgNjXz6MLeeHfKXy32r5t_wdWfIAQl4b5_dVWK4h148NG5HBevQg0a6NWA9D-7xw_fvly1b_V-Aog_NX_gMn5_fM2MPJwSiFy6oA3BS3eAJP2H4gNp-VfAfrP1r8o-SW8_rUdD0QGsgIDQyGH9v6JEr8p-W_NfjP4H4b8ofm_H15XDd2LsuW2NpCVKzBAigdeBrXX0fwP7r-a-gvzf6J-eGLuoBzjY9Yv5QgaDb_d_UAS-ghak8h-q_s7_rzFf9_W_6_6_qv-u5NcMZGaeQR0B59tuSRnAmwO4EoM_ffePncK2b9z3Ejz3sm_dP1X9bfEH1z8w_H9zItQgO5zwAXLLZDe96Ien3P88_H9xX87_Nf2gCL_FP2y9cgfUFIx9_NK1xAdgXvzZgrvX51v9M_XAOD9MA-W2EAYLBpyug2bDm0oAIAfoDEwBASgN69sAugKgCGA2AI-sGgQUCCZJrMQIQVYAPgLR9rvQHxv8IAnAKECc_fALZhonO5wPlQgYu1tt7bDIHcgXgayHQCAAm_1gCr_c3xhtaAofwf8CA9d31Am3EBy2R9_JWnEC1JUYHUsMA2AJADr_X8ysD7_PAMwCdXC11IgKoHICO9YgPAFCC-Am1wvcwAoAKUDBA7P0b8gAsP14sI3IgF64GMLZEkA3Ef_DgBX8QsBjtOwRIHyC8QSgN4sBA6wICDUgvazkRAEB51QDesYYBgBE3TwJT89LW1ziDc_BIKqDhA9oLH8iAP7E2AdAyhHPBUQKgD6A17EwN8DUguQJoCeg_wL6DevaJ11Am3KdxAdhPdGyR8ZAtoOWDKgxYNUC8_QezIsxA4iGIhVLK-2dI4AbYEmRyg7wIsDFA2v2UCkgkfzD9KrCNwwBS8N3wPkggSgMqt9g-gMOC3g5m13gozGfwXswQy612CVrToNCd4gp4MSDh_DRyb83gqe1qtWbT_2PABiP4LmD53boIRDegoEJT8ooaJww9FOKR3LYIgEYA8DpglEOJDzA-QJzs_AwEOSCYAlPyZsyLKDxGA4gVEEmsuQnkMxJ__UX0AC2Q2T2oC8QkPwWCWQ14PZC9rGAEfxhMTgX39lcNEC2BCASgN1tYQ_93hDB_A4NZC1As2zIta4VAFQA_AZUyOA4_M4klAXcDUNxDSPfEN1DpQ5EJSCU_POzItCeDvzcs4YKOywdgyYwOFDTA10N_d5ggkL1CZQlmFbsyLZXActqAWew7hP_WcBdwRfRfzF88_Iey1CbvHUMgCXg50NFC4oPaz6hiIKMwKR8gcl3WMJ0dAEoD8wgEJUD9QtMOidd4WMLo9QyRsMTCogKsIZCQwx0NrDwwuKHXdlcApGw9O_QcJYAqw-4MZCLfKUJ7DcwtQPIcowogCncFBKCyJt2A0YKiBZwPIAsdaQl0JZhyHGsJzCtrGYJT8BHMi1J9t_aO3sDtAoUJTCRQ2cPFD7QyUNDCnQw8LpDdwva2HdYaRmHNpTmeIGPRoIZIGa8CkaN1CBL6SgJsd9wpEJfCdw1xzIsH0cFlsBXLXKCIAy2HYO3DRQ1xwgibA3cI0DSEBJzeBD3XCOiB8IsCM7CJQ5kOnCoI0UNG8xrFKA7gRgpX31AvATIK3CAwo8IB1gwsiKnCDw42yojmbBAKndXgZqFDJRQCILn82kVwESBKAy70wjqglP3fw9rXeBHgQHOqwXslItjWTDfLJfzD95ImSKWDUfeAP1B-bejy7tmhUCN2DUfXSKJCAdHCOGBUAE90zALwhcH0gGVcyNIiHw8iO4imQ7SPXdw7SjCMcHnAjA0jcrHcLP5LIusLD8j-Kq0fwIwff2ijMAM_zQi1AyKLCjwwo_mZslfOiwjsFLLlxHhSMXgN2C0olKJnC8_I_gUj0AS-nKir7XeEqjKoygNKiioyiKSip7W40uR6RWP0fwbyVqI7g6ou0K6DHw7sM8iLfQ312sqrORBMcr7ewC6AT8fD0Sjk_EaIaieI_AN2t0op5zcBlQnl3a9e_ZaIWivI3eF2s9rUCyyAjgQlxPEcnUMhOiqXEeErC2g_aJ2ihovaIqsowhQWjcYAQIGshL6UMgaAsAUyy2iKrO6MsDho2W3nCK7b6zV9O_NvwFAI7ApF-i5PUNFl8jaWp319-ARsJFB8QJ736cdfM826cPYXeCvRjfe81N8fAySxRjCwdGLwDcY5MDnCz7EhCuJ6rL61mAQtK6LAcKYvcIzCFA38xJi0Y-WiC8WY2507B4xOlWE8zHOAGZir0SmPvC-ozmPYAyY4PxZi9rUUFMY6AUt2EjFY1AH9CbwmKzliUvKWJljVAlmI-tCXM8GStrJHgPOjQJSbFFjKY3qLhDkYjUC5jUQHmLFisCRB2Xg7AE6Nyir7WhxcsSnc_xZi3IyWLtjpY7mPJixY6iOOZMSFYDfcxwNBDjDrwzSLF8KY1bzZic7HWODjZY0OOZtufFyyNIvXH-y6BEgbYLjjgo5GIzjtYwON1j9QxOO0dIAMtnntH8GuLpVLYnSOTjpbVOIdiQ45MH0ipXF4EgkvATElctPsUiFAh1Y-ONvDE462O1DbY1GKDj249OM7joncxGciZEC4D3doAF0lDJlfIIHRAO3RKMTj_Ym2JAA24i7T1ixYtKM5C-5Jrwrh1jEeOLjD40-IliD4o-MdjkwUqISsfQPIEQjSIM0WagBAC0HFAXQMtktj6oluJhsn4juKP4PrQ6MmwrAMIHntxQNgDXigEieMzCp40mLTiT4l-PXcOXFy3NMggdcImisnL7GEcEUIBPHDfnMBLniT-TkNPiEHZ0mrVqrS3m24AI9T1QARZCoEkALbcLxIQgEmINADH48uPQTK4q9BzEI_VDXm9hQQCUoQK4MRIW8lvX2OETDnMuOniK4lD1xicxTOI7gUHT_wHpNgO4iMI77eRPUSlEtBNniT4nMW0cI44kFctCXWAAEAqXWRNFjzE4xPtjj4oRJzFmoqM3QQYLE1wSBPXK9Bdx3IELRydHEnyG3tpfG1HhiraRGNU8QAHGCCB2AZhgxjOnLGL18Yk1KGiRjPUXQGdCYh4N_M4k7oESS8A9JLXcqrKi2XhrwDGxOivZeFz1gzvc_2KTa7EBJit8khJMTQgvBpPSjdxH4HnsgbJ0Ep9nbepOcA13B-MnjYki_FaSsgdpKGT8wxB2GAHnLoA3iPPVWzAcGk_7wnCYbFpMKTg_BpJo8L4t33EwxwcRMW8Vk6ZOQT2YyS02S2kopKGSw4uazXjWE1cOHd7zZeBpDWIi5JuSOIh8MuTJk65NahLvMizikbg93Fj83kPuVxktxIuKWt3kv5JGSUEsZPiStk1QOKT5IgFLgBGLSZFpjmvYQF_9QHQZL-S1k352-TaAKZL-Tmorm0fdBYwBwXAbgogBOTSUlLyJSVaJFJuSGwjy2E8RAPwELi6U9_H3jRkxlJJTIosi3eMxHCIC5d0gB53kc8U5KKaS8k8ZMRT9Q4pLPju4xcMpTv7CYFgBNgWlKlTYU85PCt-U35NfjwCcOzHAXSFSPgSCAayDpTgE2IIPj9U7ZKGSIEt-IKQYgEIGKhhgJBAxt1THBK9SgoqFL1SHUs5Jzs7U5lNagj-aJwcsXsWAAAcr4klStTeUuFODSFUh1LsCUxSCTCg_rYoIHMvPKVLISJQxNJQ90kv5EQdzjPwAaDpvIQECNcUxKMLTFEmVIuS5Uq5PtT2YBSJMcn8K-2uQSgk5ObSGUhtJ-Sm00JIStDk1wSZZY_NwEgk2vFJy7TQkntIRTG05lPZgNAyHzRtvHVRW2B0nKdPjTdU_gHzSZw4I2iYxrQF2egMbFG3StwvWpNeSNYtFyhxynOGOqcEY-XzCsPYfJwVoHAZWiSTdPYR2xi7PewHxjKIMzyJjwrZ9IyBFaN9LwCbwZXFSgv7UIC9l4gEcEJ93PSyGdIOcC9NHiYrcDNSgUvIDIoZQM4P3PB7AOBCqsXAzAAyopHVwEh8wAP-IO8xwbz3wza0m1NGSsMkDKoY8AvDLgRmbFGwqRJo3n33lC3JCOwdqZZ9Joy2MzDI89gM19OYzcM2jNqCUHEYK3cQtOgC5Tz_VjLBcRMgp3EymU_UOUzmogKNcsryVwD8Bl7KkJQzb4rTNUyX0yhg0yUPZTIbDFQ0SE_8HQLGRARroxKOsyzMsTIsy7fWjPXdnAA-Qki7AESNHEbEfOnLZzorgKtthAZzLeTAMrzLczsMiTNUDlMoIOgg9PELTe8txUYGONIU662iy4EXhIAy7PUTLizLMmcOUz38MixOiMQVywfRxnDGgcSlM2jPfxYspjOKzGo5TKP5ystoAtBiXIgCiBzomCCCALrEYCEyfII_iaz1MzzIgMoojwD8Bl4z6L0dEgFyyEysAutMAzCs5rImzCA4gKjNeszG0UEMgEYDtilsnVJztGM8bJYz8M3rzIsoE9gEJcGYM2KIBWbJbIJSJQ07I8zzsiAw-s-oKIAEibAHKL2yXPBmC1SXMi7MDTpbV7JwyEsi7J8iLjWsiec3LbIBYAss8G1vDWMiMLGy3syTIgMgg2j1QAbgwIFDIsZWICRyuvVHLyzckyS3Bz4szTIuyyso1KwB8IgnNa9esTACWzGslbIKy1MjHMhyW_UaNQB6cmiwZkxwTVJos4fTSWkkhMoC3RyIc6nJb9M48dOttXLSwBggHnYJPqzZcqXKpyrM_DMAsTg3HOts4gDmymYfgCXOeyHwynJazFo1jMejwCJZybc7I6O01MAMVEHcCJc0HJhtzcibKBjwCCbHyAGgwXNeBQyRwEgAiAO-GIgJczdJOy1ss7Mxzjg8Akjc0EF6P39cg5IDiSugCXNzSzcqPK5yZcymI-CUgKgC8Au7WcALy3nYHJb8yc9ZJisPc97M7ihUnRzjF3oq-27sBgKYKizv0lvzZz6MuFOrzMc94LjyRw13w5t7cU5gR83TfKLLz_g9nJAAe87nJGshUugCjMM0__BidJItXJhCu8rdOnys86XK1z2obRwR80U3rAJygCFyx5pOYoTN2sNci3JOz8MqKEgSXvGAEkTknI-lkcJEi_Ldyq87fM1ySs_DLltOQmHOyifEnmkoRUoGOKOQvZITM1CN8yPM5yd8n_NahDQ8AgtsHQOyBJ8yfDGnsypgVApp8MaSAo_zfzGfJlzA7I1POs3PGO3jFiwSAojywcr_Ovywc3_LsCY_GgHjDKETU0YgoQsvPuQM8vqMILd8-5CCDCXI0nfdX4WuDlF_8V6Nj8MPYVF9Tss9vP4Kr8zzLvyoouuAlR6HFQtuRUItvOnz7AJQoULzsu_IL8IYkPLeBX3T2izA-oByBZQEXerIMK9CyTLvz5bBjFUtXLG8CahT3Gwsvyp83gp_y78mj2ot3AKGNfdFIwu1xy1fGjN8K7CvWOCNOQo9BZA4on-0uYAI5AqmAhHBS0CAXI3eOCMb0yp0iT2nB9LqdUEzYCKz303X3UEYk3eB_TMkgJmySLzM30ryOYu2Pcy4CxqIqKJXKq3JMIcSJFFBnACuHPAXEFRDctJIRsJmMMirQtaLGk6AtbjGi4ovJj7ACVxBC-oaIsJcH0XUApM33FwVnAvAVoN3i5i9MMmLQE6YvWzZiiVwNjFi6nGcAbwXxGCRYLB_JFjfY3YvwLiYw4ujy9Y3YuicM8IJENA4feICfhhHZmLeLnEpou_yWi3YvXdCXInF1BdQdgBWLdQYJBcQocAYpxhKQD30nT7iiV24L-E1GKBK6C0BN2KBCh9AAAjhoFms-oT_1hguwDIH-KJXCvPITni7PNUS5iqmPYBlccDMCRHPKRNU5hfGeNbzL04mMZLPkgOKxKZi2WMZKC_fUGcBdQG8ANAK4dkvbg6fdGypKBHQEuFLXinyBscI3fUAd8ocLdwCQ1it5GaMYIRUtNzBSochVLK4xktOKAcc8EuLRQa4u-KrQhRBmixii0uVKjikUrVKF4gJF1BnALoptK7Shyy3FmaZ3OpDFS6goOKhSt0tVL0Cddwd9zwfUEuKrzB9BcQwkLFPmAjMxUoxLRkzmOxKeYxkqCDnABoHVVYy-MtJK3LbUwedFSmkolDsys0oZK1S2nISTCyqHHsBx_UsqvJbkDZ1Vydi-stdKXi80p8hbk6nFFB6rW5HHznSgcoFLMS00sjL-y_5PAJwSik3jJgkInAaB8fab0Bz0rO4u7LpIqfJrKZyuspRT5yknFJLIcBoF3dKEVXAKBivNEubj9izWLpLmixaNaKu4xDmWLzwM8qkdKAGR2aFbgm8seLwrPcr7KDyod2cAocdnz6hCcXeBTKLbVEA9cb4v1ORi5inlN7L6SmcOfKwS5csiQXEXUB8Rky2i2gsj0CO2gAqS0KN3KHy4EqfK5iwVPAJcoHmiKg0EaIHUAr7QQq90CXKkulS7yhoojKgKtCqormbdW1ZsI4uV2VyCXbkvYrjsqYu4rUKkEpGztHVm3DAMbIB3_J9AJ0t5KAKqiuNKpyoov3LeKkbPNs5k62yvsmHEUEPyLYtEogSUKx8pTidCpG1PD0rPdypZYw86LodDHUcPuKSQycqzLyKnEs1ibK5m2XKLQZwEBwQcdVV3hSywlz6Aas_4pJCJK8MunKeKkEpJCDoxYpCQiccKqfwOC50qSrsihTzvSok_IqRjSGeWhzKqi3ZB09Si-ullpKi7TxqLHzcnPCsnvEquD8o-SwAJ8HuYnwsyrAdwMDzlaLqpDLz_FqpS9Gq2spnCr0OYr9c34i1IgAHnHbJjT4ouRzAcxqw508q4U4ap0rGopavDdwCewBJUPfdG0DyXgbeIWrz_TatiqYrNaoSrFozar2tv7DyG4DRyqL0OgJoFlEWrxqzStGSLq6Squrxqj6zcBDodwD8BEit73lp3_SyCKgW3DGkOtXqw53_L-AT6qsrpbTauidnAUx37iMAOmPdc6fPoFXzEopGqGriqkao2q5iwgLjdmoNWP2q4fC4C3KtCpavg8p8-Gooqc7Wmr2tN3L6zoAccNAFtsyMwm2hr-A-moJr1q76p8hqPIVNoBL7NWNAlSIHKNFklYyWor8Tq4mthqiq2AsZrEa4mp48L8QqHyRRKwB2FBB4Mytxr1a_GpVqfK381pqsEzgXa9hIr8qK9IJYzIQrSGYmszLVqgWsuqmauYqAsAUzYHEwjo64JYtmgb4okdVK1DLNqPalas3yGa02skslqtIPAJdQUcSyp0ayhCgTPiL9GVELkamrUq4aj2rOqza12q-r3asFz2tOqvqBSB6RGbKFjsgfwDqzDaouuNrzMhGphsY636sYtkrQBDlBMbd8USA5HGAEkAUamWowAfQdgGhq_o_mpNqgvJar7ybs-cQmcwg3INsACg-WtrrJ8ziujr86xuvOq5iufPAIv0VpBgBPE1KwZhWvdr1Fg2AbBx7roa9fL4SPq9etVqm6reqYC96nmn_CObJ-sSLL696pdrx6vAMnrIEmAGFBy6ZOv_qj6S-qVrI6ieq3qVg-PyGDhAR6koRdQaBp_KziS-rDLzq2-qjqGqreqSyXgSOJTqjgeirHBh4_av_DL6qsofDwGn-q3qGywl1YS4AFSJoaSgkhIVrQkzvOvqv6hurvrN6i_lKTDsFIH6SMbNxAKB-G6GqRt66pqtUClqjkKQKZwfKHmcivQXzQA7AORpFARG3OrXrv64P0kabqiUGgzJIJ702CwgdJzErmGqAvCTczGsGl9kVJczEQdRXQ3QhUpHCEMNfJOo1AgGjCCFLggpF2FCkWqcKV_hizBcyTJl4HJDEQ46VwAfIpkNgkEQxsekT-wX1LgNRBzwb5WyUjgFYQrR1UYzitRVwCNFSbleczng5viSAGDILwIT27l06XZRHhjlPOgSB5XDuD-wi6U5XWYDMcmmPRsmjJqV5IjajgQ4_MQpoSaSmlClcAZlCpv2UqmqAGx5hHKABqbMqepu-U4ARptNxmm7oFaa1uSBEiM6-FLQKb4m4pr5Z-mwZtacc6A5QSAbuSiDu54gSZrqaG6M9Rma5m_lDoYNxfzAGsTm-vjk5r-XZB6atmsjArJdmypvzo--WcAH4VOKUDOazlS5rSBZmlchhknpeMjebEm5HD8wFKKek9x1yfps4A7APSB0REgeMnjIA8Zgj61Q8DohubBGFImLARmI0E2aYWmAFzouzEXAVVMyI4HXJxQBkHhgQyKlp2VtZVuAZaYms5SYQWEFlrKaQAd7Q5b4YbOhrRomplvwp7IQVr-wVlGZuFbAmRlr-whoUVob1IJEUAHVY6MJqepCEQtneAqWp0TQg7pC5nAJXAN5UwA9WzJGyQHSGhjlbOWxVvgBOWw5C0EssWVUdQfhFjECY3dJVpJ4S6V9SpbxGJOh5oQ8YsEpahbGlpZI3dHsxlpyaXOnXJvm5JL09-aOhHqZFELgByQUGKAFzpk29AEGkG6eplukLWteDTbo250QNa14bOlza9NOKkoBC2qjlbhs6ccxuaWMWc1LhqNQJvlDDsIshCaKycJpql-UXigrIRdYrXpF8W-mXvhiJZ5jiloTVACLJ6pZJphAZm2dpyakKC1EV4YJUJV9oNQUHE9bVDWOnXJN2u1qZasKXds9bpW0FuzpxWxID3b5W2ZpOUZWi5pVaHcV9Q1aPAcPT60dW95TzackMi2NbdWj9odIRVUDGRVW4S9s5aIWuzGGgcm3Jrg5LOPNlOU06EeC-bhmhZSlpxmoFumbQWomlOULlAQCuVfyV9VWVOdIlsKgWib5RNbV2lJlXMM7SwiDbTtU4HPN9mgqqlkyaXpWTJJWkMnvbgOplqKJqOtlpY79285ovkmOrMgW0lmdigla-O69pABTlOZRXJg2j53o6Y24ZpU9Q23VDHbXoCdvbbW4DFTWsGEUTrRUM0XVAD1bmsDqr5cGdpo6buuN-hg6ZmuDoGbymvZvmVDmxhImb86KZoubTlDDpmasOnDrrI8O75QI7GiYsC-U6MKltH1aWlwg4sqOzAFzpVO1JPo6UhRjqVZmOsTqvbZsDds9auOqLprbeOq9uzo3WxLqE7kyQZXpbxOk9rWV1mWTupbo22tsU6jLZTohQYuoBkoBJ2oskoQbhHTqERCu_Tsm49iBZpchbMB5rV4vNUDFg7Sm-Drs7vmhIF-aUgf5uBtUsFzv46QW-AA87QWrzuuU1W8tXw7r9MLqpagun5UwBQumWQ7RIuilpo64gBNtzoO0WVvy66W9lvE7UukUA46_sDLpO6eO5Ls5bcu6WUTobuzrrJddO1jtK6zlcrtAYQ2qruTJKmpToO6GumFCa6NO5MnJUH-drsxVjwf9oJb-UQtih71OmE1bhAxfxtD1W2942KdO2jpW1IT0PtvTIP1R6jxbFUQxms7Ru2zs9g9lejvzoCeyYniBegb-W-k0OpbvWAomtprIxHUFYWp7JEO7uI6Vu0nlLpy6FTUXlzkQLtF69usjrCYloIE1UQa0JZpXb36SIzyboOmZGXhinY7spaoOkqCu6bUXruABHgAHxeaiYXXoVbA2zLolloUeDlDaw0Qtj8xremaneFI2qltB6vNJnrjbP02LtvR1yFbTMk7ehTrMblUXjXWBbMT1sOQNQdbvHIwm59pPQ9CbVtzo3es9qNa0-oE2N7_MMfULYY-r-SJyedbttlQuUVpl9JuxAM3nM8e2ikxMzibE2Iou2silJ6Wpftop7zAKnp57R22jrU7KAOvp-A0WfRGGUwu9zq76UmvnrSbl26vnmBFUNXun6VmzXqg7LOmZBG6dm8bsQ7WzZDtOb5u4FtH7M0TDr-ZvO-PuBlNuorkI6yMV5RC7mSCjv1t9e07ro6Deyyzq6R2uludFbETPSxNB-mXtD63-6uA_76-8IGFaiBCwAx6--z_oIAtOr20R7f-ybH779gA9BwIjOuftM6F-_Bgs6umlftp61-hnqGamexzuOa-OVDrc752zAZW7D-tbt87kca_XP7du0jtH0qCCLtt6XuqHsqb4u5_sV6Mkd_rgGv-r3qo4YBjIG4GoqE8mZJQBwQda6OLaAbQguB8AYQHGpU3v67fLR5pS1SByVDp6EOvAagApumbtU4iB85T37nkTzvIHcOvvVP7r-gLqI6524LurQzBo4CO6mB6Lp77Yui7of4c-r7v7B-B__oH6AZXge1kPBwQaAGRBxwca6xBjtEkHyAaQYAHUxUNEQH1gdHqCHoewQZx65zaUAXMySaFEpJzsUUQXNAgDTxZRbkD2mitIwEHnqII0EHjvpqjGDk5hwCN-lM5P6PVWisMMaK1K1cVOmGqGCVY8lA7Shpoag5Kh3Ohmhah3HT5UQeRoa2tmhh3H4A-h65snM0evrRB5FUZVAjQUMCDrM4l-jAZmG3dHKH2B8QPqBlBYgVp3mHKpVlCWGJ-5Xk6b6iQthQwdhA4ZGkjh_LGWGBuq3ncF7qV9p0aYgSAGyAjmwax2x8sYoeuGnpY4eWaNuRQcG6ZOZ5rWH8mF4dyH3hgoa2tvhw1GKGgdEAAtAI5JaHywe0RqW7Fcey_X_QsgJuWrlW5IGhbQYCEvHRxOhfGDgA7wG6h-Y_eCbWZpCFdZnOG-tVHWuIi9UgVpHzueQD3V5h03vdbWCZkalAHZeAnxlN9TDRkBfZZnQSU99ZJWKkSFAnXO5YtfSQlHawWnX4Bp9BnV51hpYGDsaMIOKkZgqjNQCMMfKEwzcaNEagHipSaflH4AShQqqpM7gB4HYh3EfsQytTwNkHeABgL0Al5vpK0DrgHiWPibboYW7CspYqeKjKMHKTiDckXKDyW8kbmPkSNH6jA2Cd40WQtH2B1xMyRdAdRM9U8ogQNglwk0ET8SkkSJVcAol5_K4EZN7kRSX5R3ITyAPFGdOVQrGiYUA2FwHxXSRrRCJUESlERrHlPQIa0A7LUlRSM0G2ANRAcaQkw8VcF7GXZOsVmAhxiUHmNxxmtDslywdgDPFALH8VXBHZZ2Vdl7JJcbAB7kHcZ3Ga0VSXkk2oFiRdwbJM8XIALxg8bkkMgDSX5jtJdgBolnJNkUcpKjRE3-NhQQE2KdDRvyVcaDYJo35M2jbkzCoBqHYw7g-jJAlOMopaEtGNxjToxapQJ2YzQB5jW0cgn54FYy9NjjH002A4JieCmMejPYzdMDjW3G9NUJh0ETMBqG4xvJ7jEeAfluEP-Hvh5TMkwpNIjW0ZpMPRm2l6gGTJkxZNKJu4wgYKIMw0rNvB0YgAnKAQU0swDEUU15NoJyUyQnpTPoAgA5TIqBJMmJpU2XhVTDUy1N-BXU0ZBCpQ0yuBjTU0xoBzTExEtMDlOYBtNXoO0yomIGeLGdM0ZTYzFMxgT029MlaX0xnMIYMyCxHTqN4yBMQm6qXqJDGWYSzMhoNqQmEA2agFV6WpcKbroO2LZiinhoNqXuH5fHDnBGw21giEmcAes1rNdUeswclGzUDDl5mej4yVooAdnueZ21AhnCtp8XdtjxQcTeizNwrGYUjYGhV6E2FWEacDvBEAXOgtAte0HAHBcusYUsH4AIaYsAqWw1lGnjaQ3tHNO2HBmRRhedckmmiYXszN5MY-Nr19heNgRWZn4JaammdzM3gmDA-RIF2miYX7BOndkTMwinszfNi2mczFNif5ReKbl7Ze2JsyVQeuo9EWbWUJKZOHzOtc2X7M0cMyAmsp6MxymIUPKdSACpqUiKmEgFntKnyp3RGq5P4UHExQvhYADal9hGqaA66phqaummp-Bham5hI-Gnxrx1FW6n-ADSXJJHenrTpYOzQ1nGmouXaa16je4XjmnX6BadbhzplaYB41p_3vUFNpxNgIZOZn8wOmLMNEGOmJuM6de5Lpuugm5bpnaRunDWR6d7p623VFembUZUhzNtR18YsR3x3-OfJvxlxr8p3GtCdEnxJ4Ca6NpjMCaEnSJ_pBkmxjJCZwmT4BCeXFcchY1uAbZlyHQnXJzY0dmrTS2d6NXTTYCImjjYUG44YqcieuM2TbcRomnjDagYnlJhU2YmPYViftG6TOAC4msAZk2sm-Jjk0sghJ4xj5N_Zs2dBmpJqwjtmpTFSAUmlJlScVNcgdSft9NJjIG0nS5PSenAjTfgCMnLQC005gfka0z2GrJ3iYdM7JgbAcm3TJya9nMJtyc2A_TTye8mUEME3nJvSAKciak6YKaunQpsaRinXoBKeekt5wyFKJ4prJq-mxpZKa17_porQrMgZ7KbzZwZxMzVndkIrnzogWtoStpfseqajZkGVGb3n5hS3spE5eWmavYqWyaeK6Uu3aYAWAeIBYm5M2waSWFf20ttgXW4LboxYuAV7i5md-HmaHMlhOWa2mtpxWcNYoepBeZR5OYXjQWxtMhZF40DFWYhR750zXmaPp4zu-nAR04fQGrpS-aQJgZ-M1BmzkW-chndUR-c375qFDp36X508jfmcZuujxnv5omdKqzkKHuRmD4UHAaA7ye4FRn0ZtawWFmSamaVZwFjFkgWouEBZtawFmZs5niwc6czIgCLNodIJuOBbsQEF5MkIXm6FBchFSF73gwWwULBeE4cFvBai4CF3aacXO2FxeI4wdZWbHNaGUDBoWx9F9HoWI0RhfV7a-JzvWbQmBga0sN5gkjKGqoMrVaGPYTkCmHt-QGfYXr50DB4WkzQqeZJ86T4cebn5smjEWP575C_m15uuleEUmORYJ55FzLlUWxpDGfIUlWORfzQnhE4XzQNFo2k50dFlJh27gF27tAXE2UZfzY9F5fiRaVIeVlQXhZm_jcWNp5fjlnzFlNqsXYF4tvzbbFgHi8XhebxZTZfFxNhSESFlZfzYO4WcBwsouJWaVYSOZ6fCXohuhZ8xPpxKZPmfpj2DWb7IBvjSmIRt3UynClqUmKWIlpbjKXJugyD-avsWbqqWjaGpdam6ltYXxnXkWpZ_mZF2sDkW6UDpYJIXhIWSNo5FpSvQBQcCpZBG2lmAEUXlFvGbakbhBYRGXjFuljmXg2M5eF5Lu-5cNYDFsVqMXQWkxe7NrFjmeWX9pjZesW9lmBcOXE2DSGAHJuYJceXKFsJalIIlwzoxGawdYDnmwVMcGa6UBCQwxpAp1eYJmQp5yDCmGl7eaPmEyKRbin6NHediX5-oEbPmAVm_Qymr5kGZvnozfKZKWoZyFdGat-5zpGL21apckx35pFdZp6lg1aumhlq2i0WUmGZatpmV-Vi5WFWnlZGnhOONeK5oFnZfmWxVjNe94Fl17n8Wd-QJeK41lvmZFWzeI5fun8F-IYcW7UYhYCWrl8haCW5V0JYM6Xlyp3en3lhha-WmF36YOpz59KcepgVl1aKW3ViGY9W-Fr1bJWpOeFejXA18Rc_mUVqRaaXm6Fpe64KVmlc6X1F3-bOQGV3laZXAuiZey7DF6ZcZWzeVNc7YFl4NiFXD4VZb97MF0teX501-BczX9W_ZfDgy1yVcTYTlllarXdpi5brXhV65djC7litYW4QllPSoWzkJVfbWWm4-YJJkp35aeG_MZJYgBt4QZVpWmhjJZaGqh7JeNU6uhSn1IbVlAaWB0Nra3Kg8UVDfWIAOthcjMh1o2jBXmSaGc0HoV6bthWdB4RelWLARFcJnJFk1cDYjzEAfiHQcYldJWEl-yApWqV3KRUWUV6NAo2zhB1dfmT1lNjPWMWVlYB52VntgFnJlo9bN4Y12ZdMXXuRadR5C17mdvX3Fm_k2X5ZntjPJ-ZjldA2m18DaNpwVyJflnlULWajtJAPE3CADZgUTcbljU2aAnfZ8yfwnrZwYyaMJTe2dxzAtvCd2M5jN2Zc4YqFSBcnJ5n2e2N_ZgiaDnDjEidC3S4COZapB56OceMCTOOaJME5picpNRjNibTmM5rOfy3c5rkw6MRiQuZ6Ni5ySaQnx58LYrmZTRSeaNSt2ueVMNJ4UEdztTFxj1NW57BwMmO540ZMnmM9gF7mLJ_ucMhs5oeadMR5msEDn3TZydWNkt9ybHhPJzjeSGbVHybHBBB_ybKk9Vo4CkXUl-PSkWd5-MgtWZkQ-d7bYN-PVPnVh1haBXnVzhddX4zd1ac3-F71cEXt-v1ZEW6aWdfRWvIUNbRXg16Rc0X_5xTd0X9N_Rb8HwBytbO6UEPxdrXZl-tZAE7NxtYc2W1xVdeWbm3rpiWu1uJZ7XP4PtcBWnVgpdo3cpkdbvnSlo2nKWnO6debouNxqch2dQcHaXWraFdbXM113Ffj0ulzRaQXdN3VHGXOV5HciHUd55mrX5cCG0uWAN05aA3sdvHZx31dgna13qFonZN7ol57ckN4N0TcQ2F1cLsohZNsjBI3BrMYc9wyLCrQ6GZkfDaUodV9JuWbiNsaRB4yN83ahRvCKjY-3adr7eZJ6No2kY2tB1jcBb2NgNf0Ag17ja5251vjcxWiYIlbn8RNggceHxNpRck28ZmTZ924uKnfZ34d-VmU3mln9eE51NhWYWnpdrwa_XNdnjXlWraJzeVWCzdYHlhqoB5zoxNAagGMN4x8CAMRokn5CBBiQKoG8Abx38HJAmU1VZAAE61JJ-QfIHADn2OYbuEzpwdwqtJL8gP8BhAsAH0HH3jgR_I7gRZHIE3CUrSKjdZygEEBH3eFBeSiM0AQqqcar4Jfc9hH8oJgRAeUfXzRoJZc0EKqAAPTXcfNHAA6sqUTOlscfkL_fuQ0tf_aJR-AZ6iKoXOH5FsdAD6LatmgJ7_ZZgcAKKH_34D1cCC2YtpCbi3v9qUTAO_XSA8QOA5_Y0y3MJ_A7QOcATA8tGLFKOfwP0DqUQAOsDug_tMCth-RAPUDuBAgPMkwXHNArQSIHwO4oP_Y6sVVnQzZFz93AFiZJdTvdQBu938d72kFX0B-TwrHEcrET9xWWoYFAeQHkAgAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__308Fb\"};","import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }"],"sourceRoot":""}