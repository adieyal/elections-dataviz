{"version":3,"sources":["webpack:///./src/components/BarChart/barchart.css","webpack:///./src/components/BarChart/barchart.js","webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.css","webpack:///./src/components/BarchartWithNavMap/barchartMap.js","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.js","webpack:///./src/components/BarchartWithNavMap/barchartMap.mdx","webpack:///./src/components/BarchartWithNavMap/barchartMapEmbed.css"],"names":["module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","partyColorsData","className","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","numParties","eventDescription","regionType","provinceName","muniName","muniCode","vdNumber","height","width","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","handleRegionChange","bind","handlePreviewEvent","redrawChart","Component","self","draw","getContainer","setInterval","document","events","window","console","clearInterval","Math","_this$getWidthHeightB2","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","setState","event","newState","detail","d3","refs","vizcontainer","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","style","container","dataLoaders","getVotesDataM","partyColorsLoader","getPartyColors","Promise","values","votesData","error","data","chartData","parseVotesData","parseInt","__webpack_exports__","__webpack_require__","d","Chart","d3__WEBPACK_IMPORTED_MODULE_0__","options","chartType","yAxisLabel","yValue","percOfVotes","yValueFormat","value","tooltipDiv","predefColors","svg","x","y","YaxisOffset","barSvg","barTextSvg","partyColorByName","getFillColorFromPartyName","partyName","i","length","edge","name","minMaxY","dynamicYAxisFromValues","bars","formatPartyName","l","toUpperCase","pageX","Number","barTexts","destroy","leftContainer","rightContainer","barchartEmbed","mapEmbed","barchart","BarchartWithNavMap","onResize","react_default","map","BarchartWithNavMap_barchartMap","originClassName","bootstrapStyles","BarChartWithNavMapEmbed","barchartMapEmbed_classCallCheck","barchartMapEmbed_possibleConstructorReturn","barchartMapEmbed_getPrototypeOf","barchartMapEmbed_assertThisInitialized","elementId","electionEvents","getElectionEvents","e","CustomEvent","BARCHART_PREVIEW","_this2","DOMAIN","config","_this$state","type","placeholder","onChange","onEventDescriptionChange","item","key","onRegionTypeChange","disabled","onClick","onPreview","concat","replace","BarchartWithNavMap_barchartMapEmbed","MDXContent","barchartMap_classCallCheck","barchartMap_possibleConstructorReturn","barchartMap_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","BarChartWithNavMap","embedcode"],"mappings":"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","file":"static/js/src-components-barchart-with-nav-map-barchart-map.e258b0d4.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3tvGL\",\"chart-title\":\"barchart_chart-title__t2Jfy\",\"chart-body\":\"barchart_chart-body__23hsu\",\"percentage-label\":\"barchart_percentage-label__1U_g3\",\"chart\":\"barchart_chart__375WS\",\"large\":\"barchart_large__16vIM\",\"y-axis-label\":\"barchart_y-axis-label__nd438\",\"y-label\":\"barchart_y-label__17YRS\",\"annotation-line\":\"barchart_annotation-line__1cx5A\",\"tooltip\":\"barchart_tooltip__GsDXT\",\"grid\":\"barchart_grid__3zGMX\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\n\nimport events from \"../../events\";\nimport {\n  getVotesDataM,\n  getPartyColors\n} from \"../../api\";\nimport {\n  parseVotesData,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\n\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        numParties: 5,\n        eventDescription: \"2014 National Election\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        vdNumber: \"\",\n      }\n      if (props.numParties) {\n        this.state.numParties = props.numParties;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.vdNumber) {\n        this.state.vdNumber = props.vdNumber;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n      this.redrawChart = this.redrawChart.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.addEventListener(\"resize\", this.redrawChart, 200);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      console.log(\"barchart unmount\");\n      chart = null;\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.BARCHART_PREVIEW, this.handlePreviewEvent);\n      window.removeEventListener(\"resize\", this.redrawChart);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    redrawChart() {\n      var {\n        modifW,\n        modifH\n      } = this.getWidthHeightByScreenSize();\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), modifW, modifH, className);\n      this.setState({width: modifW, height: modifH});\n    };\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>RACE FOR VOTES ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              style={{width: this.state.width, height: this.state.height}}></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      console.log(\"drawing ...barchart\");\n      var self = this;\n      var votesDataLoader = getVotesDataM(props);\n      var dataLoaders = [votesDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var votesData = values[0];\n        partyColorsData = partyColorsData || values[1];          \n        self.drawGraph(container, props, votesData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseVotesData(data, props);\n       \n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className);\n        console.log(\"chart component\", chart)\n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import * as d3 from \"d3\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n    var svg = container.append(\"svg\")\n        .attr(\"width\", parseInt(width) + XaxisOffset)\n        .attr(\"height\", parseInt(height) + YaxisOffset);\n  \n    var tooltipDiv;\n    if (document.getElementsByClassName(\"tooltip\")[0]) {\n      tooltipDiv = d3.select(\".tooltip\");\n    } else {\n      tooltipDiv = d3.select(\"body\").append(\"div\")\t\n        .attr(\"class\", className(\"tooltip\"))\t\t\t\t\n        .style(\"opacity\", 0);\n    }\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n  \n    this.draw = function(chartData, partyColorsData) {\n      var partyColorByName = {};\n      if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n        partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n          partyColorByName[edge.node.name] = edge.node.colour;\n        })\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", className(\"bar\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => {\n            return getFillColorFromPartyName(d.partyInfo.name, i);\n          })\n          .on(\"mousemove\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              function formatPartyName(name) {\n                return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n              }\n              tooltipDiv.html(formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d)))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColorFromPartyName(d.partyInfo.name, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftContainer\":\"barchartMap_leftContainer__BYHhn\",\"rightContainer\":\"barchartMap_rightContainer__1HX_C\",\"barchartEmbed\":\"barchartMap_barchartEmbed__3_psW\",\"mapEmbed\":\"barchartMap_mapEmbed__3so76\",\"barchart\":\"barchartMap_barchart__3AWTP\"};","import React, { Component } from \"react\";\nimport \"./barchartMap.css\";\nimport BarChart from '../BarChart/barchart';\nimport Map from '../Map/map';\n\nclass BarchartWithNavMap extends Component {    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            numParties: 5,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n        }\n        if (props.numParties) {\n            this.state.numParties = props.numParties;\n        }\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.vdNumber) {\n            this.state.vdNumber = props.vdNumber;\n        }\n        if (props.width && props.height) {\n            this.state.width = props.width;\n            this.state.height = props.height;\n        }\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize, 200);\n    }\n  \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    onResize() {\n        \n    };\n\n    render() {\n        return (\n        <div>\n            <div className=\"leftContainer\">\n            <BarChart {...this.state} />\n            </div>\n            <div className=\"rightContainer\">\n            <Map {...this.state}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default BarchartWithNavMap;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartMapEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents\n} from \"../../api\";\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartWithNavMapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        var self = this;\n        this.state = {\n            elementId: \"root\",\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            vdNumber: \"\",\n            numParties: 5,\n\n            electionEvents: []\n        }\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        this.setState({eventDescription: e.target.value});\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        var event = new CustomEvent(events.BARCHART_PREVIEW, { detail: this.state });\n        document.dispatchEvent(event);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescription,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            vdNumber,\n            numParties,\n            electionEvents\n        } = this.state;\n        return (\n          <div>\n            <h3> Map + Barchart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select className={className(\"form-control\")} \n                     value={eventDescription}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"Western Cape\"\n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"City of Cape Town\"\n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Number Of Parties</label>\n                  <input \n                    type=\"number\" \n                    className={className(\"form-control\")} \n                    placeholder=\"5\"\n                    value={numParties}\n                    onChange={e => this.setState({numParties: e.target.value})} />\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showBarchartWithNavMap(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescription: \"${eventDescription}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            vdNumber: \"${vdNumber}\",\n                            numParties: \"${numParties}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartWithNavMapEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChartWithNavMap from \"./barchartMap\"\nimport BarChartWithNavMapEmbed from \"./barchartMapEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---barchart-with-navigation-map\"}}>{`Race for Votes - BarChart With Navigation Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChartWithNavMap width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartWithNavMapEmbed />'} __scope={{props: this ? this.props : props,BarChartWithNavMap,BarChartWithNavMapEmbed}}>\n    <BarChartWithNavMap width=\"600\" height=\"220\"/>\n    <BarChartWithNavMapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartMapEmbed_embedcode__3VTUm\"};"],"sourceRoot":""}