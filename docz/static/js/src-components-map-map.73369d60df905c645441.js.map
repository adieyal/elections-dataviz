{"version":3,"sources":["webpack:///./src/components/Map/map.css","webpack:///./src/components/Map/map.js","webpack:///./src/components/Map/mapEmbed.js","webpack:///./src/components/Map/map.mdx","webpack:///./src/components/Map/mapEmbed.css"],"names":["module","exports","map-title","loading-spinner","tooltip","stylesheet-tv","legend","partyColorsData","regionColor","className","originName","styles","getProvincesData","Map","props","_this","_classCallCheck","this","_getPrototypeOf","call","state","disableNavigation","eventDescription","regionType","provinceName","muniName","muniCode","iecId","stylesheetFor","exportAsPNGUri","bind","_assertThisInitialized","exportAsPNG","handlePreviewEvent","Component","container","drawGraph","draw","getContainer","document","events","selectAll","remove","self","Promise","resolve","reject","rect","rendercanvas","canvg","innerHTML","ignoreDimensions","scaleWidth","scaleHeight","event","refs","vizcontainer","e","canvas","filename","concat","getRegionName","lnk","createEvent","fireEvent","newState","detail","setState","d3","loading","_this$state","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ref","react_loading__WEBPACK_IMPORTED_MODULE_9___default","type","color","height","width","nationalMapFile","fullRouteGeoJsonFile","config","Limpopo","Mpumalanga","Gauteng","KwaZulu-Natal","North West","Free State","Eastern Cape","Northern Cape","Western Cape","getRegionFileName","tooltipDiv","createTooltip","h","svg","dataLoaders","getMainParties","partyColorsLoader","getPartyColors","values","geoJsonData","locationToMainParty","parseMainPartyData","jsonDataFeatures","partyColorByName","partyAbbrByName","getFillColorFromPartyName","partyName","getMainPartyName","d","i","SPROVINCE","getMunicipalityCode","properties","PKLVDNUMBE","edge","topojson","projection","path","parties","availableCnt","party","b","legends","parseInt","getLegendXY","data","enter","append","attr","center","projectionCenter","polylabel","style","text","getSubRegionName","fixMapLabelIntersect","pageX","triggerCustomEvent","REGION_CHANGE","smunicipal","w","fo","muniImuniCodeD","__webpack_exports__","provincesData","originClassName","bootstrapStyles","MapEmbed","_possibleConstructorReturn","elementId","value","MAP_PREVIEW","EXPORT_PNG","_this2","DOMAIN","curProvinceData","item","react_default","placeholder","onChange","onRegionTypeChange","province","key","name","muni","checked","onClick","onPreview","onExportAsPNG","replace","Map_mapEmbed","MDXContent","map_classCallCheck","map_possibleConstructorReturn","map_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","map","embedcode"],"mappings":"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","file":"static/js/src-components-map-map.bae33ff6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map-title\":\"map_map-title__1EiC5\",\"loading-spinner\":\"map_loading-spinner__2woTM\",\"tooltip\":\"map_tooltip__2OtWf\",\"stylesheet-tv\":\"map_stylesheet-tv__2ElKR\",\"legend\":\"map_legend__2ss0P\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport svgToPng from \"save-svg-as-png\";\nimport canvg from \"canvg\";\n\nimport config from \"../../config\";\nimport polylabel from \"polylabel\";\nimport styles from \"./map.css\";\nimport events from \"../../events\";\nimport ReactLoading from \"react-loading\";\nimport {\n    getMainParties,\n    getPartyColors,\n    getProvincesData\n} from \"../../api\";\nimport {\n  parseMainPartyData,\n  getRegionName,\n  getSubRegionName,\n  createTooltip,\n  getMunicipalityCode,\n  fixMapLabelIntersect,\n  triggerCustomEvent\n} from \"../../utils\";\n\nvar regionColor = \"#9c9c9c\";\nvar regionBorderColor = \"#eeeeee\";\nvar partyColorsData;\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar provincesData = getProvincesData();\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            disableNavigation: false,\n            eventDescription: \"2014 National Election\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            stylesheetFor: \"tv\"\n        }\n\n        if (props.regionType) {\n            this.state.regionType = props.regionType;\n        }\n        if (props.provinceName) {\n            this.state.provinceName = props.provinceName;\n        }\n        if (props.muniName) {\n            this.state.muniName = props.muniName;\n        }\n        if (props.muniCode) {\n            this.state.muniCode = props.muniCode;\n        }\n        if (props.disableNavigation) {\n            this.state.disableNavigation = props.disableNavigation;\n        }\n        if (props.stylesheetFor) {\n            this.state.stylesheetFor = props.stylesheetFor;\n        }\n        this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n        this.exportAsPNG = this.exportAsPNG.bind(this);\n        this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n\n    draw(container, props) {\n        this.drawGraph(container, props);\n    }\n\n    componentDidMount() {\n        this.draw(this.getContainer(), this.state)\n        document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n        document.addEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentWillUnmount() {\n      this.getContainer().selectAll(\"svg\").remove();\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.MAP_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n        this.draw(this.getContainer(), this.state)\n    }\n\n    exportAsPNGUri() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            var rect = {width: 950, height: 890};\n            var rendercanvas = document.createElement('canvas');\n            rendercanvas.setAttribute(\"width\", rect.width);\n            rendercanvas.setAttribute(\"height\", rect.height);\n    \n            // var ctx = rendercanvas.getContext(\"2d\");\n            // ctx.globalCompositeOperation = \"source-out\";\n            // ctx.fillStyle = \"#ffffff\";\n            // ctx.fillRect(0, 0, rect.width, rect.height);\n\n            canvg(rendercanvas, self.refs.vizcontainer.innerHTML, {\n                ignoreDimensions: true,\n                scaleWidth: rect.width,\n                scaleHeight: rect.height\n            });\n            resolve(rendercanvas.toDataURL(\"image/png;base64\").split(',')[1])\n        });\n    }\n\n    exportAsPNG(event) {\n        var rect = {width: 950, height: 890};\n        var rendercanvas = document.createElement('canvas');\n        rendercanvas.setAttribute(\"width\", rect.width);\n        rendercanvas.setAttribute(\"height\", rect.height);\n\n        canvg(rendercanvas, this.refs.vizcontainer.innerHTML, {\n            ignoreDimensions: true,\n            scaleWidth: rect.width,\n            scaleHeight: rect.height\n        });\n\n        // var ctx = rendercanvas.getContext(\"2d\");\n        // ctx.globalCompositeOperation = \"source-in\";\n        // ctx.fillStyle = \"#ffffff\";\n        // ctx.fillRect(0, 0, rect.width, rect.height);\n\n        var canvas = rendercanvas, filename = `race-for-votes-map(${getRegionName(this.state)}).png`;\n        var lnk = document.createElement(\"a\"), e;\n\n        lnk.download = filename;\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                            0, 0, 0, 0, 0, false, false, false,\n                            false, 0, null);\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n    handlePreviewEvent(event) {\n        var newState = event.detail;\n        this.setState(newState)\n    }\n\n    getContainer() {\n        return d3.select(this.refs.vizcontainer)\n    }\n\n    getLoadingSpinner() {\n        return d3.select(this.refs.loading)\n    }\n      \n    render () {\n        const theme = {\n            selectionColor: \"#C51162\"\n        };\n        var {\n            disableNavigation,\n            stylesheetFor\n        } = this.state;\n        return (\n            <div className={className(\"map-widget\")+\" \"+className(`stylesheet-${stylesheetFor}`)}>\n                <div className={className(\"map-title\")}>{getRegionName(this.state)}</div>\n\n                <div ref=\"vizcontainer\" className={className(\"map\")}></div>\n                <div className={className(\"loading-spinner\")} ref=\"loading\">\n                    <ReactLoading type={\"spin\"} color={\"#777\"} height={100} width={100} />\n                </div>\n            </div>\n        )\n    }\n\n    drawGraph(container, props) {\n        var self = this;\n        var nationalMapFile = \"province_lo-res.geojson\";\n\n        function getRegionFileName() {\n            function getProvinceFileName(provinceName) {\n                var provinceNameToFileMap = {\n                    \"Limpopo\": \"lim_lo-res.geojson\",\n                    \"Mpumalanga\": \"mp_lo-res.geojson\",\n                    \"Gauteng\": \"gt_lo-res.geojson\",\n                    \"KwaZulu-Natal\": \"kzn_lo-res.geojson\",\n                    \"North West\": \"nw_lo-res.geojson\",\n                    \"Free State\": \"fs_lo-res.geojson\",\n                    \"Eastern Cape\": \"ec_lo-res.geojson\",\n                    \"Northern Cape\": \"nc_lo-res.geojson\",\n                    \"Western Cape\": \"wc_lo-res.geojson\",\n                }\n                return provinceNameToFileMap[provinceName];\n            }\n            switch(self.state.regionType) {\n                case \"national\":\n                    return nationalMapFile;\n                case \"province\":\n                    return getProvinceFileName(self.state.provinceName);\n                case \"municipality\":\n                    return self.state.muniCode + \".topojson\";\n                default:\n                    return null;\n            }\n        }\n\n        var fullRouteGeoJsonFile = config.DOMAIN + \"/mapdata/\" + getRegionFileName();\n\n        self.getLoadingSpinner()\n            .style(\"display\", \"block\")\n            .transition()\n            .duration(200)\n            .style(\"opacity\", 1);\n\n        var tooltipDiv = createTooltip(className);\n\n        var w = 900;\n        var h = 800;\n        var bottomMargin = 90;// for legend\n        var rightMargin = 50;\n\n        container.selectAll(\"svg\").remove();\n        var svg = container.append(\"svg\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + (w+rightMargin) + \" \" + (h+bottomMargin))\n            .classed(\"svg-content\", true);\n\n        var geoJsonLoader = d3.json(fullRouteGeoJsonFile);\n        var mainPartiesDataLoader = getMainParties(props);\n        var dataLoaders = [geoJsonLoader, mainPartiesDataLoader];\n\n        if (!partyColorsData) {\n          var partyColorsLoader = getPartyColors();\n          dataLoaders.push(partyColorsLoader);\n        }\n\n        Promise.all(dataLoaders).then(function(values){ \n            var geoJsonData = values[0];\n            var locationToMainParty = parseMainPartyData(values[1], props);\n            partyColorsData = partyColorsData || values[2];  \n\n            var partyColorByName = {};\n            var partyAbbrByName = {};\n            if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n              partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n                partyColorByName[edge.node.name] = edge.node.colour;\n                partyAbbrByName[edge.node.name] = edge.node.abbreviation;\n              })\n            }            \n\n            function getFillColorFromPartyName(partyName) {\n              if (!partyName)\n                return regionColor;\n              return partyColorByName[partyName.split(\"/\")[0]] || regionColor;\n            }\n\n            function getMainPartyName(d, i) {\n                var partyName;\n                var regionType = self.state.regionType;\n                if (regionType === \"national\") {\n                    var provinceName = d.properties.SPROVINCE;\n                    partyName = locationToMainParty[provinceName];\n                } else if (regionType === \"province\") {\n                    var muniCode = getMunicipalityCode(d.properties);\n                    partyName = locationToMainParty[muniCode];\n                } else {// \"municipality\"\n                    function getMunicipalityiecId(properties) {\n                        return properties.PKLVDNUMBE;\n                    }\n                    var iecId = getMunicipalityiecId(d.properties);\n                    partyName = locationToMainParty[iecId];\n                }\n                return partyName;\n            }\n            function getMainPartyColorFromRegion(d, i) {\n                var partyName = getMainPartyName(d, i);\n                var partyColor = getFillColorFromPartyName(partyName);\n                return partyColor;\n            }\n\n            var jsonDataFeatures;\n            if (fullRouteGeoJsonFile.indexOf(\".topojson\") !== -1) {//topojson is used for only munis\n                if (!geoJsonData.objects[self.state.muniCode])\n                    return;\n    \n                geoJsonData = topojson.feature(geoJsonData, geoJsonData.objects[self.state.muniCode]);\n            }\n\n            jsonDataFeatures = geoJsonData.features;\n\n            var projection = d3.geoMercator().fitSize([w, h], geoJsonData);\n            var path = d3.geoPath().projection(projection);\n\n            // fill region with regionColor\n            svg.selectAll(`.${className(\"region\")}`)\n                .data(jsonDataFeatures)\n                .enter()\n                .append(\"path\")\n                .attr(\"class\", className(\"region\"))\n                .attr(\"stroke\", regionBorderColor)\n                .attr(\"fill\", getMainPartyColorFromRegion)\n                .attr(\"id\", function(d, i) {\n                    return `region-${i}`;\n                })\n                .attr(\"d\", path);\n            \n            var parties = [];\n            var availableCnt = [];\n            jsonDataFeatures.forEach((d, i) => {\n                var party = getMainPartyName(d, i);\n                if (parties.indexOf(party) == -1) {\n                    parties.push(party);\n                    availableCnt.push(1);\n                } else {\n                    availableCnt[parties.indexOf(party)] ++;\n                }\n            })\n\n            parties.sort(function(a, b){\n                return availableCnt[parties.indexOf(b)] - availableCnt[parties.indexOf(a)];\n            })\n\n            function getLegendXY(i) {\n                return [(i%5)*150, h + 10 + parseInt(i/5) * 40];\n            }\n            var legends = svg.selectAll(`.${className(\"legend\")}`)\n                .data(parties)\n                .enter()\n                .append('g')\n                .attr(\"class\", className(\"legend\"))\n                .attr('transform', (d, i) => \"translate(\" + getLegendXY(i) + \")\")\n            legends\n                .append(\"rect\")\n                .attr('width', 20)\n                .attr('height', 20)\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr(\"fill\", (party, i) => {\n                    return getFillColorFromPartyName(party);\n                })\n            legends.append('text')\n                .attr('x', 30)\n                .attr('y', 16)\n                .text(party => partyAbbrByName[party])\n            \n            if (self.state.regionType !== \"municipality\") {\n                svg.selectAll(\".place-label\")\n                    .data(jsonDataFeatures)\n                .enter().append(\"text\")\n                    .attr(\"class\", \"place-label\")\n                    .attr(\"font-size\", \"12px\")\n                    .attr(\"transform\", function(d) { \n                        var center, projectionCenter;\n                        if (d.geometry.type === \"Polygon\") {\n                            center = polylabel(d.geometry.coordinates);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 12;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        } else { //\"MultiPolygon\"\n                            center = polylabel(d.geometry.coordinates[0]);\n                            projectionCenter = projection(center);\n                            projectionCenter[1] -= 5;\n                            return \"translate(\" + projectionCenter + \")\"; \n                        }\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .style(\"text-anchor\", \"middle\")\n                    .text(d => getSubRegionName(d.properties, self.state))\n            }\n\n            if (self.state.regionType !== \"municipality\") {\n                fixMapLabelIntersect();\n            }\n\n            //hidden area for catching events\n            svg.selectAll(\".eventLayer\")\n                .data(jsonDataFeatures)\n            .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"eventLayer\")\n                .attr(\"id\", function(d, i) {\n                    return `eventLayer-${i}`;\n                })\n                .attr(\"fill\", \"transparent\")\n                .on(\"mouseover\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 3)\n                        .style(\"fill-opacity\", 0.8);\n                })\n                .on(\"mousemove\", function(d, i) {\t\n                    if (self.state.regionType === \"municipality\") return;\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 1);\n\n                    tooltipDiv.html(getSubRegionName(d.properties, self.state) + \" : \" + getMainPartyName(d, i))\t\n                        .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n                })\n                .on(\"mouseout\", function(d, i) {\n                    d3.select(`#region-${i}`)\n                        .attr(\"stroke-width\", 1)\n                        .style(\"fill-opacity\", 1);\n                    \n                    if (self.state.regionType === \"municipality\") return;\n\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                })\n                .on(\"click\", function(d, i) {\n                    if (self.state.disableNavigation) {\n                        return;\n                    }\n                    tooltipDiv.transition()\t\t\n                        .duration(200)\t\t\n                        .style(\"opacity\", 0);\t\n                    \n                    var regionType = self.state.regionType;\n                    var newState, event;\n                    if (regionType === \"national\") {\n                        newState = {\n                            regionType: \"province\",\n                            provinceName: d.properties.SPROVINCE\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    } else if (regionType === \"province\") {\n                        newState = {\n                            regionType: \"municipality\", \n                            provinceName: self.state.provinceName,\n                            muniName: d.properties.smunicipal,\n                            muniCode: getMunicipalityCode(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n\n                        self.setState(newState);\n                    } else { // \"municipality\"\n                        function getMunicipalityiecId(properties) {\n                            return properties.PKLVDNUMBE;\n                        }\n                        var newState = {\n                            regionType: \"municipality-vd\", \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniCode: self.state.muniCode,\n                            iecId: getMunicipalityiecId(d.properties),\n                        }\n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                    }\n                })\n            if (!self.state.disableNavigation) {\n                var fo = svg.append(\"foreignObject\")\n                    .attr(\"x\", w - 100)\n                    .attr(\"y\", 10)\n                    .attr(\"width\", 100)\n                    .attr(\"height\", 30)\n                    .attr(\"class\", \"map-controls\")\n                fo.append(\"xhtml:div\")\n                    .append(\"button\")\n                    .attr(\"class\", \"go-back\")\n                    .html(\"go back\")\n                    .on(\"click\", function() {\n                        var regionType = self.state.regionType;\n                        var newState, event;\n    \n                        var newState = {\n                            regionType: self.state.regionType, \n                            provinceName: self.state.provinceName,\n                            muniName: self.state.muniName,\n                            muniImuniCodeD: self.state.muniCode,\n                            iecId: self.state.iecId,\n                        }\n                        \n                        if (regionType === \"province\") {\n                            newState.regionType = \"national\";\n                        } else if (regionType === \"municipality\") {\n                            newState.regionType = \"province\";\n                        }\n    \n                        triggerCustomEvent(events.REGION_CHANGE, newState);\n                        self.setState(newState);\n                    });\n            }\n            self.getLoadingSpinner()\n                .style(\"display\", \"none\");\n        })\n    }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./mapEmbed.css\";\nimport config from \"../../config\";\nimport events from \"../../events\";\n\nimport {\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass MapEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            disableNavigation: false, //checkbox\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.MAP_PREVIEW, this.state);\n    }\n      \n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n    \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,            \n            disableNavigation,\n            regionType,\n            provinceName,\n            muniName,\n        } = this.state;\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Map Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n            <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n\n              <div className={className(\"form-check\")}>\n                \n                <label className={className(\"form-check-label\")}>\n                    <input \n                        type=\"checkbox\" \n                        className={className(\"form-check-input\")} \n                        value={disableNavigation}\n                        onChange={e => this.setState({disableNavigation: e.target.checked})} \n                        />\n                    &nbsp;&nbsp;Disable Navigation\n                </label>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n            <div className={className(\"form-group\")}>\n                <label>Embed Code</label>\n                <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>\n                        showMap(document.getElementById(\"${elementId}\"),{\n                            disableNavigation: ${disableNavigation},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}\n                    </span>\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\nexport default MapEmbed;\n\n\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\";\nimport Map from \"./map\";\nimport MapEmbed from \"./mapEmbed\";\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"race-for-votes---map\"}}>{`Race for Votes - Map`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This map shows the race for votes across different geographies in the country. It can be configured to have a national, provincial or municipal starting point.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map />\\n<MapEmbed />'} __scope={{props: this ? this.props : props,Map,MapEmbed}}>\n    <Map/>\n    <MapEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"mapEmbed_embedcode__1_eoN\"};"],"sourceRoot":""}