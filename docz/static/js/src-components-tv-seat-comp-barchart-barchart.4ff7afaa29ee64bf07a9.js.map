{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/TVSeatCompBarchart/barchart.css","webpack:///./src/components/TVSeatCompBarchart/barchart.js","webpack:///./src/components/TVSeatCompBarchart/BarChartEmbed.js","webpack:///./src/components/TVSeatCompBarchart/barchart.mdx","webpack:///./src/components/TVSeatCompBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","barchart_partyColorsData","chartOptions","seats","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_getPrototypeOf","call","state","partyAbbr","eventDescriptions","regionType","provinceName","muniName","muniCode","iecId","exportAsPNG","bind","_assertThisInitialized","exportAsPNGUri","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","event","newState","detail","setState","Promise","resolve","reject","svgToPng","uri","refs","vizcontainer","childNodes","getNationOrProvinceName","d3barchart","react_default","a","createElement","ref","dataLoaders","getSeatsDataForComparison","partyColorsLoader","getPartyColors","values","seatsData","error","console","data","parseSeatsComparisonData","TVSeatCompBarchart_barchart","provincesData","getProvincesData","BarChartEmbed_className","originClassName","bootstrapStyles","BarChartEmbed","BarChartEmbed_classCallCheck","BarChartEmbed_possibleConstructorReturn","BarChartEmbed_getPrototypeOf","elementId","electionEvents","allParties","getElectionEvents","thing","index","t","abbreviation","e","selected","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","type","placeholder","onChange","multiple","onEventDescriptionChange","key","onRegionTypeChange","province","muni","party","onClick","onPreview","onExportAsPNG","concat","JSON","replace","TVSeatCompBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","embedcode","multievent-container"],"mappings":"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","file":"static/js/src-components-tv-seat-comp-barchart-barchart.abc869e8.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__3RkJc\",\"chart-title\":\"barchart_chart-title__2muvl\",\"chart-body\":\"barchart_chart-body__3zH5s\",\"percentage-label\":\"barchart_percentage-label__kDM8g\",\"chart\":\"barchart_chart__3VLFj\",\"large\":\"barchart_large__2qD9h\",\"y-axis-label\":\"barchart_y-axis-label__1AizP\",\"y-label\":\"barchart_y-label__3R17m\",\"annotation-line\":\"barchart_annotation-line__2UI34\",\"tooltip\":\"barchart_tooltip__3V0W_\",\"grid\":\"barchart_grid__2EMdF\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getPartyColors,\n  getSeatsDataForComparison\n} from \"../../api\";\nimport {\n  parseSeatsComparisonData,\n  getNationOrProvinceName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Race For Seats Comparison',\n  yAxisLabel: 'Seats Count',\n  dynamicYAxisFromValues: true,\n  yValue: function(d) {\n    return d.seats;\n  },\n  yValueFormat: function(seats) {\n    return seats;\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar partyColorsData;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        partyAbbr: \"ANC\",\n        eventDescriptions: [\n            \"National Elections 1999\",\n            // \"Provincial Elections 1999\",\n            \"14 Apr 2004 National Election\",\n            // \"14 Apr 2004 Provincial Election\",\n            \"22 Apr 2009 National Election\",\n            // \"22 Apr 2009 Provincial Election\",\n            \"2014 National Election\",\n            // \"2014 Provincial Election\",\n            \"2019 NATIONAL ELECTION\",\n            // \"2019 PROVINCIAL ELECTION\",\n        ],\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\"\n      }\n      if (props.partyAbbr) {\n        this.state.partyAbbr = props.partyAbbr;\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.exportAsPNGUri = this.exportAsPNGUri.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNGUri() {\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        svgToPng.svgAsPngUri(self.refs.vizcontainer.childNodes[0], {}, function(uri) {\n          resolve(uri.split(',')[1]);\n        });\n      });\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], `race-for-seats-comparation-barchart(${getNationOrProvinceName(this.state)}).png`);\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), null, null, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getNationOrProvinceName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var seatsDataLoader = getSeatsDataForComparison(props);\n      var dataLoaders = [seatsDataLoader];\n\n      if (!partyColorsData) {\n        var partyColorsLoader = getPartyColors();\n        dataLoaders.push(partyColorsLoader);\n      }\n\n      Promise.all(dataLoaders).then(function(values){ \n        var seatsData = values[0];\n        partyColorsData = partyColorsData || values[1];         \n        self.drawGraph(container, props, seatsData, partyColorsData);\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, partyColorsData) {\n        var chartData = parseSeatsComparisonData(data, props);\n        if (!chart)\n          chart = new Chart(container, null, null, className, chartOptions);\n        \n        chart.draw(chartData, partyColorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData,\n    getPartyColors,\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventDescriptions: [\n                \"National Elections 1999\",\n                // \"Provincial Elections 1999\",\n                \"14 Apr 2004 National Election\",\n                // \"14 Apr 2004 Provincial Election\",\n                \"22 Apr 2009 National Election\",\n                // \"22 Apr 2009 Provincial Election\",\n                \"2014 National Election\",\n                // \"2014 Provincial Election\",\n                \"2019 NATIONAL ELECTION\",\n                // \"2019 PROVINCIAL ELECTION\",\n            ],\n            regionType: \"province\",\n            provinceName: \"Western Cape\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n            partyAbbr: \"ANC\",\n\n            electionEvents: [],\n            allParties: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n        getPartyColors()\n            .then(function(data) {\n                var allParties = data[\"data\"][\"allParties\"][\"edges\"].map(edge => edge[\"node\"])\n                allParties = allParties.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                        t.abbreviation === thing.abbreviation\n                    ))\n                )\n                self.setState({allParties});         \n            }).catch(error => console.error(error))\n    }\n\n    componentDidUpdate() {\n    }\n\n    onEventDescriptionChange(e) {\n        var options = e.target.options;\n        var values = [];\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            values.push(options[i].value);\n          }\n        }\n        this.setState({\n            eventDescriptions: values \n        })\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventDescriptions,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            partyAbbr,\n            electionEvents,\n            allParties\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seats Comparison Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event </label>\n                  <select multiple className={className(\"form-control\")+\" \"+className(\"multievent-container\")} \n                     value={eventDescriptions}\n                     onChange={this.onEventDescriptionChange.bind(this)}>\n                        {\n                            electionEvents.map(item => {\n                                return (<option key={item} value={item}>{item}</option>)\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"national\">national</option>\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            />\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            />\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                  <label>Party Name</label>\n                  \n                  <select className={className(\"form-control\")} \n                        value={partyAbbr}\n                        onChange={e => this.setState({partyAbbr: e.target.value})} >\n                        <option value=\"\">Select ...</option>\n                        {\n                            allParties && allParties.map(party => {\n                                return <option key={party[\"name\"]} value={party[\"abbreviation\"]}>{party[\"name\"]}</option>\n                            })\n                        }\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showRaceForVotesCompBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventDescriptions: ${JSON.stringify(eventDescriptions)},\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            partyAbbr: \"${partyAbbr}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tv-race-for-seats-comparison---bar-chart\"}}>{`TV Race for Seats Comparison - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__YEDVC\",\"multievent-container\":\"barchartEmbed_multievent-container__UuClr\"};"],"sourceRoot":""}