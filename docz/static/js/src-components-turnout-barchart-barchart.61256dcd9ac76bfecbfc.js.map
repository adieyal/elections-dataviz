{"version":3,"sources":["webpack:///./src/components/BarChart/d3barchart.js","webpack:///./src/components/TurnoutBarchart/barchart.css","webpack:///./src/components/TurnoutBarchart/barchart.js","webpack:///./src/components/TurnoutBarchart/BarChartEmbed.js","webpack:///./src/components/TurnoutBarchart/barchart.mdx","webpack:///./src/components/TurnoutBarchart/barchartEmbed.css"],"names":["Chart","container","width","height","className","options","chartType","yAxisLabel","yValue","d","percOfVotes","yValueFormat","value","predefColors","svg","tooltipDiv","createTooltip","x","d3","y","barSvg","barTextSvg","errorText","this","draw","chartData","colorsData","partyColorByName","noXaxisByParty","partyColorsData","edge","name","minMaxY","dynamicYAxisFromValues","bars","i","getFillColor","formatPartyName","l","toUpperCase","getTooltipText","pageX","Number","barTexts","_typeof","partyName","length","getFillColorFromPartyName","destroy","module","exports","chart-label","chart-title","chart-body","percentage-label","chart","large","y-axis-label","y-label","annotation-line","tooltip","grid","chartOptions","percVoterTurnout","originName","styles","refreshIntervalID","BarChart","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","state","eventType","regionType","provinceName","muniName","muniCode","iecId","_this$getWidthHeightB","getWidthHeightByScreenSize","modifW","modifH","exportAsPNG","bind","handleRegionChange","handlePreviewEvent","Component","self","getContainer","setInterval","document","events","clearInterval","Math","event","newState","detail","setState","svgToPng","refs","vizcontainer","childNodes","_BarChart_d3barchart__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","getRegionName","ref","dataLoaders","getTurnoutDataForAllEvents","Promise","values","turnoutData","error","console","data","parseTurnoutDataForAllEvents","parseInt","__webpack_exports__","provincesData","getProvincesData","originClassName","bootstrapStyles","BarChartEmbed","elementId","electionEvents","getElectionEvents","e","triggerCustomEvent","CHART_PREVIEW","EXPORT_PNG","_this2","DOMAIN","config","_this$state","curProvinceData","item","react_default","type","placeholder","onChange","onRegionTypeChange","province","key","muni","disabled","onClick","onPreview","onExportAsPNG","concat","replace","TurnoutBarchart_BarChartEmbed","MDXContent","barchart_classCallCheck","barchart_possibleConstructorReturn","barchart_getPrototypeOf","layout","React","_this$props","components","_objectWithoutProperties","dist","id","index_m","__codesandbox","__position","__code","__scope","barchart","embedcode"],"mappings":"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","file":"static/js/src-components-turnout-barchart-barchart.57f77f6c.js","sourcesContent":["import * as d3 from \"d3\";\nimport {createTooltip} from \"../../utils\";\nimport { type } from \"os\";\n\nexport function Chart(container, width, height, className, options) {\n\n\n  if (!options) {\n    options = {};\n  } \n  if (!options.chartType) {\n    options.chartType = \"Race For Votes\";\n  }\n  if (!options.yAxisLabel) {\n    options.yAxisLabel = \"PERCENTAGE VOTES\";\n  }\n  if (!options.yValue) {\n    options.yValue = function(d) {\n      return d.percOfVotes;\n    }\n  }\n  if (!options.yValueFormat) {\n    options.yValueFormat = function(value) {\n      return value + '%';\n    }\n  }\n\n  width = 700;\n  height = 200;\n  container.selectAll(\"svg\").remove();\n\n    var XaxisOffset = 70;\n    var YaxisOffset = 20;\n    var predefColors = [\"blue\", \"yellow\", \"red\"];\n\n    var svg = container.append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\").style(\"background-color\",\"#ffffff\")\n        .attr(\"viewBox\", \"0 0 \" + (width+XaxisOffset) + \" \" + (height+YaxisOffset))\n        .classed(\"svg-content\", true);\n        \n    var tooltipDiv = createTooltip(className);\n  \n    var x = d3.scaleBand()\n      .rangeRound([XaxisOffset, width])\n  \n    var y = d3.scaleLinear()\n      .rangeRound([height, YaxisOffset]);\n  \n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(20,\"+(height/2+YaxisOffset/2)+\")\")\n      .append(\"text\")\n      .attr(\"class\", className(\"percentage-label\"))\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(options.yAxisLabel)\n      .attr(\"text-anchor\", \"middle\");\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n  \n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + XaxisOffset +\", 0)\")\n  \n    var barSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bar-container\"));\n    var barTextSvg = svg.append(\"g\")\n      .attr(\"class\", className(\"bartext-container\"));\n    var errorText = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\");\n  \n    this.draw = function(chartData, colorsData) {\n\n      if (!chartData) {\n        errorText.text(\"chart data is not available\");\n        return;\n      } else {\n        errorText.text(\"\");\n      }\n      var partyColorByName = {};\n\n      if (options.noXaxisByParty) {\n\n      } else {\n        var partyColorsData = colorsData;\n        if (partyColorsData && partyColorsData[\"data\"][\"allParties\"][\"edges\"]) {\n          partyColorsData[\"data\"][\"allParties\"][\"edges\"].forEach(edge => {\n            partyColorByName[edge.node.name] = edge.node.colour;\n          })\n        }\n      }\n\n      function getFillColorFromPartyName(partyName, i) {\n        return partyColorByName[partyName.split(\"/\")[0]] || predefColors[i%predefColors.length];\n      }\n\n      function getFillColor(d, i) {\n        if (options.noXaxisByParty) {\n          if (typeof colorsData == \"object\")\n            return colorsData[d.name];\n          if (typeof colorsData == \"function\")\n            return colorsData(d, i);\n          return colorsData;\n        } else {\n          return getFillColorFromPartyName(d.partyInfo.name, i);\n        }\n      }\n\n      function getTooltipText(d, i) {\n        if (options.noXaxisByParty) {\n          return d.name + \" : \" + options.yValueFormat(options.yValue(d));\n        } else {\n          function formatPartyName(name) {\n            return name.split(\"/\")[0].toLowerCase().replace(/\\b\\w/g, function(l){ return l.toUpperCase() })\n          }\n          return formatPartyName(d.partyInfo.name) + \" : \" + options.yValueFormat(options.yValue(d));\n        }\t\n      }\n\n      x.domain(chartData.map(function (d) {\n          return d.name;\n        }));\n      var minMaxY = [0, 100];\n      if (options.dynamicYAxisFromValues) {\n        minMaxY[1] = d3.max(chartData, function(d) { return options.yValue(d); })\n      }\n      y.domain(minMaxY);\n  \n      svg.select(\".x.axis\").transition().duration(300).call(d3.axisBottom(x));\n      svg.select(\".y.axis\").transition().duration(300).call(d3.axisLeft(y)\n        .ticks(6)\n        .tickFormat(function(d) { return options.yValueFormat(d); })\n      )\n  \n      var bars = barSvg.selectAll(`.${className(\"bar\")}`).data(chartData);\n  \n      bars.exit()\n        .transition()\n        .duration(300)\n        .attr(\"y\", function(d) {\n          return y(0);\n        })\n        .attr(\"height\", 0)\n        .style(\"fill-opacity\", 1e-6)\n        .remove();\n  \n      bars.enter()\n          .append(\"rect\")\n          .attr(\"class\", (d) => className(\"bar\") + \" bar_\" + d.name)\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/20;\n          })\n          .attr(\"width\", x.bandwidth()*9/10)\n          .attr(\"fill\", (d,i) => getFillColor(d, i))\n          .on(\"mousemove\", function(d, i) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 0.8);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", .9);\t\t\n              tooltipDiv.html(getTooltipText(d, i))\n                  .style(\"left\", (d3.event.pageX) + \"px\")\t\t\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\t\n              })\t\t\t\t\t\n          .on(\"mouseout\", function(d) {\t\t\n              d3.select(this)\n                .attr(\"opacity\", 1);\n              tooltipDiv.transition()\t\t\n                  .duration(200)\t\t\n                  .style(\"opacity\", 0);\t\n          })\n          .attr(\"y\", function(d) {\n            return y(0);\n          })\n          .attr(\"height\", 0)        \n  \n        barSvg.selectAll(`.${className(\"bar\")}`).data(chartData)\n          .attr(\"fill\", (d, i) => getFillColor(d, i))\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d)));\n          })\n          .attr(\"height\", function (d) {\n            return height - y(Number(options.yValue(d)));\n          })\n          \n        var barTexts = barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData);\n  \n        barTexts.exit()\n          .transition()\n          .duration(300)\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n          .style(\"fill-opacity\", 1e-6)\n          .remove();\n  \n        barTexts.enter().append(\"text\")\n          .attr(\"class\", className(\"bartext\"))\n          .attr(\"x\", function (d) {\n            return x(d.name)+x.bandwidth()/2;\n          })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"y\", function(d) {\n            return y(0) - 5;\n          })\n        barTextSvg.selectAll(`.${className(\"bartext\")}`).data(chartData)\n          .text(function(d) {\n            return options.yValueFormat(options.yValue(d));\n          })\n          .transition()\n          .duration(300)\n          .attr(\"y\", function (d) {\n            return y(Number(options.yValue(d))) - 5;\n          })\n    }\n    this.destroy = function() {\n      svg.remove();\n    }\n  }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart-label\":\"barchart_chart-label__1j4ev\",\"chart-title\":\"barchart_chart-title__1Jyfd\",\"chart-body\":\"barchart_chart-body__1kYVj\",\"percentage-label\":\"barchart_percentage-label___T79M\",\"chart\":\"barchart_chart__39bxI\",\"large\":\"barchart_large__2FPoB\",\"y-axis-label\":\"barchart_y-axis-label__2jJOX\",\"y-label\":\"barchart_y-label__1JqpW\",\"annotation-line\":\"barchart_annotation-line__2ve98\",\"tooltip\":\"barchart_tooltip__2MpDn\",\"grid\":\"barchart_grid__2s8E-\"};","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./barchart.css\";\nimport {Chart} from \"../BarChart/d3barchart\";\nimport svgToPng from \"save-svg-as-png\";\n\nimport events from \"../../events\";\nimport {\n  getTurnoutDataForAllEvents,\n} from \"../../api\";\nimport {\n  parseTurnoutDataForAllEvents,\n  getRegionName\n} from \"../../utils\";\n\n\nvar dataRefreshTime = 30 * 1000;\nvar chartOptions = {\n  chartType: 'Turnout Barchart',\n  yAxisLabel: 'PERCENTAGE',\n  noXaxisByParty: true,\n  yValue: function(d) {\n    return d.percVoterTurnout;\n  },\n  yValueFormat: function(percVoterTurnout) {\n    return percVoterTurnout + '%';\n  } \n};\n\nfunction className(originName) {\n  return styles[originName] || originName;\n}\n\nvar chart;\nvar refreshIntervalID = 0;\n\nclass BarChart extends Component {\n\n    constructor(props) {\n      super(props);\n      var self = this;\n      this.state = {\n        eventType: \"national\",\n        regionType: \"national\",\n        provinceName: \"\",\n        muniName: \"\",\n        muniCode: \"\",\n        iecId: \"\",\n      }\n      if (props.regionType) {\n        this.state.regionType = props.regionType;\n      }\n      if (props.provinceName) {\n        this.state.provinceName = props.provinceName;\n      }\n      if (props.muniName) {\n        this.state.muniName = props.muniName;\n      }\n      if (props.muniCode) {\n        this.state.muniCode = props.muniCode;\n      }\n      if (props.iecId) {\n        this.state.iecId = props.iecId;\n      }\n      if (props.width && props.height) {\n        this.state.width = props.width;\n        this.state.height = props.height;\n      } else {\n        var {\n          modifW,\n          modifH\n        } = this.getWidthHeightByScreenSize();\n        this.state.width = modifW;\n        this.state.height = modifH;\n      }\n      this.exportAsPNG = this.exportAsPNG.bind(this);\n      this.handleRegionChange = this.handleRegionChange.bind(this);\n      this.handlePreviewEvent = this.handlePreviewEvent.bind(this);\n    }\n  \n    componentDidMount() {\n      var self = this;\n      this.draw(this.getContainer(), this.state);\n      refreshIntervalID = setInterval(() => {\n        self.draw(self.getContainer(), self.state)\n      }, dataRefreshTime);\n      document.addEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.addEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.addEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n    }\n\n    componentDidUpdate() {\n      this.draw(this.getContainer(), this.state)\n    }\n\n    componentWillUnmount() {\n      chart = null;\n      document.removeEventListener(events.EXPORT_PNG, this.exportAsPNG);\n      document.removeEventListener(events.REGION_CHANGE, this.handleRegionChange);\n      document.removeEventListener(events.CHART_PREVIEW, this.handlePreviewEvent);\n      clearInterval(refreshIntervalID);\n    }\n\n    getWidthHeightByScreenSize() {\n      var modifW = Math.min(810, document.body.clientWidth- 350);\n      if (document.body.clientWidth < 775)\n        modifW = document.body.clientWidth - 50;\n      var modifH = modifW/3.5;\n      return {\n        modifW,\n        modifH\n      }\n    }\n\n    handleRegionChange(event) {\n      var newState = event.detail;\n      this.setState(newState)\n    }\n\n    exportAsPNG(event) {\n      svgToPng.saveSvgAsPng(this.refs.vizcontainer.childNodes[0], \"turnout-barchart.png\");\n    }\n\n    handlePreviewEvent(event) {\n      var newState = event.detail;\n      if (chart)\n        chart.destroy();\n      chart = new Chart(this.getContainer(), this.state.width, this.state.height, className, chartOptions);\n      this.setState(newState)\n    }\n\n    getContainer() {\n      return d3.select(this.refs.vizcontainer)\n    }\n      \n    render () {\n      return (\n          <div className=\"barchart\">\n            <div className={className(\"chart-title\")}>{chartOptions.chartType} ({getRegionName(this.state)}): </div>\n            <div \n              ref=\"vizcontainer\" \n              className={className(\"chart-body\")} \n              ></div>\n          </div>\n        )\n    }\n\n    draw(container, props) {\n      var self = this;\n      var turnoutDataLoader = getTurnoutDataForAllEvents(props);\n      var dataLoaders = [turnoutDataLoader];\n\n      Promise.all(dataLoaders).then(function(values){ \n        var turnoutData = values[0];\n        self.drawGraph(container, props, turnoutData, 'rgb(157,51,55)');\n      }).catch(error => console.error(error));\n    }\n\n    drawGraph(container, props, data, colorsData) {\n        var chartData = parseTurnoutDataForAllEvents(data, props);\n        var width = parseInt(props.width);\n        var height = parseInt(props.height);\n        if (!chart)\n          chart = new Chart(container, width, height, className, chartOptions);\n        \n        chart.draw(chartData, colorsData);\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport config from \"../../config\";\nimport bootstrapStyles from \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./barchartEmbed.css\";\nimport events from \"../../events\";\nimport {\n    getElectionEvents,\n    getProvincesData\n} from \"../../api\";\n\nimport {\n    triggerCustomEvent\n} from \"../../utils\";\n\nvar provincesData = getProvincesData();\n\nfunction className(originClassName) {\n    return bootstrapStyles[originClassName] || styles[originClassName] || originClassName;\n}\n\nclass BarChartEmbed extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            elementId: \"root\",\n            eventType: \"national\",\n            regionType: \"national\",\n            provinceName: \"\",\n            muniName: \"\",\n            muniCode: \"\",\n            iecId: \"\",\n\n            electionEvents: []\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        getElectionEvents()\n            .then(function(data) {\n                var electionEvents = data[\"data\"][\"allEvents\"].map(edge => edge[\"description\"])\n                self.setState({electionEvents});\n            }).catch(error => console.error(error));\n    }\n\n    componentDidUpdate() {\n    }\n\n    onRegionTypeChange(e) {\n        var newState = {regionType: e.target.value};\n        this.setState(newState);\n    }\n\n    onPreview(e) {\n        triggerCustomEvent(events.CHART_PREVIEW, this.state);\n    }\n\n    onExportAsPNG(e) {\n        triggerCustomEvent(events.EXPORT_PNG, this.state);\n    }\n      \n    render () {\n        var DOMAIN = config.DOMAIN;\n        var {\n            elementId,\n            eventType,\n            regionType,            \n            provinceName,\n            muniName,\n            muniCode,\n            iecId,\n            electionEvents\n        } = this.state;\n\n        var curProvinceData = provincesData.filter(item => item.name == provinceName)[0];\n        return (\n          <div>\n            <h3> Race For Seat Bar Chart Embed Script Generation </h3>\n            <div className={className(\"form-group\")}>\n                <label>Element ID </label>\n                <input \n                    type=\"text\" \n                    className={className(\"form-control\")} \n                    placeholder=\"chart-container\"\n                    onChange={e => this.setState({elementId: e.target.value})}\n                    />\n            </div>\n              <div className={className(\"form-group\")}>\n                  <label>Event Type</label>\n                  <select className={className(\"form-control\")} \n                     value={eventType}\n                     onChange={(e) => this.setState({eventType: e.target.value})}>\n                        <option value=\"national\">National</option>\n                        <option value=\"provincial\">Provincial</option>\n                  </select>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Region Type </label>\n                  <select className={className(\"form-control\")} \n                     value={regionType}\n                     onChange={this.onRegionTypeChange.bind(this)}>\n                        <option value=\"\">Select ...</option>\n                        { \n                            eventType == \"national\" && \n                            <option value=\"national\">national</option>\n                        }\n                        <option value=\"province\">province</option>\n                        <option value=\"municipality\">municipality</option>\n                        <option value=\"municipality-vd\">voting district</option>\n                  </select>\n              </div>\n              {\n                  (regionType != \"national\") && \n                    <div className={className(\"form-group\")}>\n                        <label>Province Name</label>\n                        <select className={className(\"form-control\")} \n                            value={provinceName}\n                            onChange={e => this.setState({provinceName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                provincesData && provincesData.map(province => {\n                                    return <option key={province.name} value={province.name}>{province.name}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Name</label>\n                        <select className={className(\"form-control\")} \n                            value={muniName}\n                            onChange={e => this.setState({muniName: e.target.value})} >\n                            <option value=\"\">Select ...</option>\n                            {\n                                curProvinceData && curProvinceData.munis.map(muni => {\n                                    return <option key={muni.muniName} value={muni.muniName}>{muni.muniName}</option>\n                                })\n                            }\n                        </select>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Municipality Code</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"CPT\"\n                            value={muniCode}\n                            onChange={e => this.setState({muniCode: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              {\n                  (regionType == \"municipality-vd\") &&\n                    <div className={className(\"form-group\")}>\n                        <label>Voting District Number</label>\n                        <input \n                            type=\"text\" \n                            className={className(\"form-control\")} \n                            placeholder=\"97860055\"\n                            value={iecId}\n                            onChange={e => this.setState({iecId: e.target.value})} \n                            disabled={(regionType==\"national\")}/>\n                    </div>\n              }\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" onClick={this.onPreview.bind(this)} className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Preview</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                <button type=\"button\" \n                    onClick={this.onExportAsPNG.bind(this)} \n                    className={className(\"btn\") + \" \" + className(\"btn-primary\") }>Export As PNG</button>\n              </div>\n              <div className={className(\"form-group\")}>\n                  <label>Embed Code</label>\n                  <div className={className(\"embedcode\")}>\n                    <span>{`<script src=\"${DOMAIN}/embed/embed.js\"></script>\n                    <script>showTurnoutBarChart(\n                        document.getElementById(\"${elementId}\"),\n                        {\n                            eventType: \"${eventType}\",\n                            regionType: \"${regionType}\",\n                            provinceName: \"${provinceName}\",\n                            muniName: \"${muniName}\",\n                            muniCode: \"${muniCode}\",\n                            iecId: \"${iecId}\",\n                            width: 600,\n                            height: 220\n                        });</script>`.replace(/(\\r\\n|\\n|\\r)/gm, \"\")}</span>\n                  </div>\n              </div>\n          </div>\n        )\n    }\n}\nexport default BarChartEmbed;","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from \"docz\"\nimport BarChart from \"./barchart\"\nimport BarChartEmbed from \"./BarChartEmbed\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"turnout---bar-chart\"}}>{`Turnout - Bar Chart`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chart displays the race for votes and is configurable to show different election events (historical). You can decide how many parties as well as whether you would like to restrict it to a specific geographical level or not.`}</MDXTag>\n<Playground __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkqiUrGiJkjK8Eq1QyZnWTWWoXY2Hm_To5G67mScAIAlCKRSsDsIxeeHGNjsFU83iWM1g_m6mVsSPMtjgoRg62oqTxb3qiAAlGYjJIzBAiDNKAIpgAlGCuchTMBCIjsToSqXtADc_MFwrFioIABEAPIAWXYMsi8q6koIAFoTkQVWqhSKHJEhah9EbZfKcJJsK5BbBbagzOLzXr9TguhgMgAKdbMNhidYWRh4ADMYkc6pdNE46pF2XYuImPScwJJNQEiCkKfj5gs7EYMzEkYaUyiyRdedc6BYMWo8XYMyEd3GlFSMCmL3Y4cw_VQKXzMASnKkDYTdfTztdkmriekccUZhOvSI-hwaQIAFFYMeaAAhRINdCRzrCAjtbmoTnKhTKb2-mA4TQyB0ahaHoRAVBzKYb1cAR7D8B1jTlfhPTgARyEBJ1qH0OBJEsPofnCaC0PgghJA8GDyBI_hVVQAV7SgmC4Jgi8iECHJEPYZDJFQ9DPg3GgcLwgQCIIIjKOYyQiKYkVz1Y7JqLtDV2CDKU3RNBVzXaRSHWAdhNB8eQ1LldoAAEYCIEQBlQDCui0gNUF0VFjlOAAvZwCESbF2G4dhgHWKIBGeVArnaAAGdhkxmLB2n3GsZk7FhZxCgAWKL2AANiimL1jAECADEfWgRIQv4ZxDkRR1MHYAAFIR-CWCyfjgeLEWymtcpoZwIBcy52AARmS2L5HBBzqCcgBBOZvPYSNdMo6B0HDdh5E5byxBmmMZHYVFPJgbhgEPNyPOxeRt1rYB5qgRbggAMhu8ZEnmShmku67zG4D75TAUIHJ7VB2nYAB-DYFvDSNVquV7w2GmspBkat3zMWElMwMAwigKZwbWjbYcmlca0TFSCBwPLMhSa8CDO2s6ykkj8y4CY-BAdLQtC_hfBgCAUkIJmACZebZkB2C3VdE1p5jZLY4WqbrSQiZJsmKbOqQ8YRsxvxAHiMIzbDcPw_YxJIsiKJIgCtAoED9AYOilKJpZdPXLCs0Mjj-DNKUFNoyD2CMEI7HQZMjM4kAA89m2HR2rzXZAT1yOI5iPjgOAw-94BpIIF33WQz1xZFaRkzj8SRRT-jttYFJLEoarZyD_gKlYGALTgcuLX8C0ZlnT3tKmGAG4E2uY89HBPV77CS6UvyazPISRO1aJXDy4VxoSc8-4IOAhoH4fJG32YIHHnT1nigQ4BgGf9jnggF6Xle1439Yz3FZ5qAAOR9JlUEzk1s53z1wmgZOIAaIjVYDBY489xQyngHgSwApug-WTOFX2fVWahRoqAo4RcCC6hmH9OwPlJ4WCwZYR6vV2jn3COwQ2zE2oWESONLAtgAAyrhAhQBCtVc8op7DnhfpYcaABxc8tD2A_AABquEYXAO81VmLFXGOiGAsU6EADV4iMiuN9X6VlIzoFWoQ2sXQCD4WODgOE5AVEiAyBQggNELBKHWIkNRUBGSLwEFEAgmifpSh0eYyxtABA2P0auIxJi_FWMCfrShABqeUABSf09jOKf2AagLRPiWTkCgP4OAb9jyRmFFzNAeSYDBJrKE4S21jrwAANqFKCiUgAuuwAAPi0vY_QGnvxojDMwGCNjMXQWAroUC4B4AaHoAQoCoANG1NNNBI0sk5KoYxOm2BQLoDsI7TMUxJ6rkcmiUIUphSRgHJQO4ZTqYWAZHCU5g44CflFuwfpp8oDNB8hMWwdirmfLgDgVEWRpoGKuTCNeJD5hXH4KgaIVl4j1SeRYLoz9UDgt6lCmFvYoDwoJlcs5fwHIwBKZCkA2KQUWCID9CARLg6krJRS2ijhMDEtpSCiAWwHzMpAMoq5MNWXNDuecv5SKrKosuWS35_yr60DDDAZFqLppnLuDKuVpDvnU15VciA_LFV_LxWgREJSxUgolQC6VeqCUlIVfcsxQh8UGu6U8jV1MtUzR1TgelVL35Gp-YSSVWR3WUstT5N1HqSlqtrE62sLqBVKo9Yy0pvkEUElsH66VcbixWsFQGhlxZw32KedGt1bLyAPm9dTE1Ur_zFofJmpV1b0B5uWgW7V1rcToELHdfs1rNhc0IGW2sFb_VtsLMG1tDM8CNosIO6VPbuZTFHVm2dhBG2GQXKfRNOLqb9OBXSpwWqADq3KyXsAsiwMAAAJJNhkPm-rPPu8d57OZzrvM4cgXQ6BdR6uDSdya_mmv_MO_EPlT0Hp_dO_8S750nr3ReldTyJXIxFONOA1UX4COmghrA9FkOoYETgDwqhIy_MeZu39-BKiwCflZJis54Fkb8BgSjsrqMMbSPhwjxHG0SoY-gWAtVe5spGKvV0N6U08b410P4MAhNr3YxgIjhISPqvWPszCOztRcH1G0GgWMd0WBeQud5v6uO-sWq4EYCmU1nkcDQVwaAoyciWOBpTVyRldDGRMgJ0zZnTVPgQTzGRpmRixtwdaenayvLADgMzFnIunjHDZq-9mBDgyWHF_974QVKHAVfSB7mYFwJc9TQ8oQKY4ASsJmgTDbCgSjKPASOBzxiOqrqUUlgAD6uGnO-sQwQHDaGiu1hK2Vira9quonSCl-r68cCinPAIhouoX7tfsOe8aaHzzdbExRmAVHqA0bSINiww2Tyjf0ON2rU2744FW-NNrnW5sqIaOeQ99Gdv8akzJ_Qg3ek4r4k7HUXAACqMx0BZF0_B0zmQLMSusyBOzLoUuObIxl1cv3qb_Z2fehIQPUAWR-gQCHpGsHTVQKEBIjaTs0BlRZBulWCAXcm5Gabfymstfu11sjvX-sCKO85I8J4ui05gPTxniPmfXbmwtpbK21sba2388Tu3mP7dY6UynpxSuC_Mr8EXY2atM5ZzdtbHPHvPde9x97knBP0751kiUAgAtTPiJGNz0Cnfee1D9ka1M70PqfYQF9b6gioE_TAInIL-kgbAPu6a-poh4HdWgSMAAOFBSwqfEy8OgRIHwoBspoPe9teALQRQAKyhT59GzP-GnC56yQXggRfCyMHYAAdjb2XzLu6z2x58jX7P9f8_6Gb_iUvFfG1R5g-e6a0f92SGTDgMvjaKnmHC-SmDh6k3R8vaRyN6PaxK726gA74fpv9v6S6EY7lAU-Wm9FscdmoAmZTX5m_tBIxX_f6UtHPvazc5QzQwl2-w3RBWbgrirlnH-VcAbmcHLhw1nEsyFRgDAD-T-Bcl0CS0Rw-BsCuhfmLDgBqVCkaSWH4GMWEn2AtELlNg7kKBAG93smpiVw-xtzXmAJoAvzAS_0rWmnv0wCS2f2bRmiwW7xBSwQf1RCEESG_SeRJx8ivwcBIiQPiwIESwRwcwV1TQA3HU0P_XwADwICWCWSThKSMJIhwTwT5xNTHG_0_2k2_1EKbUYNrDh1s2Swj1czHBMQDn-QXC2EJwlRGTQO6kwPUIEEcMjQsBCToGnBmn7VXxxmPUTC2mMNyXfiZmoOYnECTWpljA4FSJKX2gKPfmjB0BIgtBiAIFgH4E5FOgunMNwSsj-WIVIUMlmkfhV1QBKWUIyxWiuDhjjByNrDyOSSSM8LACZnQNCOS3ZiGIx2yRMPSIugWLSPyX4CwSoLrxqMMjmNrAkF3FkCGIGMONIwsAiL_2O2h0jGmMRzJHuU4KOEiww0JEnzAXINnnniYUoE7AyGmmniiR1HnjcWXigHpzgBjQeVeKODByvi-J-JPmmhqXeIvk-O-OnEaVSRBVqkiBpHKwSF0VRPhIeRwAmDoEjHST-kjGmUZAeV0iTX6WRPCEvlcGmmpNqWIJ_TixiwEUyBmDwGuPh2SzuMFScwBOZKWE6BSA8EjD6jLzb0UDLz6gVK7zfBXU5A-GiEomZwECECOFCyLFQDgEoFgBwAyF1O1N1M5AYNXG5N5P5JuIyGFLuAz3niMONOFDgGZP7X0zASwWZIVRglPhsWZOBNvmwgJKvidMhPpLAUAwDJPhgE8whJwEAz5x9KOEg3jNPiTLdUgzTM4H5QAEIRChi5DRFpNFDmIBS3Dbj6Zi8lhIMjCVjTCBkRQLCmj8yk1xCYtriSJxSiwoAPSvTw0YZftetjgUD0YGJYISIaINYtZMddYbFqE85c4WI2IzYgJMCrZwJw5NRzR7ZHQdZnYB53ZRAgFu4DTIA5xo5t5t5dBryD4pgvARBJDZh3Jdo7Bo4Xz140RZhdxURAQk4yIXw3yZgk9UBE5AEaI9yqlPyt5jZ44ZI5J0AoKnzQVsIt4h4R4750Kd0zxLx_CrIwSj1RwCBsS7V4BmSzAv4kJB5f5JA94u4vZS4d00QuY0hYI8gIgiB6caKsKGL_4oBoKQEwFzVERPT54_ixwKL9UqL54ZD7IKSrIehmySj6k0B7A1LjxvUEifywKPzsQ6lOlNLtKYBmk2k4KjKNKT8zKLL2kbKtKckw0aLFkViVkZyJYUKYQsANktk1NXQd1VNDTDljkUsdVvTtpQhbkIqwNfV_0gVdi_CKYOVg4hARAWUkjptUViVoU_o4UuVdjhVqAcrg48rYUsVCrTjcVbU5LqV-BMrj1Q135OVSKmrKV41Wrdj60urnCxi_CMlUAwSrgalGkr1f8-qixjzAd0AtMCcPDI8wEnjRM4Af0CLYBBqwTwZdiSTNhUByTvFKSYTXBIrj1-kBq_owTppjqal-Bjr-BGlbqQB4hQTcKQBGl3VZhmd0A0hsZsg0gnryg30IBGjqAHrHCxjrlDNfCCBbDgALriK74Vof11V1S4gCAtSzThRsZHJjT_wsapsdThQrSRyLipr-IZqQcYTw9vUD8LBqBj9UVT9mdIrL97CeCCFiqUVSErh_wr5AoxwcA2T5A4rX8bDK07Dr9K1rScVqAWDpMWbQDxVOlOL7BuLIh6d2CZtbtTdzwnsXtdDpbSbJrqBzwsMNQedFb18FEOKMg1bUQNa2Cjc2dWsOtOdnNjaQVoiIwjgFqrl-kQxxoGgX5poHyuYcBA7g6f1t0kqrx9AHw2qyVsrSFE6QUubUUlhIbdjxLCV35U6rlmrjx87qZ01MBi6o12VFhY6iLTbcLqrr0UdK1MSyV-legBBZKCV_SF1KLJKr4cBIAMYowXhzJsZh6iAcBoVjxvJu66qvUiCMSk0EjoxqrkjBiV7hiqxlJJRug3F2BnAJRpzKyHRJY8xX1-hcF2ABFJsMVzBKxUxdiRjijjwiizLSjcp3ELQUghBortiZZIa6xsk2ExBCKKZGg5kpBAGFw_7IbGA0AZhKFdjj0PJ5gmZaBfLZj16xin69pljnKSj-B36iALRMChBKrajRj_6yVyRt7hgroMgmYNiHSBAGrMGkjVd3A0h9p4F1prDYaJb4a46aBUq-aYIzwhb1EYAVpIjKGLARZWHjjoHj1H6zKX68G1jwBhQiGv62gZhf7EGrlGBIGoBgG14rBSEIHWEoH9HcjXl_DVK1GcHsG37NHiGQJSHtiKGZH_aJGuGwVWjrGQV2HaN9pFb9TeG4bk6IUYQSTRHBbhbajFGvHExzk_pnkfH0V8rKqxA35MmpAUmrJEmknGB8mWQ2SmZxKIACqxAO7yBKmoA8nQbUBCmkipBbGpRmnciDiOnhiUiVHcHFj1HCHP7v7dH6DToAnEwjGxBj8zH5hZYpmJm6w2mphsHVGBnw8CGXGSHjSPHFnawyngB07_HWG2GT81d9oJUGbOima1c5NHxiNxmTmYGSnzAymGqQAxB96Nqphh4cAGm_pun_66SnmZHIn4EfIMmKr2ZO09mWmXm0mXE9pIXMVxByrMV_mCnYXlMQW4XGmEXGRynaqCVxAc6MXqBAXnm8W3mQAPVan4p88PJxBaWQb4gXhEgyWmmsXhj4XqXmX6W2WLRWB0BxBWBLIa4WBJDYgCAOWKXOnlmKWFH9HraxjXdrnSF2BCyIWQA0XoUyH2AYWcXcjemHG1nViNmNGP7tGf6xnZWWmpmanugSkLGgGuXExln7H1nTXujNmP7tmyGdjDXIaDmc6SlpGknAmzmOGcHuGUdxbwdgAQ2Wron-axH4nDJbX_7imqX0mSUPmvm7HfmZXXWrllXw2QUc7e6WTO0K3mTPqZgBVKLsZS2y3j0Eis3UntgYBEh9oc6J735DJg2iXEQ-3jw6je3J7JGi3A2ZGVpi3sWW2DHuILqM3hiun9Gw2yVm2yVVWVU5nPp-A-XWXGX6D9WbpYXlGTX-mzXnHLWRm9Hp2DGpn9RKU6Wj3kgnXJAFmH2bGLqPWzWvX8GLWiG_Xdnv2W6fHgBC7JG53awgnOH4bsZwn-GoPeaYmBbiY032AV2xj22VLqXxB83VJC3JAXnsOkit2F226HX_TO0qOh2YBa2PU_koh62PUm2YOxi234XO3u3IPKVs1PVR38WcGPUBPQ2xA-PaIxP-2p2F3_7Z2wOsti3Wnl3z212nmN2QUKOrkd2RV1X92aWX2WWGXEhBXhWT27pz3jXPWr3vWgPhmdH725Phin2jP-WPJKoYBnWrHFO6w4GEHfPy1SFUH1kMHnOxC-mnGfXgO3GdmxnPHwuLBqHERaHpwmZ7BqpLAWHEut0IPS7oPAvYPI3gmEOwn4q42P9JOIBOrk3YmMOJGpGEvEuJXWFYAeBgBdOSrgumYdWCrai5GF3FWNOlXFnOvua92tXD2TOzOajT2rO2A_3CjbPAOhmrXRmEnlOpn_ECh2ANNJXVIX5StAgBBvPjHlP_OpgOOHoUGyDQuhYrvVnlvBmtnYv_WmvwvkuYBUv6H-AABONvFPFmUKMvMvbLnLn0xF_aetTTltuD6NxD8rvh-Nnq2r9D8RxFxrq7lrjwNrkJo5lBnrm-vr-QAbltobmd_Ri9mzqL-ztbpzrxxgDwcICIcwZBpFkAJnm4MGoWfbfPHYC531OW63aTO5pA8hx7mnjwAgAME92JWYoWWJSX6X9ufoAKRIWb06eWkYKQTnlnhV9TmRqn_9p7811bu9m1gJxn5nlkNnjI63mX97mR3n2IbYAXlNU282pDQAvDAjeTB5x3yhiX1-_gKXmX1aOX-7hXxbwD0PlXgUGCdXk906M20uZDGqNDHX-3_X-GSn6z43mns3xzi3wNwxyx4xk-nIeNU7ldo3pbmn8yNiIEenstxgZqdwCT4oVv4Gi-niJmAAEmAEjpfhJ4b-yC9BQrNnEFae78pnPbgBn7EDGVGGXNWSrOLZr3WvMn0DvAfFKIH-SvjvQGGnoPLpke09Bb8aif4H38v-g6qvB8RTVav5AAH_x7v9P_DcTePGJQH6__f6u5Q7BwB-UHY_h_ySb5cf-VXeNKAKu4o9r-wAaHo1XC6AYrgQPMAV40gxXB-YbMXzsjWn7n1KYdQLoJ90jCSBowvAZhmYBaS8AqBNA8Ik8CICkFc2tRVpvFE5Yl8DelDcni004Egpzin8JGJ7ymCowpyHldOBXy_BKBNYaEbWBTUEgAkVypETIiKCgpblLYYEGOBsSMZK0OolofID1CuB9Ql85kb5PnhdAWhMBoiTRvEG-RUBBy5YdgDj0lDbAekI0HAsxAqIvBYAOgkCBaBGAGErgXgK6N8jQaWhWWKQYKD0H0AZBXB9kdwSKE2I54N0v2MxBkERC2Y0gFobQQYl0FNxqkVwF4Ky3ICxCzA8QqYOASVq64BAYAQciMCuB_B8gOPboIWT3LuBbErlOIeIWyQC0lalg5KKzCiglDIKpnSRLYCyFl8laIwGwLQCbgtReoPwEYLySGE4BTO2Q9YFMOHqzDt6VwBYUsI6EHhkwYAcgE3HLhlw5wBiKoTUNGD1DbAEAJoRq1aE0Blh7gH4FKishZD7MWHdgGYO6A5DoAUAC0OcklBssrgCyGsJIUoCdsrgAAYl-5wjvkEIztn4PHSGCERaISEY3DBxjIYImQeRMmCWDJhlhEQY0jEBmCJpRAcUSgPkD-hXBWERpFxLQFVCiBmR6wUIa3HzwRDIY0QgQEyN4AsiKRx2WwNQ3kRoAfhVBQcjsF5ECj-wCUAoFcFShYApRfI5Ue1BAiGDeYaUYkHACbgZAtUSomsORB2BWsMAVwDYYyJVGCjmo2SEUagDFE49TgLg9YF4AEDThQRgw5UdKOdHTgLQmQFgHkCuCRRFRHoi0f2EoBoAAkFoFnDsKwhKiKRKQr-lwCVp2DhQVwL-l2x6TzkZBi5ASJJFX55wA4yg4mIBG0DbkNBsFX2P4GOCBxo4ocC8ixQnjB4sglcEkSDVorBw7yf8GIMJTwrXdugbY_gFSOYrjllKLIdONWSwKOk6yEwBsgYSbIOMlgLzB5Buj_zRpCyi471IuKBQi11gAbCwKuMXFlDRUStemo02aIkR5UWrUUNvXYC71_E8AT2PmhrD7jTxKwhhMwjL4biXx9CKRCwjYTTR-AnCbhLwn4RCJ2AKiXUJYHPDOAHxThPcUWQPFOIJGn4vBCsOcSMhpoI4_anomPGGIvClSVCuYl1BgA7xq1Cao-LgkzQ1xX4tCTADcQeJkJTRVCRIzonRAMJh1HRGyXiJ4TXmEjdgLEnaAJJPaThdYeOmmht5WY3yTMj5AFhgiiEgpbAssxBKlFwCNRGnLrkUqrh-kEiKRERNQJjgxJsk_ZmAgACaowuALpL8zTQBY4afpAOGyAoFHA9g_BOwCeo49GQ9UYOIkAXC1CPJbseSO9WbrpkzhodeSRkHKxzAYiyk8uDUSTTlYbgKWfgHZNPhTIYAyGeYFKCvE9hfJIALAPqDQDGS8p5gY8GOFUmRxzWho7YMaPQCuN7B8KEANCLACNSmpMU6qnFLRClFPsN4bwNlPCjhR2YsSSMIBmiTaTbAFkscOH2DiTSBpkGaJKZJ0mNS_MVpWKakWyBRSUgrjPQDQA8mHJ1cSaTSW8WEAYwQaGmDgD5EbG0BmxR0-ttgxcz7SjgPgfvIvnn7xAYA0EeTBDXYBhgo2oobTI-BqQjTzJC0scEsEAyNJu8d0loNdSelxBYA1WF0DBG2qkYvptGH6T9D-mNl2Ac00aUDIIBgzvkq4cAuFPmDyZ-AdBD6W1ISkgA_yhpQhtlOplwBskH-AWPuBADRJIwkGSQLzFmlmSxppEXmJyGiQxT6CTyImZFNu7oNhZSM6IO1PWIrEPJNPcxPoFcCZCjGNRcmdLMpn0zaZXKNKiIHBwWhfuleFqSChJLrICkX4t8XAF_ELh1Z8U0omyPcCURhQ2UogFwF4xMh6C-MnFITNmDEzHwpM42VcgpmlFUi2UnwGZMDnUxg5ZBTIDTM0Z0zY5DM8HKFBZl8SOYvaKYBH25CSyoi3s8uKLJJkgAyZIsjWSHLlk6z-AyQCOTnKDmlyY57gOANrKYH0zGZ5rNOQDN5l8SPJRsmuRDLjhwE5wPkH2RFMLnFypZds2WTknlnB8OeMEDaROOYb0FBs_SOOJYHWQDzfM-c32WLKLmRzaw0cnQOXLnHrNSiccNkUwzVk2SwEBNNeb5U3kpAC5_s3eTXKjl1yqZicpucHBbng5-AbMwDJzIFl1S2ZHM_mYLOFkvz9528wuaEL3kWAD5DshyMMEXlMDXZXYaop7JUw4oJUMWNidomoC9lmI_ZZMSfC9LLjSMq4v0vPEio3z1kps3yiHLpjHVOAdgV4SEFATQBWuHs_MqvhXQwhhKvwpNDQt8p0LCc7zPnNI1slyJHJwoO8EGl8jbjJqFE82ShPERmSZEciMpI6j4XrprakikUIkGkUkKpKZ090kYqvg_pC0Ui0xZW1PYyj9FhiytoDXngPUnqL1WRCKDZSAJHq_Af6vePeqnU7FHkBxcyScVXwXF_ANxcxE8XhKQAvirxf3WFDnhJQ_JXxex1YbHwglpi2Re_BqS-KJ6xYEduZV4I_V_wPwTAB8HdJ9AUay0D6eRJ5Rk0LAmEsinlH-GGLSYkQdxR5G6IZLEgLZCAJFQSI9LDF2S48DUh6UlJ_k5IF4KUT5D0F569lLtPZLAAOKakEAOJHZNRgOKcAsAWcBMAXp74GlRodiSyDPAtKEghi3REsH6U4TnU_KA8aoqkTqL9FAS6NGz2egDkhyxirVpQA8DqB_CsCslAkWIWOLUKE7fZWMVeWkJ3lwKrulq0wkAq063Ej5WYtcCXLOA-ZR_u8WRWVsf0q6fhTcs8JYrTlrS0xe0qICdLelJRAiXIgmS5RClVy_MtIzpq1gml08Q6aSNvmE5Fg6KglUovuWUAAZTyjyAEoSKgr34ac9mMSjTkISaJLEwnDKoka6ISaV6bRQIvXpNLCG0QCld0QnYBLMVJiCdpMoZYzKai89EkpQC-L-DYIlIcGDKhIF8heAHgGgSMCeBLBMJkYKAJyF0gJEoA5qkHHCHsA2rVoCnMYjDwSKaryKcibotSv0W0rKAhSiaZKqml7BqJzE6wfKtTWIslVjKkMdiyeS4BrQCOAhSKEY5fUmlSq3lbhKxVirjwuK5VaRijxoB48WAYyYiRTn9RWY4KzVHcpfE55J6sQYyZbLJU0Slx1tV2agGbXGSakfUZpI9M-pYBi1gJSMkcrwVYT9Ek4JFQqqzV6JlQNSx1E8lzyFrk846ydbdNIyEzlmpRHALgGrnql6ZLwHROqXQB9Ab6kYRBJXg1L4kfCaikQDxUjBYB61YBfOZeuQi55b1JJROQ-vwVPqX1lJd9WjReq6JF8ZkphCgUJyJBaln0mIDsHBLpRMNJJF3nKoOqrqK13qzdZmtcTpqlVu6kNVcnBkNqwEccZyf3OA0XUlJdQAfpLxgjbFigT6hSpQqvhnqQUTG00owkJz4b71lJfDc-syBwbWY-Gt-YnzdXHK11la_VZUmkKV461sUt-ZBm7n4aypb9f4YCJahssPJfURuHhtilC51JQmq5CJu5GIyxij80ol0A9gQKTZb80OTrIrX6kuNi8xNULDjjtZ-ppiXVUMQPlYAPJ5a7CVuwSILqa1pSaJLgHIgYBAM4MTmYZOPS0bj0B8wDB5JS2VB0tnIIwL90kAoJMNcCt-QPUqpLBLl1y_UsSvOWmK0V_SyrZ9PwUHtBgOuBuNFpU2tbgkLIp5j4UvXEYAmB8oEbU2PZLBQoOAFPBip-TsrjpbACDQ3Kg37VuQQ2sttFlg06IZJm23NV40lS7RSik2szTrJwC_dHkW2yhsSKuknT8AxAKAJGDZUtiZgnKgbe1ty2Gb-AsAMAOeTq0-F788UNIGIkC1RQYpN2pJsdtgD2zzkHkpDaaVkwg6YAra0vLzHm0SqQAEOjBdKPk4Hb-Rh2k2Z1ppbdb9gfWkjbFuDHDanpF1MXuNrflnbpt_UBbeWiW0zAHtkmx9dTu20ybX1-2nneGxh3msmdSm9gFpqJ08p2tB8sXe6qp2sMEimmhbTlrJQHy9NOsyvMekwXHoWND8xSfiQ40m9T53GsZrxuiz8a-yVCiLdVv-EI7uVDW9aE1qgAXL7dS09eqtsNLranNSRHbbJp0TwbrdE8kALLpU0zR5d_9RXZGEO5yQUsW6xkNmuV3S7dNBhCnYNTD16qN1WKzMqXmkLR7juyixiYhO3VWlE9QxGMkcFXnrJmNMETlQPN8LfN2NOATjTPLPl3daiZu46ouuHLa6yUle3yn8mwDTLpdXO6DRFr51yajZ7uxTanqOoZ7I9mu8fNUpV0myft4AYzaLvM2WbpdNmhuIpVzk66a9Ve00pMltVQKn5MCjzbXKD3ebj517EPsxDb1J6g9UWnWTFrn1IqEtCa5LfhiK3joMtvMJfU_pllUz1krcRBc7Irk0s3Z6CoA5TNyH6CPZTAvqBqJf2wHSiIeyne_qxVK72Ai-oYsvtrB97YarGhvQbqb1G779uYCWe3r41Xwu9Vu93aEOI2DVSNRVcjShKL2Ub3E0QAvWNCYnF7S9jByDVJrH27b8FAeqfUHowNp7WDCupFbnqO5Rg494ePRFaVwPsBl8-B_geWlMzwB0RyQHyO6v7SEyd9NNISfIEzHoQWckgVQNgE3Ilj1BBgcCAcmUjzZFsy2W7Btn_GCBOixDNXJ7BcM603aZuF7N4Y2J2TPsARsaFMH1DjRqoD2PWubm8MscVeAmaTFEZCrsAAAikDgaD2AAA0u1jmzOAgcTCSwM4ASP60-8wcAAI6hAXePo-AOTnXipHIjJKUaJkZdoc40M3h3rO3E7h1jBBpcEQc0ZwlS53DsudbEIlIpBHKj5uUirEfiPVQQjW-HFDkbyOFHijpR8o3MYNqrgujbtNDDRUkHKAtYe8GwxGA0DmxgIm0pwxBFLgpAajUAAeF_VmB4AnjFRZWSw1grLFG8_YmOBhDSRcwWGQxieGeH3rRBK2_xz0JkERAWh36OoyEyw3HLAAzwJE5kvqCWBomrElbNxOuBgg30sTY4ePGgE6WeLoTkgWE43AROitaAgCUEzpH-IUEmSrpMisGSBI3xXq2ECk4yXPIMndk4JoUNACXWuAKTzUMMRjGRNCDfIZ4bEmmKTgkTHABOCk2cnWm0n4AVAAnCCZdDSnWVY4QiptTvgeEgVw-anHUYyDSEd05pgQPIkeNQBigq4cLC9SurW0gaBAqyPupxSRoHTNYBTmOV1Oh7ZTVipycaaRUN4Tw1py06uEjOpinjPp6mE6YSBkn4AlauJaWzKUwAt2E7XYqwg8DW4b6uxZMX0HwPjUDlXp1cPGb3UCD7Iw4wMzJXo6VsPCtkhs13RclPJS26KY8PwGJTVZ1QQoJAdTAiUeA8zAmAs0gGDhMIGg-oAc7WAPaUpAEI1PyNjvo4lJuz_AXs0KH7OFVDOtEVc0gHXNTnkwyYPqOoZ5IH1fiAiCAIkHcAQAXJl5687RDGrbn8ua5kAJOf1BHm-o_AJQEub_6vmNz5ySgHVKg7_nDzyYXmKebNABJ2AqGq-ORBcnah6j_g4StsEHLPQnzLMl8_ubfNgXeY35xQL-ZXPvx_zNsLc5hcDTEXsL75o84HFLxnmsgRwSwC5HcAh4XJTFli3QAwtzmc0mAUCx-aPP4XCLvwWel2aoukWgLz5ii6JcQAHn-LyUdQ9BAtDVQ_AgDYUCMBZI1JlL8QVhGpdcBcWdz1XYsHxaPPJRBLiUoi9JfXPiXgLUlj2TJZwv8Wy86h-POiB2Vzgak56SgNkGajogXg-lrC_ZeovJhQe34IS5RT3OBXrLkl3c5RcCuHnkoJ50vM-3yDQoXJ-oeAClb0s2WeLdl2S8mAStmXlzwli1LFast9mJL5FmK5ZYcv5WILSV8IC9LSsNXYAFoePPkHyD-WOqRlqi_FbwuhXzLxV-1NVYAtkXuLgnXKzVeSi0WrAeAcnO_GyRsXhgwwB8ycFCCdWcrxlqa4Vb_NiXyr2V8a5tfktJXXA2wPwCcBclfF6jdgSwP0CLjtp1rhl3iz1Y_PJRTL_Voq-FdKtvmorlVg689eCuJWqEg5N4BkHctdTKIpWSQPqGSBzwBAZglIA9fjTGXFS21iyxNZGsVWxrEVvK2XjqvsBxoKQdwBwzSt40CA6gCAFDeiDZJskiN7q3FY_O43Ubg13OsNZ-tY2vr1FsvNNa0xXg8aCFmIkIGsgaZKpL02m09fpvBXkwTNz66zb2vRW_rEtsvEdZqjultg6ll0C5OqhsoAkcAJnoFDFvo3DzSt6WyJfRts2DL2NmqyD3UOob5gLVl-NsFKwzBbzNSVDV4HUuVTIglAA28jZCs_mBrMts23Ld-uW3qL6UQG9YFYSuAXIAoAjItajsx3WIEAH2_9fDsm2Srstzc5jYtsc3Dz6UPG7bZUuNWakl4fPKhH8Ap2Jb-d9O0NaDtZ39rodvO8ra0yQiUggFmuDUjfgvkiAPl-o7jP2tI3U7b1_2x9dNskXg77N4a3nactJW90FkBIN0E7ueQIRkQSu3lfSh-2CLAdse7tfrvy3G7H59KOlAUsLhXAFoG8KfZcn7oYIrETsGvZqtH2a7LNuu4BYbu53D7beZy5QEJvZI1bdADS9VBEDPAxwGQVCHkHvth228T90O-bZAvPXkobeQG-eD5LUg5QWmH-4vZcv3Dz0L1CB1OYQdfn3rO1yKxPZztT39QCDvG5eEqZ2AtM68b4m1xds8kflsAE-GDigB4OKHbePqyPeIdlW97Id9-wg-5snXZrz6iYD6GVkaWX4KQdS_0HXjJ2B7dN2S8I-gcc3YHtlviwg-Vt5RH8ntiyC5N0dXx9HI4Th9o7UeZ3X7-9oR53kgvnnGLbwSE4vZvB9BOKjcjUJIF1B4BOkAKdAJICSUTZKkeEciOvHMpKPxbKjzvN-bGp75E6HZ7VrFeDj6h4GUQbJLOFcAzmoiz1Yc_mb-jdmkn1UTJ8HCY75OakYVne_ZeSelZtL6Tt-9Vf1DVREEgN5eMdymBMJwgs1_PC5MvChA1bMKWiJIEDWkM0AWV-W4PcqeNPQohD3h2jdfNVPUnHDDJ9Y_qeTO8b-oBkNsHCHqXun7iBcN7fCcTWGniCHh1vdHsZ3DnKTmp4TbqeHPJn3N069QHOuaXtbykMcGyjAD32jnoUKW0Q9mfYX5nVzpZ4I5WeIJlbWtrALAGSD5GWS-9KejUksRQBtgYD1EJ88mfD3TnfDkAAC7SfXPlntzxBDPZgswA-nLkm_D7RZ6ouCXFji59U5xdAvJ7-L0KMfdLwaZ6W8AOgGDfiC5Q-glLpl9S7meXO6XNzuZ5M8_t0Xfg7gdgPqECDbAXb56XtA3CujKQuAaQXl1A9-fM3Lb2LxZ8K_-eNO-ogN7UAuCiB2AakRrqACa8pcGv-X_zwVzq7xcivjzVDhZ3gB2Uu370BAVLdsCtcnPyn5zgV7S_tfAv8XfUaa-5FHhWAxk_g2gGlbdkLg9bCNg5469Dc2vKndr2pw671fHnlbskUR9HboAu2L7byfwP3bGfKOsX-r9F369rsBuFnGb4N8m8JfWAG-tw7wTUnyPqX9QrrxZ1a83vVvn7tbwF7q4mfHnmXu3I4AAClnAUr4UJCI0v6hxH6gIm1a_Sipv-A2r-twy8de8wI7fgeC3BH8HQgakbgAjGE7LcROK34F6Zxi7-dpvA3m7sh_i_5jOWvAckBa53bXQDg-7lL_mGu6xfpvcXDbrN7zGmtA4iA5NjAIW5gitPqAP7n5zM81dfWN3gHrd8B-VsO3Ig0dl2xh6iAx2f3Vb7e_69tf3uUPj77d4S5cdjImeOwfoCUpcmUe8A1H7YLR9VdJvgPftmJ1ljidl6En0l4OAIjCCgQ6C5dIcyOb-BjniUAiLLvfySJjWFzLk_t5bYE_hAOXw7_gOeHyNA51D54R2wIE6cFvunJbrehgHvsaegcf75T0J7U8gApPyUHd9p6IDfQ3XLklRBcALdBRE357ia7Z53cWfBPqnzN_ZZ89rOuAoCPsDUnSteSRQsHtj0F8sB2ffXhHmt9hcs8BegPcXuz9NdQ2nwWALkx9FwHjeg377Pn-Dze8Q_VXUvAx9L_wFs9p4v7GDhwGyxcn5H0Qbjk4AIBmDFf4vaePzyp6q-oeMvKePG1eIwC6DOY5gGpCN_QBje0AXX5KEN969WfAvNX7r9Nf3R6Hew_QDS-t4drQotvc3lPKV8U9fXKvwngbyt_m_N2MgrgDqHOHsBNeakQz2ACzz-AL2DvBHs58l6C_-f-vZH7CxO_PQ3h1D93jzu8oneUAGMLoXW645cng_If8ABN_fYB83hFvaX87yAHKMz5S8lgKNyxaldjghAmtoxIUlGe_Xxn_ATH9E8dTcf16nZuy8HA7euAAAWuTlCAWgcmBVET9k7E-VM8n45_gPkaZ8vwincn0p8d-quM-WfLidn_PFq3o_zwlgLHzCGbdq20ALtxCwIFS34_0RpnxX3-8l-s-ZfV8OX39_suC-X4O7wGyojmvHhXXI4M16EGfXPr775vy3_r_UtS-2fHPk33A7N9C-d3eNsDycFoikuqANwBN3gBd_-_kD7v5n4b-9_WfXfob9Q2B5ciKGXJqfxQ1H4t8puNXgd18wb-l8J_lvIAJP8raBzPsY76l1LcYjy8wREonnsn-W7L-x_PfRvzn-j6T-EvzwMd1ADUbxoh-akDQXv_36gD-DHzsXgX9H77dJeB32Fwv179l-J_o_Y7-VwRnn55BHQRnzS0pGcCbA7gLPM9034vdJ_V3efipwL49_x-l_Jf13_Z9LyhB1neAdS58ivvMREfk_0v_798_n-iPZvq_0X43-1Xl_4W-z7g_76gtGIP6eWuIDsDZ-_MIl6fec_v_5x-gAcb7L-oAdzbCAt5sk7PQRNiTZhi_QFJgCAcASB6t-1_mgG3-3_srYNAgoDERtuNAX7KwAJAR96YuC_u34--mjvP7f-hLus5oyoQDHaa22thkABQLwC5Af-XngX7cBZAagEd-pvlP6gBY7vqCnWPoCE42Ag_oGq0BLoqMCoAJAWf4Ie-fvP4ABi_hQHABd_mK7KulEI1A5Ak3rEB4AVgSQHqu-gRf6l-RgewHoBIHs66T0BGJ8iSALCDnhwArsoWCu2nYIkABBeIHAHgW0gcYGyBvvvIEge01hMhg4mzm_52YwwMS4RBR3rP6W2bAcX6mB_vvlYp-RAOvCbAAgSXaogmpiKARBLAbe6X-KAdEEcBVVhNau-wVuoa6gygd26329HqDaveTAZ_7NBM_ogHZBrgbkGd--QWO40B5EORDMWGtq7ZUi2wOcgRBegWV4GByAW34jBcgSAG8wCVtp4YAWuIP6IWEYEf5jW5PpsEFWv_l961BawUAGjBFvnZ7qGL8HUa1-ndo8FrWfQf752eUQW4GUBtwc3YpWhNpraRAGQJQCJAcAa9afB6wbEGnBhLmB60mTDl0CJAEQCMA6BbwbcEDBrAcMHXBGwa76429wdJhxAqIG24vweISW69BEgVwEW-jNucFIBlweQExBnAX74Uh01jADx4vGFGyD-QOGiBbAhAHAFc24IZiGQh2IcrZzwqAKgB-AeQL8QO-wkJKDGkPIdUHleTQRiEmBNwbzDh26hgxzp-mlujDO2IDifDiBx_k0H--adlSFDBdQV8F5BFvvnYp-yltQBt2g5ACGzgxpKT7HBzfoaEIB6IaaEQh9IXEHpQ01uNDkQdRi4j5ALnjaY9o6AHAE-hfIUqFYhhoYS74EDoVEAuScYW3ZRA4YWiE1BLgR6H8hXoZsFH2Kfi4iQeGfvmEsA4YUsHi-CoZmFRhAof76IOhQd25M815vDZ4BJdlECzgeQIo5khDIbzCIOkYXSGNBkgRb7cO6huD69-LtkoH8BRwQZYnBrvtw49hDQQrZxBbeNNbNuVCFzAaGN4vEDro0EMkAeWLiK66hA_gnAGLhs4e4Ft4ytueiAMtgBpZlQRAJ2ykh-of2FdhcoSsE0hMgXOHZB1YTwHGIITo45pWX4dECOOh4WmHyhBfoqG9h84ZsF1eSVrlCDkpQYz7SuvYEnZwBPXsaFfWOQVmF9h5IRjp42j_t26vAPUC5KigtgfX52AW4UhFuh6YWhGVh2Ya76He9wVfC32qVp3b0RqWk6GThLoRb6Hex4d8EY6yto_7U2WHt05L8B4SiE8RXEeaEY6n4cMCoAS7pmCjhxriICR-IkSnhARz4RmFXBVERhGdhgPPcGbOjGNI66RrIUhGlhWQahGgRb4ahH--v3IDbx4EYIP42RmABP4dhcQVZFiRyob9x42jPohaO2zFqS5XwtGMQEiR7ka5HRhFvr9zTWL8OgD-CkUYvYRRUUcJFORmwWFHBRVYaFHN2bxqVjk49vvHh8kGUYORwBv3E-HOBlEWBHvhL8FNaA2EyLI6L29gF0AZyMXglHm-5UclHURQvlNYeR2zm4DshPtMdyN-zoSf6tRkQShES-ZkegFTW01vRbQW-RpCK-OzXtNFXwYYSiFjRzUZpHyBU1uX5M8rrjACBALkP4IuSDQFgCAW2fmtHLR4EY1EtBpeKn4Cgp1qz4Z-RAInaO2LiEdHBWVPrE7tmPHtmb8-IAPgQig-IDt4A6PHrma5OHpp9Evw-6CL4GW8nmU4mR1Vt9GFgf0dZ6gxyYDWGz2RiH4RpWJ1rMANy80ffaIx3YUNETWsMb9F6GCMfuhIxazp2B3CHLvR7yOcADjGkxM4fjGvmhMewDwxJfrjHTWooNxR0ACbgRFcxqAHqF9RBMfTGZBgwV9bMxrMcAG4xytvkZngbloQFsoRwO25UiASHTFIxhUX_78A4scTFsx9MTwFUiKZlNF-RmDt_bqWp8KrFROjMdhZaxqICTHJgkEVvRVEKwMe5jg2SLaEThAVprGkxyEU4EaxX0RqBExNsTrF2xeNjj7qWO3Ga6n28IT0HuxXVhe6IxC3pbH2W1sf9EbB8cSI6QAnbB3bx4GcRy6qxnEYnGax_sSzHaxksV7FChLwEaReAVRBpbVYlEKBACxbEXHFlxf7snG2xykeoZXiFkMUEXAM7tADfELkkz5BA6ICi6f-8cSpHOBrcUHHuR9wS9K5e8LjaYNxHsV9GkxQUQXF-xP0cXGBxpccmBhRzlj6B5AV4ZRD-C3UBkAWg4oC6CdsqsUlFrxk8dvEFRdjgxZWAYQB3bigbAH3FXx6sRcHrxcMSXHo-iMb9xjuqGn04Wga8uZB4-j3t441YlTNChXxxkaLEwxRcRLF_xK8eYH_xn9l8QwyUrm5xvsd5siDAgkgIA6OeRiFfGOBywRPGIJv8anH7o_Qlb7cicAO15ki8LnQkMJdMTQktxFCVvHIJ_QiHGDkf9gCEY0mwKgToiq9qPHUJoUORHARVsRwkpxkIaDH9CIjo7HEgGlvkasOSLiwmiJ8iewkbxSCVQn9CaUXUY5It5vK4JAprvujGkAUA3K-OrCaFDD2nHjyg0-YxHT75O_AKTBBAe9JWjgxgMaOZ8-xKHlDQSMnlroQxYvtDETWrid0Df41nn4l9QqoaXiwWp8NeDuWU0Y1LvOlsLN6f-USUaE-xX8WEnuJWQJEnOA0SR5FAiPwB3Y3WToND7626SQUnV2a8TkkRJJfhkmYBwwJs5dAA8SW6C299o0l_udSR4kNJ1Seh6zx6vtJhjg9CcKCdeVSdEmfx1ISAA9JeSX0l9Q9sW1Z9xqAA-YaWzbvOanwyIQlFRJ3sWQm-xsybQD5JCySHGQi7pG3b82L0s3D_CMcRtbYWOyRImqRByYgbo-OyUuFwAyFuchoxHlsIAH-d9hMn5xWSdMlPJRySnhpRZNnu5UxNSOt6IuIidskFJoKd0nvouSYcnzJ7caXhvw77l1ISO0cZ0nwp48fslIp9ScAFRJVkeob709DhECku6QJs4cOEyS5G1JhKb0nEpBSdPEsuEAHWGQpF9hMCwAmwEQC4pfUKvGApltsCnzJu8eimdsEQE2GvxBAC5D8p18UKlfWIqcykCpaUQyK3mLJNaFaI7llkbqWFoDqmsRS8SSlTJwqYylzJyqb9yEuyllriwA77iohdAmAHKn4p2Saakop5qYoFtCRpPFAXWIQXmaVAcqXAmYuSqS8nOAAsNZGUANRn4DJB7bulQhUfyXCmhpiKW4lEpwaQLDhRsjgniL27iqEG4pqaYmnhJTKSmk2JzliMnx8tDPb5uA9IovGxxoSSGk2JeacinPJGwX4kCwPATd4g2hjrHLbA79KW73hdybWlOpQKS6mNpkIbEYh0x1uk4_QYNoOTmQM3lsm9plTutgvRXHm9G0-vHvT7qeJbhkDmAgavMCeJOTt4nAxxKOeD2A4MSU7jmUMfAkTWATgEjbpswMOnZhN4EDh5QClqECNS8QCOAg-24dekwWjzvVHzp_AI-l5Qf7telbpDgHenWex6SgiA2GgZgAvkd5pkA3eYAGfHjeY4KZ72AUGcBmbplSDun3pK0SACQZ4iQpaIsDgLHLdAqMjG7HugIQmRTA16WhkoIDyc4EgZ2GeBkl-BGQkF_2pQRO4NydADimf-bGZhmBOt6bumsZ6GUWnHWukRpY8krgH4A92iIXOmCxr5gRnGpX1kxlCZuGeBEEZsYayFyQAIQ6DLwUCAtEJRmmQJk3pYGcJnABBGWO7OAaMq4ChByrg3BHAziJC7NeEAAIBq2wgIZn_p-GaJkBp6YaplmZ6mZbYEZ5gdBDieDclfb_CowBZBdAdGaFCkJZYYplYZamRBmiZKeOoZTRGIBpbno1ToaTqJRmalkmZoGThkpZKCL9zpZbQBaDQuRAAmHtuMEEECrWIwLFm_chWcxnmZ8vuhn3-Urh4B-AYyIvYPg4QIkDqWdGT_4Kp1Vv5nFZImcgZrOfftU70ezPBkAjA_scNkMZvseNksZFmR1njRUFuwD5GnMLNFEAhNsNkixmLmtltZGwZBlbB6huNBRAuETYC-R82Xp6cwfKXxkdZymWNlJZAWSVkqh9wY8Z5Az_gA7ZALADcmPWV6R1m-ZkifZanZgWSpkdZqCfMGoA8wYEAuSy8LEDA5JwRdnxZISYlmCZn2ZNkY69wVgA_hNSONCYA2SAV7DZKeC1nJZk2cebqGEyITnwWxkmOC8p8Fo96-iDonRnHmVObjkbZobiHH0i6tmskwQmzlYkvZfOdzkTZvOUeZ05COerZxAJNoPQ_AnOcdl-ZH2ZLntZobsrbtOygdJEu2WRoyB0ADtEiGc5b2Velq562RrnnRjQAJAQAyQUzmvALko4CQARAKAjkQnOQOlBZ5uWdmQhkGcmBjuubtkibRg_n4HJAriTFli5fuRLkW552ehlIxOwSkBUAXgN06zgiefs75ZobpjmXp2OaZnq5MeaG5pZpeG4CnWtwjtGL2pdgMA9pCmdha-5lOWvFQ5JWdsGl4PTpB52R2mFMB5Qz3pRAZAdGWcGjZZuTjm55Puehl3BheXQB1G3qUkJnmIIWLkfBdeV7nQ5Y2cPkiOz3u8l2YyOfnjqWzxoTE95KuRDkbpA-dHlD5A0MrYCe8IIwkuOAtGw5jJPeabnZ5RWYfnZhkGVzY_ZdRj5HGJzxjUgd5ysgCiNSdGbyFz5B-d7mP56GUrbqGgDg6DuQ7AHD6GkumVMCQF0BbTFi5xtgAU55D-XhlP5sYStYGertncLFgf-R7kqZ8-SVll4igXb40AdoTUj65rEK8Hp5JBVHlAF6BSAXmB-RjtwnuUlHPBmCOeFtH2-YHlKgGp1aYplMF9BQvmg5r1tZHzwMQF8nx4bwn4RoZYhcIUpZr1oH53RAoKwBvAR7nNRZg40J5BaoHzi9lKFChSJmvW3NgRjTBGljeDdQy7voVbWKBffkMFGmfYCvW6HnBbuAD0Ue4vwLhQjms-chWCG2FrWSIVMxsRriHCULIPZGX2W4bAXsA1DsxaBAeyqPGxGS6fYkrpjiWunOJ38ZsD-Fe6Tz4SewcC_AnpASWSii-56QllSJP0XYUBFVsfYBMugNqKB5G56JBKigzgCojngTCHMg7-DoPgQJACkTjFVFmSXslfxhMeUUIxvRXjYvw40EEX5G56LqANApLgOAFAXgN66jxIxVomkkmRWzG9F0seMXPYzgDeBcI6GDUin5nij0VMut-aUWrF1OZLG9FhLnLj8IhoI97xA-KJUzHFG9isUZFFxX_G9FY7vkZ3YuoLqDsAUxbqACITCOthtFpMJSCa-rjs8Xg5qkYMVrFlxUy7MF56AABHDQK1bjQAIWjBdg3eUsUIlrxUMXrFcWYDZA4j6Xwhae8LlKwk-m8ZXmNxBMVUV4xfeUzH-x-JfCWDhF0fqDOAuoDeAGgKiGSWOSCPkV44lDMQyVnFbxTzkfFcWdNbng-oIr7rYE7rwgzFEcfjYwQxxUeE3xTJXCXilp4ell3Y54OeC7FooPsVDOe3qKzyZNJUzF0lpxUnHql7xanF0lhLnNgvwuoM4ANF-pfsXKW_wiDRG5ppUvF5FcWQQUIJZRRqW2lcWWO6K-UpbsWTm56EwjngeXp8lyZKpdCXkJgZTaWyJdJeYHOADQIOphl-oDeDolmlvCBwAmziqWZ5mLrCUpl2Yb6UA8ZKZmXrY9gBX55lPJGyh9OouQlGVltecKVWlyZWKXBliyc9iigsbtiWtlVRbsklFnZecXdlqZaFBDe2pTMWFkAiHdgNAQPu25PZXlogVDlU5StkDF1pROUVlw5dNaTFd2OiVrYDQNO41IIOAUAUuOJQCn9F0yWWU7leGb6Wgp6hoWSTF54CeXwZLDqA7DACwVeWWlhcV2WD5u5VOVNuzgOtjlG40LmUvwMZTv6ogJrlWm3JSccOX-lBMduWAVD5cOVfF85ZBJMIuoJwjRlCFjeZrojttADHFgPHiVBlk5aSmF5xpDVDZI0QH8ouZMepC7HF9KR2X_l45WhXgRvpaym7ctuYTaOxHdkRCoWXbFSUsVm5beWoVaBVxVVFYqVK5SO4YO5bX2OpPoB_pVeYhWhQ8qTeWW2d5ZxXaVMlWC7NJ6tovY4OIoKvkqxOJQVHkV5ZehXJQipEOFeWM7qQw2hzXj_ZSOxYUsW2V17qOXsVopbpVixjhTiF0W40BaDOA82EtiDqYxc159AOWT0W2V4ldpWSV9hXpW2V40eMWCIh5c14J4NBV5l5FKVYkXqoDibJ6pFn0X9HMlAMfuniePicHD7o-RVz5npi5ljnYWpVRRXZhGXJYDA-TXu8o4ZVgNoGO5d6T1XG5n_m1V_uzVdZXgRNVVM7iFMqbbmSOwYfZIYA8QPfYTV1rmvGjV95eNVVFyBsD72SmvqDaO5LwMPHsOS1ZtXxVX1mtV-V1VstXTWF9oFDyxEoa55XQi0FqjHVUzrvmqR51VJWW2y1crZuAV0O4B-AKyNuF_RW_k5DVQBboaRzWL1QNAjVehmVUbBy1YS7OAcjtXEYA6MRa4I-fQNPkJRCNTDWAFFRfZYTVYASzGiB3MXtWPeFwGuVeZhNadWXVsNS1V4ZhNdNbagmQJnETYaAJrauAMELSnY1VRaQGrVdNWNVfVvNT9W0AC9vzFUilEL5HeS3MRLWKRPNeIl_lIAB9VJVZ1bzUUe76FVBOZIlVCnCgElOZXy1vMMhWvmytfjX8AhNYAlRsPUQRE_KGQPQ7elAhU1W81iZb7Em11nhNW052PpsDSYDFoWVoWzQPcVtcqlWaWO13zl5WNVBNQLXrVQtd8542uoA5lvkqNQcVQWvxI-jcGZOJTVqVZtVUWDRbFUrWR1F1RNbu101t1UE25OD1nUx2QP4B5ZVNdnVvVzga7Ul-7tT9XIWOymDhygNSERA2m7DjACSASNdLULVcoC9X5WuNagUq1l1VUWN5O2S8I1O1gX4G2AgQXLU11NiWHVZ5TVfnWfVqtTYl42j6EnAwABiXl6cwpOT1FywbAKA7d1L1bPm51DdcAETVU1l_a71zxhEUReVIq8iA1F9XXUu169WPWF1E9SfkwAwoL9QHF_9QLQX1itdfXo-t9YS66gjvsUHCAlSDUjQN7aEvzCg9tQhVZ1NiUbVr1eNW7UT1IWS8BOxE0b8TVQz3vXF7VpEZ_631JZemHgN8NRPUF5O2SslwAjEfkaMNMCRQ10NI9XDWQhE1XZWxJCOCkAVJ7liwgFAgjS9Uo2_Ndg2N1VRYFU1QM4BVAtOttUT5oAdgAo2VB7DcDw01hdV_Wm1StdI3XVEoK-lKQwNR3UGN3aaJXqN_-fIB2J87OwB2Jgyi2bzwQwrWarqZFOlboijZmKhR4BPlSKtmt1DijeV-GUQUl-gGS-lvpdoZ-mGeTkF8QYAQdUvGAZ-Fo6bh1Ztdo3WebVR1Wg-zQN1WVwSIX1VzM2Tag0g5r5sNXfgiTavXfefXmd4bByPuk3JAYPhD4vCGNYFCw-9TSKGNNvUcHX2WyPgk3-NSTTZ4_elTZCGY-6hjj7_ZGtm42E--ZWOAk-99pT4lNPTWU01e_TRBmae2nrp76eg_t-lTepnpp7dNCZr03FR5kWNmK-aoSr64g-wX0Ba-4zWnleZCvpehzNezQs0zJQ6dZ6jpe8ROmCV06Y56pJBTScGjpuzedC9N9eWzFBF6KWuihFlQOEW2ZkRdEWWMcRa2UJFCgOsB2NSKseDuNzJBmJSCWsEJQ4QthlcZqCtxtbDewFYv7DViWcCHA_OqSE0owy5AGDVoQ-gJGCuASwB4Bio0aB4DT04urpRIqhknio6K0RFioMtZEEYAoIH6hEAtKNQI-D8y3yKOQjQzjWnrHwp8OiYKUx1FGTeo_SO5jNGG8EaCuZqIOeAlKV8kcBv8taMgS7sMAOGjRohrQZy9cerOFiQAJ8BeB0e_ePPChKSzt4rPUCQNBBdF68A9SmkJSoQQckaOKqoFkM0Ba1asOdLNw2t2rfa2_UjrVfDOtMSm4pDsdTB62DkXre9Q-taQH61dqSSGujdA5rU_zgsxTtgkmc4bU8i2tOrSUoxtrgHG3vUrigkDPstEK-xQAyba-TetcSvPQjkgbbpCPAY1o20CsQrGDzUwZbVG10YN1HdTOKNbREoJA23LOB7c7FFKDNtqbR9Rtt_reWY4oq4kO26th2OFi40JpATSlEPSjlgsktgDCCCgHkIWSFkNRCvhIqZOBTgTUEMhmatmG7SUpPUGZg9T6tgSokDigDIBjDOSD7U62JSciF-0atD1K0jtIf7bG1kE5yEB2SmAUtETft68PGQeQ0HevBPUcSm-1wdGrdNDqtP7f8gagzBpSSMtjgvoh6U-SuUqESxEjibqGrgKR3_g5HSRLI0ZNNh0IdPkEx1_ofPOHjtqbqGTjkqUSvAAkYfLSYisddbPh06IGZqzTXyzxvITFgL7d1ZZthKiYhZmSbAuBPUPSvG0VVvPsDEkEuxNMhcAJErzRQAT1Dp3oAJEg9Qf8dHTib6dKnWkJESJne9RmdNKmkiUAlnQB36KD1KWao0TjQGYuN8rTACKmToASZ_QzJBGSEdEVErRqtTRj-1LAcSt8jhdJrUa3KoenPMDfIebXF2WtRPNa2rgcStdT_tIcOO2utL1Au3xK0XTuKBtKXYl0Fts_iW04oWXZW3Vt-XUmaJt8QIV2ttvrVK2ld_KCG2FtDbcZzna3qHEq1dY7WEoTtbrVAD1tsQMZzNdabcV2-mnbcLCzKU3H23mcmXb63ZdEHbl1Dd9XVADTtKQLO23WokC9QttU3a107if-HooeQA9AEjtYNXTCC-twnakr6kO6JfjFgrZr4oydT1nJ1ndn7RF3MdVgpgAhKLnUh3fdXiqB2_dDHDl0RAMwMh3odOKKx2IdX3fB2EEPir63etF3VGAsk-pNR0ZmKnXIhqd2RXz6zqC6Eqg9KfoXmbLywyN91YdQPe23BU9Iv-CDkKQPu2AdQPR5I9KyHdGR_YY0HjTbK39q5rM9Osqx2DYebfB0PEfCpT3wdb3R7Jyd6mmvhDEE7NGJ_dOXdNgxKbpiDT495dOZ10mzndjrWdFHXSamdQxD0pxqWvap3vUnpjY3S9BKnL2g9_3bEprwyvRqbum3PFp2kYGvfACgiidIb2OdOwuThYoq7fYguYO7XT089SPRm0s9ciKj0CAV3b60B9nPSaT09RmoPT2pN3aH06yPShH1R9Gbf3TCmdWA63rQbqNNhGu8_I72GkOALi1ES31Gxi6qGrD5AWgfUIBqZ6YSOH3Z9kfXEpZ9ifRX0xs-fWvCF9M_IxJl9YAB30Jq1fbgYnmnaHkqe9uUMP03tnqvsI6mpcE0o-dcpu5hwAfnfNTKtXaIKieNYCE-1pAMXeT2pdG_Uqhv8yXR135t7Lciy6sVXYO2Rtm7SO05d91MN0FdB3Yu3pt7JF2o8tubaf2pdobfRxX9LKjf0Oth7XV21tUADUxJtz_UV2-t1PTN05tQbWNwXik3EW29dOEjv17QQA4N0utIA2N2Ntk3Uu1QDK7dm34qXbfN1IDHkDNztG1_Xa239q3VW0YD8bVO1isO3TVh7duA6_2ZtUresDrtAA1u009XPXu0DW8pnYDqmdgJqZZgTCse3mQuCIkDntl7QJ2VI0_RwPOET3Qr1XwGEtwMwAEvdD3rACRH417NpGFb38A64M97-SHvWkL6AkMPEA0tZgzpjgdtAyABCsHrngBs9O6eQT-SJBNb05dQrEqZbS_ionQRAxvt4OeIHg2t1eDbefr3E4befL1g9IQ-gCODzg7MCuD5nNY3LQ9sE8gGDfsVMBGDIDuZymDdLTQCGCrMOobUttLekKE4tg4Z2xDeIPEO4IfQG4NLA5Q_wChDWpr4PwYess7qRDwQ3YNNDPg871iEHQw0P2D6AIEMgdpeAMMODVQ0D0uDtQ0kNkStjbP2PAPlPP2h6PnSSaoAFKkF3r9oXZPALDtypRLHUq0A33yDPvTRA7DRkkcASiN9JXCrDFKluInDkgN4xHA03acNBSFrYf3Gt5XXcMPD20BqDtYsPYYb9aPSr8NA9ZSM8O4ociECMI9qHcj3vUcPRCMatUIyn0fURpCKAid-CoR3MtG6KCOtsSKu8AZmqQmhA2dlHaXiY9BSq72kS1kPcPZa74FiNVqjffopwjP7Z8PYsoI2V1dcE3FqxWtVXTSMWA13aO3rdmA5O2gDjXU20QDLXRm1MjSdLd3v0SSlqTuqviiCOUjQbFwQZod-CUo0dEo2MTNm8oaTjSdv2qcBjmrrR9H7K3I18Os9QPb5g_DrHZ_i6j2Okz0I94NBqNJEn3XIpmjkIyH1-Kj1MQSaDw3Sb2GjlFsaOKjYxBcN_QVwwjgUqYymjazqH7S5QUjSRApygjH_XAMhtP_czZcjgY1ci8j9_Xl1YDRbawNPD6Y9TCt90o8kqoj-1PKOYjBY-BxHAGZsUqV9uaGYAmjuXEcD5cOo5gBPUwY5p1PUTfLB2xj_9J91s9FoyKAMj68NaNtjAPfD3Ad_iqkiNjZw9GPiqwaHaPwj7o14rz03o662-jL7f6OOjx6B2MlUlANcNyINSPlxRj4yg6i9jZKPGPpjiY8AALDPbT13HsDY5WM8jK3QN38j9A1t2MDu3VKx5jx3eeMgoRY4koljcoyUoKjlDMoN0YeShmbbjVY5wCV0rYxoN6j6NJ2P8A9aND0zjQUq6OYdQ8paNA9o4whO2j-imz0OjI0OhNpMRwKeNT0C44RNU9y4y4pejUKLJ3Y9rncN1Gj0EyCi7jKKPuNhjh4_WgnjUameMmjl4_Up_jhw-YAcToY6SZyInw79gytXnXK2BkzIdxP6KGw6yZbDnA0WT7DFvQoPrA_SOJNcTkk_oq3DOk9fK_jLw2f2E97w2yOmt6k8G3mTaXZkx_9hYy-PoDb48N0Q9yZtIiJADrGKPwAjaABMCAMo_yTATh2GppkToPbWOlK9Y-vRajgdvBPtj-o_j2bjollL2mj_E5ROg9T1O5M49Po9lN-jyU9Up6TB4_ooRj8oXxP6KMY1ljd4iY6yPjc4LCmOUUjk__jOTfIw_2utWUx4rwAd4NgP3jifHgPijTyP5OBTpYx30BK4ExFPqjQxFHjVpcU4hMGjXY7J3VKzo_OMZTkHTMAUqMShuNOJPY0GMJTIqPpNrDh48eNw9FU1LoldsAzeP3Dd4-5yJ8A081NZjG3ZlPnIHk3eDbdX4-5p9Tvk7dOZ9xY7KP9a5Y6WxjTqo3WOYAi02Aj1oM0yAAcTMSqhPbTTo2JRpTdGFj2rT60zlPMTeU5L0FTu03uNFTHkKsqV0ZU10pnjlUyd3lISKoVNKTHkJ51LD3nQpMQm68CpPLqak0-IaTVClpPHDxk48N3Ta3a1MgDdM4GpQAvQIzJNEPk-SNmTB_W6jH9HMxuoI9EU8xxfU93WFj3tKo8n2RTIMxDKnwkJvMhmtX_eV3T0HI-l2NTUNJrNSdY4wk6ZMtUND3qonbd22IBA7RFgH0v7TaNc0BVHJ2RoCROFgaz68InRW9SMwRPHs-Xep0GjHvQ525QUQ0xP-zsw7RrrACw0J3IjhOO6qMtGIwYinDelE9SezwPcSNpzDs5bNzdVZhb2xz7HZGCcd1qNx0eTJGP6bUz8kwmTsmdBpsP3EStKuKaTok6IjszNYLpNYznEzYhGTbcyZP9TPcwa3mTbwwl1WTJ_bZPf9-sw5Mns4WJmPcz2Y4KNgDTXaKNHdfc_-NSjgE79Mka_05NPKjVUEDOqz1k9FNiUaNhDNQzLE1uPbz5E2kJ3ikSMyZQYvs-EgBINiG-0B8FgHpM2IJU4HYnjV8xEg2IapGdP4qNUwgP1TclIbMqzzki1NzzI3d1P0sP4yvMZja8wFNATf0yBOhTgMyrMTTh882PTTJs_hOnzrrd2MpTTY_2Dfzj8wCQQzD89YgAkz80MRvzAJEePVpX82hDXzv846hVT1s5dMGWvbQ-OkYM83YM8zgo69PMD340vMfTos_AvfT680FPILIUwDM7zEE2qNQTF87BMloOQDgvxTSE071PUMM4QuzjFCzfMiQ5CyQuULt89Qvr0tC7fN4zKi4wsWIP8wCR_zvptoNkzHc5XAsL1ZvyYrqVc0GRikHJgIAgkW1HXOb9DcyzOCabM7e39zYC3v0Dz4s9aiSzzM2PO6z9k1CxTzy3Rm00DwA4KOwLn0zAMALOs1ZPn9ts8kvVdXM3wuQLCbYNbgDnrZANwL1U7ku1T-Swt3HsfXcUvpLUC7mMiLbA212wDgC_pyID3XddPkDTS6kuvj_CyN2CL-3Pt2VLIs4oP76zc630scw01vM4oaC5BNRTRC9NgQzSvcN0q9jTDnMYTRi_ov7Ahi0wu2LJiwFIJc7s2kNKda8LkM2LpCyYt-9NSm30BIHfX9QKL78OaqWqdtEGql9lxuX1d9-gEeKasI_e-AVzSkAv20zQphjCKttc6pP1zBiP0ioDkSxurRLWaLEtKKnXRf19cKA-oNpLdA4_3ut7S8u3v97XfEt5LBnGG2FLlA-W3RtLkyMtlLdqBUsptVS2_2dLOS6St1LBnA0uJ83qKgPDLpS3W1tLky8vMsr_8zopzdV02-zkDq4KgO4rrk5t1jLc7RMtMrIs9AN1KXA1QMgTO6IH2mkRNJTLimwpoe3MKJ7VIMyDGCjD3Xtrc4-JSztg2oMarANAxPvdzdDoOJN-g0mz8AziFwBICisvkOrAAsyUP0tAw_4PxAHq8Z04mpnZ0OPTxvoqYlu4NGjipDrq9_zBwzgJCv_RLvdYNBDxQ-mt4TNvfqtQrYa3Z0RrkHVGs4mgaoHFgyswzE6grCEHWYEAx-N0QZYOgqHqBAgnlqhsos1LZaRgUHN6jRoUHD8tqA5fezCl4s3ECu19kVFByz4tlkarTKg68HCcg06q7OrgPa5Ov99pRE9SrQI63X2Vq468BiTrVotOsgAa66qsRocg0VK2W0y3AN6EGK2bNJLnLViqlQ-wPiDjQMoLEBLO569GiXrdk8HAUrt6yYh6Ef_G-v8oH69_1dd43ddONTelAY0xAkANkBjd9a5WjScOlABszQQGwku9LoG5Kv9tlK7SOVIza__DQb7a40GRgehF2tY6FoKFp6E9aIoNVr0oDWvWZHgHWslEiqLbWeKaWNLRBLyG_BvJjZVAbNYb1MPY2fJHU38jOAyxrqBPYeReeCsr66O-ucbdk8AvEsvG9hvmATG4Jv_IU3LYrKbkhX-hTcU66IpCwQ63MozqOm6uumqHJBQzXjjwFytPI_G3CCabOAM4D6gQOC_B5GDQNVDjQTCOpuDgzG_AB2bDm05v2ALm25tGbM66aqGbe67puHrpmyTPUbHi6kxngOTFZC6g7dGjZEbbGwYjSb_qFeucjCmwkT3rHTvjbPrcQDBIaoCRH-to2VM2Cuh650mfDs61xGZQst_KBvz6mgjOvB3gTlCfI08d2qSJqy89D-v4StOt8yRghuh1vs6PGi5jXjJ61WL16_hKfJbE9BC5p3UbAJDoly1-kfLR86jJ1sg0assGJQ6-8qvob6GumNuz9srbFvEmpAwYrFgMaF5ujqji1ioabnihUpVQllJdsqbAQUW0ebAm7ZuvbfS_EBBbem7OtmqxAtkiIgpAjQI4QKQEwKXyR23JOpMkALlKzA1sjMiTIp8FKBNmYCEYwgMmFP3ia4ZWJvwUwnk21t362OkDuNwqsmatizTRN3NBSVQtkgzA9gFmAEICikFIQAzdO_QzQt5j5BoInAHWDfCZfBjsNYblhMC7qt5tEjRIXEsiiEEydtNDo7zWxLsfUZ4F1JoyBQFpSN44oCjuHbzhKzuRg7O-LpC73O9Ltb8_Oxy6C7XOyLv9omu_0jqAWs3pDc7zO9bum7qC-T1SgJ5ix2dEsu6DMDzUoBBYu74uzUjqAOi1TsOZNO9NCFkqrE7thgGctztuaBALzDbKaGiD36MUe0YJ_aUwOtBR7Me50iEA8e08yJ7teFzxygreGnvmqZIpZQJ7_hEYIQ9XwoXtVxPFAtrRo1O7MAZ69NIHuzAdOwQCrKUY_Xu07NAO3vAwBSM3td7be5LuxIdfaiIlmZZnygzQne63vt7XwvzKhT-u3jvt7MNONDxSdwip6napmszqT6WWCSt97GQDTvT7ku-tCV4pbAvvYQS-2gCI49RfqDubPkGfsCQF-600CA1-0wj_Ihc-2rJggWr8wwSVs-dOHKGqNK01m0OypTsUmIHbTq0vFE7RrwLZNNjuKPoFv2PDpjPIQVk9tDxSa002C2S6Q_BE_i80a8HAdygDHTWA14ErPFACJ6B2vDlzlhoCbXkFxmoD2GFsAS3gQrdNQDXkiVDij8AQ_GkWEAtwPcCPAFQB4DHC3lqeBsg7wAMBeg3zE0RWg88OgQsM0WyMYYwV5FzAnG0grxABUOYivxIUSgibBeUG5GcDXGpYncYXcOEvsA_C0Yi6CxCppChRAgOEiQfWigQhKKOiOKPFBdgcouwC_cS-O6I4oAUEFCgi4uh2qeHg7b4IIGhgoGLhoYopYJGCdnspFt44aItkuiVBGaDbAgQokfsighDihxH1UosKzAyRxKDbAfgsKANoqmPYIwiNFuGgVSVUjVIpi7AA1Jl4YALUeaGOKF6IZAhgpqLGkiYtCLkAnR2UcFHp8b6IQA_ouwAKiGLacYyC5xmHQPyxYgwegQhh6nD42QoF0XK7roP8azAxpIOTEMppnyb1iOkP8U3AMwHDK7Ayx_MdrHZgnkfcHozJeS6QEyOlbRZBiskp9iA8CsddFxDHccWgaAMeA3H2pv0hxGDQO1hA4tRd4ZnHvB-Ic10hpKGnuHWAIkAuQTwHaRPGzFGYAuG4ZvTvlkYwJNCrHlAIsc6YO6Ccc7CFZOei7H-x7NC5A_QFcDfHvx7UVLA4oUIiWAbiPrm6ibvQoiMgM4kSRXAS5olj6AICaQhJqESnMB88N9NCdvGsJ0LCGQK0KRRxAXeTidjAVxzrg2mgal3ne6CnO4s7opJ38cNAopxsc0UVB-cZUm8JsKCImM2JMc3G0x4S0PGTxi8YwnAIlfB0EFx4icZwCFOMfam7i3qaw0Ds0F3riOEudTd9Dvar0qUPkAeIF9Xp40zazlEv6dF93p9QAfSPCous9qKEpls8bXElio2nOAJGazQSaDGapAcZkmhbsL1HzOWDc1nginI4I_TjtYPfcX32WN_PoAlnYZwII6yPRwIB3giAE9QWgVre1gDg4NNpxpmATK-04s5_LWBWtFs4GzOzvvWWw9KPZ9TDZmD7F4mVVHpoGww8x6DnSjnvZ8RYPsog2iCJAC54WNrw651cjbLeTmByzncY4sz7n5vZDT7nG7BuyVmqNAG3nTuc3AMHiV69-sDTnp6Gd4sd-E-e991AHarE7pRPFsoskBgvNkMfk2-fF9vBEBdVnn59vTfn40JYDuGbm9lIibYm_5uwXZOxmOgXL5xhQ0AlZ40zgXwO5iu1aX68KOyDpGCaaN4SZ4yA2mKZ9VRpndpheclsOZgkA5nAs3mdNEDbHJTtYRKPAIHif_KAIft7WEWeYXNIvAIhn759WcLiLohkD1njZ4Odtn-jB2c4sXZ0kwLnfZ8wwDnnRHCiBsI57CzjnC7JOcadYNDOeLM855pdLnlHG3k2mW5zyObn6_AGe7nznEecXjh5wEx2Xp5-51koNF_72RzmCpqfO2lJtvQ6nAgIKw4m9B4ac7k9xkpB2mZpwKcWnXxu0Y_GNpxSb2n7Ro6c1r0K9fCwQ_nX7r4Kbp2lvRnjErGeTzvW-YCJnyZ-FhUXGZ6RjW0T_ZUulssl__QZm7Z6Yw9nO59OcU8TzJhM_toU6vMZtil8WBbnZI7CwHt5l6IjGXcnDpcFmD7HZfHn8nOuz6MHEx1dXIWl5QzOX69Gedm9VyDRe0aNS5Psvi957_3ZbYZhsekXFphRcgopV_abJFZKPSv6ojK6-TL0O0xouoAbFy1QcXL4lxd2z1MF6pDENV5DR1XMlw1cBMTV3pctXMjG1cIdPZ19dJMP1w-x9XUN3IhzXYxAtfaXgczZctsE18es4sTlzNcdzcN4uddmw3Kwww8K1-PtrXaOGwtdLOV3wZXrlmwptTTOVtNAHiLY5ZT03u61Mq6b6hiZv7KE20VdkXUZqRinXbl5WovU0C4vOVLt10kQcTnWPRyPX3_M9coSr1xXJmLHcytjFgkAvlzH8SaAErg3SRDWP1XgVP9fWXzV4tf6MIN3YBg3vrd1eYAvV7De6QMjFywI3LbKNfI3ZbKje5c-eKGt69UNzr0md-l-jcBM0108yzXPZ03xyXw1zIyDks4KuZ43U18tcuXk1-wDrXpN2yu8GJfZTdnbAyzhLEXEZtzfHXVyHzfnXIKC9QKrLAxAOi3O44rcNAldGWfAAB4ogLy3d1zfTtYSlegDtYQtyZxK3TKDLeMSqt29e1gGt2be7EkNxfy63OLADeKKB5_7dY3PZ6hOR3lDMbfY3z411eLMA9y2waXYHHbdJMzt7WDQ3Tt45czLUd3vdj32WqtfUw8d1FuyTlcydsEAKV_qBJ3120svXyqF6ky-nL4kJfF9QZ5GCFkL91WeOEkZ2u3k3yd5-u4XoCxndmmWd9bS531VKWyVXTKyXdZUa8MWf631AJXef3jTGrfr0H16wya38Nz1cBMs9wueYPXjEvcLsRnV7fOcW93JwDXxbJ6u-ca9_bdI3Btwuwb3dSuveLMjlwEwB3izFQ9lsND6Gp-3-94ff10SaPzcq6m1zffDzHK3JuIgQD_tckXxV6mfc3sZmdcQPQxJdcOQ11yONJUcD_xdWQSDw_dWQMAqwzi37Fy_xV3L12jaoPYxOg__0-D8eiEPM94uPtXeD33cPstj2WzEPYa2BxkPC7BQ--cnD-FzcP4bA7f0PKN7Cwb3qN6jfsPgbL48Q3Id4bfT3PD9HcCP1VEI8REu-3ecAPnCz1OgLNNyDl03L4gzcOUeT8zfGqwW3MoED73MA_Ewsj5RfyP6Z4o_HokDwKvfbIoyLcaP-gPA_PnAl8Y_IPf0Po__04tw6xS3lwB3d8Gct6QQGPitzVzwCXdxQNJEGetY9ko2tzg_2PoN4szzPtV9g8ePVt14zFs_j0kyBPgN3JyMPRkq7ckP5D57fuPDDw5eBsrDziwRPZbEHdcPMT6Hc2hEd8w9xPB9x89KcST6wtXnid2k_AbEq9NyYb8ZyYhc3R12A81P1F5mfKPDAzEAztQi_O3F3rTzQDtPwlzo8VnCDyJe7E4t-XcqLld9XeV03F9i-K3jd83dnbbd0M_GPTNzlbmPsz3NdrP81xs9JMdz-GxT3bz0ky4Pqz048LsLj5_xyIg1xYC7PsT6Q_nP7t5c8znu98K9Sv8TzK_2X3z3vjaGsEhQwLDx2ypRngOM54o33YqKcMenGLx08-nKaihLdPVkN8inDq4sa_hn0c-mM_3sjIqN1721-k9Zb2r9a_SPmd-C9WvZKOA-2vm7B6_HoKj7UzC30D76-wPbT1o-IPgl7o_UAtLyaOWPN51lTcvcb1g8W3wb__ScvNYKRNOTC9-m9Pj310y-Jv4bG49iv-bxy-iv94tm_kPVtym8tsvjxm9a3w17W9-vdDwc8Nvwk96_b35b-y_FvHz7W8svLbzW85vNj_W8Dvrb129fPbb9285vGqDSNTvlY5WYJj3eKcMiP_z6hv4XqY1hugjFT4dfkXyc5WNevXbzu9JEgt4KtBvHbyG8ovYb8FARver8Je9Po77WD9Pkt0Y8D8nF2Y9g8Mb0rQzjX16ROLPp76m_LPJt1W9WPCby2-CvebyB-b3Wzzbe_vLbAtfgf1MPs_OEcH0q9Ifhb2W_jvw56W_Jw0H0Dd3v_D2WyAfE714y9vw730O8W2H99dDv4bGHcpArz7h8jvpEzO8nnBH3UrTvBH3O9XjC74qNLvDrwC8ZPYG-u_pj2T0_ByK1L-Na_bbNwZtdqoI9qvx9y71ZMLihT40ENQlKMJ9eopr5WObvVT-h853kL2Vfafeg_p9XIBd5-MIvSqzdfKvw79NiovpZ1e8YXmL7e8zj4t6S8t3bLBS_4vinyDnH8zr5QxfvJH72dgffn9TDEf1b5XTMfhHxy__vH74F_iL8AAe88vAXx9z8vYX9E-43hn2WwIfyX1K9IfjH07czLLbzl9ZffnwV94fd78V_E35H7RqLvHrzJM1gqrycrEmFM5q9ZXEMha_vQhr4xKtfb9x_eRvH4FZvcSb93J_iP3G_lcEqmn6A9yPFpgo_83FgKWztTmmzIj0cHqhM-mXiQLxeaPmL-i92f-r1G-gLnVymbacP78y8dzC51E8EPTz0x84sQax-N0mpa3jq3aT00l-BsqH1h8YfBI7r1offL4ZODXp348-pfI102-j3fD9K8XfQP2O9yvx6Mk-_PUm3_eWTQ35V0KbFvWC_bvE3zaZTf0L-vRzfnil1NnbMD6Xf3XEt8zZK3BODaZrfobxt-2fOoPZ--S4z_j8DPT7yY-y3r7wj-FFGDyt0HfGaD2ccTW5w88wf5388_h3fP58_3fxazd8xrl3w9_6KC5wNfbPzj4L__0GX97euPrLG7cffJb29-nPOH6D_g_Qv7HclAPz16apPPHyu-AvyA-FhCfsqCJ8efEymFulEEn3OszqP6GN_uv69Hu_1PuxJj-dTTiCZ_jLuP2Lckv9fmS9NPrnwM-BDJP3xfk_XTz19Ev49_j_Of5L3T9PXVL6Y_yht730_-_LooH_obrd5M9J_KEtM-7Ejey_MxfAH3Jcc_izFz-wsbL-Gwb3c32uf9Xj385xCv8vwD8hPVz529a_YPyV8Q_V6Iq8ao6sJi2jH3l7yZBXBh8adhXpp9HCvGfJB8aWn3xqnBxXdpywfAmiV7V_AH9XwQA1zqKs1933iB9e_AXT90a89fXX618Rn_X1GdbXMZ469xno3668gPzv8eiu_tF-vT-vaj-CTIvBANZ9Vnm35T_bf1Z0MSxv_VATe6z2TeOLD0WT81ueE9w4ewrEDYTfxHeHfzgB2v07-5X2JmBvzJuF_1yu6T2_WN_wTOB1y0-nr10-dTx9ez_0aeWf0K6vv3_G631_-3_wveqfz9-tP0feif2feyf0DstL2PQczyABubyqgPZzABVCwgB91znutYB5-KXw_gZbGo-tH01-IP0kBXfwQBx931-v-z-eRvzJWaGy4W3KwJU5vxo-y01E-1vxZutv3029vx0WTv2R-LvwIB03wBarDGM-cLyYG4yzIBRfwsuZPyoBFPxoBRTlfm6fybuLnw8ggz3awDQBuI9wCmeKnwt-_bF2-koyzeENzzeR334BW5yr-7fy8YPAPuW0QNleCQMQBrlx7-HlxrA6wDq-5gCZMHxCvgoZC5MAkC1eOEntel_14-Tr2wBoL1wB432qek31qepgIaezTyZWW7AZeY5zCBPnz-ugbBHuNzzV-ty2MWIkF4eUgKSBuvzjucgIjQhv2KBxvwKWIL0qQSPx5uD_xMB6PzGIL_0DeN12Je-P3p-L7xT-3d3eu9Lw4BSbzVUSTHWWC5w6BPt1AB-y3ABEgOkBSAMGBkP1QBCgLGBSgJA2KgKCB2T3jQuTzz-000ZuVv3eWNvxKec6xXai9Fv-lT0qBYxEf-WnDouo3WPe5nzYeitwT-0t1z-jElGetgKuQ4txz-wAmrSrALpe7Zx2BnAMzMqzzaBC7COB7b1e-3QIOW4QE6BwPwuBMgOQBF4xSeaANEeKdyD-ZA2BelakMBMwKSIIIKf-8v1heBQDemZn3UefAPruuLw5QwzxL6NdzGe4QPrucfwZBq306owoOY4aIM2BdGmxuTQMZeIALLYBwNhYBIOr-Bl1OBvAPiBOvwGBlINkB9dA-kABy8uFNlzWRYn0OjhjH-DoHCuk_3NOnxitOWx12QC_1vI1B2X-f-AyBZFGTWEphFMBQMe699z3-VZ1eBHXyP-5_3fuJ_z6-7xAG-igLh-161_OkwMKuFQPv--AOqBULyUexAPqBywIwelALRejgKp-MzzYBjQKxBNjxaB_9AtBGv2F-waxLWYvySYV3xDWlYLT-EQKgBi9zl-BoIpBlwMNBSrxBQ1wPkB0P3QBFN0wBu10TBqlBkeQINTBqPxqB8wMPeDXXKWSwL5BVj1zBNn0j-QYJQezgO-EitzWBzANNs6IL4E2wJCBlDEO-XjArBFzy8Y9YJrBNsXF-Ua2V-jYMhoLLzLYP3zO-f33OB-oM7BgwPPOwwMIG_YLpB6Typu4nSwWtNwP-nd3eBBTzeBjQXE-egOgG_wJwBY4JTBswLTBen3I4YIJbuNgICYVnwve1AILB6AhcB9AMJ-W4MZ-GwNruRH2W-TKCAEUAmLAu4LJQhf2VBzQNVBVH0gBy5yMssv2fB9EIF-LEJfB5YJTWt4P_o54NF-l4LLY9YJvBp4I4h7YK7BTD2SBxoKh-n_QHB_914-XKzTu1tBZB2d3ghk4PTBYxCzOXIPhe1gKReOLHQhEf3LOW3xve64KC-ZdwrusoNL6hL2p-4oL-gDdwD-7gOlByt3Mh-f1YY1EJLBWtzLBlDHvBrL1C-iv3DYJ4KLedYLaG0a34h4bEEhJz2Eh5INfBYkO7BEkKpGq1w1QZoMkAqpgCudJhXOI_2tBu5G9gdoLJaU_3eMUVydBsVw2O8VyX-ToKSuLjVlMQgEEGq_R0w2_zWWPXxDBfBk6-4YO6-q4L-g39zP-v9xkhsPwQGw3xvWZQKmByYKMBKkNtMiENBBmYLIB7_0_-jTEwhv_0oh712LBB4OABOIJxY3Qzu-fY0qGEwGqGiQz6BiQLfBMUKNBKAL7B0kJ_BvHywB4WCUhELwQhhALGhCwNnBDK3nBb_xzB9gLzBK4MMhxfVoBeP3ru-EPhBTP3_-C0Ni--jF5emoyGGYQxWhG0KcGkwwSG0wx2hUUPEhVwM_By0FGBGALkhZ2yyeYCBbGQEL4M-T3a-WMKKe-6zt-R6yjB5QNghQ0InBI0OuhHIJnB4IKaeE0Keh5730h8NCj-64IfeeEMYBDPx-hhELFBd4JIhaKGMezkIse-4IBhTzCPBMjFWhATHGGm0MhhNQ3tSMMI7BaNzlhvYJGBtIMG-PUJN-jIPM4I4OmBykJ0-V0NqBML2u-3INM-tMMXBz0OXBBkJ_-RkIKKn0JshgoPQA7nxQkooMRBTnzsh5LxlBcINxhNLwVBZxEFhcAHZ-dENFhIMK1MYMLiGUsO2h7zzlhcMPlhsUNOmDywsMUghagmzjYwmgGoA-LSNO4EAMQW02JQQIGJAVQG8Ap8V_A5IGeSaQPsGoDkPSwcFm0FcNpQd1ExeaRXRK-QD_APlB9AhcInI5IGBCeYDbCNcDPIrjHKAIIDzhyChUwNLARwaRVxak_Bk81cL9kCIGiU45iCoPhnNAaRQAAetEk5tDgBCHKRQ7qD85iUPPCy8JdoV4ZlQ64DARG4OARW4NqJaCAvDIjivDV4auAQ-KBQ_yKMxiUD8414UXJzTmfDkoCvDd4QUVSZA6DZ_p9F54THsUEO_DH4Y8c1jjacF4THtX4bn5AEUcdKAB8IEchYJdjmfCl8BfC94c9QoEc8cu8q8c8cNKdE-JvDz4Q_Cr4bPCpQFaBIgGfD0oMvDCHFFt5yL3DcAOMczYCnCHDIwcQAEuZaAL6A5kvZYqto0ZzQK3A5gN-YFAPIB5AEAA`} __position={0} __code={'<BarChart width=\\\"600\\\" height=\\\"220\\\" />\\n<BarChartEmbed />'} __scope={{props: this ? this.props : props,BarChart,BarChartEmbed}}>\n    <BarChart width=\"600\" height=\"220\"/>\n    <BarChartEmbed />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedcode\":\"barchartEmbed_embedcode__Z83k_\"};"],"sourceRoot":""}